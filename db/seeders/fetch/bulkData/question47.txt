{"body":"How can I change the class of an HTML element in response to an `onclick` or any other events using JavaScript?\r\n\r\n","title":"How can I change an element&#39;s class with JavaScript?","answers":[{"score":-24,"body_markdown":"This is easiest with a library like jQuery:\r\n\r\n    &lt;input type=&quot;button&quot; onClick=&quot;javascript:test_byid();&quot; value=&quot;id=&#39;second&#39;&quot; /&gt;\r\n    \r\n    &lt;script&gt;\r\n    function test_byid()\r\n    {\r\n    \t$(&quot;#second&quot;).toggleClass(&quot;highlight&quot;);\r\n    }\r\n    &lt;/script&gt;"},{"score":-61,"body_markdown":"No offense, but it&#39;s unclever to change class on-the-fly as it forces the CSS interpreter to recalculate the visual presentation of the entire web page.\r\n\r\nThe reason is that it is nearly impossible for the CSS interpreter to know if any inheritance or cascading could be changed, so the short answer is:\r\n\r\nNever ever change className on-the-fly !-)\r\n\r\nBut usually you&#39;ll only need to change a property or two, and that is easily implemented:\r\n\r\n    function highlight(elm){\r\n        elm.style.backgroundColor =&quot;#345&quot;;\r\n        elm.style.color = &quot;#fff&quot;;\r\n    }\r\n"},{"score":80,"body_markdown":"You can use `node.className` like so:\r\n\r\n    document.getElementById(&#39;foo&#39;).className = &#39;bar&#39;;\r\n\r\nThis should work in IE5.5 and up according to [PPK](http://quirksmode.org/dom/w3c_html.html)."},{"score":4015,"body_markdown":"## Modern HTML5 Techniques for changing classes\r\n\r\nModern browsers have added [**classList**](https://developer.mozilla.org/en-US/docs/DOM/element.classList) which provides methods to make it easier to manipulate classes without needing a library:\r\n\r\n    document.getElementById(&quot;MyElement&quot;).classList.add(&#39;MyClass&#39;);\r\n\r\n    document.getElementById(&quot;MyElement&quot;).classList.remove(&#39;MyClass&#39;);\r\n\r\n    if ( document.getElementById(&quot;MyElement&quot;).classList.contains(&#39;MyClass&#39;) )\r\n\r\n    document.getElementById(&quot;MyElement&quot;).classList.toggle(&#39;MyClass&#39;);\r\n\r\nUnfortunately, these do not work in Internet Explorer prior to v10, though there is a [shim](http://en.wikipedia.org/wiki/Shim_(computing)) to add support for it to IE8 and IE9, available from [this page](https://developer.mozilla.org/en-US/docs/DOM/element.classList). It is, though, getting more and more [supported][1].\r\n\r\n## Simple cross-browser solution\r\n\r\nThe standard JavaScript way to select an element is using [`document.getElementById(&quot;Id&quot;)`](https://developer.mozilla.org/en-US/docs/DOM/document.getElementById), which is what the following examples use - you can of course obtain elements in other ways, and in the right situation may simply use `this` instead - however, going into detail on this is beyond the scope of the answer.\r\n\r\n### To change all classes for an element:\r\n\r\nTo replace all existing classes with one or more new classes, set the className attribute:\r\n\r\n    document.getElementById(&quot;MyElement&quot;).className = &quot;MyClass&quot;;\r\n\r\n(You can use a space-delimited list to apply multiple classes.)\r\n\r\n### To add an additional class to an element:\r\n\r\nTo add a class to an element, without removing/affecting existing values, append a space and the new classname, like so:\r\n\r\n    document.getElementById(&quot;MyElement&quot;).className += &quot; MyClass&quot;;\r\n\r\n### To remove a class from an element:\r\n\r\nTo remove a single class to an element, without affecting other potential classes, a simple regex replace is required:\r\n\r\n    document.getElementById(&quot;MyElement&quot;).className =\r\n       document.getElementById(&quot;MyElement&quot;).className.replace\r\n          ( /(?:^|\\s)MyClass(?!\\S)/g , &#39;&#39; )\r\n    /* Code wrapped for readability - above is all one statement */\r\n\r\nAn explanation of this regex is as follows:\r\n\r\n    (?:^|\\s) # Match the start of the string, or any single whitespace character\r\n\r\n    MyClass  # The literal text for the classname to remove\r\n\r\n    (?!\\S)   # Negative lookahead to verify the above is the whole classname\r\n             # Ensures there is no non-space character following\r\n             # (i.e. must be end of string or a space)\r\n\r\nThe `g` flag tells the replace to repeat as required, in case the class name has been added multiple times.\r\n\r\n### To check if a class is already applied to an element:\r\n\r\nThe same regex used above for removing a class can also be used as a check as to whether a particular class exists:\r\n\r\n    if ( document.getElementById(&quot;MyElement&quot;).className.match(/(?:^|\\s)MyClass(?!\\S)/) )\r\n\r\n&lt;br/&gt;\r\n### Assigning these actions to onclick events:\r\n\r\nWhilst it is possible to write JavaScript directly inside the HTML event attributes (such as `onclick=&quot;this.className+=&#39; MyClass&#39;&quot;`) this is not recommended behaviour. Especially on larger applications, more maintainable code is achieved by separating HTML markup from JavaScript interaction logic.\r\n\r\nThe first step to achieving this is by creating a function, and calling the function in the onclick attribute, for example:\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n        function changeClass(){\r\n            // Code examples from above\r\n        }\r\n    &lt;/script&gt;\r\n    ...\r\n    &lt;button onclick=&quot;changeClass()&quot;&gt;My Button&lt;/button&gt;\r\n\r\n&lt;sub&gt;_(It is not required to have this code in script tags, this is simply for brevity of example, and including the JavaScript in a distinct file may be more appropriate.)_&lt;/sub&gt;\r\n\r\nThe second step is to move the onclick event out of the HTML and into JavaScript, for example using [addEventListener](https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener)\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n        function changeClass(){\r\n            // Code examples from above\r\n        }\r\n\r\n        window.onload = function(){\r\n            document.getElementById(&quot;MyElement&quot;).addEventListener( &#39;click&#39;, changeClass);\r\n        }\r\n    &lt;/script&gt;\r\n    ...\r\n    &lt;button id=&quot;MyElement&quot;&gt;My Button&lt;/button&gt;\r\n\r\n(Note that the window.onload part is required so that the contents of that function are executed _after_ the HTML has finished loading - without this, the MyElement might not exist when the JavaScript code is called, so that line would fail.)\r\n\r\n&lt;br/&gt;\r\n\r\n## JavaScript Frameworks and Libraries\r\n\r\nThe above code is all in standard JavaScript, however it is common practise to use either a framework or a library to simplify common tasks, as well as benefit from fixed bugs and edge cases that you might not think of when writing your code.\r\n\r\nWhilst some people consider it overkill to add a ~50&amp;nbsp;KB framework for simply changing a class, if you are doing any substantial amount of JavaScript work, or anything that might have unusual cross-browser behaviour, it is well worth considering.\r\n\r\n_(Very roughly, a library is a set of tools designed for a specific task, whilst a framework generally contains multiple libraries and performs a complete set of duties.)_\r\n\r\nThe examples above have been reproduced below using [jQuery](http://jquery.com), probably the most commonly used JavaScript library (though there are others worth investigating too).\r\n\r\n(Note that `$` here is the jQuery object.)\r\n\r\n### Changing Classes with jQuery:\r\n\r\n    $(&#39;#MyElement&#39;).addClass(&#39;MyClass&#39;);\r\n\r\n    $(&#39;#MyElement&#39;).removeClass(&#39;MyClass&#39;);\r\n\r\n    if ( $(&#39;#MyElement&#39;).hasClass(&#39;MyClass&#39;) )\r\n\r\nIn addition, jQuery provides a shortcut for adding a class if it doesn&#39;t apply, or removing a class that does:\r\n\r\n    $(&#39;#MyElement&#39;).toggleClass(&#39;MyClass&#39;);\r\n\r\n&lt;br/&gt;\r\n### Assigning a function to a click event with jQuery:\r\n\r\n    $(&#39;#MyElement&#39;).click(changeClass);\r\n\r\nor, without needing an id:\r\n\r\n    $(&#39;:button:contains(My Button)&#39;).click(changeClass);\r\n\r\n&lt;br/&gt;\r\n\r\n\r\n  [1]: http://caniuse.com/#feat=classlist"},{"score":12,"body_markdown":"The line\r\n\r\n    document.getElementById(&quot;MyElement&quot;).className = document.getElementById(&quot;MyElement&quot;).className.replace(/\\bMyClass\\b/&#39;,&#39;&#39;)\r\n\r\nshould be:\r\n\r\n    document.getElementById(&quot;MyElement&quot;).className = document.getElementById(&quot;MyElement&quot;).className.replace(&#39;/\\bMyClass\\b/&#39;,&#39;&#39;);\r\n"},{"score":15,"body_markdown":"Change an element&#39;s CSS class with JavaScript in [ASP.NET][1]:\r\n\r\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\r\n        If Not Page.IsPostBack Then\r\n            lbSave.Attributes.Add(&quot;onmouseover&quot;, &quot;this.className = &#39;LinkButtonStyle1&#39;&quot;)\r\n            lbSave.Attributes.Add(&quot;onmouseout&quot;, &quot;this.className = &#39;LinkButtonStyle&#39;&quot;)\r\n            lbCancel.Attributes.Add(&quot;onmouseover&quot;, &quot;this.className = &#39;LinkButtonStyle1&#39;&quot;)\r\n            lbCancel.Attributes.Add(&quot;onmouseout&quot;, &quot;this.className = &#39;LinkButtonStyle&#39;&quot;)\r\n        End If\r\n    End Sub\r\n\r\n  [1]: http://en.wikipedia.org/wiki/ASP.NET\r\n"},{"score":123,"body_markdown":"In one of my old projects that did not use jQuery, I built the following functions for adding, removing and checking if element has class:\r\n\r\n    function hasClass(ele, cls) {\r\n        return ele.className.match(new RegExp(&#39;(\\\\s|^)&#39; + cls + &#39;(\\\\s|$)&#39;));\r\n    }\r\n    function addClass(ele, cls) {\r\n        if (!hasClass(ele, cls)) ele.className += &quot; &quot; + cls;\r\n    }\r\n    function removeClass(ele, cls) {\r\n        if (hasClass(ele, cls)) {\r\n            var reg = new RegExp(&#39;(\\\\s|^)&#39; + cls + &#39;(\\\\s|$)&#39;);\r\n            ele.className = ele.className.replace(reg, &#39; &#39;);\r\n        }\r\n    }\r\n\r\nSo, for example, if I want `onclick` to add some class to the button I can use this:\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n        function changeClass(btn, cls) {\r\n            if(!hasClass(btn, cls)) {\r\n                addClass(btn, cls);\r\n            }\r\n        }\r\n    &lt;/script&gt;\r\n    ...\r\n    &lt;button onclick=&quot;changeClass(this, &quot;someClass&quot;)&quot;&gt;My Button&lt;/button&gt;\r\n\r\nBy now for sure it would just be better to use jQuery.\r\n"},{"score":432,"body_markdown":"You could also just do:\r\n\r\n```javascript\r\ndocument.getElementById(&#39;id&#39;).classList.add(&#39;class&#39;);\r\ndocument.getElementById(&#39;id&#39;).classList.remove(&#39;class&#39;);\r\n```\r\n\r\nAnd to toggle a class (remove if exists else add it):\r\n\r\n```javascript\r\ndocument.getElementById(&#39;id&#39;).classList.toggle(&#39;class&#39;);\r\n```"},{"score":49,"body_markdown":"Using pure JavaScript code:\r\n\r\n    function hasClass(ele, cls) {\r\n        return ele.className.match(new RegExp(&#39;(\\\\s|^)&#39; + cls + &#39;(\\\\s|$)&#39;));\r\n    }\r\n\r\n    function addClass(ele, cls) {\r\n        if (!this.hasClass(ele, cls)) ele.className += &quot; &quot; + cls;\r\n    }\r\n\r\n    function removeClass(ele, cls) {\r\n        if (hasClass(ele, cls)) {\r\n            var reg = new RegExp(&#39;(\\\\s|^)&#39; + cls + &#39;(\\\\s|$)&#39;);\r\n            ele.className = ele.className.replace(reg, &#39; &#39;);\r\n        }\r\n    }\r\n\r\n    function replaceClass(ele, oldClass, newClass){\r\n        if(hasClass(ele, oldClass)){\r\n            removeClass(ele, oldClass);\r\n            addClass(ele, newClass);\r\n        }\r\n        return;\r\n    }\r\n\r\n    function toggleClass(ele, cls1, cls2){\r\n        if(hasClass(ele, cls1)){\r\n            replaceClass(ele, cls1, cls2);\r\n        }else if(hasClass(ele, cls2)){\r\n            replaceClass(ele, cls2, cls1);\r\n        }else{\r\n            addClass(ele, cls1);\r\n        }\r\n    }\r\n"},{"score":19,"body_markdown":"Just to add on information from another popular framework, Google Closures, see their [dom/classes][1] class:\r\n\r\n    goog.dom.classes.add(element, var_args)\r\n\r\n    goog.dom.classes.addRemove(element, classesToRemove, classesToAdd)\r\n\r\n    goog.dom.classes.remove(element, var_args)\r\n\r\nOne option for selecting the element is using [goog.dom.query][2] with a CSS3 selector:\r\n\r\n    var myElement = goog.dom.query(&quot;#MyElement&quot;)[0];\r\n\r\n\r\n  [1]: http://closure-library.googlecode.com/svn/docs/closure_goog_dom_classes.js.html\r\n  [2]: http://closure-library.googlecode.com/svn/docs/closure_third_party_closure_goog_dojo_dom_query.js.html"},{"score":35,"body_markdown":"This is working for me:\r\n\r\n    function setCSS(eleID) {\r\n        var currTabElem = document.getElementById(eleID);\r\n\r\n        currTabElem.setAttribute(&quot;class&quot;, &quot;some_class_name&quot;);\r\n        currTabElem.setAttribute(&quot;className&quot;, &quot;some_class_name&quot;);\r\n    }\r\n\r\n"},{"score":53,"body_markdown":"Wow, surprised there are so many overkill answers here...\r\n\r\n    &lt;div class=&quot;firstClass&quot; onclick=&quot;this.className=&#39;secondClass&#39;&quot;&gt;"},{"score":16,"body_markdown":"A couple of minor notes and tweaks on the previous regexes:\r\n\r\nYou&#39;ll want to do it globally in case the class list has the class name more than once. And, you&#39;ll probably want to strip spaces from the ends of the class list and convert multiple spaces to one space to keep from getting runs of spaces. None of these things should be a problem if the only code dinking with the class names uses the regex below and removes a name before adding it. But. Well, who knows who might be dinking with the class name list.\r\n\r\nThis regex is case insensitive so that bugs in class names may show up before the code is used on a browser that doesn&#39;t care about case in class names.\r\n\r\n    var s = &quot;testing   one   four  one  two&quot;;\r\n    var cls = &quot;one&quot;;\r\n    var rg          = new RegExp(&quot;(^|\\\\s+)&quot; + cls + &quot;(\\\\s+|$)&quot;, &#39;ig&#39;);\r\n    alert(&quot;[&quot; + s.replace(rg, &#39; &#39;) + &quot;]&quot;);\r\n    var cls = &quot;test&quot;;\r\n    var rg          = new RegExp(&quot;(^|\\\\s+)&quot; + cls + &quot;(\\\\s+|$)&quot;, &#39;ig&#39;);\r\n    alert(&quot;[&quot; + s.replace(rg, &#39; &#39;) + &quot;]&quot;);\r\n    var cls = &quot;testing&quot;;\r\n    var rg          = new RegExp(&quot;(^|\\\\s+)&quot; + cls + &quot;(\\\\s+|$)&quot;, &#39;ig&#39;);\r\n    alert(&quot;[&quot; + s.replace(rg, &#39; &#39;) + &quot;]&quot;);\r\n    var cls = &quot;tWo&quot;;\r\n    var rg          = new RegExp(&quot;(^|\\\\s+)&quot; + cls + &quot;(\\\\s+|$)&quot;, &#39;ig&#39;);\r\n    alert(&quot;[&quot; + s.replace(rg, &#39; &#39;) + &quot;]&quot;);\r\n"},{"score":14,"body_markdown":"I would use jQuery and write something like this:\r\n\r\n    jQuery(function($) {\r\n        $(&quot;#some-element&quot;).click(function() {\r\n            $(this).toggleClass(&quot;clicked&quot;);\r\n        });\r\n    });\r\n\r\nThis code adds a function to be called when an element of the id **some-element** is clicked. The function appends **clicked** to the element&#39;s class attribute if it&#39;s not already part of it, and removes it if it&#39;s there.\r\n\r\nYes you do need to add a reference to the jQuery library in your page to use this code, but at least you can feel confident the most functions in the library would work on pretty much all the modern browsers, and it will save you time implementing your own code to do the same.\r\n\r\nThanks"},{"score":9,"body_markdown":"Here&#39;s my version, fully working:\r\n\r\n    function addHTMLClass(item, classname) {\r\n        var obj = item\r\n        if (typeof item==&quot;string&quot;) {\r\n            obj = document.getElementById(item)\r\n        }\r\n        obj.className += &quot; &quot; + classname\r\n    }\r\n\r\n    function removeHTMLClass(item, classname) {\r\n        var obj = item\r\n        if (typeof item==&quot;string&quot;) {\r\n            obj = document.getElementById(item)\r\n        }\r\n        var classes = &quot;&quot;+obj.className\r\n        while (classes.indexOf(classname)&gt;-1) {\r\n            classes = classes.replace (classname, &quot;&quot;)\r\n        }\r\n        obj.className = classes\r\n    }\r\n\r\nUsage:\r\n\r\n    &lt;tr onmouseover=&#39;addHTMLClass(this,&quot;clsSelected&quot;)&#39;\r\n    onmouseout=&#39;removeHTMLClass(this,&quot;clsSelected&quot;)&#39; &gt;\r\n"},{"score":23,"body_markdown":"As well you could extend HTMLElement object, in order to add methods to add, remove, toggle and check classes ([gist][1]):\r\n\r\n    HTMLElement = typeof(HTMLElement) != &#39;undefiend&#39; ? HTMLElement : Element;\r\n     \r\n    HTMLElement.prototype.addClass = function(string) {\r\n      if (!(string instanceof Array)) {\r\n        string = string.split(&#39; &#39;);\r\n      }\r\n      for(var i = 0, len = string.length; i &lt; len; ++i) {\r\n        if (string[i] &amp;&amp; !new RegExp(&#39;(\\\\s+|^)&#39; + string[i] + &#39;(\\\\s+|$)&#39;).test(this.className)) {\r\n          this.className = this.className.trim() + &#39; &#39; + string[i];\r\n        }\r\n      }\r\n    }\r\n     \r\n    HTMLElement.prototype.removeClass = function(string) {\r\n      if (!(string instanceof Array)) {\r\n        string = string.split(&#39; &#39;);\r\n      }\r\n      for(var i = 0, len = string.length; i &lt; len; ++i) {\r\n        this.className = this.className.replace(new RegExp(&#39;(\\\\s+|^)&#39; + string[i] + &#39;(\\\\s+|$)&#39;), &#39; &#39;).trim();\r\n      }\r\n    }\r\n     \r\n    HTMLElement.prototype.toggleClass = function(string) {\r\n      if (string) {\r\n        if (new RegExp(&#39;(\\\\s+|^)&#39; + string + &#39;(\\\\s+|$)&#39;).test(this.className)) {\r\n          this.className = this.className.replace(new RegExp(&#39;(\\\\s+|^)&#39; + string + &#39;(\\\\s+|$)&#39;), &#39; &#39;).trim();\r\n        } else {\r\n          this.className = this.className.trim() + &#39; &#39; + string;\r\n        }\r\n      }\r\n    }\r\n     \r\n    HTMLElement.prototype.hasClass = function(string) {\r\n      return string &amp;&amp; new RegExp(&#39;(\\\\s+|^)&#39; + string + &#39;(\\\\s+|$)&#39;).test(this.className);\r\n    }\r\n\r\nAnd then just use like this (on click will add or remove class):\r\n\r\n    document.getElementById(&#39;yourElementId&#39;).onclick = function() {\r\n      this.toggleClass(&#39;active&#39;);\r\n    }\r\n\r\nHere is [demo][2].\r\n\r\n\r\n  [1]: https://gist.github.com/Maksims/5356227\r\n  [2]: http://jsfiddle.net/5QMgR/"},{"score":7,"body_markdown":"I use the following vanilla JavaScript functions in my code. They use regular expressions and `indexOf` but do not require quoting special characters in regular expressions.\r\n\r\n    function addClass(el, cn) {\r\n        var c0 = (&quot; &quot; + el.className + &quot; &quot;).replace(/\\s+/g, &quot; &quot;),\r\n            c1 = (&quot; &quot; + cn + &quot; &quot;).replace(/\\s+/g, &quot; &quot;);\r\n        if (c0.indexOf(c1) &lt; 0) {\r\n            el.className = (c0 + c1).replace(/\\s+/g, &quot; &quot;).replace(/^ | $/g, &quot;&quot;);\r\n        }\r\n    }\r\n\r\n    function delClass(el, cn) {\r\n        var c0 = (&quot; &quot; + el.className + &quot; &quot;).replace(/\\s+/g, &quot; &quot;),\r\n            c1 = (&quot; &quot; + cn + &quot; &quot;).replace(/\\s+/g, &quot; &quot;);\r\n        if (c0.indexOf(c1) &gt;= 0) {\r\n            el.className = c0.replace(c1, &quot; &quot;).replace(/\\s+/g, &quot; &quot;).replace(/^ | $/g, &quot;&quot;);\r\n        }\r\n    }\r\n\r\nYou can also use [element.classList][1] in modern browsers.\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/API/Element.classList"},{"score":-3,"body_markdown":"Here is simple jQuery code to do that.\r\n\r\n    $(&quot;.class1&quot;).click(function(argument) {\r\n        $(&quot;.parentclass&quot;).removeClass(&quot;classtoremove&quot;);\r\n        setTimeout(function (argument) {\r\n            $(&quot;.parentclass&quot;).addClass(&quot;classtoadd&quot;);\r\n        }, 100);\r\n    });\r\n\r\nHere,\r\n\r\n * Class1 is a listener for an event.\r\n * The parent class is the class which hosts the class you want to change\r\n * Classtoremove is the old class you have.\r\n * Class to add is the new class that you want to add.\r\n * 100 is the timeout delay during which the class is changed.\r\n\r\nGood Luck.\r\n"},{"score":2,"body_markdown":"Just thought I&#39;d throw this in:\r\n\r\n    function inArray(val, ary){\r\n      for(var i=0,l=ary.length; i&lt;l; i++){\r\n        if(ary[i] === val){\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n    function removeClassName(classNameS, fromElement){\r\n      var x = classNameS.split(/\\s/), s = fromElement.className.split(/\\s/), r = [];\r\n      for(var i=0,l=s.length; i&lt;l; i++){\r\n        if(!iA(s[i], x))r.push(s[i]);\r\n      }\r\n      fromElement.className = r.join(&#39; &#39;);\r\n    }\r\n    function addClassName(classNameS, toElement){\r\n      var s = toElement.className.split(/\\s/);\r\n      s.push(c); toElement.className = s.join(&#39; &#39;);\r\n    }"},{"score":9,"body_markdown":"Here&#39;s a toggleClass to toggle/add/remove a class on an element:\r\n\r\n    // If newState is provided add/remove theClass accordingly, otherwise toggle theClass\r\n    function toggleClass(elem, theClass, newState) {\r\n        var matchRegExp = new RegExp(&#39;(?:^|\\\\s)&#39; + theClass + &#39;(?!\\\\S)&#39;, &#39;g&#39;);\r\n        var add=(arguments.length&gt;2 ? newState : (elem.className.match(matchRegExp) == null));\r\n    \r\n        elem.className=elem.className.replace(matchRegExp, &#39;&#39;); // clear all\r\n        if (add) elem.className += &#39; &#39; + theClass;\r\n    }\r\n\r\nsee [jsfiddle][1]\r\n\r\nalso see my answer [here][2] for creating a new class dynamically\r\n\r\n\r\n  [1]: https://jsfiddle.net/dLuhp9se/\r\n  [2]: https://stackoverflow.com/a/42941303/460084"},{"score":11,"body_markdown":"#Change an element&#39;s class in vanilla JavaScript with IE6 support\r\n\r\nYou may try to use node `attributes` property to keep compatibility with old browsers even IE6:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function getClassNode(element) {\r\n      for (var i = element.attributes.length; i--;)\r\n        if (element.attributes[i].nodeName === &#39;class&#39;)\r\n          return element.attributes[i];\r\n    }\r\n\r\n    function removeClass(classNode, className) {\r\n      var index, classList = classNode.value.split(&#39; &#39;);\r\n      if ((index = classList.indexOf(className)) &gt; -1) {\r\n        classList.splice(index, 1);\r\n        classNode.value = classList.join(&#39; &#39;);\r\n      }\r\n    }\r\n\r\n    function hasClass(classNode, className) {\r\n      return classNode.value.indexOf(className) &gt; -1;\r\n    }\r\n\r\n    function addClass(classNode, className) {\r\n      if (!hasClass(classNode, className))\r\n        classNode.value += &#39; &#39; + className;\r\n    }\r\n\r\n    document.getElementById(&#39;message&#39;).addEventListener(&#39;click&#39;, function() {\r\n      var classNode = getClassNode(this);\r\n      var className = hasClass(classNode, &#39;red&#39;) &amp;&amp; &#39;blue&#39; || &#39;red&#39;;\r\n\r\n      removeClass(classNode, &#39;red&#39;);\r\n      removeClass(classNode, &#39;blue&#39;);\r\n\r\n      addClass(classNode, className);\r\n    })\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .red {\r\n      color: red;\r\n    }\r\n    .red:before {\r\n      content: &#39;I am red! &#39;;\r\n    }\r\n    .red:after {\r\n      content: &#39; again&#39;;\r\n    }\r\n    .blue {\r\n      color: blue;\r\n    }\r\n    .blue:before {\r\n      content: &#39;I am blue! &#39;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;span id=&quot;message&quot; class=&quot;&quot;&gt;Click me&lt;/span&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":-1,"body_markdown":"Working JavaScript code:\r\n\r\n    &lt;div id=&quot;div_add&quot; class=&quot;div_add&quot;&gt;Add class from Javascript&lt;/div&gt;\r\n    &lt;div id=&quot;div_replace&quot; class=&quot;div_replace&quot;&gt;Replace class from Javascript&lt;/div&gt;\r\n    &lt;div id=&quot;div_remove&quot; class=&quot;div_remove&quot;&gt;Remove class from Javascript&lt;/div&gt;\r\n    &lt;button onClick=&quot;div_add_class();&quot;&gt;Add class from Javascript&lt;/button&gt;\r\n    &lt;button onClick=&quot;div_replace_class();&quot;&gt;Replace class from Javascript&lt;/button&gt;\r\n    &lt;button onClick=&quot;div_remove_class();&quot;&gt;Remove class from Javascript&lt;/button&gt;\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n        function div_add_class()\r\n        {\r\n            document.getElementById(&quot;div_add&quot;).className += &quot; div_added&quot;;\r\n        }\r\n        function div_replace_class()\r\n        {\r\n            document.getElementById(&quot;div_replace&quot;).className = &quot;div_replaced&quot;;\r\n        }\r\n        function div_remove_class()\r\n        {\r\n            document.getElementById(&quot;div_remove&quot;).className = &quot;&quot;;\r\n        }\r\n    &lt;/script&gt;\r\n\r\nYou can download a working code from [this link][1].\r\n\r\n  [1]: http://ownanswers.com/question/add-remove-and-replace-class-in-javascript/\r\n"},{"score":2,"body_markdown":"just say `myElement.classList=&quot;new-class&quot;` unless you need to maintain other existing classes in which case you can use the `classList.add, .remove` methods.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var doc = document;\r\n    var divOne = doc.getElementById(&quot;one&quot;);\r\n    var goButton = doc.getElementById(&quot;go&quot;);\r\n\r\n    goButton.addEventListener(&quot;click&quot;, function() {\r\n      divOne.classList=&quot;blue&quot;;\r\n    });\r\n\r\n\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    div{\r\n      min-height:48px;\r\n      min-width:48px;\r\n    }\r\n    .bordered{\r\n      border: 1px solid black;\r\n    }\r\n    .green{\r\n      background:green;\r\n    }\r\n    .blue{\r\n      background: blue;\r\n    }\r\n\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;button id=&quot;go&quot;&gt;Change Class&lt;/button&gt;\r\n\r\n    &lt;div id=&quot;one&quot; class=&quot;bordered green&quot;&gt;\r\n\r\n    &lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":2,"body_markdown":"OK, I think in this case you should use jQuery or write your own Methods in pure javascript, my preference is adding my own methods rather than injecting all jQuery to my application if I don&#39;t need that for other reasons.\r\n\r\nI&#39;d like to do something like below as methods to my javascript framework to add few functionalities which handle adding classes, deleting classes, etc similar to jQuery, this is fully supported in IE9+, also my code is written in ES6, so you need to make sure your browser support it or you using something like babel, otherwise need to use ES5 syntax in your code, also in this way, we finding element via ID, which means the element needs to have an ID to be selected:\r\n\r\n    //simple javascript utils for class management in ES6\r\n    var classUtil = {\r\n\r\n      addClass: (id, cl) =&gt; {\r\n        document.getElementById(id).classList.add(cl);\r\n      },\r\n    \r\n      removeClass: (id, cl) =&gt; {\r\n        document.getElementById(id).classList.remove(cl);\r\n      },\r\n    \r\n      hasClass: (id, cl) =&gt; {\r\n        return document.getElementById(id).classList.contains(cl);\r\n      },\r\n\r\n      toggleClass: (id, cl) =&gt; {\r\n        document.getElementById(id).classList.toggle(cl);\r\n      }\r\n\r\n    }\r\n\r\nand you can simply call use them as below, imagine your element has id of &#39;id&#39; and class of &#39;class&#39;, make sure you pass them as a string, you can use the util as below:\r\n\r\n    classUtil.addClass(&#39;myId&#39;, &#39;myClass&#39;);\r\n    classUtil.removeClass(&#39;myId&#39;, &#39;myClass&#39;);\r\n    classUtil.hasClass(&#39;myId&#39;, &#39;myClass&#39;);\r\n    classUtil.toggleClass(&#39;myId&#39;, &#39;myClass&#39;);\r\n"},{"score":2,"body_markdown":"`classList` DOM API:\r\n-------------------------\r\n\r\nA very convenient manner of adding and removing classes is the `classList` DOM API. This API allows us to select all classes of a specific DOM element in order to modify the list using javascript. For example:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const el = document.getElementById(&quot;main&quot;);\r\n    console.log(el.classList);\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;div class=&quot;content wrapper animated&quot; id=&quot;main&quot;&gt;&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nWe can observe in the log that we are getting back an object with not only the classes of the element, but also many auxiliary methods and properties. This object inherits from the interface **DOMTokenList**, an interface which is used in the DOM to represent a set of space separated tokens (like classes).\r\n\r\nExample:\r\n-----------\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const el = document.getElementById(&#39;container&#39;);\r\n\r\n\r\n    function addClass () {\r\n       el.classList.add(&#39;newclass&#39;);\r\n    }\r\n\r\n\r\n    function replaceClass () {\r\n         el.classList.replace(&#39;foo&#39;, &#39;newFoo&#39;);\r\n    }\r\n\r\n\r\n    function removeClass () {\r\n           el.classList.remove(&#39;bar&#39;);\r\n    }\r\n\r\n\r\n\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    button{\r\n      margin: 20px;\r\n    }\r\n\r\n    .foo{\r\n      color: red;\r\n    }\r\n\r\n    .newFoo {\r\n      color: blue;\r\n    }\r\n\r\n    .bar{\r\n      background-color:powderblue;\r\n    }\r\n\r\n    .newclass{\r\n      border: 2px solid green;\r\n    }\r\n\r\n\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;div class=&quot;foo bar&quot; id=&quot;container&quot;&gt;\r\n      &quot;Sed ut perspiciatis unde omnis \r\n      iste natus error sit voluptatem accusantium doloremque laudantium, \r\n      totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et \r\n      quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam \r\n      voluptatem quia voluptas \r\n     &lt;/div&gt;\r\n      \r\n    &lt;button onclick=&quot;addClass()&quot;&gt;AddClass&lt;/button&gt;\r\n      \r\n    &lt;button onclick=&quot;replaceClass()&quot;&gt;ReplaceClass&lt;/button&gt;\r\n      \r\n    &lt;button onclick=&quot;removeClass()&quot;&gt;removeClass&lt;/button&gt;\r\n      \r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":2,"body_markdown":"Yes there is many ways to do this. In ES6 syntax we can achieve easily. \r\nUse this code toggle add and remove class.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const tabs=document.querySelectorAll(&#39;.menu li&#39;);\r\n\r\n    for(let tab of tabs){\r\n      \r\n      tab.onclick=function(){\r\n        \r\n      let activetab=document.querySelectorAll(&#39;li.active&#39;);\r\n        \r\n      activetab[0].classList.remove(&#39;active&#39;)\r\n      \r\n        tab.classList.add(&#39;active&#39;); \r\n      }\r\n      \r\n    }\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    body {\r\n        padding:20px;\r\n        font-family:sans-serif;    \r\n    }\r\n\r\n    ul {\r\n        margin:20px 0;\r\n        list-style:none;\r\n    }\r\n\r\n    li {\r\n        background:#dfdfdf;\r\n        padding:10px;\r\n        margin:6px 0;\r\n        cursor:pointer;\r\n    }\r\n\r\n    li.active {\r\n        background:#2794c7;\r\n        font-weight:bold;\r\n        color:#ffffff;\r\n    }\r\n\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;i&gt;Please click an item:&lt;/i&gt;\r\n\r\n    &lt;ul class=&quot;menu&quot;&gt;\r\n      &lt;li class=&quot;active&quot;&gt;&lt;span&gt;Three&lt;/span&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;span&gt;Two&lt;/span&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;span&gt;One&lt;/span&gt;&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n "},{"score":2,"body_markdown":"Lots of answers, lots of good answers.\r\n\r\n&gt; **TL;DR :**\r\n\r\n    document.getElementById(&#39;id&#39;).className = &#39;class&#39;\r\n*OR*\r\n\r\n    document.getElementById(&#39;id&#39;).classList.add(&#39;class&#39;);\r\n    document.getElementById(&#39;id&#39;).classList.remove(&#39;class&#39;);\r\n\r\n***That&#39;s it.***\r\n\r\nAnd, if you really want to know the why and educate yourself then I suggest reading [Peter Boughton&#39;s answer][1], it&#39;s perfect.\r\n\r\n**Note:**&lt;br/&gt;\r\nThis is possible with (*[document][2]* or *[event][3]*):\r\n\r\n\r\n - `getElementById()`\r\n - `getElementsByClassName()`\r\n - `querySelector()`\r\n - `querySelectorAll()`\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/196038/1804013\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/API/Document\r\n  [3]: https://developer.mozilla.org/en-US/docs/Web/API/Event/target"},{"score":2,"body_markdown":"try\r\n\r\n    element.className=&#39;second&#39;\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function change(box) { box.className=&#39;second&#39; }\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .first  { width:  70px; height:  70px; background: #ff0                 }\r\n    .second { width: 150px; height: 150px; background: #f00; transition: 1s }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;div onclick=&quot;change(this)&quot; class=&quot;first&quot;&gt;Click me&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":4,"body_markdown":"----------\n# THE OPTIONS.\n\nHere is a little style vs. classList examples to get you to see what are the options you have available and how to use `classList` to do what you want.\n\n# [`style`][1] vs. [`classList`][2]\nThe difference between `style` and `classList` is that with `style` you&#39;re adding to the style properties of the element, but `classList` is kinda controlling the class(es) of the element (`add`, `remove`, `toggle`, `contain`), I will show you how to use the `add` and `remove` method since those are the popular ones. \n\n\n----------\n\n\n## Style Example\nIf you want to add `margin-top ` property into an element, you would do in such: \n\n```\n// Get the Element\nconst el = document.querySelector(&#39;#element&#39;);\n\n// Add CSS property \nel.style.margintop = &quot;0px&quot;\nel.style.margintop = &quot;25px&quot; // This would add a 25px to the top of the element.\n``` \n----------\n\n## classList Example\nLet say we have a `&lt;div class=&quot;class-a class-b&quot;&gt;`, in this case, we have 2 classes added to our div element already, `class-a` and `class-b`, and we want to control what classes **`remove`** and what class to **`add`**. This is where `classList` becomes handy. \n\n### Remove `class-b`\n```\n// Get the Element\nconst el = document.querySelector(&#39;#element&#39;);\n\n// Remove class-b style from the element\nel.classList.remove(&quot;class-b&quot;)\n\n```\n\n### Add `class-c`\n```\n// Get the Element\nconst el = document.querySelector(&#39;#element&#39;);\n\n// Add class-b style from the element\nel.classList.add(&quot;class-c&quot;)\n\n```\n----------\n\n\n  [1]: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style\n  [2]: https://developer.mozilla.org/en-US/docs/Web/API/Element/classList"},{"score":2,"body_markdown":"    function classed(el, class_name, add_class) {\r\n      const re = new RegExp(&quot;(?:^|\\\\s)&quot; + class_name + &quot;(?!\\\\S)&quot;, &quot;g&quot;);\r\n      if (add_class &amp;&amp; !el.className.match(re)) el.className += &quot; &quot; + class_name\r\n      else if (!add_class) el.className = el.className.replace(re, &#39;&#39;);\r\n    }\r\nusing the accepted answer above here is a simple cross-browser function to add and remove class\r\n\r\nadd class:\r\n\r\n    classed(document.getElementById(&quot;denis&quot;), &quot;active&quot;, true)\r\n\r\nremove class:\r\n\r\n    classed(document.getElementById(&quot;denis&quot;), &quot;active&quot;, false)"},{"score":2,"body_markdown":"There is a property **className** in javascript to change the name of the class of an HTML element. The existing class value will be replaced with the new one, that you have assigned in className.\r\n\r\n    &lt;!DOCTYPE html&gt;\r\n    &lt;html&gt;\r\n    &lt;head&gt;\r\n\t&lt;title&gt;How to change class of an HTML element in Javascript?&lt;/title&gt;\r\n\t&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&quot;&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n    &lt;h1 align=&quot;center&quot;&gt;&lt;i class=&quot;fa fa-home&quot; id=&quot;icon&quot;&gt;&lt;/i&gt;&lt;/h1&gt;&lt;br /&gt;\r\n\r\n    &lt;center&gt;&lt;button id=&quot;change-class&quot;&gt;Change Class&lt;/button&gt;&lt;/center&gt;\r\n\r\n    &lt;script&gt;\r\n\tvar change_class=document.getElementById(&quot;change-class&quot;);\r\n\tchange_class.onclick=function()\r\n\t{\r\n\t\tvar icon=document.getElementById(&quot;icon&quot;);\r\n\t\ticon.className=&quot;fa fa-gear&quot;;\r\n\t}\r\n\t\r\n    &lt;/script&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\nCredit - [https://jaischool.com/javascript-lang/how-to-change-class-name-of-an-html-element-in-javascript.html][1]\r\n\r\n\r\n  [1]: https://jaischool.com/javascript-lang/how-to-change-class-name-of-an-html-element-in-javascript.html"},{"score":2,"body_markdown":"The OP question was *How can I change an element&#39;s class with JavaScript?*\r\n\r\nModern browsers allow you to do this **with one line of javascript**:\r\n\r\n`document.getElementById(&#39;id&#39;).classList.replace(&#39;span1&#39;,&#39;span2&#39;)`\r\n\r\n\r\nThe `classList` attribute provides a DOMTokenList which has a [variety of methods][1]. You can operate on an element&#39;s classList using simple manipulations like *add()*, *remove()* or *replace()*. Or get very sophisticated and manipulate classes like you would an object or Map with *keys()*, *values()*, *entries()*\r\n\r\n[Peter Boughton&#39;s answer][2] is a great one but it&#39;s now over a decade old. All modern browsers now support DOMTokenList - see [https://caniuse.com/#search=classList][3] and even IE11 supports some DOMTokenList methods\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList\r\n  [2]: https://stackoverflow.com/questions/195951/how-can-i-change-an-elements-class-with-javascript/196038#196038\r\n  [3]: https://caniuse.com/#search=classList"}],"score":2875}