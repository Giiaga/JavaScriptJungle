{"body":"Is there a plugin-less way of retrieving [query string][1] values via jQuery (or without)? \r\n\r\nIf so, how? If not, is there a plugin which can do so?\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Query_string","title":"How can I get query string values in JavaScript?","answers":[{"score":166,"body_markdown":"If you&#39;re using jQuery, you can use a library, such as [jQuery BBQ: Back Button &amp; Query Library][1].\r\n\r\n&gt; ...jQuery BBQ provides a full `.deparam()` method, along with both hash state management, and fragment / query string parse and merge utility methods.\r\n\r\nEdit: Adding Deparam Example:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n\r\n     var DeparamExample = function() {\r\n                var params = $.deparam.querystring();\r\n\r\n                //nameofparam is the name of a param from url\r\n                //code below will get param if ajax refresh with hash\r\n                if (typeof params.nameofparam == &#39;undefined&#39;) {\r\n                    params = jQuery.deparam.fragment(window.location.href);\r\n                }\r\n                \r\n                if (typeof params.nameofparam != &#39;undefined&#39;) {\r\n                    var paramValue = params.nameofparam.toString();\r\n                      \r\n                }\r\n            };\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIf you want to just use plain JavaScript, you could use...\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var getParamValue = (function() {\r\n        var params;\r\n        var resetParams = function() {\r\n                var query = window.location.search;\r\n                var regex = /[?&amp;;](.+?)=([^&amp;;]+)/g;\r\n                var match;\r\n                \r\n                params = {};\r\n                \r\n                if (query) {\r\n                    while (match = regex.exec(query)) {\r\n                        params[match[1]] = decodeURIComponent(match[2]);\r\n                    }\r\n                }    \r\n            };\r\n        \r\n        window.addEventListener\r\n        &amp;&amp; window.addEventListener(&#39;popstate&#39;, resetParams);\r\n        \r\n        resetParams();\r\n        \r\n        return function(param) {\r\n            return params.hasOwnProperty(param) ? params[param] : null;\r\n        }\r\n        \r\n    })();â€‹\r\n\r\nBecause of the new HTML History API and specifically `history.pushState()` and `history.replaceState()`, the URL can change which will invalidate the cache of parameters and their values.\r\n\r\nThis version will update its internal cache of parameters each time the history changes.\r\n\r\n  [1]: http://benalman.com/projects/jquery-bbq-plugin/"},{"score":8633,"body_markdown":"**Update: Sep-2018**\r\n\r\nYou can use [URLSearchParams][1] which is simple and has [decent (but not complete) browser support][5].\r\n\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const myParam = urlParams.get(&#39;myParam&#39;);\r\n\r\n**Original**\r\n\r\nYou don&#39;t need jQuery for that purpose. You can use just some pure JavaScript:\r\n\r\n    function getParameterByName(name, url = window.location.href) {\r\n        name = name.replace(/[\\[\\]]/g, &#39;\\\\$&amp;&#39;);\r\n        var regex = new RegExp(&#39;[?&amp;]&#39; + name + &#39;(=([^&amp;#]*)|&amp;|#|$)&#39;),\r\n            results = regex.exec(url);\r\n        if (!results) return null;\r\n        if (!results[2]) return &#39;&#39;;\r\n        return decodeURIComponent(results[2].replace(/\\+/g, &#39; &#39;));\r\n    }\r\n\r\n**Usage:**\r\n\r\n    // query string: ?foo=lorem&amp;bar=&amp;baz\r\n    var foo = getParameterByName(&#39;foo&#39;); // &quot;lorem&quot;\r\n    var bar = getParameterByName(&#39;bar&#39;); // &quot;&quot; (present with empty value)\r\n    var baz = getParameterByName(&#39;baz&#39;); // &quot;&quot; (present with no value)\r\n    var qux = getParameterByName(&#39;qux&#39;); // null (absent)\r\n\r\n\r\nNOTE: If a parameter is present several times (`?foo=lorem&amp;foo=ipsum`), you will get the first value (`lorem`). There is no standard about this and usages vary, see for example this question: [Authoritative position of duplicate HTTP GET query keys](https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys).\r\n\r\nNOTE: The function is case-sensitive. If you prefer case-insensitive parameter name, [add &#39;i&#39; modifier to RegExp][2]\r\n\r\n---\r\n\r\nThis is an update based on the new [URLSearchParams specs][3] to achieve the same result more succinctly. See answer titled &quot;[URLSearchParams][4]&quot; below.\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#Browser_compatibility\r\n  [2]: https://stackoverflow.com/questions/3939715/case-insensitive-regex-in-javascript\r\n  [3]: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\r\n  [4]: https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/901144#12151322\r\n  [5]: https://caniuse.com/#feat=urlsearchparams"},{"score":220,"body_markdown":"Roshambo on snipplr.com has a simple script to achieve this described in *[Get URL Parameters with jQuery | Improved][1]*. With his script you also easily get to pull out just the parameters you want.\r\n\r\nHere&#39;s the gist:\r\n\r\n    $.urlParam = function(name, url) {\r\n        if (!url) {\r\n         url = window.location.href;\r\n        }\r\n        var results = new RegExp(&#39;[\\\\?&amp;]&#39; + name + &#39;=([^&amp;#]*)&#39;).exec(url);\r\n        if (!results) { \r\n            return undefined;\r\n        }\r\n        return results[1] || undefined;\r\n    }\r\n\r\n\r\nThen just get your parameters from the query string.\r\n\r\nSo if the URL/query string was `xyz.com/index.html?lang=de`.\r\n\r\nJust call `var langval = $.urlParam(&#39;lang&#39;);`, and you&#39;ve got it.\r\n\r\nUZBEKJON has a great blog post on this as well, *[Get URL parameters &amp; values with jQuery][2]*.\r\n\r\n  [1]: http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/\r\n  [2]: http://jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html\r\n\r\n\r\n"},{"score":1730,"body_markdown":"Some of the solutions posted here are inefficient. Repeating the regular expression search every time the script needs to access a parameter is completely unnecessary, one single function to split up the parameters into an associative-array style object is enough. If you&#39;re not working with the HTML 5 History API, this is only necessary once per page load.  The other suggestions here also fail to decode the URL correctly.\r\n\r\n&lt;pre&gt;&lt;code&gt;var urlParams;\r\n(window.&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/window.onpopstate&quot;&gt;onpopstate&lt;/a&gt; = function () {\r\n    var match,\r\n        pl     = /\\+/g,  // Regex for replacing addition symbol with a space\r\n        search = /([^&amp;=]+)=?([^&amp;]*)/g,\r\n        decode = function (s) { return &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/decodeURIComponent&quot;&gt;decodeURIComponent&lt;/a&gt;(s.replace(pl, &quot; &quot;)); },\r\n        query  = window.&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/window.location&quot;&gt;location&lt;/a&gt;.search.&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substring&quot;&gt;substring&lt;/a&gt;(1);\r\n  \r\n    urlParams = {};\r\n    while (match = search.&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/exec&quot;&gt;exec&lt;/a&gt;(query))\r\n       urlParams[decode(match[1])] = decode(match[2]);\r\n})();&lt;/code&gt;&lt;/pre&gt;\r\n\r\nExample querystring: \r\n \r\n&gt; `?i=main&amp;mode=front&amp;sid=de8d49b78a85a322c4155015fdce22c4&amp;enc=+Hello%20&amp;empty`\r\n\r\nResult:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n     urlParams = {\r\n        enc: &quot; Hello &quot;,\r\n        i: &quot;main&quot;,\r\n        mode: &quot;front&quot;,\r\n        sid: &quot;de8d49b78a85a322c4155015fdce22c4&quot;,\r\n        empty: &quot;&quot;\r\n    }\r\n\r\n    alert(urlParams[&quot;mode&quot;]);\r\n    // -&gt; &quot;front&quot;\r\n\r\n    alert(&quot;empty&quot; in urlParams);\r\n    // -&gt; true\r\n\r\n\r\nThis could easily be improved upon to handle array-style query strings too.  An example of this is [here](http://jsbin.com/adali3/2), but since array-style parameters aren&#39;t defined in [RFC 3986](http://tools.ietf.org/html/rfc3986) I won&#39;t pollute this answer with the source code. [For those interested in a &quot;polluted&quot; version, look at campbeln&#39;s answer below][1].\r\n\r\nAlso, as pointed out in the comments, `;` is a legal delimiter for `key=value` pairs.  It would require a more complicated regex to handle `;` or `&amp;`, which I think is unnecessary because it&#39;s rare that `;` is used and I would say even more unlikely that both would be used.  If you need to support `;` instead of `&amp;`, just swap them in the regex.\r\n\r\n&lt;hr /&gt; \r\nIf you&#39;re using a server-side preprocessing language, you might want to use its native JSON functions to do the heavy lifting for you.  For example, in PHP you can write:\r\n\r\n&lt;pre&gt;&lt;code&gt;&amp;lt;script&gt;var urlParams = &amp;lt;?php echo &lt;a href=&quot;http://php.net/manual/en/function.json-encode.php&quot;&gt;json_encode&lt;/a&gt;($_GET, JSON_HEX_TAG);?&gt;;&amp;lt;/script&gt;&lt;/code&gt;&lt;/pre&gt;\r\n\r\nMuch simpler!\r\n\r\n#UPDATED\r\n&gt; A new capability would be to retrieve repeated params as following `myparam=1&amp;myparam=2`. There is not a _specification_, however, most of the current approaches follow the generation of an array.\r\n\r\n    myparam = [&quot;1&quot;, &quot;2&quot;]\r\n\r\nSo, this is the approach to manage it:\r\n\r\n    let urlParams = {};\r\n    (window.onpopstate = function () {\r\n        let match,\r\n            pl = /\\+/g,  // Regex for replacing addition symbol with a space\r\n            search = /([^&amp;=]+)=?([^&amp;]*)/g,\r\n            decode = function (s) {\r\n                return decodeURIComponent(s.replace(pl, &quot; &quot;));\r\n            },\r\n            query = window.location.search.substring(1);\r\n    \r\n        while (match = search.exec(query)) {\r\n            if (decode(match[1]) in urlParams) {\r\n                if (!Array.isArray(urlParams[decode(match[1])])) {\r\n                    urlParams[decode(match[1])] = [urlParams[decode(match[1])]];\r\n                }\r\n                urlParams[decode(match[1])].push(decode(match[2]));\r\n            } else {\r\n                urlParams[decode(match[1])] = decode(match[2]);\r\n            }\r\n        }\r\n    })();\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/23401756#23401756"},{"score":38,"body_markdown":"\t\r\n\r\n    function GET() {\r\n    \t\tvar data = [];\r\n    \t\tfor(x = 0; x &lt; arguments.length; ++x)\r\n    \t \t\tdata.push(location.href.match(new RegExp(&quot;/\\?&quot;.concat(arguments[x],&quot;=&quot;,&quot;([^\\n&amp;]*)&quot;)))[1])\r\n    \t \t\t\treturn data;\r\n    \t}\r\n\t\r\n\t\r\n\texample:\r\n\tdata = GET(&quot;id&quot;,&quot;name&quot;,&quot;foo&quot;);\r\n\tquery string : ?id=3&amp;name=jet&amp;foo=b\r\n\treturns:\r\n\t\tdata[0] // 3\r\n\t\tdata[1] // jet\r\n\t\tdata[2] // b\r\n\tor\r\n\t\talert(GET(&quot;id&quot;)[0]) // return 3"},{"score":1297,"body_markdown":"# ES2015 (ES6)\n\n    getQueryStringParams = query =&gt; {\n        return query\n            ? (/^[?#]/.test(query) ? query.slice(1) : query)\n                .split(&#39;&amp;&#39;)\n                .reduce((params, param) =&gt; {\n                        let [key, value] = param.split(&#39;=&#39;);\n                        params[key] = value ? decodeURIComponent(value.replace(/\\+/g, &#39; &#39;)) : &#39;&#39;;\n                        return params;\n                    }, {}\n                )\n            : {}\n    };\n\n----------\n\n## Without jQuery ##\n\n    var qs = (function(a) {\n        if (a == &quot;&quot;) return {};\n        var b = {};\n        for (var i = 0; i &lt; a.length; ++i)\n        {\n            var p=a[i].split(&#39;=&#39;, 2);\n            if (p.length == 1)\n                b[p[0]] = &quot;&quot;;\n            else\n                b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, &quot; &quot;));\n        }\n        return b;\n    })(window.location.search.substr(1).split(&#39;&amp;&#39;));\n\nWith an URL like `?topic=123&amp;name=query+string`, the following will return:\n\n    qs[&quot;topic&quot;];    // 123\n    qs[&quot;name&quot;];     // query string\n    qs[&quot;nothere&quot;];  // undefined (object)\n\n----------\n\n## Google method ##\n\nTearing Google&#39;s code I found the method they use: `getUrlParameters`\n\n    function (b) {\n        var c = typeof b === &quot;undefined&quot;;\n        if (a !== h &amp;&amp; c) return a;\n        for (var d = {}, b = b || k[B][vb], e = b[p](&quot;?&quot;), f = b[p](&quot;#&quot;), b = (f === -1 ? b[Ya](e + 1) : [b[Ya](e + 1, f - e - 1), &quot;&amp;&quot;, b[Ya](f + 1)][K](&quot;&quot;))[z](&quot;&amp;&quot;), e = i.dd ? ia : unescape, f = 0, g = b[w]; f &lt; g; ++f) {\n            var l = b[f][p](&quot;=&quot;);\n            if (l !== -1) {\n                var q = b[f][I](0, l),\n                    l = b[f][I](l + 1),\n                    l = l[Ca](/\\+/g, &quot; &quot;);\n                try {\n                    d[q] = e(l)\n                } catch (A) {}\n            }\n        }\n        c &amp;&amp; (a = d);\n        return d\n    }\n\nIt is obfuscated, but it is understandable. It does not work because some variables are undefined.\n\nThey start to look for parameters on the url from `?` and also from the hash `#`. Then for each parameter they split in the equal sign `b[f][p](&quot;=&quot;)` (which looks like `indexOf`, they use the position of the char to get the key/value). Having it split they check whether the parameter has a value or not, if it has then they store the value of `d`, otherwise they just continue.\n\nIn the end the object `d` is returned, handling escaping and the `+` sign. This object is just like mine, it has the same behavior.\n\n----------\n\nMy method as a **jQuery plugin**\n\n    (function($) {\n        $.QueryString = (function(paramsArray) {\n            let params = {};\n\n            for (let i = 0; i &lt; paramsArray.length; ++i)\n            {\n                let param = paramsArray[i]\n                    .split(&#39;=&#39;, 2);\n                \n                if (param.length !== 2)\n                    continue;\n                \n                params[param[0]] = decodeURIComponent(param[1].replace(/\\+/g, &quot; &quot;));\n            }\n                \n            return params;\n        })(window.location.search.substr(1).split(&#39;&amp;&#39;))\n    })(jQuery);\n\nUsage\n\n    //Get a param\n    $.QueryString.param\n    //-or-\n    $.QueryString[&quot;param&quot;]\n    //This outputs something like...\n    //&quot;val&quot;\n\n    //Get all params as object\n    $.QueryString\n    //This outputs something like...\n    //Object { param: &quot;val&quot;, param2: &quot;val&quot; }\n\n    //Set a param (only in the $.QueryString object, doesn&#39;t affect the browser&#39;s querystring)\n    $.QueryString.param = &quot;newvalue&quot;\n    //This doesn&#39;t output anything, it just updates the $.QueryString object\n\n    //Convert object into string suitable for url a querystring (Requires jQuery)\n    $.param($.QueryString)\n    //This outputs something like...\n    //&quot;param=newvalue&amp;param2=val&quot;\n\n    //Update the url/querystring in the browser&#39;s location bar with the $.QueryString object\n    history.replaceState({}, &#39;&#39;, &quot;?&quot; + $.param($.QueryString));\n    //-or-\n    history.pushState({}, &#39;&#39;, &quot;?&quot; + $.param($.QueryString));\n\n\n----------\n\n## [Performance test (split method against regex method)][1] ([jsPerf][2]) ##\n\nPreparation code: methods declaration\n\n### Split test code ###\n\n    var qs = window.GetQueryString(query);\n    \n    var search = qs[&quot;q&quot;];\n    var value = qs[&quot;value&quot;];\n    var undef = qs[&quot;undefinedstring&quot;];\n\n### Regex test code ###\n\n    var search = window.getParameterByName(&quot;q&quot;);\n    var value = window.getParameterByName(&quot;value&quot;);\n    var undef = window.getParameterByName(&quot;undefinedstring&quot;);\n\n**Testing in Firefox 4.0 x86 on Windows Server 2008 R2 / 7 x64**\n\n - **Split method**: 144,780 &#177;2.17% fastest\n - **Regex method**: 13,891 &#177;0.85% | 90% slower\n\n\n  [1]: http://jsperf.com/querystring-with-javascript\n  [2]: http://jsperf.com/"},{"score":96,"body_markdown":"Here&#39;s my stab at making Andy E&#39;s excellent solution into a full fledged jQuery plugin:\r\n\r\n    ;(function ($) {\r\n    \t$.extend({\t\t\r\n    \t\tgetQueryString: function (name) {\t\t\t\r\n    \t\t\tfunction parseParams() {\r\n    \t\t\t\tvar params = {},\r\n    \t\t\t\t\te,\r\n    \t\t\t\t\ta = /\\+/g,  // Regex for replacing addition symbol with a space\r\n    \t\t\t\t\tr = /([^&amp;=]+)=?([^&amp;]*)/g,\r\n    \t\t\t\t\td = function (s) { return decodeURIComponent(s.replace(a, &quot; &quot;)); },\r\n    \t\t\t\t\tq = window.location.search.substring(1);\r\n    \r\n    \t\t\t\twhile (e = r.exec(q))\r\n    \t\t\t\t\tparams[d(e[1])] = d(e[2]);\r\n    \r\n    \t\t\t\treturn params;\r\n    \t\t\t}\r\n    \r\n    \t\t\tif (!this.queryStringParams)\r\n    \t\t\t\tthis.queryStringParams = parseParams(); \r\n    \r\n    \t\t\treturn this.queryStringParams[name];\r\n    \t\t}\r\n    \t});\r\n    })(jQuery);\r\n\r\n\r\nThe syntax is:\r\n\r\n    var someVar = $.getQueryString(&#39;myParam&#39;);\r\n\r\nBest of both worlds!"},{"score":16,"body_markdown":"Here is [my version of query string parsing code on GitHub][1].\r\n\r\nIt&#39;s &quot;prefixed&quot; with jquery.*, but the parsing function itself don&#39;t use jQuery. It&#39;s pretty fast, but still open for few simple performance optimizations.\r\n\r\nAlso it supports list &amp; hash-tables encoding in the URL, like:\r\n\r\n    arr[]=10&amp;arr[]=20&amp;arr[]=100\r\n\r\nor\r\n\r\n    hash[key1]=hello&amp;hash[key2]=moto&amp;a=How%20are%20you\r\n\r\n----\r\n\r\n    jQuery.toQueryParams = function(str, separator) {\r\n\t\tseparator = separator || &#39;&amp;&#39;\r\n\t\tvar obj = {}\r\n\t\tif (str.length == 0)\r\n\t\t\treturn obj\r\n\t\tvar c = str.substr(0,1)\r\n\t\tvar s = c==&#39;?&#39; || c==&#39;#&#39;  ? str.substr(1) : str; \r\n\r\n\t\tvar a = s.split(separator)\r\n\t\tfor (var i=0; i&lt;a.length; i++) {\r\n\t\t\tvar p = a[i].indexOf(&#39;=&#39;)\r\n\t\t\tif (p &lt; 0) {\r\n\t\t\t\tobj[a[i]] = &#39;&#39;\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tvar k = decodeURIComponent(a[i].substr(0,p)),\r\n\t\t\t\tv = decodeURIComponent(a[i].substr(p+1))\r\n\r\n\t\t\tvar bps = k.indexOf(&#39;[&#39;)\r\n\t\t\tif (bps &lt; 0) {\r\n\t\t\t\tobj[k] = v\r\n\t\t\t\tcontinue;\r\n\t\t\t} \r\n\r\n\t\t\tvar bpe = k.substr(bps+1).indexOf(&#39;]&#39;)\r\n\t\t\tif (bpe &lt; 0) {\r\n\t\t\t\tobj[k] = v\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tvar bpv = k.substr(bps+1, bps+bpe-1)\r\n\t\t\tvar k = k.substr(0,bps)\r\n\t\t\tif (bpv.length &lt;= 0) {\r\n\t\t\t\tif (typeof(obj[k]) != &#39;object&#39;) obj[k] = []\r\n\t\t\t\tobj[k].push(v)\r\n\t\t\t} else {\r\n\t\t\t\tif (typeof(obj[k]) != &#39;object&#39;) obj[k] = {}\r\n\t\t\t\tobj[k][bpv] = v\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn obj;\r\n\r\n    }\r\n\r\n\r\n  [1]: https://github.com/voituk/Misc/blob/master/js/jquery.hash.js#L10"},{"score":39,"body_markdown":"Code golf:\r\n\r\n    var a = location.search&amp;&amp;location.search.substr(1).replace(/\\+/gi,&quot; &quot;).split(&quot;&amp;&quot;);\r\n    for (var i in a) {\r\n    \tvar s = a[i].split(&quot;=&quot;);\r\n    \ta[i]  = a[unescape(s[0])] = unescape(s[1]);\r\n    }\r\n\r\nDisplay it!\r\n\r\n    for (i in a) {\r\n    \tdocument.write(i + &quot;:&quot; + a[i] + &quot;&lt;br/&gt;&quot;);\t\r\n    };\r\n\r\nOn my Mac: `test.htm?i=can&amp;has=cheezburger` displays\r\n\r\n    0:can\r\n    1:cheezburger\r\n    i:can\r\n    has:cheezburger\r\n"},{"score":38,"body_markdown":"Roshambo jQuery method wasn&#39;t taking care of decode URL\r\n\r\n&gt; http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/\r\n\r\nJust added that capability also while adding in  the return statement \r\n\r\n    return decodeURIComponent(results[1].replace(/\\+/g, &quot; &quot;)) || 0;\r\n\r\nNow you can find the updated gist:\r\n\r\n    $.urlParam = function(name){\r\n\tvar results = new RegExp(&#39;[\\\\?&amp;]&#39; + name + &#39;=([^&amp;#]*)&#39;).exec(window.location.href);\r\n\tif (!results) { return 0; }\r\n\treturn decodeURIComponent(results[1].replace(/\\+/g, &quot; &quot;)) || 0;\r\n    }"},{"score":31,"body_markdown":"This is a function I created a while back and I&#39;m quite happy with. It is not case sensitive - which is handy. Also, if the requested QS doesn&#39;t exist, it just returns an empty string.\r\n \r\nI use a compressed version of this. I&#39;m posting uncompressed for the novice types to better explain what&#39;s going on.\r\n \r\nI&#39;m sure this could be optimized or done differently to work faster, but it&#39;s always worked great for what I need.\r\n \r\nEnjoy.\r\n \r\n\r\n    function getQSP(sName, sURL) {\r\n        var theItmToRtn = &quot;&quot;;\r\n        var theSrchStrg = location.search;\r\n        if (sURL) theSrchStrg = sURL;\r\n        var sOrig = theSrchStrg;\r\n        theSrchStrg = theSrchStrg.toUpperCase();\r\n        sName = sName.toUpperCase();\r\n        theSrchStrg = theSrchStrg.replace(&quot;?&quot;, &quot;&amp;&quot;) theSrchStrg = theSrchStrg + &quot;&amp;&quot;;\r\n        var theSrchToken = &quot;&amp;&quot; + sName + &quot;=&quot;;\r\n        if (theSrchStrg.indexOf(theSrchToken) != -1) {\r\n            var theSrchTokenLth = theSrchToken.length;\r\n            var theSrchTokenLocStart = theSrchStrg.indexOf(theSrchToken) + theSrchTokenLth;\r\n            var theLocOfNextAndSign = theSrchStrg.indexOf(&quot;&amp;&quot;, theSrchTokenLocStart);\r\n            theItmToRtn = unescape(sOrig.substring(theSrchTokenLocStart, theLocOfNextAndSign));\r\n        }\r\n        return unescape(theItmToRtn);\r\n    }\r\n     \r\n\r\n  \r\n\r\n\r\n "},{"score":666,"body_markdown":"Improved version of [Artem Barger&#39;s answer][1]:\r\n\r\n    function getParameterByName(name) {\r\n        var match = RegExp(&#39;[?&amp;]&#39; + name + &#39;=([^&amp;]*)&#39;).exec(window.location.search);\r\n        return match &amp;&amp; decodeURIComponent(match[1].replace(/\\+/g, &#39; &#39;));\r\n    }\r\n\r\nFor more information on improvement see: http://james.padolsey.com/javascript/bujs-1-getparameterbyname/\r\n\r\n  [1]: https://stackoverflow.com/questions/901115/get-querystring-values-with-jquery/901144#901144\r\n"},{"score":39,"body_markdown":"I use regular expressions a lot, but not for that.\r\n\r\nIt seems easier and more efficient to me to read the query string once in my application, and build an object from all the key/value pairs like:\r\n\r\n    var search = function() {\r\n      var s = window.location.search.substr(1),\r\n        p = s.split(/\\&amp;/), l = p.length, kv, r = {};\r\n      if (l === 0) {return false;}\r\n      while (l--) {\r\n        kv = p[l].split(/\\=/);\r\n        r[kv[0]] = decodeURIComponent(kv[1] || &#39;&#39;) || true;\r\n      }\r\n      return r;\r\n    }();\r\n\r\nFor a URL like `http://domain.com?param1=val1&amp;param2=val2` you can get their value later in your code as `search.param1` and `search.param2`.\r\n"},{"score":400,"body_markdown":"Just another recommendation. The plugin *[Purl][1]* allows to retrieve all parts of URL, including anchor, host, etc.\r\n\r\nIt can be used with or without jQuery.\r\n\r\nUsage is very simple and cool:\r\n\r\n    var url = $.url(&#39;http://allmarkedup.com/folder/dir/index.html?item=value&#39;); // jQuery version\r\n    var url = purl(&#39;http://allmarkedup.com/folder/dir/index.html?item=value&#39;); // plain JS version\r\n    url.attr(&#39;protocol&#39;); // returns &#39;http&#39;\r\n    url.attr(&#39;path&#39;); // returns &#39;/folder/dir/index.html&#39;\r\n\r\nHowever, as of Nov 11, 2014, Purl is no longer maintained and the author recommends using [URI.js][2] instead.  The jQuery plugin is different in that it focuses on elements - for usage with strings, just use `URI` directly, with or without jQuery.  Similar code would look as such, fuller docs [here][3]:\r\n\r\n    var url = new URI(&#39;http://allmarkedup.com/folder/dir/index.html?item=value&#39;); // plain JS version\r\n    url.protocol(); // returns &#39;http&#39;\r\n    url.path(); // returns &#39;/folder/dir/index.html&#39;\r\n\r\n  [1]: https://github.com/allmarkedup/jQuery-URL-Parser\r\n  [2]: https://github.com/medialize/URI.js\r\n  [3]: http://medialize.github.io/URI.js/docs.html"},{"score":14,"body_markdown":"I would rather use `split()` instead of Regex for this operation:\r\n\r\n\tfunction getUrlParams() {\r\n\t\tvar result = {};\r\n\t\tvar params = (window.location.search.split(&#39;?&#39;)[1] || &#39;&#39;).split(&#39;&amp;&#39;);\r\n\t\tfor(var param in params) {\r\n\t\t    if (params.hasOwnProperty(param)) {\r\n\t\t        var paramParts = params[param].split(&#39;=&#39;);\r\n\t\t        result[paramParts[0]] = decodeURIComponent(paramParts[1] || &quot;&quot;);\r\n\t\t    }\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n"},{"score":4,"body_markdown":"I took [this answer][1] and added support for optionally passing the URL in as a parameter; falls back to window.location.search. Obviously this is useful for getting the query string parameters from URLs that are not the current page:\r\n\r\n    (function($, undef) {\r\n      $.QueryString = function(url) {\r\n        var pairs, qs = null, index, map = {};\r\n        if(url == undef){\r\n          qs = window.location.search.substr(1);\r\n        }else{\r\n          index = url.indexOf(&#39;?&#39;);\r\n          if(index == -1) return {};\r\n          qs = url.substring(index+1);\r\n        }\r\n        pairs = qs.split(&#39;&amp;&#39;);\r\n        if (pairs == &quot;&quot;) return {};\r\n        for (var i = 0; i &lt; pairs.length; ++i)\r\n        {\r\n          var p = pairs[i].split(&#39;=&#39;);\r\n          if(p.length != 2) continue;\r\n          map[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, &quot; &quot;));\r\n        }\r\n        return map;\r\n      };\r\n    })(jQuery);\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/901115/get-querystring-values-in-javascript/3855394#3855394"},{"score":36,"body_markdown":"Here&#39;s my edit to [this excellent answer][1] - with added ability to parse query strings with keys without values.\r\n\r\n    var url = &#39;http://sb.com/reg/step1?param&#39;;\r\n    var qs = (function(a) {\r\n        if (a == &quot;&quot;) return {};\r\n        var b = {};\r\n        for (var i = 0; i &lt; a.length; ++i) {\r\n            var p=a[i].split(&#39;=&#39;, 2);\r\n            if (p[1]) p[1] = decodeURIComponent(p[1].replace(/\\+/g, &quot; &quot;));\r\n            b[p[0]] = p[1];\r\n        }\r\n        return b;\r\n    })((url.split(&#39;?&#39;))[1].split(&#39;&amp;&#39;));\r\n\r\n&lt;b&gt;IMPORTANT!&lt;/b&gt; The parameter for that function in the last line is different. It&#39;s just an example of how one can pass an arbitrary URL to it. You can use last line from Bruno&#39;s answer to parse the current URL.\r\n\r\nSo what exactly changed? With url `http://sb.com/reg/step1?param=` results will be same. But with url `http://sb.com/reg/step1?param` Bruno&#39;s solution returns an object without keys, while mine returns an object with key `param` and `undefined` value.\r\n\r\n  [1]: https://stackoverflow.com/questions/901115/get-query-string-values-in-javascript/3855394#3855394\r\n"},{"score":6,"body_markdown":"The following code will create an object which has two methods:\r\n\r\n1. `isKeyExist`: Check if a particular parameter exist\r\n2. `getValue`: Get the value of a particular parameter.\r\n\r\n&amp;nbsp;\r\n\r\n    var QSParam = new function() {\r\n           var qsParm = {};\r\n           var query = window.location.search.substring(1);\r\n           var params = query.split(&#39;&amp;&#39;);\r\n           for (var i = 0; i &lt; params.length; i++) {\r\n               var pos = params[i].indexOf(&#39;=&#39;);\r\n               if (pos &gt; 0) {\r\n                   var key = params[i].substring(0, pos);\r\n                   var val = params[i].substring(pos + 1);\r\n                   qsParm[key] = val;\r\n               }\r\n           }\r\n           this.isKeyExist = function(query){\r\n               if(qsParm[query]){\r\n                   return true;\r\n               }\r\n               else{\r\n                  return false;\r\n               }\r\n           };\r\n           this.getValue = function(query){\r\n               if(qsParm[query])\r\n               {\r\n                   return qsParm[query];\r\n               }\r\n               throw &quot;URL does not contain query &quot;+ query;\r\n           }\r\n    };\r\n\r\n"},{"score":6,"body_markdown":"Try this:\r\n\r\n    String.prototype.getValueByKey = function(k){\r\n\t\tvar p = new RegExp(&#39;\\\\b&#39;+k+&#39;\\\\b&#39;,&#39;gi&#39;);\r\n\t\treturn this.search(p) != -1 ? decodeURIComponent(this.substr(this.search(p)+k.length+1).substr(0,this.substr(this.search(p)+k.length+1).search(/(&amp;|;|$)/))) : &quot;&quot;;\r\n\t};\r\n\r\nThen call it like so:\r\n\r\n    if(location.search != &quot;&quot;) location.search.getValueByKey(&quot;id&quot;);\r\n\r\nYou can use this for **cookies** also:\r\n\r\n    if(navigator.cookieEnabled) document.cookie.getValueByKey(&quot;username&quot;);\r\n\r\nThis only works for strings that have `key=value[&amp;|;|$]`... will not work on objects/arrays.\r\n\r\nIf you **don&#39;t** want to use **String.prototype**...\r\nmove it to a function and pass the string as an argument"},{"score":62,"body_markdown":"I like [Ryan Phelan&#39;s solution](https://stackoverflow.com/a/3867610/632117). But I don&#39;t see any point of extending jQuery for that? There is no usage of jQuery functionality.\r\n\r\nOn the other hand, I like the built-in function in Google Chrome: window.location.getParameter.\r\n\r\nSo why not to use this? Okay, other browsers don&#39;t have. So let&#39;s create this function if it does not exist:\r\n\r\n    if (!window.location.getParameter ) {\r\n      window.location.getParameter = function(key) {\r\n    \tfunction parseParams() {\r\n    \t\tvar params = {},\r\n    \t\t\te,\r\n    \t\t\ta = /\\+/g,  // Regex for replacing addition symbol with a space\r\n    \t\t\tr = /([^&amp;=]+)=?([^&amp;]*)/g,\r\n    \t\t\td = function (s) { return decodeURIComponent(s.replace(a, &quot; &quot;)); },\r\n    \t\t\tq = window.location.search.substring(1);\r\n    \r\n    \t\twhile (e = r.exec(q))\r\n    \t\t\tparams[d(e[1])] = d(e[2]);\r\n    \r\n    \t\treturn params;\r\n    \t}\r\n    \r\n    \tif (!this.queryStringParams)\r\n    \t\tthis.queryStringParams = parseParams(); \r\n    \r\n    \treturn this.queryStringParams[key];\r\n      };\r\n    }\r\n\r\nThis function is more or less from Ryan Phelan, but it is wrapped differently: clear name and no dependencies of other javascript libraries. [More about this function on my blog](http://sharepointkunskap.wordpress.com/2012/01/11/get-url-parameters-with-javascript/)."},{"score":8,"body_markdown":"    function getUrlVar(key){\r\n    \tvar result = new RegExp(key + &quot;=([^&amp;]*)&quot;, &quot;i&quot;).exec(window.location.search); \r\n    \treturn result &amp;&amp; unescape(result[1]) || &quot;&quot;; \r\n    }\r\n\r\nhttps://gist.github.com/1771618"},{"score":55,"body_markdown":"Keep it simple in plain JavaScript code:\r\n\r\n    function qs(key) {\r\n        var vars = [], hash;\r\n        var hashes = window.location.href.slice(window.location.href.indexOf(&#39;?&#39;) + 1).split(&#39;&amp;&#39;);\r\n        for(var i = 0; i &lt; hashes.length; i++)\r\n        {\r\n            hash = hashes[i].split(&#39;=&#39;);\r\n            vars.push(hash[0]);\r\n            vars[hash[0]] = hash[1];\r\n        }\r\n        return vars[key];\r\n    }\r\n\r\nCall it from anywhere in the JavaScript code:\r\n\r\n    var result = qs(&#39;someKey&#39;);\r\n\r\n\r\n"},{"score":76,"body_markdown":"If you&#39;re doing more URL manipulation than simply parsing the querystring, you may find [URI.js](http://medialize.github.com/URI.js/) helpful. It is a library for manipulating URLs - and comes with all the bells and whistles. (Sorry for self-advertising here)\r\n\r\nto convert your querystring into a map:\r\n\r\n    var data = URI(&#39;?foo=bar&amp;bar=baz&amp;foo=world&#39;).query(true);\r\n    data == {\r\n      &quot;foo&quot;: [&quot;bar&quot;, &quot;world&quot;],\r\n      &quot;bar&quot;: &quot;baz&quot;\r\n    }\r\n\r\n(URI.js also &quot;fixes&quot; bad querystrings like `?&amp;foo&amp;&amp;bar=baz&amp;` to `?foo&amp;bar=baz`)"},{"score":6,"body_markdown":"Here&#39;s my own take on this. This first function decodes a URL string into an object of name/value pairs:\r\n\r\n    url_args_decode = function (url) {\r\n      var args_enc, el, i, nameval, ret;\r\n      ret = {};\r\n      // use the DOM to parse the URL via an &#39;a&#39; element\r\n      el = document.createElement(&quot;a&quot;);\r\n      el.href = url;\r\n      // strip off initial ? on search and split\r\n      args_enc = el.search.substring(1).split(&#39;&amp;&#39;);\r\n      for (i = 0; i &lt; args_enc.length; i++) {\r\n        // convert + into space, split on =, and then decode \r\n        args_enc[i].replace(/\\+/g, &#39; &#39;);\r\n        nameval = args_enc[i].split(&#39;=&#39;, 2);\r\n        ret[decodeURIComponent(nameval[0])]=decodeURIComponent(nameval[1]);\r\n      }\r\n      return ret;\r\n    };\r\n\r\nAnd as an added bonus, if you change some of the args, you can use this second function to put the array of args back into the URL string:\r\n\r\n    url_args_replace = function (url, args) {\r\n      var args_enc, el, name;\r\n      // use the DOM to parse the URL via an &#39;a&#39; element\r\n      el = document.createElement(&quot;a&quot;);\r\n      el.href = url;\r\n      args_enc = [];\r\n      // encode args to go into url\r\n      for (name in args) {\r\n        if (args.hasOwnProperty(name)) {\r\n          name = encodeURIComponent(name);\r\n          args[name] = encodeURIComponent(args[name]);\r\n          args_enc.push(name + &#39;=&#39; + args[name]);\r\n        }\r\n      }\r\n      if (args_enc.length &gt; 0) {\r\n        el.search = &#39;?&#39; + args_enc.join(&#39;&amp;&#39;);\r\n      } else {\r\n        el.search = &#39;&#39;;\r\n      }\r\n      return el.href;\r\n    };\r\n\r\n"},{"score":20,"body_markdown":"    http://someurl.com?key=value&amp;keynovalue&amp;keyemptyvalue=&amp;&amp;keynovalue=nowhasvalue#somehash\r\n\r\n - Regular key/value pair (`?param=value`)\r\n - Keys w/o value (`?param` : no equal sign or value)\r\n - Keys w/ empty value (`?param=` : equal sign, but no value to right of equal sign)\r\n - Repeated Keys (`?param=1&amp;param=2`)\r\n - Removes Empty Keys (`?&amp;&amp;` : no key or value)\r\n\r\n###Code: \r\n\r\n- \r\n\r\n        var queryString = window.location.search || &#39;&#39;;\r\n        var keyValPairs = [];\r\n        var params      = {};\r\n        queryString     = queryString.substr(1);\r\n\r\n        if (queryString.length)\r\n        {\r\n           keyValPairs = queryString.split(&#39;&amp;&#39;);\r\n           for (pairNum in keyValPairs)\r\n           {\r\n              var key = keyValPairs[pairNum].split(&#39;=&#39;)[0];\r\n              if (!key.length) continue;\r\n              if (typeof params[key] === &#39;undefined&#39;)\r\n                 params[key] = [];\r\n              params[key].push(keyValPairs[pairNum].split(&#39;=&#39;)[1]);\r\n           }\r\n        }\r\n\r\n###How to Call:\r\n\r\n- \r\n\r\n        params[&#39;key&#39;];  // returns an array of values (1..n)\r\n\r\n\r\n###Output: \r\n\r\n-  \r\n\r\n        key            [&quot;value&quot;]\r\n        keyemptyvalue  [&quot;&quot;]\r\n        keynovalue     [undefined, &quot;nowhasvalue&quot;]\r\n"},{"score":16,"body_markdown":"This one works fine\r\n\r\n    function getQuerystring(key) {\r\n        var query = window.location.search.substring(1);\r\n        var vars = query.split(&quot;&amp;&quot;);\r\n        for (var i = 0; i &lt; vars.length; i++) {\r\n            var pair = vars[i].split(&quot;=&quot;);\r\n            if (pair[0] == key) {\r\n                return pair[1];\r\n            }\r\n        }\r\n    }\r\n\r\ntaken from [here][1]\r\n\r\n\r\n  [1]: http://forums.asp.net/t/1771251.aspx/1"},{"score":5,"body_markdown":"The following function returns an object version of your queryString. \r\nYou can simply write `obj.key1` and  `obj.key2` to access values of `key1` and `key2` in parameter.\r\n\r\n\r\n\r\n    function getQueryStringObject()\r\n    {\r\n    \tvar querystring = document.location.search.replace(&#39;?&#39;,&#39;&#39;).split( &#39;&amp;&#39; );\r\n    \tvar objQueryString={};\r\n    \tvar key=&quot;&quot;,val=&quot;&quot;;\r\n    \tif(typeof querystring == &#39;undefined&#39;)\r\n    \t{\r\n    \t\treturn (typeof querystring);\r\n    \t}\r\n    \tfor(i=0;i&lt;querystring.length;i++)\r\n    \t{\r\n    \t\tkey=querystring[i].split(&quot;=&quot;)[0];\r\n    \t\tval=querystring[i].split(&quot;=&quot;)[1];\r\n    \t\tobjQueryString[key] = val;\r\n    \t}\r\n    \treturn objQueryString;\r\n    }\r\n\r\n\r\nAnd to use this function you can write\r\n\r\n\r\n    var obj= getQueryStringObject();\r\n    alert(obj.key1);\r\n\r\n\r\n"},{"score":36,"body_markdown":"I like [this one][1] (taken from jquery-howto.blogspot.co.uk):\r\n\r\n    // get an array with all querystring values\r\n    // example: var valor = getUrlVars()[&quot;valor&quot;];\r\n    function getUrlVars() {\r\n        var vars = [], hash;\r\n        var hashes = window.location.href.slice(window.location.href.indexOf(&#39;?&#39;) + 1).split(&#39;&amp;&#39;);\r\n        for (var i = 0; i &lt; hashes.length; i++) {\r\n            hash = hashes[i].split(&#39;=&#39;);\r\n            vars.push(hash[0]);\r\n            vars[hash[0]] = hash[1];\r\n        }\r\n        return vars;\r\n    }\r\n\r\nWorks great for me.\r\n\r\n\r\n  [1]: http://jquery-howto.blogspot.co.uk/2009/09/get-url-parameters-values-with-jquery.html"},{"score":610,"body_markdown":"URLSearchParams\r\n===============\r\n\r\nFirefox 44+, Opera 36+, Edge 17+, Safari 10.3+ and Chrome 49+ support the [URLSearchParams][1] API:\r\n\r\n* [Chrome Announcement and details][2]\r\n* [Opera Announcement and details][3]\r\n* [Firefox Announcement and details][4]\r\n\r\nThere is a google-suggested **[URLSearchParams polyfill][7]** for the stable versions of IE.\r\n\r\nIt is not standardized by [W3C][5], but it is a living standard by [WhatWG][6].\r\n\r\nYou can use it on `location`:\r\n\r\n    const params = new URLSearchParams(location.search);\r\n\r\nor\r\n\r\n    const params = (new URL(location)).searchParams;\r\n\r\nOr of course on any URL:\r\n\r\n    const url = new URL(&#39;https://example.com?foo=1&amp;bar=2&#39;);\r\n    const params = new URLSearchParams(url.search);\r\n\r\nYou can get params also using a shorthand `.searchParams` property on the URL object, like this:\r\n\r\n    const params = new URL(&#39;https://example.com?foo=1&amp;bar=2&#39;).searchParams;\r\n    params.get(&#39;foo&#39;); // &quot;1&quot;\r\n    params.get(&#39;bar&#39;); // &quot;2&quot; \r\n\r\nYou read/set parameters through the `get(KEY)`, `set(KEY, VALUE)`, `append(KEY, VALUE)` API. You can also iterate over all values `for (let p of params) {}`.\r\n\r\n A [reference implementation][8] and a [sample page][9] are available for auditing and testing.\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\r\n  [2]: https://developers.google.com/web/updates/2016/01/urlsearchparams\r\n  [3]: https://dev.opera.com/blog/opera-36/\r\n  [4]: https://developer.mozilla.org/en-US/Firefox/Releases/44#Miscellaneous\r\n  [5]: https://www.w3.org/TR/2014/WD-url-1-20141209/#interface-urlsearchparams\r\n  [6]: https://url.spec.whatwg.org\r\n  [7]: https://github.com/WebReflection/url-search-params\r\n  [8]: https://trac.webkit.org/browser/trunk/Source/WebCore/platform/URLParser.cpp\r\n  [9]: https://googlechrome.github.io/samples/urlsearchparams/"},{"score":54,"body_markdown":"Here is a fast way to get an object similar to the PHP [$_GET][1] array:\r\n\r\n    function get_query(){\r\n        var url = location.search;\r\n        var qs = url.substring(url.indexOf(&#39;?&#39;) + 1).split(&#39;&amp;&#39;);\r\n        for(var i = 0, result = {}; i &lt; qs.length; i++){\r\n            qs[i] = qs[i].split(&#39;=&#39;);\r\n            result[qs[i][0]] = decodeURIComponent(qs[i][1]);\r\n        }\r\n        return result;\r\n    }\r\n\r\nUsage:\r\n\r\n    var $_GET = get_query();\r\n\r\nFor the query string `x=5&amp;y&amp;z=hello&amp;x=6` this returns the object:\r\n\r\n    {\r\n      x: &quot;6&quot;,\r\n      y: undefined,\r\n      z: &quot;hello&quot;\r\n    }\r\n\r\n  [1]: http://php.net/manual/en/reserved.variables.get.php\r\n"},{"score":100,"body_markdown":"Just use two **splits**:\r\n\r\n    function get(n) {\r\n        var half = location.search.split(n + &#39;=&#39;)[1];\r\n        return half !== undefined ? decodeURIComponent(half.split(&#39;&amp;&#39;)[0]) : null;\r\n    }\r\n\r\nI was reading all the previous and more complete answers. But I think that is the simplest and faster method. You can check in this jsPerf [benchmark][1]\r\n\r\nTo solve the problem in Rup&#39;s comment, add a conditional split by changing the first line to the two below. But absolute accuracy means it&#39;s now slower than regexp (see [jsPerf][2]).\r\n\r\n    function get(n) {\r\n        var half = location.search.split(&#39;&amp;&#39; + n + &#39;=&#39;)[1];\r\n        if (!half) half = location.search.split(&#39;?&#39; + n + &#39;=&#39;)[1];\r\n        return half !== undefined ? decodeURIComponent(half.split(&#39;&amp;&#39;)[0]) : null;\r\n    }\r\n\r\nSo if you know you won&#39;t run into Rup&#39;s counter-case, this wins. Otherwise, regexp.\r\n\r\n&gt; *Or* if you have control of the querystring and can guarantee that a value you are trying to get will never contain any URL encoded\r\n&gt; characters (having these in a value would be a bad idea) - you can use\r\n&gt; the following slightly more simplified and readable version of the 1st option:\r\n&gt; \r\n&gt;         function getQueryStringValueByName(name) {\r\n&gt;             var queryStringFromStartOfValue = location.search.split(name + &#39;=&#39;)[1];\r\n&gt;              return queryStringFromStartOfValue !== undefined ? queryStringFromStartOfValue.split(&#39;&amp;&#39;)[0] : null;\r\n\r\n  [1]: http://jsperf.com/querystring-with-javascript/9\r\n  [2]: http://jsperf.com/querystring-with-javascript/10\r\n"},{"score":46,"body_markdown":"These are all great answers, but I needed something a bit more robust, and thought you all might like to have what I created.\r\n\r\nIt is a simple library method that does dissection and manipulation of URL parameters. The static method has the following sub methods that can be called on the subject URL:\r\n\r\n- getHost\r\n- getPath\r\n- getHash\r\n- setHash\r\n- getParams\r\n- getQuery\r\n- setParam\r\n- getParam\r\n- hasParam\r\n- removeParam\r\n\r\nExample:\r\n\r\n    URLParser(url).getParam(&#39;myparam1&#39;)\r\n\r\n---\r\n\r\n    var url = &quot;http://www.test.com/folder/mypage.html?myparam1=1&amp;myparam2=2#something&quot;;\r\n\r\n    function URLParser(u){\r\n        var path=&quot;&quot;,query=&quot;&quot;,hash=&quot;&quot;,params;\r\n        if(u.indexOf(&quot;#&quot;) &gt; 0){\r\n            hash = u.substr(u.indexOf(&quot;#&quot;) + 1);\r\n            u = u.substr(0 , u.indexOf(&quot;#&quot;));\r\n        }\r\n        if(u.indexOf(&quot;?&quot;) &gt; 0){\r\n            path = u.substr(0 , u.indexOf(&quot;?&quot;));\r\n            query = u.substr(u.indexOf(&quot;?&quot;) + 1);\r\n            params= query.split(&#39;&amp;&#39;);\r\n        }else\r\n            path = u;\r\n        return {\r\n            getHost: function(){\r\n                var hostexp = /\\/\\/([\\w.-]*)/;\r\n                var match = hostexp.exec(path);\r\n                if (match != null &amp;&amp; match.length &gt; 1)\r\n                    return match[1];\r\n                return &quot;&quot;;\r\n            },\r\n            getPath: function(){\r\n                var pathexp = /\\/\\/[\\w.-]*(?:\\/([^?]*))/;\r\n                var match = pathexp.exec(path);\r\n                if (match != null &amp;&amp; match.length &gt; 1)\r\n                    return match[1];\r\n                return &quot;&quot;;\r\n            },\r\n            getHash: function(){\r\n                return hash;\r\n            },\r\n            getParams: function(){\r\n                return params\r\n            },\r\n            getQuery: function(){\r\n                return query;\r\n            },\r\n            setHash: function(value){\r\n                if(query.length &gt; 0)\r\n                    query = &quot;?&quot; + query;\r\n                if(value.length &gt; 0)\r\n                    query = query + &quot;#&quot; + value;\r\n                return path + query;\r\n            },\r\n            setParam: function(name, value){\r\n                if(!params){\r\n                    params= new Array();\r\n                }\r\n                params.push(name + &#39;=&#39; + value);\r\n                for (var i = 0; i &lt; params.length; i++) {\r\n                    if(query.length &gt; 0)\r\n                        query += &quot;&amp;&quot;;\r\n                    query += params[i];\r\n                }\r\n                if(query.length &gt; 0)\r\n                    query = &quot;?&quot; + query;\r\n                if(hash.length &gt; 0)\r\n                    query = query + &quot;#&quot; + hash;\r\n                return path + query;\r\n            },\r\n            getParam: function(name){\r\n                if(params){\r\n                    for (var i = 0; i &lt; params.length; i++) {\r\n                        var pair = params[i].split(&#39;=&#39;);\r\n                        if (decodeURIComponent(pair[0]) == name)\r\n                            return decodeURIComponent(pair[1]);\r\n                    }\r\n                }\r\n                console.log(&#39;Query variable %s not found&#39;, name);\r\n            },\r\n            hasParam: function(name){\r\n                if(params){\r\n                    for (var i = 0; i &lt; params.length; i++) {\r\n                        var pair = params[i].split(&#39;=&#39;);\r\n                        if (decodeURIComponent(pair[0]) == name)\r\n                            return true;\r\n                    }\r\n                }\r\n                console.log(&#39;Query variable %s not found&#39;, name);\r\n            },\r\n            removeParam: function(name){\r\n                query = &quot;&quot;;\r\n                if(params){\r\n                    var newparams = new Array();\r\n                    for (var i = 0;i &lt; params.length;i++) {\r\n                        var pair = params[i].split(&#39;=&#39;);\r\n                        if (decodeURIComponent(pair[0]) != name)\r\n                              newparams .push(params[i]);\r\n                    }\r\n                    params = newparams;\r\n                    for (var i = 0; i &lt; params.length; i++) {\r\n                        if(query.length &gt; 0)\r\n                            query += &quot;&amp;&quot;;\r\n                        query += params[i];\r\n                    }\r\n                }\r\n                if(query.length &gt; 0)\r\n                    query = &quot;?&quot; + query;\r\n                if(hash.length &gt; 0)\r\n                    query = query + &quot;#&quot; + hash;\r\n                return path + query;\r\n            },\r\n        }\r\n    }\r\n\r\n\r\n    document.write(&quot;Host: &quot; + URLParser(url).getHost() + &#39;&lt;br&gt;&#39;);\r\n    document.write(&quot;Path: &quot; + URLParser(url).getPath() + &#39;&lt;br&gt;&#39;);\r\n    document.write(&quot;Query: &quot; + URLParser(url).getQuery() + &#39;&lt;br&gt;&#39;);\r\n    document.write(&quot;Hash: &quot; + URLParser(url).getHash() + &#39;&lt;br&gt;&#39;);\r\n    document.write(&quot;Params Array: &quot; + URLParser(url).getParams() + &#39;&lt;br&gt;&#39;);\r\n    document.write(&quot;Param: &quot; + URLParser(url).getParam(&#39;myparam1&#39;) + &#39;&lt;br&gt;&#39;);\r\n    document.write(&quot;Has Param: &quot; + URLParser(url).hasParam(&#39;myparam1&#39;) + &#39;&lt;br&gt;&#39;);\r\n\r\n    document.write(url + &#39;&lt;br&gt;&#39;);\r\n\r\n    // Remove the first parameter\r\n    url = URLParser(url).removeParam(&#39;myparam1&#39;);\r\n    document.write(url + &#39; - Remove the first parameter&lt;br&gt;&#39;);\r\n\r\n    // Add a third parameter\r\n    url = URLParser(url).setParam(&#39;myparam3&#39;,3);\r\n    document.write(url + &#39; - Add a third parameter&lt;br&gt;&#39;);\r\n\r\n    // Remove the second parameter\r\n    url = URLParser(url).removeParam(&#39;myparam2&#39;);\r\n    document.write(url + &#39; - Remove the second parameter&lt;br&gt;&#39;);\r\n\r\n    // Add a hash\r\n    url = URLParser(url).setHash(&#39;newhash&#39;);\r\n    document.write(url + &#39; - Set Hash&lt;br&gt;&#39;);\r\n\r\n    // Remove the last parameter\r\n    url = URLParser(url).removeParam(&#39;myparam3&#39;);\r\n    document.write(url + &#39; - Remove the last parameter&lt;br&gt;&#39;);\r\n\r\n    // Remove a parameter that doesn&#39;t exist\r\n    url = URLParser(url).removeParam(&#39;myparam3&#39;);\r\n    document.write(url + &#39; - Remove a parameter that doesn\\&quot;t exist&lt;br&gt;&#39;);\r\n"},{"score":6,"body_markdown":"&lt;!-- language-all: lang-js --&gt;\r\n\r\nThis function converts the querystring to a JSON-like object, it also handles value-less and multi-value parameters:\r\n\r\n    &quot;use strict&quot;;\r\n    function getQuerystringData(name) {\r\n        var data = { };\r\n        var parameters = window.location.search.substring(1).split(&quot;&amp;&quot;);\r\n        for (var i = 0, j = parameters.length; i &lt; j; i++) {\r\n            var parameter = parameters[i].split(&quot;=&quot;);\r\n            var parameterName = decodeURIComponent(parameter[0]);\r\n            var parameterValue = typeof parameter[1] === &quot;undefined&quot; ? parameter[1] : decodeURIComponent(parameter[1]);\r\n            var dataType = typeof data[parameterName];\r\n            if (dataType === &quot;undefined&quot;) {\r\n                data[parameterName] = parameterValue;\r\n            } else if (dataType === &quot;array&quot;) {\r\n                data[parameterName].push(parameterValue);\r\n            } else {\r\n                data[parameterName] = [data[parameterName]];\r\n                data[parameterName].push(parameterValue);\r\n            }\r\n        }\r\n        return typeof name === &quot;string&quot; ? data[name] : data;\r\n    }\r\n\r\nWe perform a check for `undefined` on `parameter[1]` because `decodeURIComponent` returns the string &quot;undefined&quot; if the variable is `undefined`, and that&#39;s wrong.\r\n\r\nUsage:\r\n\r\n    &quot;use strict&quot;;\r\n    var data = getQuerystringData();\r\n    var parameterValue = getQuerystringData(&quot;parameterName&quot;);"},{"score":4,"body_markdown":"There is a nice little `url` utility for this with some cool sugaring:\r\n\r\n    http://www.example.com/path/index.html?silly=willy#chucky=cheese\r\n\r\n    url();            // http://www.example.com/path/index.html?silly=willy#chucky=cheese\r\n    url(&#39;domain&#39;);    // example.com\r\n    url(&#39;1&#39;);         // path\r\n    url(&#39;-1&#39;);        // index.html\r\n    url(&#39;?&#39;);         // silly=willy\r\n    url(&#39;?silly&#39;);    // willy\r\n    url(&#39;?poo&#39;);      // (an empty string)\r\n    url(&#39;#&#39;);         // chucky=cheese\r\n    url(&#39;#chucky&#39;);   // cheese\r\n    url(&#39;#poo&#39;);      // (an empty string)\r\n\r\nCheck out more examples and download here: https://github.com/websanova/js-url#url"},{"score":20,"body_markdown":"One-liner to get the query:\r\n\r\n    var value = location.search.match(new RegExp(key + &quot;=(.*?)($|\\&amp;)&quot;, &quot;i&quot;))[1];\r\n"},{"score":4,"body_markdown":"***This the most simple and small function JavaScript to get int ans String parameter value from URL***\r\n\r\n    /* THIS FUNCTION IS TO FETCH INT PARAMETER VALUES */\r\n\r\n    function getParameterint(param) {\r\n                var val = document.URL;\r\n                var url = val.substr(val.indexOf(param))  \r\n                var n=parseInt(url.replace(param+&quot;=&quot;,&quot;&quot;));\r\n                alert(n); \r\n    }\r\n    getParameteraint(&quot;page&quot;);\r\n    getParameteraint(&quot;pagee&quot;);\r\n\r\n    /*THIS FUNCTION IS TO FETCH STRING PARAMETER*/\r\n    function getParameterstr(param) {\r\n                var val = document.URL;\r\n                var url = val.substr(val.indexOf(param))  \r\n                var n=url.replace(param+&quot;=&quot;,&quot;&quot;);\r\n                alert(n); \r\n    }\r\n    getParameterstr(&quot;str&quot;);\r\n\r\n**Source And DEMO :** http://bloggerplugnplay.blogspot.in/2012/08/how-to-get-url-parameter-in-javascript.html"},{"score":20,"body_markdown":"I developed a small library using techniques listed here to create an easy to use, drop-in solution to anyones troubles; It can be found here: \r\n\r\nhttps://github.com/Nijikokun/query-js\r\n\r\n**Usage**\r\n\r\nFetching specific parameter/key:\r\n\r\n    query.get(&#39;param&#39;);\r\n\r\nUsing the builder to fetch the entire object:\r\n\r\n    var storage = query.build();\r\n    console.log(storage.param);\r\n\r\nand tons more... check the github link for more examples.\r\n\r\n**Features**\r\n\r\n1. Caching on both decoding and parameters\r\n2. Supports hash query strings `#hello?page=3`\r\n3. Supports passing custom queries\r\n4. Supports Array / Object Parameters `user[]=&quot;jim&quot;&amp;user[]=&quot;bob&quot;`\r\n5. Supports empty management `&amp;&amp;`\r\n6. Supports declaration parameters without values `name&amp;hello=&quot;world&quot;`\r\n7. Supports repeated parameters `param=1&amp;param=2`\r\n8. Clean, compact, and readable source `4kb`\r\n9. AMD, Require, Node support"},{"score":25,"body_markdown":"    function GetQueryStringParams(sParam)\r\n    {\r\n        var sPageURL = window.location.search.substring(1);\r\n        var sURLVariables = sPageURL.split(&#39;&amp;&#39;);\r\n        \r\n        for (var i = 0; i &lt; sURLVariables.length; i++)\r\n        {\r\n            var sParameterName = sURLVariables[i].split(&#39;=&#39;);\r\n            if (sParameterName[0] == sParam)\r\n            {\r\n                return sParameterName[1];\r\n            }\r\n        }\r\n    }â€‹\r\n\r\n\r\nAnd this is how you can use this function assuming the URL is\r\n\r\n&gt; `http://dummy.com/?stringtext=jquery&amp;stringword=jquerybyexample`\r\n\r\n    var tech = GetQueryStringParams(&#39;stringtext&#39;);\r\n    var blog = GetQueryStringParams(&#39;stringword&#39;);\r\n"},{"score":45,"body_markdown":"From [the MDN](https://developer.mozilla.org/en-US/docs/Web/API/URLUtils/search#Get_the_value_of_a_single_search_param):\r\n\r\n\r\n    function loadPageVar (sVar) {\r\n    &#160;&#160;return unescape(window.location.search.replace(new RegExp(&quot;^(?:.*[&amp;\\\\?]&quot; + escape(sVar).replace(/[\\.\\+\\*]/g, &quot;\\\\$&amp;&quot;) + &quot;(?:\\\\=([^&amp;]*))?)?.*$&quot;, &quot;i&quot;), &quot;$1&quot;));\r\n    }\r\n\r\n    alert(loadPageVar(&quot;name&quot;));"},{"score":34,"body_markdown":"I needed an object from the query string, and I hate lots of code. It may not be the most robust in the universe, but it&#39;s just a few lines of code.\r\n\r\n    var q = {};\r\n    location.href.split(&#39;?&#39;)[1].split(&#39;&amp;&#39;).forEach(function(i){\r\n        q[i.split(&#39;=&#39;)[0]]=i.split(&#39;=&#39;)[1];\r\n    });\r\n\r\nA URL like `this.htm?hello=world&amp;foo=bar` will create:\r\n\r\n    {hello:&#39;world&#39;, foo:&#39;bar&#39;}\r\n"},{"score":4,"body_markdown":"I believe this to be an accurate and concise way to achieve this (modified from http://css-tricks.com/snippets/javascript/get-url-variables/):\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n\tfunction getQueryVariable(variable) {\r\n\t\t\r\n\t\tvar query = window.location.search.substring(1),\t\t\t// Remove the ? from the query string.\r\n\t\t\tvars = query.split(&quot;&amp;&quot;);\t\t\t\t\t\t\t\t// Split all values by ampersand.\r\n\t\t\r\n\t\tfor (var i = 0; i &lt; vars.length; i++) {\t\t\t\t\t\t// Loop through them...\r\n\t\t\tvar pair = vars[i].split(&quot;=&quot;);\t\t\t\t\t\t\t// Split the name from the value.\r\n\t\t\tif (pair[0] == variable) {\t\t\t\t\t\t\t\t// Once the requested value is found...\r\n\t\t\t\treturn ( pair[1] == undefined ) ? null : pair[1];\t// Return null if there is no value (no equals sign), otherwise return the value.\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn undefined;\t\t\t\t\t\t\t\t\t\t\t// Wasn&#39;t found.\r\n\t\t\r\n\t}"},{"score":17,"body_markdown":"A very lightweight jQuery method: \r\n\r\n\tvar qs = window.location.search.replace(&#39;?&#39;,&#39;&#39;).split(&#39;&amp;&#39;),\r\n\t\trequest = {};\r\n\t$.each(qs, function(i,v) {\r\n\t\tvar initial, pair = v.split(&#39;=&#39;);\r\n\t\tif(initial = request[pair[0]]){\r\n\t\t\tif(!$.isArray(initial)) {\r\n\t\t\t\trequest[pair[0]] = [initial]\r\n\t\t\t}\r\n\t\t\trequest[pair[0]].push(pair[1]);\r\n\t\t} else {\r\n\t\t\trequest[pair[0]] = pair[1];\r\n\t\t}\r\n\t\treturn;\r\n\t});\r\n\tconsole.log(request);\r\n\r\nAnd to alert, for example ?q\r\n\r\n\talert(request.q)\r\n"},{"score":4,"body_markdown":"If you want array-style parameters [URL.js][1] supports arbitrarily nested array-style parameters as well as string indexes (maps). It also handles URL decoding.\r\n\r\n    url.get(&quot;val[0]=zero&amp;val[1]=one&amp;val[2]&amp;val[3]=&amp;val[4]=four&amp;val[5][0]=n1&amp;val[5][1]=n2&amp;val[5][2]=n3&amp;key=val&quot;, {array:true});\r\n    // Result\r\n    {\r\n        val: [\r\n            &#39;zero&#39;,\r\n            &#39;one&#39;,\r\n            true,\r\n            &#39;&#39;,\r\n            &#39;four&#39;,\r\n            [ &#39;n1&#39;, &#39;n2&#39;, &#39;n3&#39; ]\r\n        ]\r\n        key: &#39;val&#39;\r\n    }\r\n\r\n  [1]: https://github.com/kevincox/url.js\r\n"},{"score":27,"body_markdown":"The problem with the top answer on that question is that it&#39;s not-supported parameters placed after #, but sometimes it&#39;s needed to get this value also.\r\n\r\nI modified the answer to let it parse a full query string with a hash sign also:\r\n\r\n    var getQueryStringData = function(name) {\r\n        var result = null;\r\n        var regexS = &quot;[\\\\?&amp;#]&quot; + name + &quot;=([^&amp;#]*)&quot;;\r\n        var regex = new RegExp(regexS);\r\n        var results = regex.exec(&#39;?&#39; + window.location.href.split(&#39;?&#39;)[1]);\r\n        if (results != null) {\r\n            result = decodeURIComponent(results[1].replace(/\\+/g, &quot; &quot;));\r\n        }\r\n        return result;\r\n    };\r\n"},{"score":5,"body_markdown":"I did a small URL library for my needs here: https://github.com/Mikhus/jsurl\r\n\r\nIt&#39;s a more common way of manipulating the URLs in JavaScript. Meanwhile it&#39;s really lightweight (minified and gzipped &lt; 1&amp;nbsp;KB) and has a very simple and clean API. And it does not need any other library to work.\r\n\r\nRegarding the initial question, it&#39;s very simple to do:\r\n\r\n    var u = new Url; // Current document URL\r\n    // or\r\n    var u = new Url(&#39;http://user:pass@example.com:8080/some/path?foo=bar&amp;bar=baz#anchor&#39;);\r\n\r\n    // Looking for query string parameters\r\n    alert( u.query.bar);\r\n    alert( u.query.foo);\r\n\r\n    // Modifying query string parameters\r\n    u.query.foo = &#39;bla&#39;;\r\n    u.query.woo = [&#39;hi&#39;, &#39;hey&#39;]\r\n\r\n    alert(u.query.foo);\r\n    alert(u.query.woo);\r\n    alert(u);\r\n"},{"score":26,"body_markdown":"\r\nIf you are using Browserify, you can use the `url` module from *Node.js*:\r\n\r\n    var url = require(&#39;url&#39;);\r\n    \r\n    url.parse(&#39;http://example.com/?bob=123&#39;, true).query;\r\n\r\n    // returns { &quot;bob&quot;: &quot;123&quot; }\r\n\r\nFurther reading: [**URL Node.js v0.12.2 Manual &amp; Documentation**](http://nodejs.org/api/url.html)\r\n\r\n\r\n\r\n**EDIT:** You can use [URL][3] interface, its quite widely adopted in almost all the new browser and if the code is going to run on an old browser you can use a [polyfill like this one][1]. Here&#39;s a code example on how to use URL interface to get query parameters (aka search parameters)\r\n\r\n    const url = new URL(&#39;http://example.com/?bob=123&#39;);\r\n    url.searchParams.get(&#39;bob&#39;); \r\n\r\nYou can also use URLSearchParams for it, here&#39;s [an example from MDN][2] to do it with URLSearchParams:\r\n\r\n    var paramsString = &quot;q=URLUtils.searchParams&amp;topic=api&quot;;\r\n    var searchParams = new URLSearchParams(paramsString);\r\n    \r\n    //Iterate the search parameters.\r\n    for (let p of searchParams) {\r\n      console.log(p);\r\n    }\r\n    \r\n    searchParams.has(&quot;topic&quot;) === true; // true\r\n    searchParams.get(&quot;topic&quot;) === &quot;api&quot;; // true\r\n    searchParams.getAll(&quot;topic&quot;); // [&quot;api&quot;]\r\n    searchParams.get(&quot;foo&quot;) === null; // true\r\n    searchParams.append(&quot;topic&quot;, &quot;webdev&quot;);\r\n    searchParams.toString(); // &quot;q=URLUtils.searchParams&amp;topic=api&amp;topic=webdev&quot;\r\n    searchParams.set(&quot;topic&quot;, &quot;More webdev&quot;);\r\n    searchParams.toString(); // &quot;q=URLUtils.searchParams&amp;topic=More+webdev&quot;\r\n    searchParams.delete(&quot;topic&quot;);\r\n    searchParams.toString(); // &quot;q=URLUtils.searchParams&quot;\r\n\r\n\r\n[3]: https://developer.mozilla.org/en-US/docs/Web/API/URL\r\n[1]: https://github.com/lifaon74/url-polyfill\r\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#Example"},{"score":3,"body_markdown":"If you do not wish to use a JavaScript library you can use the JavaScript string functions to parse `window.location`. Keep this code in an external .js file and you can use it over and over again in different projects.\r\n\r\n    // Example - window.location = &quot;index.htm?name=bob&quot;;\r\n\r\n    var value = getParameterValue(&quot;name&quot;);\r\n\r\n    alert(&quot;name = &quot; + value);\r\n\r\n    function getParameterValue(param)\r\n    {\r\n        var url = window.location;\r\n        var parts = url.split(&#39;?&#39;);\r\n        var params = parts[1].split(&#39;&amp;&#39;);\r\n        var val = &quot;&quot;;\r\n\r\n        for ( var i=0; i&lt;params.length; i++)\r\n        {\r\n            var paramNameVal = params[i].split(&#39;=&#39;);\r\n\r\n            if ( paramNameVal[0] == param )\r\n            {\r\n                val = paramNameVal[1];\r\n            }\r\n        }\r\n        return val;\r\n    }\r\n"},{"score":1,"body_markdown":"See this [post][1] or use this:\r\n\r\n    &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot;&gt;\r\n        $(document).ready(function()\r\n        {\r\n            var urlParams = {};\r\n            (function ()\r\n            {\r\n                var match,\r\n                pl= /\\+/g,  // Regular expression for replacing addition symbol with a space\r\n                search = /([^&amp;=]+)=?([^&amp;]*)/g,\r\n                decode = function (s) { return decodeURIComponent(s.replace(pl, &quot; &quot;)); },\r\n                query  = window.location.search.substring(1);\r\n\r\n                while (match = search.exec(query))\r\n                    urlParams[decode(match[1])] = decode(match[2]);\r\n            })();\r\n\r\n            if (urlParams[&quot;q1&quot;] === 1)\r\n            {\r\n                return 1;\r\n            }\r\n        });\r\n    &lt;/script&gt;\r\n\r\n  [1]: http://www.darlesson.com/jquery/querystring/\r\n"},{"score":2,"body_markdown":"I recommend [Dar Lessons][1] as a good plugin. I have worked with it fo  a long time. You can also use the following code.\r\nJus put `var queryObj = {};` before document.ready and put the bellow code in the beginning of document.ready. After this code you can use `queryObj[&quot;queryObjectName&quot;]` for any query object you have\r\n\r\n    \r\n    var querystring = location.search.replace(&#39;?&#39;, &#39;&#39;).split(&#39;&amp;&#39;);\r\n    for (var i = 0; i &lt; querystring.length; i++) {\r\n        var name = querystring[i].split(&#39;=&#39;)[0];\r\n        var value = querystring[i].split(&#39;=&#39;)[1];\r\n        queryObj[name] = value;\r\n    }\r\n       \r\n\r\n\r\n  [1]: http://www.darlesson.com/jquery/querystring/"},{"score":2,"body_markdown":"Use:\r\n\r\n      $(document).ready(function () {\r\n          var urlParams = {};\r\n          (function () {\r\n              var match,\r\n              pl = /\\+/g, // Regex for replacing addition symbol with a space\r\n                  search = /([^&amp;=]+)=?([^&amp;]*)/g,\r\n                  decode = function (s) {\r\n                      return decodeURIComponent(s.replace(pl, &quot; &quot;));\r\n                  },\r\n                  query = window.location.search.substring(1);\r\n\r\n              while (match = search.exec(query))\r\n                  urlParams[decode(match[1])] = decode(match[2]);\r\n          })();\r\n          if (urlParams[&quot;q1&quot;] === 1) {\r\n              return 1;\r\n          }\r\n\r\nPlease check and let me know your comments. Also refer to *[How to get querystring value using jQuery][1]*.\r\n\r\n  [1]: http://jquerybyexample.blogspot.com/2012/05/how-to-get-querystring-value-using.html\r\n"},{"score":4,"body_markdown":"There&#39;s a robust implementation in Node.js&#39;s source  \r\nhttps://github.com/joyent/node/blob/master/lib/querystring.js  \r\n\r\nAlso TJ&#39;s qs does nested params parsing  \r\nhttps://github.com/visionmedia/node-querystring  \r\n"},{"score":4,"body_markdown":"    var getUrlParameters = function (name, url) {\r\n        if (!name) {\r\n            return undefined;\r\n        }\r\n    \r\n        name = name.replace(/[\\[]/, &#39;\\\\[&#39;).replace(/[\\]]/, &#39;\\\\]&#39;);\r\n        url = url || location.search;\r\n    \r\n        var regex = new RegExp(&#39;[\\\\?&amp;#]&#39; + name + &#39;=?([^&amp;#]*)&#39;, &#39;gi&#39;), result, resultList = [];\r\n    \r\n        while (result = regex.exec(url)) {\r\n            resultList.push(decodeURIComponent(result[1].replace(/\\+/g, &#39; &#39;)));\r\n        }\r\n    \r\n        return resultList.length ? resultList.length === 1 ? resultList[0] : resultList : undefined;\r\n    };"},{"score":6,"body_markdown":"I used this code (JavaScript) to get the what is passed through the URL:\r\n\r\n    function getUrlVars() {\r\n\t\t\t\tvar vars = {};\r\n\t\t\t\tvar parts = window.location.href.replace(/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi, function(m,key,value) {\r\n\t\t\t\t\tvars[key] = value;\r\n\t\t\t\t});\r\n\t\t\t\treturn vars;\r\n\t\t\t}\r\n\r\nThen to assign the value to a variable, you only have to specify which parameter you want to get, ie if the URL is `example.com/?I=1&amp;p=2&amp;f=3`\r\n\r\nYou can do this to get the values:\r\n\r\n    var getI = getUrlVars()[&quot;I&quot;];\r\n    var getP = getUrlVars()[&quot;p&quot;];\r\n    var getF = getUrlVars()[&quot;f&quot;];\r\n\r\nthen the values would be:\r\n\r\n    getI = 1, getP = 2 and getF = 3\r\n\r\n\r\n\r\n"},{"score":4,"body_markdown":"There are many solutions to retrieve URI query values, I prefer this one because it&#39;s short and works great:\r\n\r\n    function get(name){\r\n       if(name=(new RegExp(&#39;[?&amp;]&#39;+encodeURIComponent(name)+&#39;=([^&amp;]*)&#39;)).exec(location.search))\r\n          return decodeURIComponent(name[1]);\r\n    }"},{"score":3,"body_markdown":"This is very simple method to get parameter value(query string)\r\n\r\nUse `gV(para_name)` function to retrieve its value\r\n\r\n    var a=window.location.search;\r\n    a=a.replace(a.charAt(0),&quot;&quot;); //Removes &#39;?&#39;\r\n    a=a.split(&quot;&amp;&quot;);\r\n\r\n    function gV(x){\r\n     for(i=0;i&lt;a.length;i++){\r\n      var b=a[i].substr(0,a[i].indexOf(&quot;=&quot;));\r\n      if(x==b){\r\n       return a[i].substr(a[i].indexOf(&quot;=&quot;)+1,a[i].length)}"},{"score":27,"body_markdown":"We&#39;ve just released [arg.js][1], a project aimed at solving this problem once and for all.  It&#39;s traditionally been so difficult but now you can do:\r\n\r\n    var name = Arg.get(&quot;name&quot;);\r\n\r\nor getting the whole lot:\r\n\r\n    var params = Arg.all();\r\n\r\nand if you care about the difference between `?query=true` and `#hash=true` then you can use the `Arg.query()` and `Arg.hash()` methods.\r\n\r\n  [1]: https://github.com/stretchr/arg.js"},{"score":4,"body_markdown":"If you have [Underscore.js][1] or [lodash][2], a quick and dirty way to get this done is:\r\n\r\n    _.object(window.location.search.slice(1).split(&#39;&amp;&#39;).map(function (val) { return val.split(&#39;=&#39;); }));\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Underscore.js\r\n  [2]: http://lodash.com/docs#zipObject\r\n\r\n"},{"score":244,"body_markdown":"# *tl;dr*\r\n\r\nA quick, **complete solution**, which handles **multivalued keys** and **encoded characters**.\r\n\r\n    var qd = {};\r\n    if (location.search) location.search.substr(1).split(&quot;&amp;&quot;).forEach(function(item) {var s = item.split(&quot;=&quot;), k = s[0], v = s[1] &amp;&amp; decodeURIComponent(s[1]); (qd[k] = qd[k] || []).push(v)})\r\n\r\n    //using ES6   (23 characters cooler)\r\n    var qd = {};\r\n    if (location.search) location.search.substr(1).split`&amp;`.forEach(item =&gt; {let [k,v] = item.split`=`; v = v &amp;&amp; decodeURIComponent(v); (qd[k] = qd[k] || []).push(v)})\r\n\r\n\r\n####Multi-lined:\r\n\r\n    var qd = {};\r\n    if (location.search) location.search.substr(1).split(&quot;&amp;&quot;).forEach(function(item) {\r\n        var s = item.split(&quot;=&quot;),\r\n            k = s[0],\r\n            v = s[1] &amp;&amp; decodeURIComponent(s[1]); //  null-coalescing / short-circuit\r\n        //(k in qd) ? qd[k].push(v) : qd[k] = [v]\r\n        (qd[k] = qd[k] || []).push(v) // null-coalescing / short-circuit\r\n    })\r\n\r\nWhat is all this code...  \r\n*[&quot;null-coalescing&quot;][1], [short-circuit evaluation][2]  \r\nES6 [Destructuring assignments][3], [Arrow functions][4], [Template strings][6]*\r\n####Example:\r\n\r\n    &quot;?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst&#229;le%26car%3Dsaab&quot;\r\n    &gt; qd\r\n    a: [&quot;1&quot;, &quot;5&quot;, &quot;t e x t&quot;]\r\n    b: [&quot;0&quot;]\r\n    c: [&quot;3&quot;]\r\n    d: [undefined]\r\n    e: [undefined, &quot;http://w3schools.com/my test.asp?name=st&#229;le&amp;car=saab&quot;]\r\n\r\n    &gt; qd.a[1]    // &quot;5&quot;\r\n    &gt; qd[&quot;a&quot;][1] // &quot;5&quot;\r\n\r\n&lt;br&gt;\r\n&lt;hr&gt;\r\n\r\n# Read more... about the Vanilla JavaScript solution.\r\n_To access different parts of a URL use `location.(search|hash)`_\r\n\r\n## Easiest (dummy) solution\r\n\r\n    var queryDict = {};\r\n    location.search.substr(1).split(&quot;&amp;&quot;).forEach(function(item) {queryDict[item.split(&quot;=&quot;)[0]] = item.split(&quot;=&quot;)[1]})\r\n\r\n&lt;ul&gt;\r\n&lt;li&gt;Handles &lt;b&gt;empty keys&lt;/b&gt; correctly.&lt;/li&gt;\r\n&lt;li&gt;Overrides &lt;b&gt;multi-keys&lt;/b&gt; with &lt;b&gt;last&lt;/b&gt; value found.&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n    &quot;?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5&quot;\r\n    &gt; queryDict\r\n    a: &quot;5&quot;\r\n    b: &quot;0&quot;\r\n    c: &quot;3&quot;\r\n    d: undefined\r\n    e: undefined\r\n\r\n## Multi-valued keys\r\n\r\nSimple key check `(item in dict) ? dict.item.push(val) : dict.item = [val]`\r\n\r\n    var qd = {};\r\n    location.search.substr(1).split(&quot;&amp;&quot;).forEach(function(item) {(item.split(&quot;=&quot;)[0] in qd) ? qd[item.split(&quot;=&quot;)[0]].push(item.split(&quot;=&quot;)[1]) : qd[item.split(&quot;=&quot;)[0]] = [item.split(&quot;=&quot;)[1]]})\r\n&lt;ul&gt;\r\n&lt;li&gt;Now returns &lt;b&gt;arrays&lt;/b&gt; instead.&lt;/li&gt;\r\n&lt;li&gt;Access values by &lt;code&gt;qd.key[index]&lt;/code&gt; or &lt;code&gt;qd[key][index]&lt;/code&gt;&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n    &gt; qd\r\n    a: [&quot;1&quot;, &quot;5&quot;]\r\n    b: [&quot;0&quot;]\r\n    c: [&quot;3&quot;]\r\n    d: [undefined]\r\n    e: [undefined]\r\n\r\n## Encoded characters?\r\nUse `decodeURIComponent()` for the second *or both* splits.\r\n\r\n    var qd = {};\r\n    location.search.substr(1).split(&quot;&amp;&quot;).forEach(function(item) {var k = item.split(&quot;=&quot;)[0], v = decodeURIComponent(item.split(&quot;=&quot;)[1]); (k in qd) ? qd[k].push(v) : qd[k] = [v]})\r\n\r\n####Example:\r\n\r\n    &quot;?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst&#229;le%26car%3Dsaab&quot;\r\n    &gt; qd\r\n    a: [&quot;1&quot;, &quot;5&quot;, &quot;t e x t&quot;]\r\n    b: [&quot;0&quot;]\r\n    c: [&quot;3&quot;]\r\n    d: [&quot;undefined&quot;]  // decodeURIComponent(undefined) returns &quot;undefined&quot; !!!*\r\n    e: [&quot;undefined&quot;, &quot;http://w3schools.com/my test.asp?name=st&#229;le&amp;car=saab&quot;]\r\n&lt;br&gt;\r\n&lt;hr&gt;\r\n# From comments\r\n**\\*!!!** Please note, that `decodeURIComponent(undefined)` returns string `&quot;undefined&quot;`. The solution lies in a simple usage of [`&amp;&amp;`][5], which ensures that `decodeURIComponent()` is not called on undefined values. _(See the &quot;complete solution&quot; at the top.)_\r\n\r\n    v = v &amp;&amp; decodeURIComponent(v);\r\n\r\n&lt;br&gt;\r\nIf the querystring is empty (`location.search == &quot;&quot;`), the result is somewhat misleading `qd == {&quot;&quot;: undefined}`. It is suggested to check the querystring before launching the parsing function likeso:\r\n\r\n    if (location.search) location.search.substr(1).split(&quot;&amp;&quot;).forEach(...)\r\n\r\n\r\n  [1]: https://stackoverflow.com/q/476436/985454\r\n  [2]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Short-Circuit_Evaluation\r\n  [3]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\n  [4]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\r\n  [5]: https://stackoverflow.com/a/476445/985454\r\n  [6]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals"},{"score":1,"body_markdown":"Doing this reliably is more involved than one may think at first.\r\n\r\n1. `location.search`, which is used in other answers, is brittle and should be avoided - for example, it returns empty if someone screws up and puts a `#fragment` identifier before the `?query` string.\r\n2. There are a number of ways URLs get automatically escaped in the browser, which makes `decodeURIComponent` pretty much mandatory, in my opinion.\r\n3. Many query strings are generated from user input, which means assumptions about the URL content are very bad. Including very basic things like that each key is unique or even has a value.\r\n\r\nTo solve this, here is a configurable API with a healthy dose of [defensive programming][1]. Note that it can be made half the size if you are willing to hardcode some of the variables, or if the input can never include `hasOwnProperty`, etc.\r\n\r\n**Version 1:** Returns a data object with names and values for each parameter. It effectively de-duplicates them and always respects the first one found from left-to-right.\r\n\r\n    function getQueryData(url, paramKey, pairKey, missingValue, decode) {\r\n\r\n        var query, queryStart, fragStart, pairKeyStart, i, len, name, value, result;\r\n\r\n        if (!url || typeof url !== &#39;string&#39;) {\r\n            url = location.href; // more robust than location.search, which is flaky\r\n        }\r\n        if (!paramKey || typeof paramKey !== &#39;string&#39;) {\r\n            paramKey = &#39;&amp;&#39;;\r\n        }\r\n        if (!pairKey || typeof pairKey !== &#39;string&#39;) {\r\n            pairKey = &#39;=&#39;;\r\n        }\r\n        // when you do not explicitly tell the API...\r\n        if (arguments.length &lt; 5) {\r\n            // it will unescape parameter keys and values by default...\r\n            decode = true;\r\n        }\r\n\r\n        queryStart = url.indexOf(&#39;?&#39;);\r\n        if (queryStart &gt;= 0) {\r\n            // grab everything after the very first ? question mark...\r\n            query = url.substring(queryStart + 1);\r\n        } else {\r\n            // assume the input is already parameter data...\r\n            query = url;\r\n        }\r\n        // remove fragment identifiers...\r\n        fragStart = query.indexOf(&#39;#&#39;);\r\n        if (fragStart &gt;= 0) {\r\n            // remove everything after the first # hash mark...\r\n            query = query.substring(0, fragStart);\r\n        }\r\n        // make sure at this point we have enough material to do something useful...\r\n        if (query.indexOf(paramKey) &gt;= 0 || query.indexOf(pairKey) &gt;= 0) {\r\n            // we no longer need the whole query, so get the parameters...\r\n            query = query.split(paramKey);\r\n            result = {};\r\n            // loop through the parameters...\r\n            for (i = 0, len = query.length; i &lt; len; i = i + 1) {\r\n                pairKeyStart = query[i].indexOf(pairKey);\r\n                if (pairKeyStart &gt;= 0) {\r\n                    name = query[i].substring(0, pairKeyStart);\r\n                } else {\r\n                    name = query[i];\r\n                }\r\n                // only continue for non-empty names that we have not seen before...\r\n                if (name &amp;&amp; !Object.prototype.hasOwnProperty.call(result, name)) {\r\n                    if (decode) {\r\n                        // unescape characters with special meaning like ? and #\r\n                        name = decodeURIComponent(name);\r\n                    }\r\n                    if (pairKeyStart &gt;= 0) {\r\n                        value = query[i].substring(pairKeyStart + 1);\r\n                        if (value) {\r\n                            if (decode) {\r\n                                value = decodeURIComponent(value);\r\n                            }\r\n                        } else {\r\n                            value = missingValue;\r\n                        }\r\n                    } else {\r\n                        value = missingValue;\r\n                    }\r\n                    result[name] = value;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n**Version 2:** Returns a data map object with two identical length arrays, one for names and one for values, with an index for each parameter. This one supports duplicate names and intentionally does not de-duplicate them, because that is probably why you would want to use this format.\r\n\r\n```js\r\nfunction getQueryData(url, paramKey, pairKey, missingValue, decode) {\r\n\r\n    var query, queryStart, fragStart, pairKeyStart, i, len, name, value, result;\r\n\r\n    if (!url || typeof url !== &#39;string&#39;) {\r\n          url = location.href; // more robust than location.search, which is flaky\r\n    }\r\n        if (!paramKey || typeof paramKey !== &#39;string&#39;) {\r\n            paramKey = &#39;&amp;&#39;;\r\n        }\r\n        if (!pairKey || typeof pairKey !== &#39;string&#39;) {\r\n            pairKey = &#39;=&#39;;\r\n        }\r\n        // when you do not explicitly tell the API...\r\n        if (arguments.length &lt; 5) {\r\n            // it will unescape parameter keys and values by default...\r\n            decode = true;\r\n        }\r\n\r\n        queryStart = url.indexOf(&#39;?&#39;);\r\n        if (queryStart &gt;= 0) {\r\n            // grab everything after the very first ? question mark...\r\n            query = url.substring(queryStart + 1);\r\n        } else {\r\n            // assume the input is already parameter data...\r\n            query = url;\r\n        }\r\n        // remove fragment identifiers...\r\n        fragStart = query.indexOf(&#39;#&#39;);\r\n        if (fragStart &gt;= 0) {\r\n            // remove everything after the first # hash mark...\r\n            query = query.substring(0, fragStart);\r\n        }\r\n        // make sure at this point we have enough material to do something useful...\r\n        if (query.indexOf(paramKey) &gt;= 0 || query.indexOf(pairKey) &gt;= 0) {\r\n            // we no longer need the whole query, so get the parameters...\r\n            query = query.split(paramKey);\r\n            result = {\r\n                names: [],\r\n                values: []\r\n            };\r\n            // loop through the parameters...\r\n            for (i = 0, len = query.length; i &lt; len; i = i + 1) {\r\n                pairKeyStart = query[i].indexOf(pairKey);\r\n                if (pairKeyStart &gt;= 0) {\r\n                    name = query[i].substring(0, pairKeyStart);\r\n                } else {\r\n                    name = query[i];\r\n                }\r\n                // only continue for non-empty names...\r\n                if (name) {\r\n                    if (decode) {\r\n                        // unescape characters with special meaning like ? and #\r\n                        name = decodeURIComponent(name);\r\n                    }\r\n                    if (pairKeyStart &gt;= 0) {\r\n                        value = query[i].substring(pairKeyStart + 1);\r\n                        if (value) {\r\n                            if (decode) {\r\n                                value = decodeURIComponent(value);\r\n                            }\r\n                        } else {\r\n                            value = missingValue;\r\n                        }\r\n                    } else {\r\n                        value = missingValue;\r\n                    }\r\n                    result.names.push(name);\r\n                    result.values.push(value);\r\n                }\r\n           }\r\n           return result;\r\n       }\r\n   }\r\n```\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Defensive_programming &quot;Wiki article on programming with less assumptions.&quot;"},{"score":2,"body_markdown":"This will parse variables **AND** arrays from a URL string. It uses neither *regex* or any external library.\r\n\r\n    function url2json(url) {\r\n       var obj={};\r\n       function arr_vals(arr){\r\n          if (arr.indexOf(&#39;,&#39;) &gt; 1){\r\n             var vals = arr.slice(1, -1).split(&#39;,&#39;);\r\n             var arr = [];\r\n             for (var i = 0; i &lt; vals.length; i++)\r\n                arr[i]=vals[i];\r\n             return arr;\r\n          }\r\n          else\r\n             return arr.slice(1, -1);\r\n       }\r\n       function eval_var(avar){\r\n          if (!avar[1])\r\n              obj[avar[0]] = &#39;&#39;;\r\n          else\r\n          if (avar[1].indexOf(&#39;[&#39;) == 0)\r\n             obj[avar[0]] = arr_vals(avar[1]);\r\n          else\r\n             obj[avar[0]] = avar[1];\r\n       }\r\n       if (url.indexOf(&#39;?&#39;) &gt; -1){\r\n          var params = url.split(&#39;?&#39;)[1];\r\n          if(params.indexOf(&#39;&amp;&#39;) &gt; 2){\r\n             var vars = params.split(&#39;&amp;&#39;);\r\n             for (var i in vars)\r\n                eval_var(vars[i].split(&#39;=&#39;));\r\n          }\r\n          else\r\n             eval_var(params.split(&#39;=&#39;));\r\n       }\r\n       return obj;\r\n    }\r\n\r\nExample:\r\n\r\n    var url = &quot;http://www.x.com?luckyNums=[31,21,6]&amp;name=John&amp;favFoods=[pizza]&amp;noVal&quot;\r\n    console.log(url2json(url));\r\n\r\nOutput:\r\n\r\n    [object]\r\n       noVal: &quot;&quot;\r\n       favFoods: &quot;pizza&quot;\r\n       name:     &quot;John&quot;\r\n       luckyNums:\r\n          0: &quot;31&quot;\r\n          1: &quot;21&quot;\r\n          2: &quot;6&quot;"},{"score":1,"body_markdown":"This will work... You need to call this function where you need get the parameter by passing its name...\r\n\r\n    function getParameterByName(name)\r\n    {\r\n      name = name.replace(/[\\[]/,&quot;\\\\\\[&quot;).replace(/[\\]]/,&quot;\\\\\\]&quot;);\r\n      var regexS = &quot;[\\\\?&amp;]&quot;+name+&quot;=([^&amp;#]*)&quot;;\r\n      var regex = new RegExp( regexS );\r\n      var results = regex.exec( window.location.href );\r\n      alert(results[1]);\r\n      if (results == null)\r\n        return &quot;&quot;;\r\n      else\r\n        return results[1];\r\n    }\r\n"},{"score":10,"body_markdown":"**Get all querystring parameters including checkbox values (arrays).**\r\n\r\nConsidering the correct &amp; normal use of GET parameters, the things I see it&#39;s missing, on most functions, is the support for arrays and removing the hash data.\r\n\r\nSo I wrote this function:\r\n\r\n    function qs(a){\r\n     if(!a)return {};\r\n     a=a.split(&#39;#&#39;)[0].split(&#39;&amp;&#39;);\r\n     var b=a.length,c={},d,k,v;\r\n     while(b--){\r\n      d=a[b].split(&#39;=&#39;);\r\n      k=d[0].replace(&#39;[]&#39;,&#39;&#39;),v=decodeURIComponent(d[1]||&#39;&#39;);\r\n      c[k]?typeof c[k]===&#39;string&#39;?(c[k]=[v,c[k]]):(c[k].unshift(v)):c[k]=v;\r\n     }\r\n     return c\r\n    }\r\n\r\nUsing shorthand operators &amp; while-- loop, the performance should be very good to.\r\n\r\n**Support:**\r\n\r\n1. Empty values (*key= / key*)\r\n2. Key value (*key=value*)\r\n3. Arrays (*key[]=value*)\r\n4. Hash (*the hash tag is split out*)\r\n\r\n**Notes:**\r\n\r\nIt does not support object arrays (key[key]=value)\r\n\r\nIf the space is + it remains a +.\r\n\r\nAdd `.replace(/\\+/g, &quot; &quot;)` if you need.\r\n\r\n**Usage:**\r\n\r\n    qs(&#39;array[]=1&amp;array[]=2&amp;key=value&amp;empty=&amp;empty2#hash&#39;)\r\n\r\n**Return:**\r\n\r\n    {\r\n        &quot;empty&quot;: &quot;&quot;,\r\n        &quot;key&quot;: &quot;value&quot;,\r\n        &quot;array&quot;: [\r\n            &quot;1&quot;,\r\n            &quot;2&quot;\r\n        ]\r\n    }\r\n\r\n**Demo:**\r\n\r\nhttp://jsfiddle.net/ZQMrt/1/\r\n\r\n**Info**\r\n\r\nIf you don&#39;t understand something or you can&#39;t read the function just ask. I&#39;m happy to explain what I did here.\r\n\r\n*If you think the function is unreadable and unmaintainable I&#39;m happy to rewrite the function for you, but consider that shorthand &amp; bitwise operators are always faster than a standard syntax (maybe read about shorthands and bitwise operators in the ECMA-262 book or use your favorite search engine). Rewriting the code in a standard readable syntax means performance loss.*\r\n"},{"score":4,"body_markdown":"A simple solution with plain JavaScript and [regular expressions][1]:\r\n\r\n    alert(getQueryString(&quot;p2&quot;));\r\n\r\n    function getQueryString (Param) {\r\n        return decodeURI(&quot;http://www.example.com/?p1=p11&amp;p2=p2222&quot;.replace(new RegExp(&quot;^(?:.*[&amp;?]&quot; + encodeURI(Param).replace(/[.+*]/g, &quot;$&amp;&quot;) + &quot;(?:=([^&amp;]*))?)?.*$&quot;, &quot;i&quot;), &quot;$1&quot;));\r\n    }\r\n\r\n[JsFiddle][2]\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Regular_expression\r\n  [2]: http://jsfiddle.net/QeLF3/\r\n"},{"score":1,"body_markdown":"This didn&#39;t work for me, I want to match `?b` as the `b` parameter is present, and not match `?return` as the `r` parameter, here is [my solution](https://gist.github.com/Dorian/833b37d2c7b168b7e94c).\r\n\r\n    window.query_param = function(name) {\r\n      var param_value, params;\r\n\r\n      params = location.search.replace(/^\\?/, &#39;&#39;);\r\n      params = _.map(params.split(&#39;&amp;&#39;), function(s) {\r\n        return s.split(&#39;=&#39;);\r\n      });\r\n\r\n      param_value = _.select(params, function(s) {\r\n        return s.first === name;\r\n      })[0];\r\n\r\n      if (param_value) {\r\n        return decodeURIComponent(param_value[1] || &#39;&#39;);\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n\r\n"},{"score":2,"body_markdown":"The shortest possible expression in terms of size to obtain a query object seems to be:\r\n\r\n    var params = {};\r\n    location.search.substr(1).replace(/([^&amp;=]*)=([^&amp;]*)&amp;?/g,\r\n      function () { params[decodeURIComponent(arguments[1])] = decodeURIComponent(arguments[2]); });\r\n\r\nYou can make use of the `A` element to parse a URI from a string into its `location`-like components (to get rid of `#...`, for example):\r\n\r\n    var a = document.createElement(&#39;a&#39;);\r\n    a.href = url;\r\n    // Parse a.search.substr(1)... as above\r\n"},{"score":1,"body_markdown":"Quick, easy, and fast:\r\n\r\n**The function:**\r\n\r\n    function getUrlVar() {\r\n        var result = {};\r\n        var location = window.location.href.split(&#39;#&#39;);\r\n        var parts = location[0].replace(/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi, function(m,key,value) {\r\n            result [key] = value;\r\n        });\r\n        return result;\r\n    }\r\n\r\n**Usage:**\r\n\r\n    var varRequest = getUrlVar()[&quot;theUrlVarName&quot;];\r\n"},{"score":10,"body_markdown":"For those who wants a short method (with limitations):\r\n\r\n    location.search.split(&#39;myParameter=&#39;)[1]"},{"score":1,"body_markdown":"Here is `String` prototype implementation:\r\n\r\n    String.prototype.getParam = function( str ){\r\n        str = str.replace(/[\\[]/,&quot;\\\\\\[&quot;).replace(/[\\]]/,&quot;\\\\\\]&quot;);\r\n        var regex = new RegExp( &quot;[\\\\?&amp;]*&quot;+str+&quot;=([^&amp;#]*)&quot; );\t\r\n        var results = regex.exec( this );\r\n        if( results == null ){\r\n            return &quot;&quot;;\r\n        } else {\r\n            return results[1];\r\n        }\r\n    }\r\n\r\nExample call:\r\n\r\n    var status = str.getParam(&quot;status&quot;)\r\n\r\n`str` can be a query string or url"},{"score":32,"body_markdown":"Here&#39;s an extended version of Andy E&#39;s linked &quot;Handle array-style query strings&quot;-version. Fixed a bug (`?key=1&amp;key[]=2&amp;key[]=3`; `1` is lost and replaced with `[2,3]`), made a few minor performance improvements (re-decoding of values, recalculating &quot;[&quot; position, etc.) and added a number of improvements (functionalized, support for `?key=1&amp;key=2`, support for `;` delimiters). I left the variables annoyingly short, but added comments galore to make them readable (oh, and I reused `v` within the local functions, sorry if that is confusing ;).\r\n\r\nIt will handle the following querystring...\r\n\r\n&gt; ?test=Hello&amp;person=neek&amp;person[]=jeff&amp;person[]=jim&amp;person[extra]=john&amp;test3&amp;nocache=1398914891264\r\n\r\n...making it into an object that looks like...\r\n\r\n    {\r\n        &quot;test&quot;: &quot;Hello&quot;,\r\n        &quot;person&quot;: {\r\n            &quot;0&quot;: &quot;neek&quot;,\r\n            &quot;1&quot;: &quot;jeff&quot;,\r\n            &quot;2&quot;: &quot;jim&quot;,\r\n            &quot;length&quot;: 3,\r\n            &quot;extra&quot;: &quot;john&quot;\r\n        },\r\n        &quot;test3&quot;: &quot;&quot;,\r\n        &quot;nocache&quot;: &quot;1398914891264&quot;\r\n    }\r\n\r\nAs you can see above, this version handles some measure of &quot;malformed&quot; arrays, i.e. - `person=neek&amp;person[]=jeff&amp;person[]=jim` or `person=neek&amp;person=jeff&amp;person=jim` as the key is identifiable and valid (at least in dotNet&#39;s [NameValueCollection.Add][1]):\r\n\r\n&gt; If the specified key already exists in the target NameValueCollection\r\n&gt; instance, the specified value is added to the existing comma-separated\r\n&gt; list of values in the form &quot;value1,value2,value3&quot;.\r\n\r\nIt seems [the jury is somewhat out][2] on repeated keys as there is no spec. In this case, multiple keys are stored as an (fake)array. But do note that I **do not** process values based on commas into arrays.\r\n\r\n**The code:**\r\n\r\n    getQueryStringKey = function(key) {\r\n        return getQueryStringAsObject()[key];\r\n    };\r\n\r\n\r\n    getQueryStringAsObject = function() {\r\n        var b, cv, e, k, ma, sk, v, r = {},\r\n            d = function (v) { return decodeURIComponent(v).replace(/\\+/g, &quot; &quot;); }, //# d(ecode) the v(alue)\r\n            q = window.location.search.substring(1), //# suggested: q = decodeURIComponent(window.location.search.substring(1)),\r\n            s = /([^&amp;;=]+)=?([^&amp;;]*)/g //# original regex that does not allow for ; as a delimiter:   /([^&amp;=]+)=?([^&amp;]*)/g\r\n        ;\r\n    \r\n        //# ma(make array) out of the v(alue)\r\n        ma = function(v) {\r\n            //# If the passed v(alue) hasn&#39;t been setup as an object\r\n            if (typeof v != &quot;object&quot;) {\r\n                //# Grab the cv(current value) then setup the v(alue) as an object\r\n                cv = v;\r\n                v = {};\r\n                v.length = 0;\r\n    \r\n                //# If there was a cv(current value), .push it into the new v(alue)&#39;s array\r\n                //#     NOTE: This may or may not be 100% logical to do... but it&#39;s better than loosing the original value\r\n                if (cv) { Array.prototype.push.call(v, cv); }\r\n            }\r\n            return v;\r\n        };\r\n    \r\n        //# While we still have key-value e(ntries) from the q(uerystring) via the s(earch regex)...\r\n        while (e = s.exec(q)) { //# while((e = s.exec(q)) !== null) {\r\n            //# Collect the open b(racket) location (if any) then set the d(ecoded) v(alue) from the above split key-value e(ntry) \r\n            b = e[1].indexOf(&quot;[&quot;);\r\n            v = d(e[2]);\r\n    \r\n            //# As long as this is NOT a hash[]-style key-value e(ntry)\r\n            if (b &lt; 0) { //# b == &quot;-1&quot;\r\n                //# d(ecode) the simple k(ey)\r\n                k = d(e[1]);\r\n    \r\n                //# If the k(ey) already exists\r\n                if (r[k]) {\r\n                    //# ma(make array) out of the k(ey) then .push the v(alue) into the k(ey)&#39;s array in the r(eturn value)\r\n                    r[k] = ma(r[k]);\r\n                    Array.prototype.push.call(r[k], v);\r\n                }\r\n                //# Else this is a new k(ey), so just add the k(ey)/v(alue) into the r(eturn value)\r\n                else {\r\n                    r[k] = v;\r\n                }\r\n            }\r\n            //# Else we&#39;ve got ourselves a hash[]-style key-value e(ntry) \r\n            else {\r\n                //# Collect the d(ecoded) k(ey) and the d(ecoded) sk(sub-key) based on the b(racket) locations\r\n                k = d(e[1].slice(0, b));\r\n                sk = d(e[1].slice(b + 1, e[1].indexOf(&quot;]&quot;, b)));\r\n    \r\n                //# ma(make array) out of the k(ey) \r\n                r[k] = ma(r[k]);\r\n                        \r\n                //# If we have a sk(sub-key), plug the v(alue) into it\r\n                if (sk) { r[k][sk] = v; }\r\n                //# Else .push the v(alue) into the k(ey)&#39;s array\r\n                else { Array.prototype.push.call(r[k], v); }\r\n            }\r\n        }\r\n    \r\n        //# Return the r(eturn value)\r\n        return r;\r\n    };\r\n\r\n\r\n  [1]: http://msdn.microsoft.com/en-us/library/xsc9a449.aspx\r\n  [2]: https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys"},{"score":12,"body_markdown":"Here&#39;s what I&#39;m using:\r\n\r\n    /**\r\n     * Examples:\r\n     * getUrlParams()[&#39;myparam&#39;]    // url defaults to the current page\r\n     * getUrlParams(url)[&#39;myparam&#39;] // url can be just a query string\r\n     *\r\n     * Results of calling `getUrlParams(url)[&#39;myparam&#39;]` with various urls:\r\n     * example.com                               (undefined)\r\n     * example.com?                              (undefined)\r\n     * example.com?myparam                       (empty string)\r\n     * example.com?myparam=                      (empty string)\r\n     * example.com?myparam=0                     (the string &#39;0&#39;)\r\n     * example.com?myparam=0&amp;myparam=override    (the string &#39;override&#39;)\r\n     *\r\n     * Origin: http://stackoverflow.com/a/23946023/2407309\r\n     */\r\n    function getUrlParams (url) {\r\n    \tvar urlParams = {} // return value\r\n    \tvar queryString = getQueryString()\r\n    \tif (queryString) {\r\n    \t\tvar keyValuePairs = queryString.split(&#39;&amp;&#39;)\r\n    \t\tfor (var i = 0; i &lt; keyValuePairs.length; i++) {\r\n    \t\t\tvar keyValuePair = keyValuePairs[i].split(&#39;=&#39;)\r\n    \t\t\tvar paramName = keyValuePair[0]\r\n    \t\t\tvar paramValue = keyValuePair[1] || &#39;&#39;\r\n    \t\t\turlParams[paramName] = decodeURIComponent(paramValue.replace(/\\+/g, &#39; &#39;))\r\n    \t\t}\r\n    \t}\r\n    \treturn urlParams // functions below\r\n    \tfunction getQueryString () {\r\n    \t\tvar reducedUrl = url || window.location.search\r\n    \t\treducedUrl = reducedUrl.split(&#39;#&#39;)[0] // Discard fragment identifier.\r\n    \t\tvar queryString = reducedUrl.split(&#39;?&#39;)[1]\r\n    \t\tif (!queryString) {\r\n    \t\t\tif (reducedUrl.search(&#39;=&#39;) !== false) { // URL is a query string.\r\n    \t\t\t\tqueryString = reducedUrl\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\treturn queryString\r\n    \t} // getQueryString\r\n    } // getUrlParams\r\n\r\nReturning &#39;override&#39; rather than &#39;0&#39; in the last case makes it consistent with PHP. Works in IE7.\r\n\r\n"},{"score":3,"body_markdown":"Most pretty but basic:\r\n\r\n    data = {};\r\n    $.each(\r\n        location.search.substr(1).split(&#39;&amp;&#39;).filter(Boolean).map(function(kvpairs){\r\n            return kvpairs.split(&#39;=&#39;)\r\n        }),\r\n        function(i,values) {\r\n            data[values.shift()] = values.join(&#39;=&#39;)\r\n        }\r\n    );\r\n\r\nIt doesn&#39;t handle values lists such as `?a[]=1&amp;a[]2`"},{"score":0,"body_markdown":"    // Parse query string\r\n    var params = {}, queryString = location.hash.substring(1),\r\n        regex = /([^&amp;=]+)=([^&amp;]*)/g,\r\n        m;\r\n    while (m = regex.exec(queryString)) {\r\n        params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\r\n    }"},{"score":1,"body_markdown":"This function will return a parsed JavaScript object with any arbitrarily nested values using recursion as necessary.\r\n\r\nHere&#39;s a [jsfiddle][1] example.\r\n\r\n    [\r\n      &#39;?a=a&#39;,\r\n      &#39;&amp;b=a&#39;,\r\n      &#39;&amp;b=b&#39;,\r\n      &#39;&amp;c[]=a&#39;,\r\n      &#39;&amp;c[]=b&#39;,\r\n      &#39;&amp;d[a]=a&#39;,\r\n      &#39;&amp;d[a]=x&#39;,\r\n      &#39;&amp;e[a][]=a&#39;,\r\n      &#39;&amp;e[a][]=b&#39;,\r\n      &#39;&amp;f[a][b]=a&#39;,\r\n      &#39;&amp;f[a][b]=x&#39;,\r\n      &#39;&amp;g[a][b][]=a&#39;,\r\n      &#39;&amp;g[a][b][]=b&#39;,\r\n      &#39;&amp;h=%2B+%25&#39;,\r\n      &#39;&amp;i[aa=b&#39;,\r\n      &#39;&amp;i[]=b&#39;,\r\n      &#39;&amp;j=&#39;,\r\n      &#39;&amp;k&#39;,\r\n      &#39;&amp;=l&#39;,\r\n      &#39;&amp;abc=foo&#39;,\r\n      &#39;&amp;def=%5Basf%5D&#39;,\r\n      &#39;&amp;ghi=[j%3Dkl]&#39;,\r\n      &#39;&amp;xy%3Dz=5&#39;,\r\n      &#39;&amp;foo=b%3Dar&#39;,\r\n      &#39;&amp;xy%5Bz=5&#39;\r\n    ].join(&#39;&#39;);\r\n\r\nGiven any of the above test examples.\r\n\r\n    var qs = function(a) {\r\n      var b, c, e;\r\n      b = {};\r\n      c = function(d) {\r\n        return d &amp;&amp; decodeURIComponent(d.replace(/\\+/g, &quot; &quot;));\r\n      };\r\n      e = function(f, g, h) {\r\n        var i, j, k, l;\r\n        h = h ? h : null;\r\n        i = /(.+?)\\[(.+?)?\\](.+)?/g.exec(g);\r\n        if (i) {\r\n          [j, k, l] = [i[1], i[2], i[3]]\r\n          if (k === void 0) {\r\n            if (f[j] === void 0) {\r\n              f[j] = [];\r\n            }\r\n            f[j].push(h);\r\n          } else {\r\n            if (typeof f[j] !== &quot;object&quot;) {\r\n              f[j] = {};\r\n            }\r\n            if (l) {\r\n              e(f[j], k + l, h);\r\n            } else {\r\n              e(f[j], k, h);\r\n            }\r\n          }\r\n        } else {\r\n          if (f.hasOwnProperty(g)) {\r\n            if (Array.isArray(f[g])) {\r\n              f[g].push(h);\r\n            } else {\r\n              f[g] = [].concat.apply([f[g]], [h]);\r\n            }\r\n          } else {\r\n            f[g] = h;\r\n          }\r\n          return f[g];\r\n        }\r\n      };\r\n      a.replace(/^(\\?|#)/, &quot;&quot;).replace(/([^#&amp;=?]+)?=?([^&amp;=]+)?/g, function(m, n, o) {\r\n        n &amp;&amp; e(b, c(n), c(o));\r\n      });\r\n      return b;\r\n    };\r\n\r\n  [1]: http://jsfiddle.net/WZHm5/3/"}],"score":2696}