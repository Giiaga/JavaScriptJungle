{"body":"I have a web server written in [Node.js][1] and I would like to launch with a specific folder. I&#39;m not sure how to access arguments in JavaScript. I&#39;m running node like this:\r\n\r\n    $ node server.js folder\r\n\r\nhere `server.js` is my server code. Node.js help says this is possible:\r\n\r\n    $ node -h\r\n    Usage: node [options] script.js [arguments]\r\n\r\nHow would I access those arguments in JavaScript? Somehow I was not able to find this information on the web.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Node.js\r\n","title":"How do I pass command line arguments to a Node.js program?","answers":[{"score":3160,"body_markdown":"Standard Method (no library)\r\n====\r\n\r\nThe arguments are stored in `process.argv`\r\n\r\nHere are [the node docs on handling command line args:](http://nodejs.org/docs/latest/api/process.html#process_process_argv)\r\n\r\n&gt; `process.argv` is an array containing the command line arguments. The first element will be &#39;node&#39;, the second element will be the name of the JavaScript file. The next elements will be any additional command line arguments.\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // print process.argv\r\n    process.argv.forEach(function (val, index, array) {\r\n      console.log(index + &#39;: &#39; + val);\r\n    });\r\n\r\nThis will generate:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    $ node process-2.js one two=three four\r\n    0: node\r\n    1: /Users/mjr/work/node/process-2.js\r\n    2: one\r\n    3: two=three\r\n    4: four"},{"score":717,"body_markdown":"To normalize the arguments like a regular javascript function would receive, I do this in my node.js shell scripts:\r\n\r\n    var args = process.argv.slice(2);\r\n\r\nNote that the first arg is usually the path to nodejs, and the second arg is the location of the script you&#39;re executing."},{"score":126,"body_markdown":"Optimist (node-optimist)\r\n====\r\n\r\nCheck out [optimist library](https://github.com/substack/node-optimist), it is much better than parsing command line options by hand.\r\n\r\n**Update**\r\n\r\nOptimist is deprecated. Try [yargs](https://github.com/yargs/yargs) which is an active fork of optimist."},{"score":83,"body_markdown":"# [Commander.js](https://github.com/visionmedia/commander.js)\r\n\r\nWorks great for defining your options, actions, and arguments. It also generates the help pages for you.\r\n\r\n# [Promptly](https://github.com/IndigoUnited/node-promptly)\r\n\r\nWorks great for getting input from the user, if you like the callback approach.\r\n\r\n# [Co-Prompt](https://github.com/visionmedia/co-prompt)\r\n\r\nWorks great for getting input from the user, if you like the generator approach."},{"score":13,"body_markdown":"It&#39;s probably a good idea to manage your configuration in a centralized manner using something like **nconf** https://github.com/flatiron/nconf\r\n\r\nIt helps you work with configuration files, environment variables, command-line arguments."},{"score":50,"body_markdown":"If your script is called myScript.js and you want to pass the first and last name, &#39;Sean Worthington&#39;, as arguments like below:\r\n\r\n    node myScript.js Sean Worthington\r\n\r\nThen within your script you write:\r\n\r\n    var firstName = process.argv[2]; // Will be set to &#39;Sean&#39;\r\n    var lastName = process.argv[3]; // Will be set to &#39;Worthington&#39;\r\n"},{"score":60,"body_markdown":"Stdio Library\r\n====\r\n\r\nThe easiest way to parse command-line arguments in NodeJS is using the [stdio][1] module. Inspired by UNIX `getopt` utility, it is as trivial as follows:\r\n\r\n    var stdio = require(&#39;stdio&#39;);\r\n    var ops = stdio.getopt({\r\n        &#39;check&#39;: {key: &#39;c&#39;, args: 2, description: &#39;What this option means&#39;},\r\n        &#39;map&#39;: {key: &#39;m&#39;, description: &#39;Another description&#39;},\r\n        &#39;kaka&#39;: {args: 1, required: true},\r\n        &#39;ooo&#39;: {key: &#39;o&#39;}\r\n    });\r\n\r\nIf you run the previous code with this command:\r\n\r\n    node &lt;your_script.js&gt; -c 23 45 --map -k 23 file1 file2\r\n\r\nThen `ops` object will be as follows:\r\n\r\n    { check: [ &#39;23&#39;, &#39;45&#39; ],\r\n      args: [ &#39;file1&#39;, &#39;file2&#39; ],\r\n      map: true,\r\n      kaka: &#39;23&#39; }\r\n\r\nSo you can use it as you want. For instance:\r\n\r\n    if (ops.kaka &amp;&amp; ops.check) {\r\n        console.log(ops.kaka + ops.check[0]);\r\n    }\r\n\r\nGrouped options are also supported, so you can write `-om` instead of `-o -m`.\r\n\r\nFurthermore, `stdio` can generate a help/usage output automatically. If you call `ops.printHelp()` you&#39;ll get the following:\r\n\r\n    USAGE: node something.js [--check &lt;ARG1&gt; &lt;ARG2&gt;] [--kaka] [--ooo] [--map]\r\n      -c, --check &lt;ARG1&gt; &lt;ARG2&gt;   What this option means (mandatory)\r\n      -k, --kaka                  (mandatory)\r\n      --map                       Another description\r\n      -o, --ooo\r\n\r\nThe previous message is shown also if a mandatory option is not given (preceded by the error message) or if it is mispecified (for instance, if you specify a single arg for an option and it needs 2).\r\n\r\nYou can install [stdio][2] module using [NPM][3]:\r\n\r\n    npm install stdio\r\n\r\n  [1]: https://npmjs.org/stdio\r\n  [2]: https://npmjs.org/stdio\r\n  [3]: https://npmjs.org/"},{"score":6,"body_markdown":"You can parse all arguments and check if they exist. \r\n\r\nfile: parse-cli-arguments.js:\r\n\r\n    module.exports = function(requiredArguments){\r\n        var arguments = {};\r\n    \r\n        for (var index = 0; index &lt; process.argv.length; index++) {\r\n            var re = new RegExp(&#39;--([A-Za-z0-9_]+)=([A/-Za-z0-9_]+)&#39;),\r\n                matches = re.exec(process.argv[index]);\r\n\r\n            if(matches !== null) {\r\n                arguments[matches[1]] = matches[2];\r\n            }\r\n        }\r\n    \r\n        for (var index = 0; index &lt; requiredArguments.length; index++) {\r\n            if (arguments[requiredArguments[index]] === undefined) {\r\n                throw(requiredArguments[index] + &#39; not defined. Please add the argument with --&#39; + requiredArguments[index]);\r\n            }\r\n        }\r\n    \r\n        return arguments;\r\n    }\r\n\r\n\r\nThan just do:\r\n\r\n    var arguments = require(&#39;./parse-cli-arguments&#39;)([&#39;foo&#39;, &#39;bar&#39;, &#39;xpto&#39;]);"},{"score":101,"body_markdown":"Several great answers here, but it all seems very complex. This is very similar to how bash scripts access argument values and it&#39;s already provided standard with node.js as MooGoo pointed out.\r\n(Just to make it understandable to somebody that&#39;s new to node.js)\r\n\r\nExample:\r\n\r\n    $ node yourscript.js banana monkey\r\n\r\n    var program_name = process.argv[0]; //value will be &quot;node&quot;\r\n    var script_path = process.argv[1]; //value will be &quot;yourscript.js&quot;\r\n    var first_value = process.argv[2]; //value will be &quot;banana&quot;\r\n    var second_value = process.argv[3]; //value will be &quot;monkey&quot;"},{"score":387,"body_markdown":"The up-to-date *right* answer for this it to use the [minimist](https://www.npmjs.org/package/minimist) library. We used to use [node-optimist](https://github.com/substack/node-optimist#deprecation-notice) but it has since been deprecated. \r\n\r\nHere is an example of how to use it taken straight from the minimist documentation:\r\n\r\n    var argv = require(&#39;minimist&#39;)(process.argv.slice(2));\r\n    console.dir(argv);\r\n\r\n-\r\n\r\n    $ node example/parse.js -a beep -b boop\r\n    { _: [], a: &#39;beep&#39;, b: &#39;boop&#39; }\r\n\r\n-\r\n\r\n    $ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz\r\n    { _: [ &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39; ],\r\n      x: 3,\r\n      y: 4,\r\n      n: 5,\r\n      a: true,\r\n      b: true,\r\n      c: true,\r\n      beep: &#39;boop&#39; }"},{"score":24,"body_markdown":"There&#39;s an app for that. Well, module. Well, more than one, probably hundreds.\r\n\r\n[Yargs][1] is one of the fun ones, its docs are cool to read.\r\n\r\nHere&#39;s an example from the github/npm page:\r\n\r\n    #!/usr/bin/env node\r\n    var argv = require(&#39;yargs&#39;).argv;\r\n    console.log(&#39;(%d,%d)&#39;, argv.x, argv.y);\r\n    console.log(argv._);\r\n\r\nOutput is here (it reads options with dashes etc, short and long, numeric etc).\r\n\r\n    $ ./nonopt.js -x 6.82 -y 3.35 rum\r\n    (6.82,3.35)\r\n    [ &#39;rum&#39; ] \r\n    $ ./nonopt.js &quot;me hearties&quot; -x 0.54 yo -y 1.12 ho\r\n    (0.54,1.12)\r\n    [ &#39;me hearties&#39;, &#39;yo&#39;, &#39;ho&#39; ]\r\n\r\n\r\n  [1]: https://www.npmjs.com/package/yargs"},{"score":29,"body_markdown":"[command-line-args](https://github.com/75lb/command-line-args/) is worth a look!\r\n\r\nYou can set options using the main notation standards ([learn more](https://github.com/75lb/command-line-args/wiki/Notation-rules)). These commands are all equivalent, setting the same values:\r\n\r\n    $ example --verbose --timeout=1000 --src one.js --src two.js\r\n    $ example --verbose --timeout 1000 --src one.js two.js\r\n    $ example -vt 1000 --src one.js two.js\r\n    $ example -vt 1000 one.js two.js\r\n\r\nTo access the values, first create a list of [option definitions](https://github.com/75lb/command-line-args/blob/master/doc/option-definition.md) describing the options your application accepts. The [`type`](https://github.com/75lb/command-line-args/blob/master/doc/option-definition.md#optiontype--function) property is a setter function (the value supplied is passed through this), giving you full control over the value received.\r\n\r\n    const optionDefinitions = [\r\n      { name: &#39;verbose&#39;, alias: &#39;v&#39;, type: Boolean },\r\n      { name: &#39;src&#39;, type: String, multiple: true, defaultOption: true },\r\n      { name: &#39;timeout&#39;, alias: &#39;t&#39;, type: Number }\r\n    ]\r\n\r\nNext, parse the options using [commandLineArgs()](https://github.com/75lb/command-line-args/blob/master/doc/API.md#commandlineargsoptiondefinitions-options--object-):\r\n\r\n    const commandLineArgs = require(&#39;command-line-args&#39;)\r\n    const options = commandLineArgs(optionDefinitions)\r\n\r\n`options` now looks like this:\r\n\r\n    {\r\n      src: [\r\n        &#39;one.js&#39;,\r\n        &#39;two.js&#39;\r\n      ],\r\n      verbose: true,\r\n      timeout: 1000\r\n    }\r\n\r\n### Advanced usage\r\n\r\nBeside the above typical usage, you can configure command-line-args to accept more advanced syntax forms.\r\n\r\n[Command-based syntax](https://github.com/75lb/command-line-args/wiki/Implement-command-parsing-(git-style)) (git style) in the form:\r\n\r\n    $ executable &lt;command&gt; [options]\r\n\r\nFor example.\r\n\r\n    $ git commit --squash -m &quot;This is my commit message&quot;\r\n\r\n[Command and sub-command syntax](https://github.com/75lb/command-line-args/wiki/Implement-multiple-command-parsing-(docker-style)) (docker style) in the form:\r\n\r\n    $ executable &lt;command&gt; [options] &lt;sub-command&gt; [options]\r\n\r\nFor example.\r\n\r\n    $ docker run --detached --image centos bash -c yum install -y httpd\r\n\r\n## Usage guide generation\r\n\r\nA usage guide (typically printed when `--help` is set) can be generated using [command-line-usage](https://github.com/75lb/command-line-usage). See the examples below and [read the documentation](https://github.com/75lb/command-line-usage) for instructions how to create them.\r\n\r\nA typical usage guide example.\r\n\r\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/footer.png)\r\n\r\nThe [polymer-cli](https://github.com/Polymer/polymer-cli/) usage guide is a good real-life example.\r\n\r\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/polymer.png)\r\n\r\n## Further Reading\r\n\r\nThere is plenty more to learn, please see [the wiki](https://github.com/75lb/command-line-args/wiki) for examples and documentation.\r\n"},{"score":10,"body_markdown":"Passing,parsing arguments is an easy process. Node provides you with the process.argv property, which is an array of strings, which are the arguments that were used when Node was invoked. \nThe first entry of the array is the Node executable, and the second entry is the name of your script. \n\nIf you run script with below atguments\n\n    $ node args.js arg1 arg2\n\nFile : args.js\n\n    console.log(process.argv)\n\nYou will get array like\n\n     [&#39;node&#39;,&#39;args.js&#39;,&#39;arg1&#39;,&#39;arg2&#39;]"},{"score":333,"body_markdown":"# 2018 answer based on current trends in the wild:\r\n\r\n---\r\n\r\n## Vanilla javascript argument parsing:\r\n\r\n    const args = process.argv;\r\n    console.log(args);\r\n\r\nThis returns:\r\n\r\n    $ node server.js one two=three four\r\n    [&#39;node&#39;, &#39;/home/server.js&#39;, &#39;one&#39;, &#39;two=three&#39;, &#39;four&#39;]\r\n\r\n[Official docs](https://nodejs.org/docs/latest/api/process.html#process_process_argv)\r\n\r\n---\r\n## Most used NPM packages for argument parsing:\r\n\r\n**[Minimist](https://github.com/substack/minimist)**: For minimal argument parsing.\r\n\r\n**[Commander.js](https://github.com/tj/commander.js)**: Most adopted module for argument parsing.\r\n\r\n**[Meow](https://github.com/sindresorhus/meow)**: Lighter alternative to Commander.js\r\n\r\n**[Yargs](https://github.com/bcoe/yargs)**: More sophisticated argument parsing (heavy).\r\n\r\n**[Vorpal.js](https://github.com/dthree/vorpal)**: Mature / interactive command-line applications with argument parsing.\r\n"},{"score":9,"body_markdown":"    npm install ps-grab\r\n\r\n##If you want to run something like this :    \r\n \r\n\r\n    node greeting.js --user Abdennour --website http://abdennoor.com \r\n\r\n--\r\n     \r\n    var grab=require(&#39;ps-grab&#39;);\r\n    grab(&#39;--username&#39;) // return &#39;Abdennour&#39;\r\n    grab(&#39;--action&#39;) // return &#39;http://abdennoor.com&#39;\r\n\r\n____\r\nOr something like : \r\n\r\n    node vbox.js -OS redhat -VM template-12332 ;\r\n\r\n--\r\n\r\n\r\n    var grab=require(&#39;ps-grab&#39;);\r\n    grab(&#39;-OS&#39;) // return &#39;redhat&#39;\r\n    grab(&#39;-VM&#39;) // return &#39;template-12332&#39;"},{"score":7,"body_markdown":"You can reach command line arguments using `system.args`. And i use the solution below to parse arguments into an object, so i can get which one i want by name.\r\n\r\n    var system = require(&#39;system&#39;);\r\n    \r\n    var args = {};\r\n    system.args.map(function(x){return x.split(&quot;=&quot;)})\r\n        .map(function(y){args[y[0]]=y[1]});\r\n\r\nnow you don&#39;t need to know the index of the argument. use it like `args.whatever`\r\n\r\n&gt; Note: you should use named arguments like `file.js x=1 y=2` to use\r\n&gt; this solution.\r\n\r\n"},{"score":-4,"body_markdown":"A simple snippet if any need it:\r\n\r\n    var fs = require(&#39;fs&#39;), objMod = {};\r\n    \r\n    process.argv.slice(2).map(function(y, i) {\r\n      y = y.split(&#39;=&#39;);\r\n      if (y[0] &amp;&amp; y[1]) objMod[y[0]] = y[1];\r\n      else console.log(&#39;Error in argument number &#39; + (i+1));\r\n    });\r\n\r\n"},{"score":4,"body_markdown":"&lt;h1&gt;Without libraries&lt;/h1&gt;\r\n\r\nIf you want to do this in vanilla JS/ES6 you can use the following solution\r\n\r\nworked only in **NodeJS &gt; 6** \r\n\r\n    const args = process.argv\r\n      .slice(2)\r\n      .map((val, i)=&gt;{\r\n        let object = {};\r\n        let [regexForProp, regexForVal] = (() =&gt; [new RegExp(&#39;^(.+?)=&#39;), new RegExp(&#39;\\=(.*)&#39;)] )();\r\n        let [prop, value] = (() =&gt; [regexForProp.exec(val), regexForVal.exec(val)] )();\r\n        if(!prop){\r\n          object[val] = true;\r\n          return object;\r\n        } else {\r\n          object[prop[1]] = value[1] ;\r\n          return object\r\n        }\r\n      })\r\n      .reduce((obj, item) =&gt; {\r\n        let prop = Object.keys(item)[0];\r\n        obj[prop] = item[prop];\r\n        return obj;\r\n      }, {});\r\n    \r\n And this command\r\n\r\n    node index.js host=http://google.com port=8080 production\r\n\r\nwill produce the following result\r\n   \r\n    console.log(args);//{ host:&#39;http://google.com&#39;,port:&#39;8080&#39;,production:true }\r\n    console.log(args.host);//http://google.com\r\n    console.log(args.port);//8080\r\n    console.log(args.production);//true\r\n\r\n\r\n\r\n\r\n\r\n\r\np.s. Please correct the code in map and reduce function\r\nif you find more elegant solution, thanks ;)\r\n\r\n\r\n\r\n\r\n\r\n"},{"score":12,"body_markdown":"whithout librairies: using Array.prototype.reduce()\r\n===\r\n    const args = process.argv.slice(2).reduce((acc, arg) =&gt; {\r\n    \r\n    \tlet [k, v = true] = arg.split(&#39;=&#39;)\r\n    \tacc[k] = v\r\n    \treturn acc\r\n    \r\n    }, {})\r\n\r\nfor this command ```node index.js count=2 print debug=false msg=hi```\r\n\r\n    console.log(args) // { count: &#39;2&#39;, print: true, debug: &#39;false&#39;, msg: &#39;hi&#39; }\r\n\r\nalso,\r\n--\r\nwe can change \r\n\r\n    \tlet [k, v = true] = arg.split(&#39;=&#39;)\r\n        acc[k] = v\r\nby (much longer)\r\n\r\n    \tlet [k, v] = arg.split(&#39;=&#39;)\r\n\t\tacc[k] = v === undefined ? true : /true|false/.test(v) ? v === &#39;true&#39; : /[\\d|\\.]+/.test(v) ? Number(v) : v\r\nto auto parse Boolean &amp; Number\r\n\r\n    console.log(args) // { count: 2, print: true, debug: false, msg: &#39;hi&#39; }\r\n"},{"score":0,"body_markdown":"as stated in the node docs \r\nThe process.argv property returns an array containing the command line arguments passed when the Node.js process was launched.\r\n\r\nFor example, assuming the following script for process-args.js:\r\n\r\n    // print process.argv\r\n    process.argv.forEach((val, index) =&gt; {\r\n       console.log(`${index}: ${val}`);\r\n    });\r\n\r\nLaunching the Node.js process as:\r\n\r\n     $ node process-args.js one two=three four\r\n\r\nWould generate the output:\r\n    \r\n    0: /usr/local/bin/node\r\n    1: /Users/mjr/work/node/process-args.js\r\n    2: one\r\n    3: two=three\r\n    4: four"},{"score":0,"body_markdown":"Most of the people have given good answers. I would also like to contribute something here. I am providing the answer using `lodash` library to iterate through all command line arguments we pass while starting the app:\r\n\r\n    // Lodash library\r\n    const _ = require(&#39;lodash&#39;);\r\n    \r\n    // Function that goes through each CommandLine Arguments and prints it to the console.\r\n    const runApp = () =&gt; {\r\n    \t_.map(process.argv, (arg) =&gt; {\r\n    \t\tconsole.log(arg);\r\n    \t});\r\n    };\r\n    \r\n    // Calling the function.\r\n    runApp();\r\nTo run above code just run following commands:\r\n\r\n    npm install\r\n    node index.js xyz abc 123 456\r\nThe result will be:\r\n\r\n    xyz \r\n    abc \r\n    123\r\n    456"},{"score":3,"body_markdown":"The simplest way of retrieving arguments in Node.js is via the process.argv array. This is a global object that you can use without importing any additional libraries to use it. You simply need to pass arguments to a Node.js application, just like we showed earlier, and these arguments can be accessed within the application via the process.argv array.\r\n\r\nThe first element of the process.argv array will always be a file system path pointing to the node executable. The second element is the name of the JavaScript file that is being executed. And the third element is the first argument that was actually passed by the user.\r\n\r\n    &#39;use strict&#39;;\r\n    \r\n    for (let j = 0; j &lt; process.argv.length; j++) {  \r\n        console.log(j + &#39; -&gt; &#39; + (process.argv[j]));\r\n    }\r\n\r\nAll this script does is loop through the process.argv array and prints the indexes, along with the elements stored in those indexes. It&#39;s very useful for debugging if you ever question what arguments you&#39;re receiving, and in what order.\r\n\r\nYou can also use libraries like yargs for working with commnadline arguments."},{"score":1,"body_markdown":"`process.argv` is your friend, capturing command line args is natively supported in Node JS. See example below::\r\n\r\n    process.argv.forEach((val, index) =&gt; {\r\n      console.log(`${index}: ${val}`);\r\n    })"},{"score":9,"body_markdown":"**proj.js**\r\n\r\n    for(var i=0;i&lt;process.argv.length;i++){\r\n      console.log(process.argv[i]);\r\n    }\r\n\r\n**Terminal:**\r\n\r\n    nodemon app.js &quot;arg1&quot; &quot;arg2&quot; &quot;arg3&quot;\r\n\r\n**Result:**\r\n\r\n    0 &#39;C:\\\\Program Files\\\\nodejs\\\\node.exe&#39;\r\n    1 &#39;C:\\\\Users\\\\Nouman\\\\Desktop\\\\Node\\\\camer nodejs\\\\proj.js&#39;\r\n    2 &#39;arg1&#39; your first argument you passed.\r\n    3 &#39;arg2&#39; your second argument you passed.\r\n    4 &#39;arg3&#39; your third argument you passed.\r\n\r\n**Explaination:**\r\n\r\n`0` : The directory of node.exe in your maching (C:\\Program Files\\nodejs\\node.exe&#39;)\r\n\r\n`1` :  The directory of your project file. (proj.js)\r\n\r\n`2` :  Your first argument to node (arg1)\r\n\r\n`3` :  Your second argument to node (arg2)\r\n\r\n`4` :  Your third argument to node (arg3)\r\n\r\nyour actual arguments start form `2nd` index of `argv` array, that is `process.argv[2]`."},{"score":25,"body_markdown":"Here&#39;s my 0-dep solution for named arguments:\r\n\r\n    const args = process.argv\r\n        .slice(2)\r\n        .map(arg =&gt; arg.split(&#39;=&#39;))\r\n        .reduce((args, [value, key]) =&gt; {\r\n            args[value] = key;\r\n            return args;\r\n        }, {});\r\n\r\n    console.log(args.foo)\r\n    console.log(args.fizz)\r\n\r\nExample:\r\n\r\n    $ node test.js foo=bar fizz=buzz\r\n    bar\r\n    buzz\r\n\r\nNote: Naturally this will fail when the argument contains a `=`. This is only for very simple usage."},{"score":4,"body_markdown":"Although Above answers are perfect, and someone has already suggested yargs, using the package is really easy.\r\nThis is a nice package which makes passing arguments to command line really easy.\r\n\r\n\r\n    npm i yargs\r\n    const yargs = require(&quot;yargs&quot;);\r\n    const argv = yargs.argv;\r\n    console.log(argv);\r\n\r\n\r\n\r\nPlease visit https://yargs.js.org/ for more info."},{"score":66,"body_markdown":"# No Libs with Flags Formatted into a Simple Object\n\n```js\nfunction getArgs () {\n    const args = {};\n    process.argv\n        .slice(2, process.argv.length)\n        .forEach( arg =&gt; {\n        // long arg\n        if (arg.slice(0,2) === &#39;--&#39;) {\n            const longArg = arg.split(&#39;=&#39;);\n            const longArgFlag = longArg[0].slice(2,longArg[0].length);\n            const longArgValue = longArg.length &gt; 1 ? longArg[1] : true;\n            args[longArgFlag] = longArgValue;\n        }\n        // flags\n        else if (arg[0] === &#39;-&#39;) {\n            const flags = arg.slice(1,arg.length).split(&#39;&#39;);\n            flags.forEach(flag =&gt; {\n            args[flag] = true;\n            });\n        }\n    });\n    return args;\n}\nconst args = getArgs();\nconsole.log(args);\n```\n\n# Examples\n\n## Simple\ninput\n\n```sh\nnode test.js -D --name=Hello\n```\n\noutput\n\n```js\n{ D: true, name: &#39;Hello&#39; }\n```\n\n## Real World\n\ninput\n\n```sh\nnode config/build.js -lHRs --ip=$HOST --port=$PORT --env=dev\n```\n\noutput\n```js\n{ \n  l: true,\n  H: true,\n  R: true,\n  s: true,\n  ip: &#39;127.0.0.1&#39;,\n  port: &#39;8080&#39;,\n  env: &#39;dev&#39;\n}\n```"},{"score":0,"body_markdown":"The best way to pass command line arguments to a Node.js program is by using a Command Line Interface (CLI)\r\n\r\nThere is a nifty npm module called [nodejs-cli][1] that you can use.\r\n\r\nIf you want to create one with no dependencies I&#39;ve got one on my Github if you wanna check it out, it&#39;s actually quite simple and easy to use, click [here][2].\r\n\r\n\r\n  [1]: https://www.npmjs.com/package/nodejs-cli\r\n  [2]: https://github.com/madhur-acharya/Node-js-CLI"},{"score":5,"body_markdown":"Passing arguments is easy, and receiving them is just a matter of reading the process.argv array Node makes accessible from everywhere, basically. But you&#39;re sure to want to read them as key/value pairs, so you&#39;ll need a piece to script to interpret it.\r\n\r\nJoseph Merdrignac posted a beautiful one using reduce, but it relied on a `key=value` syntax instead of `-k value` and `--key value`. I rewrote it much uglier and longer to use that second standard, and I&#39;ll post it as an answer because it wouldn&#39;t fit as a commentary. But it does get the job done.\r\n\r\n\r\n       const args = process.argv.slice(2).reduce((acc,arg,cur,arr)=&gt;{\r\n         if(arg.match(/^--/)){\r\n           acc[arg.substring(2)] = true\r\n           acc[&#39;_lastkey&#39;] = arg.substring(2)\r\n         } else\r\n         if(arg.match(/^-[^-]/)){\r\n           for(key of arg.substring(1).split(&#39;&#39;)){\r\n             acc[key] = true\r\n             acc[&#39;_lastkey&#39;] = key\r\n           }\r\n         } else\r\n           if(acc[&#39;_lastkey&#39;]){\r\n             acc[acc[&#39;_lastkey&#39;]] = arg\r\n             delete acc[&#39;_lastkey&#39;]\r\n           } else\r\n             acc[arg] = true\r\n         if(cur==arr.length-1)\r\n           delete acc[&#39;_lastkey&#39;]\r\n         return acc\r\n       },{})\r\n\r\n \r\nWith this code a command `node script.js alpha beta -charlie delta --echo foxtrot` would give you the following object\r\n\r\n&lt;pre&gt;&lt;code&gt;\r\nargs = {\r\n &quot;alpha&quot;:true,\r\n &quot;beta&quot;:true,\r\n &quot;c&quot;:true,\r\n &quot;h&quot;:true,\r\n &quot;a&quot;:true,\r\n &quot;r&quot;:true\r\n &quot;l&quot;:true,\r\n &quot;i&quot;:true,\r\n &quot;e&quot;:&quot;delta&quot;,\r\n &quot;echo&quot;:&quot;foxtrot&quot;\r\n}\r\n&lt;/code&gt;&lt;/pre&gt;\r\n"},{"score":0,"body_markdown":"ES6-style no-dependencies solution:\r\n```\r\nconst longArgs = arg =&gt; {\r\n    const [ key, value ] = arg.split(&#39;=&#39;);\r\n    return { [key.slice(2)]: value || true }\r\n};\r\n\r\nconst flags = arg =&gt; [...arg.slice(1)].reduce((flagObj, f) =&gt; ({ ...flagObj, [f]: true }), {});\r\n\r\n\r\nconst args = () =&gt;\r\n    process.argv\r\n        .slice(2)\r\n        .reduce((args, arg) =&gt; ({\r\n            ...args,\r\n            ...((arg.startsWith(&#39;--&#39;) &amp;&amp; longArgs(arg)) || (arg[0] === &#39;-&#39; &amp;&amp; flags(arg)))\r\n        }), {});\r\n```\r\n```\r\nconsole.log(args());\r\n```"},{"score":7,"body_markdown":"Parsing argument based on standard input ( `--key=value` )\r\n\r\n    const argv = (() =&gt; {\r\n        const arguments = {};\r\n        process.argv.slice(2).map( (element) =&gt; {\r\n            const matches = element.match( &#39;--([a-zA-Z0-9]+)=(.*)&#39;);\r\n            if ( matches ){\r\n                arguments[matches[1]] = matches[2]\r\n                    .replace(/^[&#39;&quot;]/, &#39;&#39;).replace(/[&#39;&quot;]$/, &#39;&#39;);\r\n            }\r\n        });\r\n        return arguments;\r\n    })();\r\n\r\n\r\n\r\nCommand example\r\n\r\n```\r\nnode app.js --name=stackoverflow --id=10 another-argument --text=&quot;Hello World&quot;\r\n```\r\n\r\nResult of argv: `console.log(argv)`\r\n\r\n```\r\n{\r\n    name: &quot;stackoverflow&quot;,\r\n    id: &quot;10&quot;,\r\n    text: &quot;Hello World&quot;\r\n}\r\n```\r\n"},{"score":3,"body_markdown":"TypeScript solution with no libraries:\r\n\r\n    interface IParams {\r\n      [key: string]: string\r\n    }\r\n\r\n    function parseCliParams(): IParams {\r\n      const args: IParams = {};\r\n      const rawArgs = process.argv.slice(2, process.argv.length);\r\n      rawArgs.forEach((arg: string, index) =&gt; {\r\n        // Long arguments with &#39;--&#39; flags:\r\n        if (arg.slice(0, 2).includes(&#39;--&#39;)) {\r\n          const longArgKey = arg.slice(2, arg.length);\r\n          const longArgValue = rawArgs[index + 1]; // Next value, e.g.: --connection connection_name\r\n          args[longArgKey] = longArgValue;\r\n        }\r\n        // Shot arguments with &#39;-&#39; flags:\r\n        else if (arg.slice(0, 1).includes(&#39;-&#39;)) {\r\n          const longArgKey = arg.slice(1, arg.length);\r\n          const longArgValue = rawArgs[index + 1]; // Next value, e.g.: -c connection_name\r\n          args[longArgKey] = longArgValue;\r\n        }\r\n      });\r\n      return args;\r\n    }\r\n    \r\n    const params = parseCliParams();\r\n    console.log(&#39;params: &#39;, params);\r\n\r\nInput: `ts-node index.js -p param --parameter parameter`\r\n\r\nOutput: `{ p: &#39;param &#39;, parameter: &#39;parameter&#39; }`"},{"score":0,"body_markdown":"I voted answer: https://stackoverflow.com/questions/4351521/how-do-i-pass-command-line-arguments-to-a-node-js-program/54098693#54098693 ❤️❤️\r\n\r\nI extended the `getArgs` function just to get also commands, as well as flags (`-f`, `--anotherflag`) and named args (`--data=blablabla`):\r\n\r\n1. The module\r\n\r\n```javascript\r\n/**\r\n * @module getArgs.js\r\n * get command line arguments (commands, named arguments, flags)\r\n *\r\n * @see https://stackoverflow.com/a/54098693/1786393\r\n *\r\n * @return {Object}\r\n *\r\n */\r\nfunction getArgs () {\r\n  const commands = []\r\n  const args = {}\r\n  process.argv\r\n    .slice(2, process.argv.length)\r\n    .forEach( arg =&gt; {\r\n      // long arg\r\n      if (arg.slice(0,2) === &#39;--&#39;) {\r\n        const longArg = arg.split(&#39;=&#39;)\r\n        const longArgFlag = longArg[0].slice(2,longArg[0].length)\r\n        const longArgValue = longArg.length &gt; 1 ? longArg[1] : true\r\n        args[longArgFlag] = longArgValue\r\n     }\r\n     // flags\r\n      else if (arg[0] === &#39;-&#39;) {\r\n        const flags = arg.slice(1,arg.length).split(&#39;&#39;)\r\n        flags.forEach(flag =&gt; {\r\n          args[flag] = true\r\n        })\r\n      }\r\n     else {\r\n      // commands\r\n      commands.push(arg)\r\n     } \r\n    })\r\n  return { args, commands }\r\n}\r\n\r\n\r\n// test\r\nif (require.main === module) {\r\n  // node getArgs test --dir=examples/getUserName --start=getUserName.askName\r\n  console.log( getArgs() )\r\n}\r\n\r\nmodule.exports = { getArgs }\r\n\r\n```\r\n\r\n2. Usage example:\r\n\r\n```sh\r\n$ node lib/getArgs test --dir=examples/getUserName --start=getUserName.askName\r\n{\r\n  args: { dir: &#39;examples/getUserName&#39;, start: &#39;getUserName.askName&#39; },\r\n  commands: [ &#39;test&#39; ]\r\n}\r\n\r\n$ node lib/getArgs --dir=examples/getUserName --start=getUserName.askName test tutorial\r\n{\r\n  args: { dir: &#39;examples/getUserName&#39;, start: &#39;getUserName.askName&#39; },\r\n  commands: [ &#39;test&#39;, &#39;tutorial&#39; ]\r\n}\r\n\r\n```\r\n"}],"score":2517}