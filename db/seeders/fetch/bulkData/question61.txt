{"body":"&gt; **Moderator note:** Please resist the urge to edit the code or remove this notice. The pattern of whitespace may be part of the question and therefore should not be tampered with unnecessarily. If you are in the &quot;whitespace is insignificant&quot; camp, you should be able to accept the code as is.\r\n\r\nIs it ever possible that `(a== 1 &amp;&amp; a ==2 &amp;&amp; a==3)` could evaluate to `true` in JavaScript?\r\n\r\nThis is an interview question asked by a major tech company. It happened two weeks back, but I&#39;m still trying to find the answer. I know we never write such code in our day-to-day job, but I&#39;m curious.","title":"Can (a== 1 &amp;&amp; a ==2 &amp;&amp; a==3) ever evaluate to true?","answers":[{"score":627,"body_markdown":"IT IS POSSIBLE!\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var i = 0;\r\n\r\n    with({\r\n      get a() {\r\n        return ++i;\r\n      }\r\n    }) {\r\n      if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3)\r\n        console.log(&quot;wohoo&quot;);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThis uses a getter inside of a `with` statement to let `a` evaluate to three different values.\r\n\r\n\r\n... this still does not mean this should be used in real code...\r\n\r\nEven worse, this trick will also work with the use of `===`.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n      var i = 0;\r\n\r\n      with({\r\n        get a() {\r\n          return ++i;\r\n        }\r\n      }) {\r\n        if (a !== a)\r\n          console.log(&quot;yep, this is printed.&quot;);\r\n      }\r\n\r\n&lt;!-- end snippet --&gt;"},{"score":3367,"body_markdown":"If you take advantage of [how `==` works](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using), you could simply create an object with a custom `toString` (or `valueOf`) function that changes what it returns each time it is used such that it satisfies all three conditions.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const a = {\r\n      i: 1,\r\n      toString: function () {\r\n        return a.i++;\r\n      }\r\n    }\r\n\r\n    if(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {\r\n      console.log(&#39;Hello World!&#39;);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n___\r\n\r\nThe reason this works is due to the use of the loose equality operator. When using loose equality, if one of the operands is of a different type than the other, the engine will attempt to convert one to the other. In the case of an object on the left and a number on the right, it will attempt to convert the object to a number by first calling `valueOf` if it is callable, and failing that, it will call `toString`. I used `toString` in this case simply because it&#39;s what came to mind, `valueOf` would make more sense. If I instead returned a string from `toString`, the engine would have then attempted to convert the string to a number giving us the same end result, though with a slightly longer path.\r\n"},{"score":192,"body_markdown":"It can be accomplished using the following in the global scope. For `nodejs` use `global` instead of `window` in the code below.\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var val = 0;\r\n    Object.defineProperty(window, &#39;a&#39;, {\r\n      get: function() {\r\n        return ++val;\r\n      }\r\n    });\r\n    if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {\r\n      console.log(&#39;yay&#39;);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThis answer abuses the implicit variables provided by the global scope in the execution context by defining a getter to retrieve the variable.\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/48270313/429972"},{"score":2075,"body_markdown":"I couldn&#39;t resist - the other answers are undoubtedly true, but you really can&#39;t walk past the following code:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var aﾠ = 1;\r\n    var a = 2;\r\n    var ﾠa = 3;\r\n    if(aﾠ==1 &amp;&amp; a== 2 &amp;&amp;ﾠa==3) {\r\n        console.log(&quot;Why hello there!&quot;)\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nNote the weird spacing in the `if` statement (that I copied from your question). It is the half-width Hangul (that&#39;s Korean for those not familiar) which is an Unicode space character that is not interpreted by ECMA script as a space character - this means that it is a valid character for an identifier. Therefore there are three completely different variables, one with the Hangul after the a, one with it before and the last one with just a. Replacing the space with `_` for readability, the same code would look like this:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var a_ = 1;\r\n    var a = 2;\r\n    var _a = 3;\r\n    if(a_==1 &amp;&amp; a== 2 &amp;&amp;_a==3) {\r\n        console.log(&quot;Why hello there!&quot;)\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nCheck out [the validation on Mathias&#39; variable name validator][1]. If that weird spacing was actually included in their question, I feel sure that it&#39;s a hint for this kind of answer.\r\n\r\nDon&#39;t do this. Seriously.\r\n\r\nEdit: It has come to my attention that (although not allowed to start a variable) the [Zero-width joiner][2] and [Zero-width non-joiner][3] characters are also permitted in variable names - see [Obfuscating JavaScript with zero-width characters - pros and cons?][4].\r\n\r\nThis would look like the following:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var a= 1;\r\n    var a‍= 2; //one zero-width character\r\n    var a‍‍= 3; //two zero-width characters (or you can use the other one)\r\n    if(a==1&amp;&amp;a‍==2&amp;&amp;a‍‍==3) {\r\n        console.log(&quot;Why hello there!&quot;)\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: https://mothereff.in/js-variables#%EF%BE%A0%E1%85%A0%E1%85%9F\r\n  [2]: https://en.wikipedia.org/wiki/Zero-width_joiner\r\n  [3]: https://en.wikipedia.org/wiki/Zero-width_non-joiner\r\n  [4]: https://reverseengineering.stackexchange.com/q/53"},{"score":267,"body_markdown":"If it is asked if it is possible (not MUST), it can ask &quot;a&quot; to return a random number. It would be true if it generates 1, 2, and 3 sequentially.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    with({\r\n      get a() {\r\n        return Math.floor(Math.random()*4);\r\n      }\r\n    }){\r\n      for(var i=0;i&lt;1000;i++){\r\n        if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3){\r\n          console.log(&quot;after &quot; + (i+1) + &quot; trials, it becomes true finally!!!&quot;);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":148,"body_markdown":"This is also possible using a series of self-overwriting getters:\r\n\r\n(This is similar to jontro&#39;s solution, but doesn&#39;t require a counter variable.)\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    (() =&gt; {\r\n        &quot;use strict&quot;;\r\n        Object.defineProperty(this, &quot;a&quot;, {\r\n            &quot;get&quot;: () =&gt; {\r\n                Object.defineProperty(this, &quot;a&quot;, {\r\n                    &quot;get&quot;: () =&gt; {\r\n                        Object.defineProperty(this, &quot;a&quot;, {\r\n                            &quot;get&quot;: () =&gt; {\r\n                                return 3;\r\n                            }\r\n                        });\r\n                        return 2;\r\n                    },\r\n                    configurable: true\r\n                });\r\n                return 1;\r\n            },\r\n            configurable: true\r\n        });\r\n        if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {\r\n            document.body.append(&quot;Yes, it’s possible.&quot;);\r\n        }\r\n    })();\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":131,"body_markdown":"Alternatively, you could use a class for it and an instance for the check.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n    function A() {\r\n        var value = 0;\r\n        this.valueOf = function () { return ++value; };\r\n    }\r\n\r\n    var a = new A;\r\n\r\n    if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {\r\n        console.log(&#39;bingo!&#39;);\r\n    }\r\n&lt;!-- end snippet --&gt;\r\n\r\n**EDIT**\r\n\r\nUsing ES6 classes it would look like this\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    class A {\r\n      constructor() {\r\n        this.value = 0;\r\n        this.valueOf();\r\n      }\r\n      valueOf() {\r\n        return this.value++;\r\n      };\r\n    }\r\n\r\n    let a = new A;\r\n\r\n    if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {\r\n      console.log(&#39;bingo!&#39;);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":75,"body_markdown":"Rule number one of interviews; never say impossible.\r\n\r\nNo need for hidden character trickery.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    window.__defineGetter__( &#39;a&#39;, function(){\r\n        if( typeof i !== &#39;number&#39; ){\r\n            // define i in the global namespace so that it&#39;s not lost after this function runs\r\n            i = 0;\r\n        }\r\n        return ++i;\r\n    });\r\n    \r\n    if( a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3 ){\r\n        alert( &#39;Oh dear, what have we done?&#39; );\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;"},{"score":130,"body_markdown":"I don&#39;t see this answer already posted, so I&#39;ll throw this one into the mix too. This is similar to [Jeff&#39;s answer][1] with the half-width Hangul space.\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var a = 1;\r\n    var ａ = 2;\r\n    var а = 3;\r\n    if(a == 1 &amp;&amp; ａ == 2 &amp;&amp; а == 3) {\r\n        console.log(&quot;Why hello there!&quot;)\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nYou might notice a slight discrepancy with the second one, but the first and third are identical to the naked eye. All 3 are distinct characters:\r\n\r\n`a` - Latin lower case A  \r\n`ａ` - Full Width Latin lower case A  \r\n`а` - Cyrillic lower case A\r\n\r\nThe generic term for this is &quot;homoglyphs&quot;: different unicode characters that look the same. Typically hard to get *three* that are utterly indistinguishable, but in some cases you can get lucky. A, Α, А, and Ꭺ would work better (Latin-A, [Greek Alpha](https://en.wikipedia.org/wiki/Alpha), [Cyrillic-A](https://en.wikipedia.org/wiki/A_(Cyrillic)), and [Cherokee-A](https://en.wiktionary.org/wiki/%E1%8E%AA#Cherokee) respectively; unfortunately the Greek and Cherokee lower-case letters are too different from the Latin `a`: `α`,`ꭺ`, and so doesn&#39;t help with the above snippet).\r\n\r\nThere&#39;s an entire class of Homoglyph Attacks out there, most commonly in fake domain names (eg. `wikipediа.org` (Cyrillic) vs `wikipedia.org` (Latin)), but it can show up in code as well; typically referred to as being underhanded (as mentioned in a comment, [[underhanded]](https://codegolf.stackexchange.com/questions/tagged/underhanded) questions are now off-topic on [PPCG](https://codegolf.stackexchange.com/), but used to be a type of challenge where these sorts of things would show up).  I used [this website](https://www.irongeek.com/homoglyph-attack-generator.php) to find the homoglyphs used for this answer.\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/48274520/3357935"},{"score":14,"body_markdown":"This one uses the defineProperty with a nice side-effect causing global variable!\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var _a = 1\r\n\r\n    Object.defineProperty(this, &quot;a&quot;, {\r\n      &quot;get&quot;: () =&gt; {\r\n        return _a++;\r\n      },\r\n      configurable: true\r\n    });\r\n\r\n    console.log(a)\r\n    console.log(a)\r\n    console.log(a)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":211,"body_markdown":"When you can&#39;t do anything without regular expressions:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var a = {\r\n      r: /\\d/g, \r\n      valueOf: function(){\r\n        return this.r.exec(123)[0]\r\n      }\r\n    }\r\n\r\n    if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {\r\n        console.log(&quot;!&quot;)\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIt works because of custom [`valueOf`][1] method that is called when Object compared with primitive (such as Number). Main trick is that `a.valueOf` returns new value every time because it&#39;s calling `exec` on regular expression with `g` flag, which causing updating [`lastIndex`][2] of that regular expression every time match is found. So first time `this.r.lastIndex == 0`, it matches `1` and updates `lastIndex`: `this.r.lastIndex == 1`, so next time regex will match `2` and so on.\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex"},{"score":27,"body_markdown":"Actually the answer to the first part of the question is &quot;Yes&quot; in every programming language. For example, this is in the case of C/C++:\r\n\r\n    #define a\t(b++)\r\n\tint b = 1;\r\n\tif (a ==1 &amp;&amp; a== 2 &amp;&amp; a==3) {\r\n\t\tstd::cout &lt;&lt; &quot;Yes, it&#39;s possible!&quot; &lt;&lt; std::endl;\r\n\t} else {\r\n\t\tstd::cout &lt;&lt; &quot;it&#39;s impossible!&quot; &lt;&lt; std::endl;\r\n\t}\r\n"},{"score":41,"body_markdown":"Here&#39;s another variation, using an array to pop off whatever values you want.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const a = {\r\n      n: [3,2,1],\r\n      toString: function () {\r\n        return a.n.pop();\r\n      }\r\n    }\r\n\r\n    if(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {\r\n      console.log(&#39;Yes&#39;);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;"},{"score":31,"body_markdown":"Okay, another hack with generators:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const value = function* () {\r\n      let i = 0;\r\n      while(true) yield ++i;\r\n    }();\r\n\r\n    Object.defineProperty(this, &#39;a&#39;, {\r\n      get() {\r\n        return value.next().value;\r\n      }\r\n    });\r\n\r\n    if (a === 1 &amp;&amp; a === 2 &amp;&amp; a === 3) {\r\n      console.log(&#39;yo!&#39;);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":68,"body_markdown":"Honestly though, whether there is a way for it to evaluate to true or not (and as others have shown, there are multiple ways), the answer I&#39;d be looking for, speaking as someone who has conducted hundreds of interviews, would be something along the lines of:\r\n\r\n&quot;Well, maybe yes under some weird set of circumstances that aren&#39;t immediately obvious to me... but if I encountered this in real code then I would use common debugging techniques to figure out how and why it was doing what it was doing and then immediately refactor the code to avoid that situation... but more importantly: I would absolutely NEVER write that code in the first place because that is the very definition of convoluted code, and I strive to never write convoluted code&quot;.\r\n\r\nI guess some interviewers would take offense to having what is obviously meant to be a very tricky question called out, but I don&#39;t mind developers who have an opinion, especially when they can back it up with reasoned thought and can dovetail my question into a meaningful statement about themselves."},{"score":190,"body_markdown":"This is possible in case of variable `a` being accessed by, say 2 web workers through a SharedArrayBuffer as well as some main script. The possibility is low, but it is possible that when the code is compiled to machine code, the web workers update the variable `a` just in time so the conditions `a==1`, `a==2` and `a==3` are satisfied.\r\n\r\nThis can be an example of race condition in multi-threaded environment provided by web workers and SharedArrayBuffer in JavaScript.\r\n\r\nHere is the basic implementation of above:\r\n\r\nmain.js\r\n\r\n    // Main Thread\r\n    \r\n    const worker = new Worker(&#39;worker.js&#39;)\r\n    const modifiers = [new Worker(&#39;modifier.js&#39;), new Worker(&#39;modifier.js&#39;)] // Let&#39;s use 2 workers\r\n    const sab = new SharedArrayBuffer(1)\r\n    \r\n    modifiers.forEach(m =&gt; m.postMessage(sab))\r\n    worker.postMessage(sab)\r\n\r\nworker.js\r\n\r\n    let array\r\n    \r\n    Object.defineProperty(self, &#39;a&#39;, {\r\n      get() {\r\n        return array[0]\r\n      }\r\n    });\r\n    \r\n    addEventListener(&#39;message&#39;, ({data}) =&gt; {\r\n    \tarray = new Uint8Array(data)\r\n    \tlet count = 0\r\n    \tdo {\r\n    \t\tvar res = a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3\r\n    \t\t++count\r\n    \t} while(res == false) // just for clarity. !res is fine\r\n    \tconsole.log(`It happened after ${count} iterations`)\r\n    \tconsole.log(&#39;You should\\&#39;ve never seen this&#39;)\r\n    })\r\n\r\nmodifier.js\r\n\r\n    addEventListener(&#39;message&#39; , ({data}) =&gt; {\r\n    \tsetInterval( () =&gt; {\r\n    \t\tnew Uint8Array(data)[0] = Math.floor(Math.random()*3) + 1\r\n    \t})\r\n    })\r\n\r\nOn my MacBook Air, it happens after around 10 billion iterations on the first attempt:\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\nSecond attempt:\r\n\r\n[![enter image description here][2]][2]\r\n\r\nAs I said, the chances will be low, but given enough time, it&#39;ll hit the condition.\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/wjNp9.png\r\n  [2]: https://i.stack.imgur.com/wFrAt.png\r\n\r\nTip: If it takes too long on your system. Try only `a == 1 &amp;&amp; a == 2` and change `Math.random()*3` to `Math.random()*2`. Adding more and more to list drops the chance of hitting."},{"score":97,"body_markdown":"# JavaScript\r\n## a == a +1\r\n\r\nIn JavaScript, there are no [integers][1] but only `Number`s, which are implemented as double precision floating point numbers.\r\n\r\nIt means that if a Number `a` is large enough, it can be considered equal to three consecutive integers:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    a = 100000000000000000\r\n    if (a == a+1 &amp;&amp; a == a+2 &amp;&amp; a == a+3){\r\n      console.log(&quot;Precision loss!&quot;);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nTrue, it&#39;s not exactly what the interviewer asked (it doesn&#39;t work with `a=0`), but it doesn&#39;t involve any trick with hidden functions or operator overloading.\r\n\r\n# Other languages\r\n\r\nFor reference, there are `a==1 &amp;&amp; a==2 &amp;&amp; a==3` solutions in Ruby and Python. With a slight modification, it&#39;s also possible in Java.\r\n\r\n## Ruby\r\n\r\nWith a custom `==`:\r\n\r\n    class A\r\n      def ==(o)\r\n        true\r\n      end\r\n    end\r\n\r\n    a = A.new\r\n\r\n    if a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3\r\n      puts &quot;Don&#39;t do this!&quot;\r\n    end\r\n\r\nOr an increasing `a`:\r\n\r\n    def a\r\n      @a ||= 0\r\n      @a += 1\r\n    end\r\n\r\n    if a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3\r\n      puts &quot;Don&#39;t do this!&quot;\r\n    end\r\n\r\n## Python\r\n\r\n    class A:\r\n        def __eq__(self, who_cares):\r\n            return True\r\n    a = A()\r\n\r\n    if a == 1 and a == 2 and a == 3:\r\n        print(&quot;Don&#39;t do that!&quot;)\r\n\r\n## Java\r\n\r\nIt&#39;s possible to modify Java [`Integer` cache][2]:\r\n\r\n    package stackoverflow;\r\n\r\n    import java.lang.reflect.Field;\r\n\r\n    public class IntegerMess\r\n    {\r\n        public static void main(String[] args) throws Exception {\r\n            Field valueField = Integer.class.getDeclaredField(&quot;value&quot;);\r\n            valueField.setAccessible(true);\r\n            valueField.setInt(1, valueField.getInt(42));\r\n            valueField.setInt(2, valueField.getInt(42));\r\n            valueField.setInt(3, valueField.getInt(42));\r\n            valueField.setAccessible(false);\r\n\r\n            Integer a = 42;\r\n\r\n            if (a.equals(1) &amp;&amp; a.equals(2) &amp;&amp; a.equals(3)) {\r\n                System.out.println(&quot;Bad idea.&quot;);\r\n            }\r\n        }\r\n    }\r\n\r\n  [1]: https://stackoverflow.com/a/33774009/6419007\r\n  [2]: http://code4reference.com/2012/08/swap-integers-value-java/\r\n"},{"score":527,"body_markdown":"Example without getters or valueOf:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    a = [1,2,3];\r\n    a.join = a.shift;\r\n    console.log(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3);\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThis works because `==` invokes `toString` which calls `.join` for Arrays.\r\n\r\nAnother solution, using `Symbol.toPrimitive` which is an ES6 equivalent of `toString/valueOf`: \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let i = 0;\r\n    let a = { [Symbol.toPrimitive]: () =&gt; ++i };\r\n\r\n    console.log(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":43,"body_markdown":"If you ever get such an interview question (or notice some equally unexpected behavior in your code) think about what kind of things could possibly cause a behavior that looks impossible at first glance:\r\n\r\n1. **Encoding**: In this case the variable you are looking at is not the one you think it is. This can happen if you intentionally mess around with Unicode using [homoglyphs](https://en.wikipedia.org/wiki/Homoglyph#Unicode_homoglyphs) or [space characters](https://stackoverflow.com/a/48274520/40347) to make the name of a variable look like another one, but encoding issues can also be introduced accidentally, e.g. when copying &amp; pasting code from the Web that contains unexpected Unicode code points (e.g. because a content management system  did some &quot;auto-formatting&quot; such as replacing `fl` with Unicode &#39;LATIN SMALL LIGATURE FL&#39; (U+FB02)).\r\n\r\n2. **Race conditions**: A [race-condition](https://stackoverflow.com/a/48295891/40347) might occur, i.e. a situation where code is not executing in the sequence expected by the developer. Race conditions often happen in multi-threaded code, but multiple threads are not a requirement for race conditions to be possible – asynchronicity is sufficient (and don&#39;t get confused, [async does not mean multiple threads are used under the hood](https://stackoverflow.com/a/8963287/40347)). \r\n\r\n   Note that therefore JavaScript is also not free from race conditions just because it is single-threaded. See [here](https://medium.com/@slavik57/async-race-conditions-in-javascript-526f6ed80665) for a simple single-threaded – but async – example. In the context of an single statement the race condition however would be rather hard to hit in JavaScript.\r\n\r\n  JavaScript with web workers is a bit different, as you can have multiple threads. @mehulmpt has shown us a great [proof-of-concept using web workers](https://stackoverflow.com/a/48295891/40347).\r\n\r\n3. **Side-effects**:  A side-effect of the equality comparison operation (which doesn&#39;t have to be as obvious as in the examples here, often side-effects are very subtle).  \r\n\r\nThese kind of issues can appear in many programming languages, not only JavaScript, so we aren&#39;t seeing one of the classical [JavaScript WTFs](https://github.com/denysdovhan/wtfjs) here&lt;sup&gt;1&lt;/sup&gt;. \r\n\r\nOf course, the interview question and the samples here all look very contrived. But they are a good reminder that:\r\n\r\n- Side-effects can get really nasty and that a well-designed program should be free from unwanted side-effects.\r\n- Multi-threading and mutable state can be problematic.\r\n- Not doing character encoding and string processing right can lead to nasty bugs.\r\n\r\n\r\n&lt;sub&gt;&lt;sup&gt;1&lt;/sup&gt; For example, you can find an example in a totally different programming language (C#) exhibiting a side-effect (an obvious one) [here](https://gist.github.com/dirvo/bd2aa2242da0fd092239e8b117e9f1cb).&lt;/sub&gt;"},{"score":26,"body_markdown":"Same, but different, but still same (can be &quot;tested&quot; multiple times):\r\n   \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const a = { valueOf: () =&gt; this.n = (this.n || 0) % 3 + 1}\r\n        \r\n    if(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {\r\n      console.log(&#39;Hello World!&#39;);\r\n    }\r\n\r\n    if(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {\r\n      console.log(&#39;Hello World!&#39;);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nMy idea started from how Number object type equation works."},{"score":25,"body_markdown":"An ECMAScript&amp;nbsp;6 answer that makes use of Symbols:\r\n\r\n    const a = {value: 1};\r\n    a[Symbol.toPrimitive] = function() { return this.value++ };\r\n    console.log((a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3));\r\n\r\nDue to `==` usage, JavaScript is supposed to coerce `a` into something close to the second operand (`1`, `2`, `3` in this case). But before JavaScript tries to figure coercing on its own, it tries to call [`Symbol.toPrimitive`][1]. If you provide `Symbol.toPrimitive` JavaScript would use the value your function returns. If not, JavaScript would call [`valueOf`][2].\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\r\n"},{"score":81,"body_markdown":"This is an inverted version of [@Jeff&#39;s answer][1]* where a hidden character (U+115F, U+1160 or U+3164) is used to create variables that look like `1`, `2` and `3`.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var  a = 1;\r\n    var ﾠ1 = a;\r\n    var ﾠ2 = a;\r\n    var ﾠ3 = a;\r\n    console.log( a ==ﾠ1 &amp;&amp; a ==ﾠ2 &amp;&amp; a ==ﾠ3 );\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\\* That answer can be simplified by using zero width non-joiner (U+200C) and zero width joiner (U+200D). Both of these characters are allowed inside identifiers but not at the beginning:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var a = 1;\r\n    var a‌ = 2;\r\n    var a‍ = 3;\r\n    console.log(a == 1 &amp;&amp; a‌ == 2 &amp;&amp; a‍ == 3);\r\n\r\n    /****\r\n    var a = 1;\r\n    var a\\u200c = 2;\r\n    var a\\u200d = 3;\r\n    console.log(a == 1 &amp;&amp; a\\u200c == 2 &amp;&amp; a\\u200d == 3);\r\n    ****/\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nOther tricks are possible using the same idea e.g. by using Unicode variation selectors to create variables that look exactly alike (`a︀ = 1; a︁ = 2; a︀ == 1 &amp;&amp; a︁ == 2; // true`).\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/48274520/87015"},{"score":29,"body_markdown":"Using [Proxies][1]:\r\n\r\n    var a = new Proxy({ i: 0 }, {\r\n        get: (target, name) =&gt; name === Symbol.toPrimitive ? () =&gt; ++target.i : target[name],\r\n    });\r\n    console.log(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3);\r\n\r\nProxies basically pretend to be a target object (the first parameter), but intercept operations on the target object (in this case the &quot;get property&quot; operation) so that there is an opportunity to do something other than the default object behavior. In this case the &quot;get property&quot; action is called on `a` when `==` coerces its type in order to compare it to each number. This happens:\r\n\r\n 1. We create a target object, `{ i: 0 }`, where the `i` property is our counter\r\n 2. We create a Proxy for the target object and assign it to `a`\r\n 3. For each `a ==` comparison, `a`&#39;s type is coerced to a primitive value\r\n 4. This type coercion results in calling `a[Symbol.toPrimitive]()` internally\r\n 5. The Proxy intercepts getting the `a[Symbol.toPrimitive]` function using the &quot;get handler&quot;\r\n 6. The Proxy&#39;s &quot;get handler&quot; checks that the property being gotten is `Symbol.toPrimitive`, in which case it increments and then returns the counter from the target object: `++target.i`. If a different property is being retrieved, we just fall back to returning the default property value, `target[name]`\r\n\r\nSo:\r\n\r\n    var a = ...; // a.valueOf == target.i == 0\r\n    a == 1 &amp;&amp; // a == ++target.i == 1\r\n    a == 2 &amp;&amp; // a == ++target.i == 2\r\n    a == 3    // a == ++target.i == 3\r\n\r\nAs with most of the other answers, this only works with a loose equality check (`==`), because strict equality checks (`===`) do not do type coercion that the Proxy can intercept.\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\r\n"},{"score":111,"body_markdown":"Yes, it is possible! &#128526;\r\n-\r\n&#187; JavaScript\r\n--\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    if‌=()=&gt;!0;\r\n    var a = 9;\r\n\r\n    if‌(a==1 &amp;&amp; a== 2 &amp;&amp; a==3)\r\n    {\r\n        document.write(&quot;&lt;h1&gt;Yes, it is possible!&#128526;&lt;/h1&gt;&quot;)\r\n    }\r\n&lt;!-- end snippet --&gt;\r\n\r\nThe above code is a short version (thanks to  @Forivin for its note in comments) and the following code is original:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var a = 9;\r\n\r\n    if‌(a==1 &amp;&amp; a== 2 &amp;&amp; a==3)\r\n    {\r\n        //console.log(&quot;Yes, it is possible!&#128526;&quot;)\r\n        document.write(&quot;&lt;h1&gt;Yes, it is possible!&#128526;&lt;/h1&gt;&quot;)\r\n    }\r\n\r\n    //--------------------------------------------\r\n\r\n    function if‌(){return true;}\r\n&lt;!-- end snippet --&gt;\r\n\r\n&gt; If you just see top side of my code and run it you say WOW, how?\r\n\r\n&gt; So I think it is enough to say *Yes, it is possible* to someone that said to\r\n&gt; you: *Nothing is impossible*\r\n\r\n&gt; Trick: I used a hidden character after `if` to make a function that its name is similar to `if`. In JavaScript we can not override keywords so I forced to use this way. It is a fake `if`, but it works for you in this case!\r\n\r\n----------\r\n&#187; **C#**\r\n--\r\n\r\nAlso I wrote a C# version (*with increase property value technic*):\r\n\r\n    static int _a;\r\n    public static int a =&gt; ++_a;\r\n\r\n    public static void Main()\r\n    {\r\n        if(a==1 &amp;&amp; a==2 &amp;&amp; a==3)\r\n        {\r\n            Console.WriteLine(&quot;Yes, it is possible!&#128526;&quot;);\r\n        }\r\n    }\r\n\r\n**[Live Demo](https://dotnetfiddle.net/twNcDM)**\r\n\r\n  [1]: https://dotnetfiddle.net/twNcDM\r\n"},{"score":24,"body_markdown":"I think this is the minimal code to implement it:\r\n    \r\n\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    i=0,a={valueOf:()=&gt;++i}\r\n\r\n    if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {\r\n      console.log(&#39;Mind === Blown&#39;);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nCreating a dummy object with a custom `valueOf` that increments a global variable `i` on each call. 23 characters!"},{"score":3,"body_markdown":"By overriding `valueOf` in a class declaration, it can be done:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    class Thing {\r\n        constructor() {\r\n            this.value = 1;\r\n        }\r\n    \r\n        valueOf() {\r\n            return this.value++;\r\n        }\r\n    }\r\n    \r\n    const a = new Thing();\r\n    \r\n    if(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {\r\n        console.log(a);\r\n    }\r\n\r\nWhat happens is that `valueOf` is called in each comparison operator.  On the first one, `a` will equal `1`, on the second, `a` will equal `2`, and so on and so forth, because each time `valueOf` is called, the value of `a` is incremented.\r\n\r\nTherefore the console.log will fire and output (in my terminal anyways) `Thing: { value: 4}`, indicating the conditional was true."}],"score":2527}