{"body":"I have the following code in Ruby. I want to convert this code into JavaScript. what&#39;s the equivalent code in JS?\r\n\r\n    text = &lt;&lt;&quot;HERE&quot;\r\n    This\r\n    Is\r\n    A\r\n    Multiline\r\n    String\r\n    HERE","title":"Creating multiline strings in JavaScript","answers":[{"score":209,"body_markdown":"You can do this...\r\n\r\n    var string = &#39;This is\\n&#39; +\r\n    &#39;a multiline\\n&#39; + \r\n    &#39;string&#39;;\r\n"},{"score":3574,"body_markdown":"### Update:\r\n\r\nECMAScript 6 (ES6) introduces a new type of literal, namely [**template literals**][1]. They have many features, variable interpolation among others, but most importantly for this question, they can be multiline.\r\n\r\nA template literal is delimited by *backticks*:\r\n\r\n    var html = `\r\n      &lt;div&gt;\r\n        &lt;span&gt;Some HTML here&lt;/span&gt;\r\n      &lt;/div&gt;\r\n    `;\r\n\r\n(Note: I&#39;m not advocating to use HTML in strings)\r\n\r\n[Browser support is OK][2], but you can use [transpilers][3] to be more compatible.\r\n\r\n\r\n---\r\n\r\n### Original ES5 answer:\r\n\r\nJavascript doesn&#39;t have a here-document syntax. You can escape the literal newline, however, which comes close:\r\n\r\n    &quot;foo \\\r\n    bar&quot;\r\n\r\n\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\r\n  [2]: https://kangax.github.io/compat-table/es6/#test-template_literals\r\n  [3]: https://babeljs.io/\r\n"},{"score":701,"body_markdown":"the pattern `text = &lt;&lt;&quot;HERE&quot; This Is A Multiline String HERE` is not available in js (I remember using it much in my good old Perl days).\r\n\r\nTo keep oversight with complex or long multiline strings I sometimes use an array pattern:\r\n\r\n    var myString = \r\n       [&#39;&lt;div id=&quot;someId&quot;&gt;&#39;,\r\n        &#39;some content&lt;br /&gt;&#39;,\r\n        &#39;&lt;a href=&quot;#someRef&quot;&gt;someRefTxt&lt;/a&gt;&#39;,\r\n        &#39;&lt;/div&gt;&#39;\r\n       ].join(&#39;\\n&#39;);\r\n\r\nor the pattern anonymous already showed (escape newline), which can be an ugly block in your code:\r\n\r\n        var myString = \r\n           &#39;&lt;div id=&quot;someId&quot;&gt; \\\r\n    some content&lt;br /&gt; \\\r\n    &lt;a href=&quot;#someRef&quot;&gt;someRefTxt&lt;/a&gt; \\\r\n    &lt;/div&gt;&#39;;\r\n\r\nHere&#39;s another weird but working &#39;trick&#39;&lt;sup&gt;&lt;b&gt;1&lt;/b&gt;&lt;/sup&gt;:\r\n\r\n    var myString = (function () {/*\r\n       &lt;div id=&quot;someId&quot;&gt;\r\n         some content&lt;br /&gt;\r\n         &lt;a href=&quot;#someRef&quot;&gt;someRefTxt&lt;/a&gt;\r\n        &lt;/div&gt;        \r\n    */}).toString().match(/[^]*\\/\\*([^]*)\\*\\/\\}$/)[1];\r\n*external edit: [jsfiddle](http://jsfiddle.net/orwellophile/hna15vLw/2/)*\r\n\r\n\r\n\r\n**ES20xx** supports spanning strings over multiple lines using [template strings][1]:\r\n\r\n    let str = `This is a text\r\n        with multiple lines.\r\n        Escapes are interpreted,\r\n        \\n is a newline.`;\r\n    let str = String.raw`This is a text\r\n        with multiple lines.\r\n        Escapes are not interpreted,\r\n        \\n is not a newline.`;\r\n\r\n\r\n\r\n&lt;sup&gt;&lt;b&gt;1&lt;/b&gt;&lt;/sup&gt; Note: this will be lost after minifying/obfuscating your code\r\n\r\n\r\n  [1]: http://www.2ality.com/2011/09/quasi-literals.html"},{"score":9,"body_markdown":"This works in IE, Safari, Chrome and Firefox:\r\n\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;div class=&quot;crazy_idea&quot; thorn_in_my_side=&#39;&lt;table  border=&quot;0&quot;&gt;\r\n    \t\t\t\t\t\t&lt;tr&gt;\r\n    \t\t\t\t\t\t\t&lt;td &gt;&lt;span class=&quot;mlayouttablecellsdynamic&quot;&gt;PACKAGE price $65.00&lt;/span&gt;&lt;/td&gt;\r\n    \t\t\t\t\t\t&lt;/tr&gt;\r\n    \t\t\t\t\t&lt;/table&gt;&#39;&gt;&lt;/div&gt;\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n    \talert($(&quot;.crazy_idea&quot;).attr(&quot;thorn_in_my_side&quot;));\r\n    &lt;/script&gt;"},{"score":361,"body_markdown":"You _can_ have multiline strings in pure JavaScript.\r\n\r\nThis method is based on the serialization of functions, which is [defined to be implementation-dependent][1]. It does work in the most browsers (see below), but there&#39;s no guarantee that it will still work in the future, so do not rely on it.\r\n\r\nUsing the following function:\r\n\r\n    function hereDoc(f) {\r\n      return f.toString().\r\n          replace(/^[^\\/]+\\/\\*!?/, &#39;&#39;).\r\n          replace(/\\*\\/[^\\/]+$/, &#39;&#39;);\r\n    }\r\n\r\nYou can have here-documents like this:\r\n    \r\n    var tennysonQuote = hereDoc(function() {/*!\r\n      Theirs not to make reply,\r\n      Theirs not to reason why,\r\n      Theirs but to do and die\r\n    */});\r\n\r\nThe method has successfully been tested in the following browsers (not mentioned = not tested):\r\n\r\n- IE 4 - 10\r\n- Opera 9.50 - 12 (not in 9-)\r\n- Safari 4 - 6 (not in 3-)\r\n- Chrome 1 - 45\r\n- Firefox 17 - 21 ([not in 16-](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString#Notes))\r\n- Rekonq 0.7.0 - 0.8.0\r\n- *Not supported in Konqueror 4.7.4*\r\n\r\nBe careful with your minifier, though. It tends to remove comments. For the [YUI compressor](http://www.julienlecomte.net/yuicompressor/README), a comment starting with `/*!` (like the one I used) will be preserved. \r\n\r\nI think a _real_ solution would be to use [CoffeeScript](http://coffeescript.org/#strings).\r\n\r\n\r\n  [1]: http://es5.github.io/#x15.3.4.2\r\n\r\n\r\nES6 UPDATE: You could use backtick instead of creating a function with a comment and running toString on the comment. The regex would need to be updated to only strip spaces. You could also have a string prototype method for doing this:\r\n\r\n    let foo = `\r\n      bar loves cake\r\n      baz loves beer\r\n      beer loves people\r\n    `.removeIndentation()\r\nSomeone should write this .removeIndentation string method... ;)"},{"score":10,"body_markdown":"to sum up, I have tried 2 approaches listed here in user javascript programming (Opera 11.01):\r\n\r\n - this one didn&#39;t work: https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/805111#805111\r\n - this worked fairly well, I have also figured out how to make it look good in Notepad++ source view: https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/5571069#5571069\r\n\r\nSo I recommend the working approach for Opera user JS users. Unlike what the author was saying: \r\n\r\n&gt; It doesn&#39;t work on firefox or opera; only on IE, chrome and safari. \r\n\r\nIt DOES work in Opera 11. At least in user JS scripts. Too bad I can&#39;t comment on individual answers or upvote the answer, I&#39;d do it immediately. If possible, someone with higher privileges please do it for me."},{"score":1360,"body_markdown":"## ES6 Update:\r\n\r\nAs the first answer mentions, with ES6/Babel, you can now create multi-line strings simply by using backticks:\r\n\r\n    const htmlString = `Say hello to \r\n    multi-line\r\n    strings!`;\r\n\r\nInterpolating variables is a popular new feature that comes with back-tick delimited strings:\r\n\r\n    const htmlString = `${user.name} liked your post about strings`;\r\n\r\nThis just transpiles down to concatenation:\r\n\r\n    user.name + &#39; liked your post about strings&#39;\r\n\r\n## Original ES5 answer:\r\n\r\n&gt;[Google&#39;s JavaScript style guide][1] recommends to use string concatenation instead of escaping newlines:\r\n\r\n&gt;**Do not do this:**\r\n\r\n&gt;     var myString = &#39;A rather long string of English text, an error message \\\r\n                    actually that just keeps going and going -- an error \\\r\n                    message to make the Energizer bunny blush (right through \\\r\n                    those Schwarzenegger shades)! Where was I? Oh yes, \\\r\n                    you\\&#39;ve got an error and all the extraneous whitespace is \\\r\n                    just gravy.  Have a nice day.&#39;;\r\n\r\n&gt;The whitespace at the beginning of each line can&#39;t be safely stripped at compile time; whitespace after the slash will result in tricky errors; and while most script engines support this, it is not part of ECMAScript.\r\n\r\n&gt;**Use string concatenation instead:**\r\n\r\n&gt;     var myString = &#39;A rather long string of English text, an error message &#39; +\r\n                   &#39;actually that just keeps going and going -- an error &#39; +\r\n                   &#39;message to make the Energizer bunny blush (right through &#39; +\r\n                   &#39;those Schwarzenegger shades)! Where was I? Oh yes, &#39; +\r\n                   &#39;you\\&#39;ve got an error and all the extraneous whitespace is &#39; +\r\n                   &#39;just gravy.  Have a nice day.&#39;;\r\n\r\n  [1]: https://google.github.io/styleguide/javascriptguide.xml?showone=Multiline_string_literals#Multiline_string_literals\r\n  [2]: http://kishorelive.com/2011/11/22/ecmascript-6-looks-promising/\r\n  [3]: http://tools.google.com/dlpage/chromesxs"},{"score":24,"body_markdown":"I like this syntax and indendation:\r\n\r\n    string = &#39;my long string...\\n&#39;\r\n           + &#39;continue here\\n&#39;\r\n           + &#39;and here.&#39;;\r\n\r\n(but actually can&#39;t be considered as multiline string)"},{"score":89,"body_markdown":"I&#39;m surprised I didn&#39;t see this, because it works everywhere I&#39;ve tested it and is very useful for e.g. templates:\r\n\r\n    &lt;script type=&quot;bogus&quot; id=&quot;multi&quot;&gt;\r\n        My\r\n        multiline\r\n        string\r\n    &lt;/script&gt;\r\n    &lt;script&gt;\r\n        alert($(&#39;#multi&#39;).html());\r\n    &lt;/script&gt;\r\n\r\nDoes anybody know of an environment where there is HTML but it doesn&#39;t work?\r\n\r\n"},{"score":54,"body_markdown":"I solved this by outputting a div, making it hidden, and calling the div id by jQuery when I needed it.\r\n\r\ne.g.\r\n\r\n    &lt;div id=&quot;UniqueID&quot; style=&quot;display:none;&quot;&gt;\r\n         Strings\r\n         On\r\n         Multiple\r\n         Lines\r\n         Here\r\n    &lt;/div&gt;\r\n\r\nThen when I need to get the string, I just use the following jQuery:\r\n\r\n    $(&#39;#UniqueID&#39;).html();\r\n\r\nWhich returns my text on multiple lines. If I call \r\n\r\n    alert($(&#39;#UniqueID&#39;).html());\r\n\r\nI get:\r\n\r\n![enter image description here][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/vIVFc.png"},{"score":30,"body_markdown":"Using script tags:\r\n\r\n- add a `&lt;script&gt;...&lt;/script&gt;` block containing your multiline text into `head` tag;\r\n- get your multiline text as is... (watch out for text encoding: UTF-8, ASCII)\r\n\r\n        &lt;script&gt;\r\n\r\n            // pure javascript\r\n            var text = document.getElementById(&quot;mySoapMessage&quot;).innerHTML ;\r\n\r\n            // using JQuery&#39;s document ready for safety\r\n            $(document).ready(function() {\r\n\r\n                var text = $(&quot;#mySoapMessage&quot;).html(); \r\n\r\n            });\r\n\r\n        &lt;/script&gt;\r\n\r\n        &lt;script id=&quot;mySoapMessage&quot; type=&quot;text/plain&quot;&gt;\r\n\r\n            &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:typ=&quot;...&quot;&gt;\r\n               &lt;soapenv:Header/&gt;\r\n               &lt;soapenv:Body&gt;\r\n                  &lt;typ:getConvocadosElement&gt;\r\n                     ...\r\n                  &lt;/typ:getConvocadosElement&gt;\r\n               &lt;/soapenv:Body&gt;\r\n            &lt;/soapenv:Envelope&gt;\r\n\r\n            &lt;!-- this comment will be present on your string --&gt;\r\n            //uh-oh, javascript comments...  SOAP request will fail \r\n        \r\n\r\n        &lt;/script&gt;\r\n"},{"score":0,"body_markdown":"Just tried the Anonymous answer and found there&#39;s a little trick here, it doesn&#39;t work if there&#39;s a space after backslash `\\ ` &lt;br /&gt;\r\nSo the following solution doesn&#39;t work -\r\n\r\n    var x = { test:&#39;&lt;?xml version=&quot;1.0&quot;?&gt;\\ &lt;-- One space here\r\n                &lt;?mso-application progid=&quot;Excel.Sheet&quot;?&gt;&#39; \r\n    };\r\n\r\nBut when space is removed it works - \r\n\r\n    var x = { test:&#39;&lt;?xml version=&quot;1.0&quot;?&gt;\\&lt;-- No space here now\r\n              &lt;?mso-application progid=&quot;Excel.Sheet&quot;?&gt;&#39; \r\n    };\r\n\r\n    alert(x.test);​\r\n\r\nHope it helps !!"},{"score":1,"body_markdown":"I think this workaround should work in IE, Chrome, Firefox, Safari, Opera -\r\n\r\n**Using jQuery** :\r\n\r\n    &lt;xmp id=&quot;unique_id&quot; style=&quot;display:none;&quot;&gt;\r\n      Some plain text\r\n      Both type of quotes :  &quot; &#39; &quot; And  &#39; &quot; &#39;\r\n      JS Code : alert(&quot;Hello World&quot;);\r\n      HTML Code : &lt;div class=&quot;some_class&quot;&gt;&lt;/div&gt;\r\n    &lt;/xmp&gt;\r\n    &lt;script&gt;\r\n       alert($(&#39;#unique_id&#39;).html());\r\n    &lt;/script&gt;\r\n\r\n**Using Pure Javascript :**\r\n\r\n    &lt;xmp id=&quot;unique_id&quot; style=&quot;display:none;&quot;&gt;\r\n      Some plain text\r\n      Both type of quotes :  &quot; &#39; &quot; And  &#39; &quot; &#39;\r\n      JS Code : alert(&quot;Hello World&quot;);\r\n      HTML Code : &lt;div class=&quot;some_class&quot;&gt;&lt;/div&gt;\r\n    &lt;/xmp&gt;\r\n    &lt;script&gt;\r\n       alert(document.getElementById(&#39;unique_id&#39;).innerHTML);\r\n    &lt;/script&gt;\r\n\r\nCheers!!"},{"score":16,"body_markdown":"**Downvoters**: This code is supplied for information only. \r\n\r\nThis has been tested in Fx 19 and Chrome 24 on Mac  \r\n\r\n[DEMO](http://jsfiddle.net/mplungjan/pMSc8/)\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var new_comment; /*&lt;&lt;&lt;EOF \r\n        &lt;li class=&quot;photobooth-comment&quot;&gt;\r\n           &lt;span class=&quot;username&quot;&gt;\r\n              &lt;a href=&quot;#&quot;&gt;You&lt;/a&gt;:\r\n           &lt;/span&gt;\r\n           &lt;span class=&quot;comment-text&quot;&gt;\r\n              $text\r\n           &lt;/span&gt; \r\n           @&lt;span class=&quot;comment-time&quot;&gt;\r\n              2d\r\n           &lt;/span&gt; ago\r\n        &lt;/li&gt;\r\n    EOF*/\r\n    // note the script tag here is hardcoded as the FIRST tag \r\n    new_comment=document.currentScript.innerHTML.split(&quot;EOF&quot;)[1]; \r\n    document.querySelector(&quot;ul&quot;).innerHTML=new_comment.replace(&#39;$text&#39;,&#39;This is a dynamically created text&#39;);\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;ul&gt;&lt;/ul&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":-11,"body_markdown":"It&#39;s not extremely elegant but it&#39;s clean enough for me:\r\n\r\n    var myString = &quot;First line&quot; + &quot;\\n&quot;;\r\n    var myString = myString + &quot;Second line&quot; + &quot;\\n&quot;;\r\n    var myString = myString + &quot;Third line&quot; + &quot;\\n&quot;;\r\n\r\n"},{"score":0,"body_markdown":"This is one fairly economical approach, at least in terms of the source code:\r\n\r\n    function s() {\r\n        var args = [],index;\r\n        for (index = 0; index&lt; arguments.length; index++) {\r\n            args.push (arguments [index]);\r\n        }\r\n        return args.join (&quot;\\n&quot;);\r\n    }\r\n    console.log (s (\r\n        &quot;This is the first line&quot;,\r\n        &quot;and this is the second&quot;,\r\n        &quot;finally a third&quot;\r\n    ));\r\n\r\n    function s() {return arguments.join (&quot;\\n&quot;)} \r\n\r\nwould be nicer of course if the &quot;arguments&quot; property were a proper array.\r\n\r\nA second version might use &quot;&quot; to do the join for cases when you want to control the line breaks in a very long string."},{"score":143,"body_markdown":"I came up with this very jimmy rigged method of a multi lined string. Since converting a function into a string also returns any comments inside the function you can use the comments as your string using a multilined comment /**/. You just have to trim off the ends and you have your string.\r\n\r\n    var myString = function(){/*\r\n        This is some\r\n        awesome multi-lined\r\n        string using a comment \r\n        inside a function \r\n        returned as a string.\r\n        Enjoy the jimmy rigged code.\r\n    */}.toString().slice(14,-3)\r\n\r\n    alert(myString)\r\n"},{"score":0,"body_markdown":"I program this way:\r\n\r\n    sys = {\r\n    \tlayout: null,\r\n    \tmakeLayout: function (obCLS) {\r\n    \t\tthis.layout = $(&#39;&lt;div /&gt;&#39;).addClass(&#39;editor&#39;).appendTo($(obCLS)).append(\r\n    \t\t\r\n    \t\t\t/* Cargador */\r\n    \t\t\t/* @this.layout.find(&#39;&gt; div:nth-of-child(1)&#39;); */\r\n    \t\t\t&#39;&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;p&gt;Seleccione la imagen que desea procesar.&lt;/p&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;input type=&quot;button&quot; value=&quot;Seleccionar&quot; class=&quot;btn btn-xlarge btn-success&quot; /&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;span&gt;&lt;/span&gt;&#39; +\r\n    \t\t\t&#39;&lt;/div&gt;&#39; +\r\n    \r\n    \t\t\t/* Cargador - Progreso */\r\n    \t\t\t/* @this.layout.find(&#39;&gt; div:nth-of-child(2)&#39;); */\r\n    \t\t\t&#39;&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t\t&lt;div&gt;&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t\t&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t\t\t&lt;div&gt;&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t\t&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;&lt;/div&gt;&#39; +\r\n    \r\n    \t\t\t/* Editor */\r\n    \t\t\t/* @this.layout.find(&#39;&gt; div:nth-of-child(3)&#39;);\r\n    \t\t\t * @sidebar\t= this.layout.find(&#39;&gt; div:nth-of-child(3) &gt; div &gt; div &gt; div:nth-of-type(1)&#39;);\r\n    \t\t\t * @body\t= this.layout.find(&#39;&gt; div:nth-of-child(3) &gt; div &gt; div &gt; div:nth-of-type(2) &gt; div&#39;); */\r\n    \t\t\t&#39;&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t\t&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t\t\t&lt;div&gt;&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t\t\t&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t\t\t\t&lt;div&gt;&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t\t\t&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t\t&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;&lt;/div&gt;&#39;\r\n    \t\t);\r\n    \t}\r\n    }\r\n    \r\n    sys.makeLayout(&#39;#div&#39;);"},{"score":0,"body_markdown":"I think I discovered another way to do it inline without any invasive syntax on every line. Use Javascript&#39;s ability to convert a function to string and create a multiline comment with the `/**/` syntax then remove the &quot;function() {/\\*\\n&quot; and &quot;\\n\\*/}&quot;.\r\n\r\n\tvar multiline = function(string) { return string.toString().replace(/(^[^\\n]*\\n)|(\\n\\*\\/\\})/g, &quot;&quot;); };\r\n\r\n\tconsole.log(multiline(function() {/*\r\n\tHello world!\r\n\tI&#39;m a multiline string!\r\n\r\n\tTada!\r\n\t*/}));\r\n\r\nThe only pitfall I can see in this is the syntax highlighting.\r\n\r\nEDIT: Had I scrolled down a little more, I would have seen this answer doing exactly the same thing: [https://stackoverflow.com/a/5571069/916553][1]\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/5571069/916553"},{"score":3,"body_markdown":"My version of array-based join for string concat:\r\n\r\n    var c = []; //c stands for content\r\n    c.push(&quot;&lt;div id=&#39;thisDiv&#39; style=&#39;left:10px&#39;&gt;&lt;/div&gt;&quot;);\r\n    c.push(&quot;&lt;div onclick=&#39;showDo(\\&#39;something\\&#39;);&#39;&gt;&lt;/div&gt;&quot;);\r\n    $(body).append(c.join(&#39;\\n&#39;));\r\n\r\nThis has worked well for me, especially as I often insert values into the html constructed this way. But it has lots of limitations. Indentation would be nice. Not having to deal with nested quotation marks would be really nice, and just the bulkyness of it bothers me.\r\n\r\nIs the .push() to add to the array taking up a lot of time? See this related answer:\r\n\r\n(https://stackoverflow.com/questions/15649899/is-there-a-reason-javascript-developers-dont-use-array-push) \r\n\r\nAfter looking at these (opposing) test runs, it looks like .push() is fine for string arrays which will not likely grow over 100 items - I will avoid it in favor of indexed adds for larger arrays.\r\n    "},{"score":-3,"body_markdown":"i found a more elegant solution, maybe a little non-topic related because it uses PHP, but im sure it will be useful and cuteness* for some of yours...\r\n\r\nthis **javascript code** should stay inside script tags\r\n\r\n    var html=&lt;?php echo json_encode(&quot;\r\n    \r\n\t\t\t&lt;div class=container&gt;\r\n\t\t\t\t&lt;div class=area1&gt;\r\n\t\t\t\t\txxx\r\n\t\t\t\t&lt;/div&gt;\r\n\t\t\t\t&lt;div class=area2&gt;\r\n\t\t\t\t\t&quot;.$someVar.&quot;\r\n\t\t\t\t&lt;/div&gt;\r\n\t\t\t&lt;/div&gt;\r\n    \r\n    &quot;); ?&gt;\r\n\r\nin your **output html** you will see something like\r\n\r\n    var html=&quot;\\r\\n\\r\\n\\t\\t\\t&lt;div class=container&gt;\\r\\n\\t\\t\\t\\t&lt;div class=area1&gt;\\r\\n\\t\\t\\t\\t\\txxx\\r\\n\\t\\t\\t\\t&lt;\\/div&gt;\\r\\n\\t\\t\\t\\t&lt;div class=area2&gt;\\r\\n\\t\\t\\t\\t\\t44\\r\\n\\t\\t\\t\\t&lt;\\/div&gt;\\r\\n\\t\\t\\t&lt;\\/div&gt;\\r\\n\\r\\n\\t\\t&quot;;  \r\n&amp;nbsp;\r\n\r\n--- \r\nand *et voil&#224;!*, it gives you code readability in your file.\r\n\r\npD: this sample uses json_encode() PHP function, but certainly there are function equivalents for ASP, Ruby and JSP langs.\r\n\r\npD: however, this solution have his limitations too, one of them is you cannot use javascript variables inside the encapsulated code."},{"score":10,"body_markdown":"My extension to https://stackoverflow.com/a/15558082/80404.\r\nIt expects comment in a form `/*! any multiline comment */` where symbol ! is used to prevent removing by minification (at least for YUI compressor)\r\n\r\n    Function.prototype.extractComment = function() {\r\n        var startComment = &quot;/*!&quot;;\r\n        var endComment = &quot;*/&quot;;\r\n        var str = this.toString();\r\n    \r\n        var start = str.indexOf(startComment);\r\n        var end = str.lastIndexOf(endComment);\r\n    \r\n        return str.slice(start + startComment.length, -(str.length - end));\r\n    };\r\n\r\nExample:\r\n\r\n    var tmpl = function() { /*!\r\n     &lt;div class=&quot;navbar-collapse collapse&quot;&gt;\r\n        &lt;ul class=&quot;nav navbar-nav&quot;&gt;\r\n        &lt;/ul&gt;\r\n     &lt;/div&gt;\r\n    */}.extractComment();"},{"score":3,"body_markdown":"You can use `+=` to concatenate your string, seems like no one answered that, which will be readable, and also neat... something like this\r\n\r\n    var hello = &#39;hello&#39; +\r\n                &#39;world&#39; +\r\n                &#39;blah&#39;;\r\n\r\ncan be also written as\r\n\r\n    var hello = &#39;hello&#39;;\r\n        hello += &#39; world&#39;;\r\n        hello += &#39; blah&#39;;\r\n    \r\n    console.log(hello);"},{"score":9,"body_markdown":"**Updated for 2015**: it&#39;s six years later now:  most people use a module loader, and the main module systems each have ways of loading templates. It&#39;s not inline, but the most common type of multiline string are templates, and **templates should generally be kept out of JS anyway**.\r\n\r\n## require.js: &#39;require text&#39;.\r\n\r\nUsing [require.js &#39;text&#39; plugin][1], with a multiline template in **template.html**\r\n\r\n    var template = require(&#39;text!template.html&#39;)\r\n\r\n## NPM/browserify: the &#39;brfs&#39; module\r\n\r\nBrowserify [uses a &#39;brfs&#39; module][2] to load text files. This will actually build your template into your bundled HTML.\r\n\r\n    var fs = require(&quot;fs&quot;);\r\n    var template = fs.readFileSync(template.html&#39;, &#39;utf8&#39;);\r\n\r\n    \r\nEasy. \r\n\r\n\r\n  [1]: https://github.com/requirejs/text\r\n  [2]: https://www.npmjs.com/package/brfs"},{"score":18,"body_markdown":"There&#39;s this library that makes it beautiful:\r\n\r\nhttps://github.com/sindresorhus/multiline\r\n\r\n### Before\r\n\r\n    var str = &#39;&#39; +\r\n    &#39;&lt;!doctype html&gt;&#39; +\r\n    &#39;&lt;html&gt;&#39; +\r\n    &#39;\t&lt;body&gt;&#39; +\r\n    &#39;\t\t&lt;h1&gt;❤ unicorns&lt;/h1&gt;&#39; +\r\n    &#39;\t&lt;/body&gt;&#39; +\r\n    &#39;&lt;/html&gt;&#39; +\r\n    &#39;&#39;;\r\n\r\n### After\r\n\r\n    var str = multiline(function(){/*\r\n    &lt;!doctype html&gt;\r\n    &lt;html&gt;\r\n    \t&lt;body&gt;\r\n    \t\t&lt;h1&gt;❤ unicorns&lt;/h1&gt;\r\n    \t&lt;/body&gt;\r\n    &lt;/html&gt;\r\n    */});\r\n\r\n\r\n"},{"score":32,"body_markdown":"There are multiple ways to achieve this\r\n\r\n**1. Slash concatenation**\r\n\r\n      var MultiLine=  &#39;1\\\r\n        2\\\r\n        3\\\r\n        4\\\r\n        5\\\r\n        6\\\r\n        7\\\r\n        8\\\r\n        9&#39;;\r\n\r\n\r\n\r\n**2. regular concatenation**\r\n\r\n\r\n    var MultiLine = &#39;1&#39;\r\n    +&#39;2&#39;\r\n    +&#39;3&#39;\r\n    +&#39;4&#39;\r\n    +&#39;5&#39;;\r\n\r\n**3. Array Join concatenation**\r\n\r\n    var MultiLine = [\r\n    &#39;1&#39;,\r\n    &#39;2&#39;,\r\n    &#39;3&#39;,\r\n    &#39;4&#39;,\r\n    &#39;5&#39;\r\n    ].join(&#39;&#39;);\r\nPerformance wise, **Slash concatenation** (first one) is the fastest.\r\n\r\n**Refer** [this test case][1] for more details regarding the performance \r\n\r\n**Update:**\r\n\r\nWith the **ES2015**, we can take advantage of its Template strings feature. With it, we just need to use back-ticks for creating multi line strings\r\n\r\nExample:\r\n\r\n  \r\n\r\n     `&lt;h1&gt;{{title}}&lt;/h1&gt;\r\n      &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\r\n      &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\r\n      &lt;div&gt;&lt;label&gt;name: &lt;/label&gt;{{hero.name}}&lt;/div&gt;\r\n      `\r\n\r\n\r\n  [1]: http://jsperf.com/zp-string-concatenation/6"},{"score":0,"body_markdown":"If you happen to be running in Node only, you could use the fs module to read in the multi-line string from a file:\r\n\r\n    var diagram;\r\n    var fs = require(&#39;fs&#39;);\r\n    fs.readFile( __dirname + &#39;/diagram.txt&#39;, function (err, data) {\r\n      if (err) {\r\n        throw err; \r\n      }\r\n      diagram = data.toString();\r\n    });\r\n"},{"score":9,"body_markdown":"If you&#39;re willing to use the escaped newlines, they can be used *nicely*.  **It looks like a document with a page border**.\r\n\r\n![enter image description here][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/e51kg.png"},{"score":7,"body_markdown":"You can use [TypeScript][1] (JavaScript SuperSet), it supports multiline strings, and transpiles back down to pure JavaScript without overhead:\r\n\r\n\r\n    var templates = {\r\n    \tmyString: `this is\r\n    a multiline\r\n    string` \r\n    }\r\n    \r\n    alert(templates.myString);\r\n\r\nIf you&#39;d want to accomplish the same with plain JavaScript:\r\n\r\n    var templates = \r\n    {\r\n     myString: function(){/*\r\n        This is some\r\n        awesome multi-lined\r\n        string using a comment \r\n        inside a function \r\n        returned as a string.\r\n        Enjoy the jimmy rigged code.\r\n    */}.toString().slice(14,-3)\r\n    \r\n    }\r\n    alert(templates.myString)\r\n\r\n\r\nNote that the iPad/Safari does not support `&#39;functionName.toString()&#39;`\r\n\r\nIf you have a lot of legacy code, you can also use the plain JavaScript variant in TypeScript (for cleanup purposes):\r\n\r\n\r\n    interface externTemplates\r\n    {\r\n    \tmyString:string;\r\n    }\r\n    \r\n    declare var templates:externTemplates;\r\n    \r\n    alert(templates.myString)\r\n\r\nand you can use the multiline-string object from the plain JavaScript variant, where you put the templates into another file (which you can merge in the bundle).\r\n\r\nYou can try TypeScript at&lt;br /&gt;\r\nhttp://www.typescriptlang.org/Playground\r\n\r\n\r\n  [1]: http://www.typescriptlang.org/Playground"},{"score":12,"body_markdown":"The equivalent in javascript is:\r\n\r\n    var text = `\r\n    This\r\n    Is\r\n    A\r\n    Multiline\r\n    String\r\n    `;\r\nHere&#39;s the [specification][1]. See browser support at the bottom of this [page][2]. Here are some [examples][3] too.\r\n\r\n\r\n  [1]: http://www.ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\r\n  [3]: https://developers.google.com/web/updates/2015/01/ES6-Template-Strings?hl=en#multiline-strings"},{"score":6,"body_markdown":"ES6 allows you to use a backtick to specify a string on multiple lines.  It&#39;s called a Template Literal.  Like this:\r\n\r\n    var multilineString = `One line of text\r\n        second line of text\r\n        third line of text\r\n        fourth line of text`;\r\n\r\nUsing the backtick works in NodeJS, and it&#39;s supported by Chrome, Firefox, Edge, Safari, and Opera.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\r\n        "},{"score":4,"body_markdown":"Also do note that, when extending string over multiple lines using forward backslash at end of each line, any extra characters (mostly spaces, tabs and comments added by mistake) after forward backslash will cause unexpected character error, which i took an hour to find out\r\n\r\n    var string = &quot;line1\\  // comment, space or tabs here raise error\r\n    line2&quot;;"},{"score":2,"body_markdown":"You have to use the concatenation operator &#39;+&#39;.\r\n\r\n    &lt;!DOCTYPE html&gt;\r\n    &lt;html lang=&quot;en&quot;&gt;\r\n    &lt;head&gt;\r\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\r\n        &lt;title&gt;Document&lt;/title&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n        &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;\r\n        &lt;script&gt;\r\n            var str = &quot;This &quot;\r\n                    + &quot;\\n&lt;br&gt;is &quot;\r\n                    + &quot;\\n&lt;br&gt;multiline &quot;\r\n                    + &quot;\\n&lt;br&gt;string.&quot;;\r\n            document.getElementById(&quot;demo&quot;).innerHTML = str;\r\n         &lt;/script&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\nBy using `\\n` your source code will look like -\r\n\r\n&lt;pre&gt;\r\nThis \r\n &amp;lt;br&amp;gt;is\r\n &amp;lt;br&amp;gt;multiline\r\n &amp;lt;br&amp;gt;string.\r\n&lt;/pre&gt;\r\n\r\nBy using `&lt;br&gt;` your browser output will look like - \r\n\r\n&lt;pre&gt;\r\nThis\r\nis\r\nmultiline\r\nstring.\r\n&lt;/pre&gt;"},{"score":4,"body_markdown":"Please for the love of the internet use string concatenation and opt not to use ES6 solutions for this. ES6 is NOT supported all across the board, much like CSS3 and certain browsers being slow to adapt to the CSS3 movement. Use plain ol&#39; JavaScript, your end users will thank you.\r\n\r\nExample:\r\n\r\n`var str = &quot;This world is neither flat nor round. &quot;+\r\n           &quot;Once was lost will be found&quot;;`"},{"score":8,"body_markdown":"The ES6 way of doing it would be by using template literals:\r\n\r\n    const str = `This \r\n    \r\n    is \r\n    \r\n    a\r\n    \r\n    multiline text`; \r\n    \r\n    console.log(str);\r\n\r\n\r\nMore reference [here][1]\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"},{"score":5,"body_markdown":"Easiest way to make multiline strings in Javascrips is with the use of backticks ( `` ). This allows you to create multiline strings in which you can insert variables with `${variableName}`.\r\n\r\n\r\nExample:\r\n--------\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let name = &#39;Willem&#39;; \r\n    let age = 26;\r\n\r\n    let multilineString = `\r\n    my name is: ${name}\r\n\r\n    my age is: ${age}\r\n    `;\r\n\r\n    console.log(multilineString);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\ncompatibility :\r\n--------------\r\n\r\n - It was introduces in `ES6`//`es2015`\r\n - It is now natively supported by all major browser vendors (except internet explorer)\r\n\r\n[Check exact compatibility in Mozilla docs here][1]\r\n\r\n\r\n  [1]: https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Template_literals"},{"score":0,"body_markdown":"The Rule is: when inside a string, use \\n wherever you want a new line; you do not have to put a space before or after the \\n, JavaScript&#39;s interpreter is smart enough to know how long the unprintable character representation is."},{"score":-3,"body_markdown":"# Exact\n\nRuby [produce](https://onlinegdb.com/SkmXI6R38): `&quot;This\\nIs\\nA\\nMultiline\\nString\\n&quot;` - below JS produce exact same string \n\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\n\n&lt;!-- language: lang-js --&gt;\n\n    text = `This\n    Is\n    A\n    Multiline\n    String\n    `\n\n    // TEST\n    console.log(JSON.stringify(text));\n    console.log(text);\n\n&lt;!-- end snippet --&gt;\n\nThis is improvement to [Lonnie Best answer](https://stackoverflow.com/a/33523770/860099)"},{"score":1,"body_markdown":"You can use tagged templates to make sure you get the desired output.\r\n\r\nFor example:\r\n\r\n    // Merging multiple whitespaces and trimming the output\r\n    \r\n    const t = (strings) =&gt; { return strings.map((s) =&gt; s.replace(/\\s+/g, &#39; &#39;)).join(&quot;&quot;).trim() }\r\n    console.log(t`\r\n      This\r\n      Is\r\n      A\r\n      Multiline\r\n      String\r\n    `);\r\n    // Output: &#39;This Is A Multiline String&#39;\r\n    \r\n    // Similar but keeping whitespaces:\r\n    \r\n    const tW = (strings) =&gt; { return strings.map((s) =&gt; s.replace(/\\s+/g, &#39;\\n&#39;)).join(&quot;&quot;).trim() }\r\n    console.log(tW`\r\n      This\r\n      Is\r\n      A\r\n      Multiline\r\n      String\r\n    `);\r\n    // Output: &#39;This\\nIs\\nA\\nMultiline\\nString&#39;"}],"score":2781}