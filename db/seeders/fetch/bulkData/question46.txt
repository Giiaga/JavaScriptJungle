{"body":"**What I am looking for:**\r\n\r\nA way to style one **HALF** of a character. (In this case, half the letter being transparent)\r\n\r\n**What I have currently searched for and tried (With no luck):**\r\n\r\n- Methods for styling half of a character/letter\r\n- Styling part of a character with CSS or JavaScript\r\n- Apply CSS to 50% of a character\r\n\r\n\r\nBelow is an example of what I am trying to obtain.\r\n\r\n![x][3]\r\n\r\nDoes a CSS or JavaScript solution exist for this, or am I going to have to resort to images? I would prefer not to go the image route as this text will end up being generated dynamically.\r\n\r\n----------\r\n\r\n**UPDATE:**\r\n\r\nSince many have asked why I would ever want to style half of a character, this is why. My city had recently spent $250,000 to define a new &quot;brand&quot; for itself. This **[logo][1]** is what they came up with. Many people have complained about the simplicity and lack of creativity and continue to do so. My goal was to come up with this **[website][2]** as a joke. Type in &#39;Halifax&#39; and you will see what I mean.\r\n\r\n  [1]: https://web.archive.org/web/20140428135239/http://halifaxdefined.ca/img/halifax_logo_new.png\r\n  [2]: http://gameovercancer.ca/tests/brandgenerator/\r\n  [3]: http://i.stack.imgur.com/SaH8v.png","title":"Is it possible to apply CSS to half of a character?","answers":[{"score":62,"body_markdown":"Closest I can get:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $(function(){\r\n      $(&#39;span&#39;).width($(&#39;span&#39;).width()/2);\r\n      $(&#39;span:nth-child(2)&#39;).css(&#39;text-indent&#39;, -$(&#39;span&#39;).width());\r\n    });\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    body{\r\n      font-family: arial;\r\n    }\r\n    span{\r\n      display: inline-block;\r\n      overflow: hidden;\r\n    }\r\n    span:nth-child(2){\r\n      color: red;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;span&gt;X&lt;/span&gt;&lt;span&gt;X&lt;/span&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nDemo: http://jsfiddle.net/9wxfY/2/\r\n\r\nHeres a version that just uses one span: http://jsfiddle.net/9wxfY/4/"},{"score":494,"body_markdown":"![enter image description here][1]&lt;br&gt;&lt;br&gt;&lt;br&gt;\r\n\r\nI&#39;ve just finished developing the plugin and it is available for everyone to use! Hope you will enjoy it. \r\n\r\n###View Project on [GitHub](https://github.com/emisfera/Splitchar) - View Project [Website](http://razvanbalosin.com/Splitchar.js/). &lt;b&gt;(so you can see all the split styles)&lt;/b&gt;\r\n\r\n\r\n##&lt;b&gt;Usage&lt;/b&gt;\r\nFirst of all, make sure you have the `jQuery` library is included. The best way to get the latest jQuery version is to update your head tag with:\r\n\r\n    &lt;script src=&quot;http://code.jquery.com/jquery-latest.min.js&quot;&gt;&lt;/script&gt;\r\n\r\nAfter downloading the files, make sure you include them in your project:\r\n\r\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/splitchar.css&quot;&gt;\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;js/splitchar.js&quot;&gt;&lt;/script&gt;\r\n##&lt;b&gt;Markup&lt;/b&gt;\r\nAll you have to do is to asign the class `splitchar` , followed by the desired style to the element wrapping your text. e.g\r\n\r\n    &lt;h1 class=&quot;splitchar horizontal&quot;&gt;Splitchar&lt;/h1&gt;\r\n\r\nAfter all this is done, just make sure you call the jQuery function in your document ready file like this:\r\n\r\n    $(&quot;.splitchar&quot;).splitchar();\r\n\r\n##&lt;b&gt;Customizing&lt;/b&gt;\r\nIn order to make the text look exactly as you want it to, all you have to do is apply your design like this:\r\n\r\n    .horizontal { /* Base CSS - e.g font-size */ }\r\n    .horizontal:before { /* CSS for the left half */ }\r\n    .horizontal:after { /* CSS for the right half */ }\r\n&lt;br&gt;\r\nThat&#39;s it! Now you have the `Splitchar` plugin all set. More info about it at [http://razvanbalosin.com/Splitchar.js/](http://razvanbalosin.com/Splitchar.js/).\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/TkwNq.png"},{"score":162,"body_markdown":"![Example][1]\n\n-------\n\n## [JSFiddle DEMO](http://jsfiddle.net/CL82F/14/)\n\nWe&#39;ll do it using just CSS pseudo selectors! \n\nThis technique will work with dynamically generated content and different font sizes and widths.\n\n**HTML:**\n\n    &lt;div class=&#39;split-color&#39;&gt;Two is better than one.&lt;/div&gt;\n\n**CSS:**\n    \n    .split-color &gt; span {\n        white-space: pre-line;\n        position: relative;\n        color: #409FBF;\n    }\n    \n    .split-color &gt; span:before {\n        content: attr(data-content);\n        pointer-events: none;  /* Prevents events from targeting pseudo-element */\n        position: absolute;\n        overflow: hidden;\n        color: #264A73;\n        width: 50%;\n        z-index: 1;\n    }\n\nTo wrap the dynamically generated string, you could use a function like this:\n\n    // Wrap each letter in a span tag and return an HTML string\n    // that can be used to replace the original text\n    function wrapString(str) {\n      var output = [];\n      str.split(&#39;&#39;).forEach(function(letter) {\n        var wrapper = document.createElement(&#39;span&#39;);\n        wrapper.dataset.content = wrapper.innerHTML = letter;\n\n        output.push(wrapper.outerHTML);\n      });\n\n      return output.join(&#39;&#39;);\n    }\n\n    // Replace the original text with the split-color text\n    window.onload = function() {\n        var el  = document.querySelector(&#39;.split-color&#39;),\n            txt = el.innerHTML;\n        \n        el.innerHTML = wrapString(txt);\n    }\n\n  [1]: http://i.stack.imgur.com/oBWFs.png\n"},{"score":38,"body_markdown":"**Limited CSS and jQuery Solution**\r\n\r\nI am not sure how elegant this solution is, but it cuts everything exactly in half: http://jsfiddle.net/9wxfY/11/\r\n\r\nOtherwise, I have created a nice solution for you... All you need to do is have this for your HTML:\r\n\r\n***Take a look at this most recent, and accurate, edit as of 6/13/2016 : http://jsfiddle.net/9wxfY/43/***\r\n\r\nAs for the CSS, it is very limited... You only need to apply it to `:nth-child(even)`\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $(function(){\r\n      var $hc = $(&#39;.half-color&#39;);\r\n      var str = $hc.text();\r\n      $hc.html(&quot;&quot;);\r\n\r\n      var i = 0;\r\n      var chars;\r\n      var dupText;\r\n\r\n      while(i &lt; str.length){\r\n        chars = str[i];\r\n        if(chars == &quot; &quot;) chars = &quot;&amp;nbsp;&quot;;\r\n        dupText = &quot;&lt;span&gt;&quot; + chars + &quot;&lt;/span&gt;&quot;;\r\n\r\n        var firstHalf = $(dupText);\r\n        var secondHalf = $(dupText);\r\n\r\n        $hc.append(firstHalf)\r\n        $hc.append(secondHalf)\r\n\r\n        var width = firstHalf.width()/2;\r\n\r\n        firstHalf.width(width);\r\n        secondHalf.css(&#39;text-indent&#39;, -width);\r\n\r\n        i++;\r\n      }\r\n    });\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .half-color span{\r\n      font-size: 2em;\r\n      display: inline-block;\r\n      overflow: hidden;\r\n    }\r\n    .half-color span:nth-child(even){\r\n      color: red;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;div class=&quot;half-color&quot;&gt;This is a sentence&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":2981,"body_markdown":"# [Now on GitHub as a Plugin!][1]\r\n![enter image description here][2] Feel free to fork and improve.\r\n\r\n# [Demo][3] | [Download Zip][4] | [Half-Style.com][5] (Redirects to GitHub)\r\n\r\n---\r\n\r\n - **Pure CSS** for a Single Character\r\n - JavaScript used for automation across text or multiple characters\r\n - Preserves Text Accessibility for screen readers for the blind or visually\r\n   impaired\r\n\r\n\r\n\r\n\r\n# Part 1: Basic Solution\r\n\r\n![Half Style on text][6]\r\n\r\n**Demo:** http://jsfiddle.net/arbel/pd9yB/1694/\r\n\r\n---\r\n\r\nThis works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.\r\n\r\nAlso, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.\r\n\r\n**Explanation for a single character:**\r\n\r\nPure CSS. All you need to do is to apply `.halfStyle` class to each element that contains the character you want to be half-styled.\r\n\r\nFor each span element containing the character, you can create a data attribute, for example here `data-content=&quot;X&quot;`, and on the pseudo element use `content: attr(data-content);` so the `.halfStyle:before` class will be dynamic and you won&#39;t need to hard code it for every instance.\r\n\r\n**Explanation for any text:**\r\n\r\nSimply add `textToHalfStyle` class to the element containing the text.\r\n\r\n---\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // jQuery for automated mode\r\n    jQuery(function($) {\r\n        var text, chars, $el, i, output;\r\n\r\n        // Iterate over all class occurences\r\n        $(&#39;.textToHalfStyle&#39;).each(function(idx, el) {\r\n        $el = $(el);\r\n        text = $el.text();\r\n        chars = text.split(&#39;&#39;);\r\n\r\n        // Set the screen-reader text\r\n        $el.html(&#39;&lt;span style=&quot;position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);&quot;&gt;&#39; + text + &#39;&lt;/span&gt;&#39;);\r\n\r\n        // Reset output for appending\r\n        output = &#39;&#39;;\r\n\r\n        // Iterate over all chars in the text\r\n        for (i = 0; i &lt; chars.length; i++) {\r\n            // Create a styled element for each character and append to container\r\n            output += &#39;&lt;span aria-hidden=&quot;true&quot; class=&quot;halfStyle&quot; data-content=&quot;&#39; + chars[i] + &#39;&quot;&gt;&#39; + chars[i] + &#39;&lt;/span&gt;&#39;;\r\n        }\r\n\r\n        // Write to DOM only once\r\n        $el.append(output);\r\n      });\r\n    });\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .halfStyle {\r\n        position: relative;\r\n        display: inline-block;\r\n        font-size: 80px; /* or any font size will work */\r\n        color: black; /* or transparent, any color */\r\n        overflow: hidden;\r\n        white-space: pre; /* to preserve the spaces from collapsing */\r\n    }\r\n\r\n    .halfStyle:before {\r\n        display: block;\r\n        z-index: 1;\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 50%;\r\n        content: attr(data-content); /* dynamic content for the pseudo element */\r\n        overflow: hidden;\r\n        color: #f00;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n    &lt;p&gt;Single Characters:&lt;/p&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;X&quot;&gt;X&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Y&quot;&gt;Y&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Z&quot;&gt;Z&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;A&quot;&gt;A&lt;/span&gt;\r\n\r\n    &lt;hr/&gt;\r\n    &lt;p&gt;Automated:&lt;/p&gt;\r\n\r\n    &lt;span class=&quot;textToHalfStyle&quot;&gt;Half-style, please.&lt;/span&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n([JSFiddle demo](http://jsfiddle.net/arbel/pd9yB/1695/))\r\n\r\n---\r\n\r\n# Part 2: Advanced solution - Independent left and right parts\r\n\r\n![Half Style on text - advanced - With Text Shadow][7]\r\n\r\n***With this solution you can style left and right parts, individually and independently***.\r\n\r\nEverything is the same, only more advanced CSS does the magic.\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    jQuery(function($) {\r\n        var text, chars, $el, i, output;\r\n\r\n        // Iterate over all class occurences\r\n        $(&#39;.textToHalfStyle&#39;).each(function(idx, el) {\r\n            $el = $(el);\r\n            text = $el.text();\r\n            chars = text.split(&#39;&#39;);\r\n\r\n            // Set the screen-reader text\r\n            $el.html(&#39;&lt;span style=&quot;position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);&quot;&gt;&#39; + text + &#39;&lt;/span&gt;&#39;);\r\n\r\n            // Reset output for appending\r\n            output = &#39;&#39;;\r\n\r\n            // Iterate over all chars in the text\r\n            for (i = 0; i &lt; chars.length; i++) {\r\n                // Create a styled element for each character and append to container\r\n                output += &#39;&lt;span aria-hidden=&quot;true&quot; class=&quot;halfStyle&quot; data-content=&quot;&#39; + chars[i] + &#39;&quot;&gt;&#39; + chars[i] + &#39;&lt;/span&gt;&#39;;\r\n            }\r\n\r\n            // Write to DOM only once\r\n            $el.append(output);\r\n        });\r\n    });\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .halfStyle {\r\n        position: relative;\r\n        display: inline-block;\r\n        font-size: 80px; /* or any font size will work */\r\n        color: transparent; /* hide the base character */\r\n        overflow: hidden;\r\n        white-space: pre; /* to preserve the spaces from collapsing */\r\n    }\r\n\r\n    .halfStyle:before { /* creates the left part */\r\n        display: block;\r\n        z-index: 1;\r\n        position: absolute;\r\n        top: 0;\r\n        width: 50%;\r\n        content: attr(data-content); /* dynamic content for the pseudo element */\r\n        overflow: hidden;\r\n        pointer-events: none; /* so the base char is selectable by mouse */\r\n        color: #f00; /* for demo purposes */\r\n        text-shadow: 2px -2px 0px #af0; /* for demo purposes */\r\n    }\r\n\r\n    .halfStyle:after { /* creates the right part */\r\n        display: block;\r\n        direction: rtl; /* very important, will make the width to start from right */\r\n        position: absolute;\r\n        z-index: 2;\r\n        top: 0;\r\n        left: 50%;\r\n        width: 50%;\r\n        content: attr(data-content); /* dynamic content for the pseudo element */\r\n        overflow: hidden;\r\n        pointer-events: none; /* so the base char is selectable by mouse */\r\n        color: #000; /* for demo purposes */\r\n        text-shadow: 2px 2px 0px #0af; /* for demo purposes */\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;p&gt;Single Characters:&lt;/p&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;X&quot;&gt;X&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Y&quot;&gt;Y&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Z&quot;&gt;Z&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;A&quot;&gt;A&lt;/span&gt;\r\n\r\n    &lt;hr/&gt;\r\n    &lt;p&gt;Automated:&lt;/p&gt;\r\n\r\n    &lt;span class=&quot;textToHalfStyle&quot;&gt;Half-style, please.&lt;/span&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n([JSFiddle demo](http://jsfiddle.net/arbel/pd9yB/1695/))\r\n\r\n\r\n&lt;hr/&gt;\r\n&lt;hr/&gt;\r\n\r\n# Part 3: Mix-Match and Improve\r\nNow that we know what is possible, let&#39;s create some variations.\r\n&lt;hr/&gt;\r\n\r\n## -Horizontal Half Parts\r\n\r\n\r\n* ### Without Text Shadow:\r\n![Horizontal Half Parts - No Text Shadow][8]\r\n\r\n* ### Possibility of Text Shadow for each half part independently:\r\n![halfStyle - Horizontal Half Parts - With Text Shadow][9]\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // jQuery for automated mode\r\n    jQuery(function($) {\r\n        var text, chars, $el, i, output;\r\n\r\n        // Iterate over all class occurences\r\n        $(&#39;.textToHalfStyle&#39;).each(function(idx, el) {\r\n            $el = $(el);\r\n            text = $el.text();\r\n            chars = text.split(&#39;&#39;);\r\n\r\n            // Set the screen-reader text\r\n            $el.html(&#39;&lt;span style=&quot;position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);&quot;&gt;&#39; + text + &#39;&lt;/span&gt;&#39;);\r\n\r\n            // Reset output for appending\r\n            output = &#39;&#39;;\r\n\r\n            // Iterate over all chars in the text\r\n            for (i = 0; i &lt; chars.length; i++) {\r\n                // Create a styled element for each character and append to container\r\n                output += &#39;&lt;span aria-hidden=&quot;true&quot; class=&quot;halfStyle&quot; data-content=&quot;&#39; + chars[i] + &#39;&quot;&gt;&#39; + chars[i] + &#39;&lt;/span&gt;&#39;;\r\n            }\r\n\r\n            // Write to DOM only once\r\n            $el.append(output);\r\n        });\r\n    });\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .halfStyle {\r\n      position: relative;\r\n      display: inline-block;\r\n      font-size: 80px; /* or any font size will work */\r\n      color: transparent; /* hide the base character */\r\n      overflow: hidden;\r\n      white-space: pre; /* to preserve the spaces from collapsing */\r\n    }\r\n\r\n    .halfStyle:before { /* creates the top part */\r\n      display: block;\r\n      z-index: 2;\r\n      position: absolute;\r\n      top: 0;\r\n      height: 50%;\r\n      content: attr(data-content); /* dynamic content for the pseudo element */\r\n      overflow: hidden;\r\n      pointer-events: none; /* so the base char is selectable by mouse */\r\n      color: #f00; /* for demo purposes */\r\n      text-shadow: 2px -2px 0px #af0; /* for demo purposes */\r\n    }\r\n\r\n    .halfStyle:after { /* creates the bottom part */\r\n      display: block;\r\n      position: absolute;\r\n      z-index: 1;\r\n      top: 0;\r\n      height: 100%;\r\n      content: attr(data-content); /* dynamic content for the pseudo element */\r\n      overflow: hidden;\r\n      pointer-events: none; /* so the base char is selectable by mouse */\r\n      color: #000; /* for demo purposes */\r\n      text-shadow: 2px 2px 0px #0af; /* for demo purposes */\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;p&gt;Single Characters:&lt;/p&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;X&quot;&gt;X&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Y&quot;&gt;Y&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Z&quot;&gt;Z&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;A&quot;&gt;A&lt;/span&gt;\r\n\r\n    &lt;hr/&gt;\r\n    &lt;p&gt;Automated:&lt;/p&gt;\r\n\r\n    &lt;span class=&quot;textToHalfStyle&quot;&gt;Half-style, please.&lt;/span&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n([JSFiddle demo][10])\r\n\r\n\r\n&lt;hr/&gt;\r\n&lt;hr/&gt;\r\n\r\n## -Vertical 1/3 Parts\r\n\r\n* ### Without Text Shadow:\r\n![halfStyle - Vertical 1/3 Parts - No Text Shadow][11]\r\n\r\n* ### Possibility of Text Shadow for each 1/3 part independently:\r\n![halfStyle - Vertical 1/3 Parts - With Text Shadow][12]\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // jQuery for automated mode\r\n    jQuery(function($) {\r\n        var text, chars, $el, i, output;\r\n\r\n        // Iterate over all class occurences\r\n        $(&#39;.textToHalfStyle&#39;).each(function(idx, el) {\r\n        $el = $(el);\r\n        text = $el.text();\r\n        chars = text.split(&#39;&#39;);\r\n\r\n        // Set the screen-reader text\r\n        $el.html(&#39;&lt;span style=&quot;position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);&quot;&gt;&#39; + text + &#39;&lt;/span&gt;&#39;);\r\n\r\n        // Reset output for appending\r\n        output = &#39;&#39;;\r\n\r\n        // Iterate over all chars in the text\r\n        for (i = 0; i &lt; chars.length; i++) {\r\n            // Create a styled element for each character and append to container\r\n            output += &#39;&lt;span aria-hidden=&quot;true&quot; class=&quot;halfStyle&quot; data-content=&quot;&#39; + chars[i] + &#39;&quot;&gt;&#39; + chars[i] + &#39;&lt;/span&gt;&#39;;\r\n        }\r\n\r\n        // Write to DOM only once\r\n        $el.append(output);\r\n      });\r\n    });\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .halfStyle { /* base char and also the right 1/3 */\r\n        position: relative;\r\n        display: inline-block;\r\n        font-size: 80px; /* or any font size will work */\r\n        color: transparent; /* hide the base character */\r\n        overflow: hidden;\r\n        white-space: pre; /* to preserve the spaces from collapsing */\r\n        color: #f0f; /* for demo purposes */\r\n        text-shadow: 2px 2px 0px #0af; /* for demo purposes */\r\n    }\r\n\r\n    .halfStyle:before { /* creates the left 1/3 */\r\n        display: block;\r\n        z-index: 2;\r\n        position: absolute;\r\n        top: 0;\r\n        width: 33.33%;\r\n        content: attr(data-content); /* dynamic content for the pseudo element */\r\n        overflow: hidden;\r\n        pointer-events: none; /* so the base char is selectable by mouse */\r\n        color: #f00; /* for demo purposes */\r\n        text-shadow: 2px -2px 0px #af0; /* for demo purposes */\r\n    }\r\n\r\n    .halfStyle:after { /* creates the middle 1/3 */\r\n        display: block;\r\n        z-index: 1;\r\n        position: absolute;\r\n        top: 0;\r\n        width: 66.66%;\r\n        content: attr(data-content); /* dynamic content for the pseudo element */\r\n        overflow: hidden;\r\n        pointer-events: none; /* so the base char is selectable by mouse */\r\n        color: #000; /* for demo purposes */\r\n        text-shadow: 2px 2px 0px #af0; /* for demo purposes */\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n    &lt;p&gt;Single Characters:&lt;/p&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;X&quot;&gt;X&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Y&quot;&gt;Y&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Z&quot;&gt;Z&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;A&quot;&gt;A&lt;/span&gt;\r\n\r\n    &lt;hr/&gt;\r\n    &lt;p&gt;Automated:&lt;/p&gt;\r\n\r\n    &lt;span class=&quot;textToHalfStyle&quot;&gt;Half-style, please.&lt;/span&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n([JSFiddle demo][13])\r\n\r\n\r\n\r\n&lt;hr/&gt;\r\n&lt;hr/&gt;\r\n\r\n## -Horizontal 1/3 Parts\r\n\r\n* ### Without Text Shadow:\r\n![halfStyle - Horizontal 1/3 Parts - No Text Shadow][14]\r\n\r\n* ### Possibility of Text Shadow for each 1/3 part independently:\r\n![halfStyle - Horizontal 1/3 Parts - With Text Shadow][15]\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // jQuery for automated mode\r\n    jQuery(function($) {\r\n        var text, chars, $el, i, output;\r\n\r\n        // Iterate over all class occurences\r\n        $(&#39;.textToHalfStyle&#39;).each(function(idx, el) {\r\n        $el = $(el);\r\n        text = $el.text();\r\n        chars = text.split(&#39;&#39;);\r\n\r\n        // Set the screen-reader text\r\n        $el.html(&#39;&lt;span style=&quot;position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);&quot;&gt;&#39; + text + &#39;&lt;/span&gt;&#39;);\r\n\r\n        // Reset output for appending\r\n        output = &#39;&#39;;\r\n\r\n        // Iterate over all chars in the text\r\n        for (i = 0; i &lt; chars.length; i++) {\r\n            // Create a styled element for each character and append to container\r\n            output += &#39;&lt;span aria-hidden=&quot;true&quot; class=&quot;halfStyle&quot; data-content=&quot;&#39; + chars[i] + &#39;&quot;&gt;&#39; + chars[i] + &#39;&lt;/span&gt;&#39;;\r\n        }\r\n\r\n        // Write to DOM only once\r\n        $el.append(output);\r\n      });\r\n    });\r\n\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .halfStyle { /* base char and also the bottom 1/3 */\r\n      position: relative;\r\n      display: inline-block;\r\n      font-size: 80px; /* or any font size will work */\r\n      color: transparent;\r\n      overflow: hidden;\r\n      white-space: pre; /* to preserve the spaces from collapsing */\r\n      color: #f0f;\r\n      text-shadow: 2px 2px 0px #0af; /* for demo purposes */\r\n    }\r\n\r\n    .halfStyle:before { /* creates the top 1/3 */\r\n      display: block;\r\n      z-index: 2;\r\n      position: absolute;\r\n      top: 0;\r\n      height: 33.33%;\r\n      content: attr(data-content); /* dynamic content for the pseudo element */\r\n      overflow: hidden;\r\n      pointer-events: none; /* so the base char is selectable by mouse */\r\n      color: #f00; /* for demo purposes */\r\n      text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\r\n    }\r\n\r\n    .halfStyle:after { /* creates the middle 1/3 */\r\n      display: block;\r\n      position: absolute;\r\n      z-index: 1;\r\n      top: 0;\r\n      height: 66.66%;\r\n      content: attr(data-content); /* dynamic content for the pseudo element */\r\n      overflow: hidden;\r\n      pointer-events: none; /* so the base char is selectable by mouse */\r\n      color: #000; /* for demo purposes */\r\n      text-shadow: 2px 2px 0px #af0; /* for demo purposes */\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;p&gt;Single Characters:&lt;/p&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;X&quot;&gt;X&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Y&quot;&gt;Y&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Z&quot;&gt;Z&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;A&quot;&gt;A&lt;/span&gt;\r\n\r\n    &lt;hr/&gt;\r\n    &lt;p&gt;Automated:&lt;/p&gt;\r\n\r\n    &lt;span class=&quot;textToHalfStyle&quot;&gt;Half-style, please.&lt;/span&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n([JSFiddle demo][16])\r\n\r\n\r\n&lt;hr/&gt;\r\n&lt;hr/&gt;\r\n\r\n## -HalfStyle Improvement By @KevinGranger\r\n![halfStyle - KevinGranger][17]\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // jQuery for automated mode\r\n    jQuery(function($) {\r\n        var text, chars, $el, i, output;\r\n\r\n        // Iterate over all class occurences\r\n        $(&#39;.textToHalfStyle&#39;).each(function(idx, el) {\r\n        $el = $(el);\r\n        text = $el.text();\r\n        chars = text.split(&#39;&#39;);\r\n\r\n        // Set the screen-reader text\r\n        $el.html(&#39;&lt;span style=&quot;position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);&quot;&gt;&#39; + text + &#39;&lt;/span&gt;&#39;);\r\n\r\n        // Reset output for appending\r\n        output = &#39;&#39;;\r\n\r\n        // Iterate over all chars in the text\r\n        for (i = 0; i &lt; chars.length; i++) {\r\n            // Create a styled element for each character and append to container\r\n            output += &#39;&lt;span aria-hidden=&quot;true&quot; class=&quot;halfStyle&quot; data-content=&quot;&#39; + chars[i] + &#39;&quot;&gt;&#39; + chars[i] + &#39;&lt;/span&gt;&#39;;\r\n        }\r\n\r\n        // Write to DOM only once\r\n        $el.append(output);\r\n      });\r\n    });\r\n\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    body {\r\n        background-color: black;\r\n    }\r\n\r\n    .textToHalfStyle {\r\n        display: block;\r\n        margin: 200px 0 0 0;\r\n        text-align: center;\r\n    }\r\n\r\n    .halfStyle {\r\n        font-family: &#39;Libre Baskerville&#39;, serif;\r\n        position: relative;\r\n        display: inline-block;\r\n        width: 1;\r\n        font-size: 70px;\r\n        color: black;\r\n        overflow: hidden;\r\n        white-space: pre;\r\n        text-shadow: 1px 2px 0 white;\r\n    }\r\n\r\n    .halfStyle:before {\r\n        display: block;\r\n        z-index: 1;\r\n        position: absolute;\r\n        top: 0;\r\n        width: 50%;\r\n        content: attr(data-content); /* dynamic content for the pseudo element */\r\n        overflow: hidden;\r\n        color: white;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;p&gt;Single Characters:&lt;/p&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;X&quot;&gt;X&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Y&quot;&gt;Y&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Z&quot;&gt;Z&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;A&quot;&gt;A&lt;/span&gt;\r\n\r\n    &lt;hr/&gt;\r\n    &lt;p&gt;Automated:&lt;/p&gt;\r\n\r\n    &lt;span class=&quot;textToHalfStyle&quot;&gt;Half-style, please.&lt;/span&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n([JSFiddle demo][18])\r\n\r\n\r\n&lt;hr/&gt;\r\n&lt;hr/&gt;\r\n## -PeelingStyle improvement of HalfStyle by [@SamTremaine](https://stackoverflow.com/users/3631752/sam-tremaine)\r\n![halfStyle - SamTremaine][19]\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // jQuery for automated mode\r\n    jQuery(function($) {\r\n        var text, chars, $el, i, output;\r\n\r\n        // Iterate over all class occurences\r\n        $(&#39;.textToHalfStyle&#39;).each(function(idx, el) {\r\n        $el = $(el);\r\n        text = $el.text();\r\n        chars = text.split(&#39;&#39;);\r\n\r\n        // Set the screen-reader text\r\n        $el.html(&#39;&lt;span style=&quot;position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);&quot;&gt;&#39; + text + &#39;&lt;/span&gt;&#39;);\r\n\r\n        // Reset output for appending\r\n        output = &#39;&#39;;\r\n\r\n        // Iterate over all chars in the text\r\n        for (i = 0; i &lt; chars.length; i++) {\r\n            // Create a styled element for each character and append to container\r\n            output += &#39;&lt;span aria-hidden=&quot;true&quot; class=&quot;halfStyle&quot; data-content=&quot;&#39; + chars[i] + &#39;&quot;&gt;&#39; + chars[i] + &#39;&lt;/span&gt;&#39;;\r\n        }\r\n\r\n        // Write to DOM only once\r\n        $el.append(output);\r\n      });\r\n    });\r\n\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .halfStyle {\r\n        position: relative;\r\n        display: inline-block;\r\n        font-size: 68px;\r\n        color: rgba(0, 0, 0, 0.8);\r\n        overflow: hidden;\r\n        white-space: pre;\r\n        transform: rotate(4deg);\r\n        text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\r\n    }\r\n\r\n    .halfStyle:before { /* creates the left part */\r\n        display: block;\r\n        z-index: 1;\r\n        position: absolute;\r\n        top: -0.5px;\r\n        left: -3px;\r\n        width: 100%;\r\n        content: attr(data-content);\r\n        overflow: hidden;\r\n        pointer-events: none;\r\n        color: #FFF;\r\n        transform: rotate(-4deg);\r\n        text-shadow: 0px 0px 1px #000;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;p&gt;Single Characters:&lt;/p&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;X&quot;&gt;X&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Y&quot;&gt;Y&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;Z&quot;&gt;Z&lt;/span&gt;\r\n    &lt;span class=&quot;halfStyle&quot; data-content=&quot;A&quot;&gt;A&lt;/span&gt;\r\n\r\n    &lt;hr/&gt;\r\n    &lt;p&gt;Automated:&lt;/p&gt;\r\n\r\n    &lt;span class=&quot;textToHalfStyle&quot;&gt;Half-style, please.&lt;/span&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n([JSFiddle demo][20] and on [samtremaine.co.uk][21])\r\n\r\n\r\n&lt;hr/&gt;\r\n&lt;hr/&gt;\r\n# Part 4: Ready for Production\r\n\r\nCustomized different Half-Style style-sets can be used on desired elements on the same page.\r\nYou can define multiple style-sets and tell the plugin which one to use.\r\n\r\nThe plugin uses data attribute `data-halfstyle=&quot;[-CustomClassName-]&quot;` on the target `.textToHalfStyle` elements and makes all the necessary changes automatically.\r\n\r\nSo, simply on the element containing the text add `textToHalfStyle` class and data attribute `data-halfstyle=&quot;[-CustomClassName-]&quot;`. The plugin will do the rest of the job.\r\n\r\n\r\n![halfStyle - Multiple on Same Page][22]\r\n\r\nAlso the CSS style-sets&#39; class definitions match the `[-CustomClassName-]` part mentioned above and is chained to `.halfStyle`, so we will have `.halfStyle.[-CustomClassName-]`\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    jQuery(function($) {\r\n        var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;\r\n\r\n        // Iterate over all class occurrences\r\n        $(&#39;.textToHalfStyle&#39;).each(function(idx, halfstyle_el) {\r\n            $halfstyle_el = $(halfstyle_el);\r\n            halfstyle_style = $halfstyle_el.data(&#39;halfstyle&#39;) || &#39;hs-base&#39;;\r\n            halfstyle_text = $halfstyle_el.text();\r\n            halfstyle_chars = halfstyle_text.split(&#39;&#39;);\r\n\r\n            // Set the screen-reader text\r\n            $halfstyle_el.html(&#39;&lt;span style=&quot;position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);&quot;&gt;&#39; + halfstyle_text + &#39;&lt;/span&gt;&#39;);\r\n\r\n            // Reset output for appending\r\n            halfstyle_output = &#39;&#39;;\r\n\r\n            // Iterate over all chars in the text\r\n            for (halfstyle_i = 0; halfstyle_i &lt; halfstyle_chars.length; halfstyle_i++) {\r\n                // Create a styled element for each character and append to container\r\n                halfstyle_output += &#39;&lt;span aria-hidden=&quot;true&quot; class=&quot;halfStyle &#39; + halfstyle_style + &#39;&quot; data-content=&quot;&#39; + halfstyle_chars[halfstyle_i] + &#39;&quot;&gt;&#39; + halfstyle_chars[halfstyle_i] + &#39;&lt;/span&gt;&#39;;\r\n            }\r\n\r\n            // Write to DOM only once\r\n            $halfstyle_el.append(halfstyle_output);\r\n        });\r\n    });\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    /* start half-style hs-base */\r\n\r\n    .halfStyle.hs-base {\r\n        position: relative;\r\n        display: inline-block;\r\n        font-size: 80px; /* or any font size will work */\r\n        overflow: hidden;\r\n        white-space: pre; /* to preserve the spaces from collapsing */\r\n        color: #000; /* for demo purposes */\r\n    }\r\n\r\n    .halfStyle.hs-base:before {\r\n        display: block;\r\n        z-index: 1;\r\n        position: absolute;\r\n        top: 0;\r\n        width: 50%;\r\n        content: attr(data-content); /* dynamic content for the pseudo element */\r\n        pointer-events: none; /* so the base char is selectable by mouse */\r\n        overflow: hidden;\r\n        color: #f00; /* for demo purposes */\r\n    }\r\n\r\n    /* end half-style hs-base */\r\n\r\n\r\n    /* start half-style hs-horizontal-third */\r\n\r\n    .halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */\r\n        position: relative;\r\n        display: inline-block;\r\n        font-size: 80px; /* or any font size will work */\r\n        color: transparent;\r\n        overflow: hidden;\r\n        white-space: pre; /* to preserve the spaces from collapsing */\r\n        color: #f0f;\r\n        text-shadow: 2px 2px 0px #0af; /* for demo purposes */\r\n    }\r\n\r\n    .halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */\r\n        display: block;\r\n        z-index: 2;\r\n        position: absolute;\r\n        top: 0;\r\n        height: 33.33%;\r\n        content: attr(data-content); /* dynamic content for the pseudo element */\r\n        overflow: hidden;\r\n        pointer-events: none; /* so the base char is selectable by mouse */\r\n        color: #f00; /* for demo purposes */\r\n        text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\r\n    }\r\n\r\n    .halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */\r\n        display: block;\r\n        position: absolute;\r\n        z-index: 1;\r\n        top: 0;\r\n        height: 66.66%;\r\n        content: attr(data-content); /* dynamic content for the pseudo element */\r\n        overflow: hidden;\r\n        pointer-events: none; /* so the base char is selectable by mouse */\r\n        color: #000; /* for demo purposes */\r\n        text-shadow: 2px 2px 0px #af0; /* for demo purposes */\r\n    }\r\n\r\n    /* end half-style hs-horizontal-third */\r\n\r\n\r\n    /* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */\r\n\r\n    .halfStyle.hs-PeelingStyle {\r\n      position: relative;\r\n      display: inline-block;\r\n      font-size: 68px;\r\n      color: rgba(0, 0, 0, 0.8);\r\n      overflow: hidden;\r\n      white-space: pre;\r\n      transform: rotate(4deg);\r\n      text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\r\n    }\r\n\r\n    .halfStyle.hs-PeelingStyle:before { /* creates the left part */\r\n      display: block;\r\n      z-index: 1;\r\n      position: absolute;\r\n      top: -0.5px;\r\n      left: -3px;\r\n      width: 100%;\r\n      content: attr(data-content);\r\n      overflow: hidden;\r\n      pointer-events: none;\r\n      color: #FFF;\r\n      transform: rotate(-4deg);\r\n      text-shadow: 0px 0px 1px #000;\r\n    }\r\n\r\n    /* end half-style hs-PeelingStyle */\r\n\r\n\r\n    /* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/\r\n\r\n    .textToHalfStyle.hs-KevinGranger {\r\n      display: block;\r\n      margin: 200px 0 0 0;\r\n      text-align: center;\r\n    }\r\n\r\n    .halfStyle.hs-KevinGranger {\r\n      font-family: &#39;Libre Baskerville&#39;, serif;\r\n      position: relative;\r\n      display: inline-block;\r\n      width: 1;\r\n      font-size: 70px;\r\n      color: black;\r\n      overflow: hidden;\r\n      white-space: pre;\r\n      text-shadow: 1px 2px 0 white;\r\n    }\r\n\r\n    .halfStyle.hs-KevinGranger:before {\r\n      display: block;\r\n      z-index: 1;\r\n      position: absolute;\r\n      top: 0;\r\n      width: 50%;\r\n      content: attr(data-content); /* dynamic content for the pseudo element */\r\n      overflow: hidden;\r\n      color: white;\r\n    }\r\n\r\n    /* end half-style hs-KevinGranger\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;p&gt;\r\n        &lt;span class=&quot;textToHalfStyle&quot; data-halfstyle=&quot;hs-base&quot;&gt;Half-style, please.&lt;/span&gt;\r\n    &lt;/p&gt;\r\n    &lt;p&gt;\r\n        &lt;span class=&quot;textToHalfStyle&quot; data-halfstyle=&quot;hs-horizontal-third&quot;&gt;Half-style, please.&lt;/span&gt;\r\n    &lt;/p&gt;\r\n    &lt;p&gt;\r\n        &lt;span class=&quot;textToHalfStyle&quot; data-halfstyle=&quot;hs-PeelingStyle&quot;&gt;Half-style, please.&lt;/span&gt;\r\n    &lt;/p&gt;\r\n    &lt;p style=&quot;background-color:#000;&quot;&gt;\r\n        &lt;span class=&quot;textToHalfStyle&quot; data-halfstyle=&quot;hs-KevinGranger&quot;&gt;Half-style, please.&lt;/span&gt;\r\n    &lt;/p&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n([JSFiddle demo][23])\r\n\r\n\r\n  [1]: https://github.com/arbelh/HalfStyle\r\n  [2]: http://i.stack.imgur.com/Glo2Q.png\r\n  [3]: http://jsfiddle.net/arbel/pd9yB/1355/\r\n  [4]: https://github.com/arbelh/HalfStyle/archive/master.zip\r\n  [5]: http://www.half-style.com\r\n  [6]: http://i.stack.imgur.com/ZYic1.png\r\n  [7]: http://i.stack.imgur.com/zYa0F.png\r\n  [8]: https://i.stack.imgur.com/i8dpE.png\r\n  [9]: http://i.stack.imgur.com/2eDaQ.png\r\n  [10]: http://jsfiddle.net/arbel/pd9yB/1696/\r\n  [11]: https://i.stack.imgur.com/paJvV.png\r\n  [12]: http://i.stack.imgur.com/ypn4X.png\r\n  [13]: http://jsfiddle.net/arbel/pd9yB/1697/\r\n  [14]: https://i.stack.imgur.com/M1unV.png\r\n  [15]: http://i.stack.imgur.com/UeuxW.png\r\n  [16]: http://jsfiddle.net/arbel/pd9yB/1698/\r\n  [17]: http://i.stack.imgur.com/PgdJ6.png\r\n  [18]: http://jsfiddle.net/arbel/pd9yB/1699/\r\n  [19]: http://i.stack.imgur.com/r67KC.png\r\n  [20]: http://jsfiddle.net/arbel/pd9yB/1700/\r\n  [21]: http://experimental.samtremaine.co.uk/half-style/\r\n  [22]: http://i.stack.imgur.com/RxjKF.png\r\n  [23]: http://jsfiddle.net/arbel/pd9yB/1701/"},{"score":244,"body_markdown":"&gt;**Edit (oct 2017): `background-clip` or rather `background-image options` are now supported by every major browser: [CanIUse][1]**\r\n\r\nYes, you can do this with only one character and only CSS. \r\n\r\nWebkit (and Chrome) only, though:\r\n\r\nhttp://jsbin.com/rexoyice/1/\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    h1 {\r\n      display: inline-block;\r\n      margin: 0; /* for demo snippet */\r\n      line-height: 1em; /* for demo snippet */\r\n      font-family: helvetica, arial, sans-serif;\r\n      font-weight: bold;\r\n      font-size: 300px;\r\n      background: linear-gradient(to right, #7db9e8 50%,#1e5799 50%);\r\n      -webkit-background-clip: text;\r\n      -webkit-text-fill-color: transparent;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;h1&gt;X&lt;/h1&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nVisually, all the examples that use two characters (be it via JS, CSS pseudo elements, or just HTML) look fine, but note that that all adds content to the DOM which may cause accessibility--as well as text selection/cut/paste issues. \r\n\r\n\r\n  [1]: http://caniuse.com/#search=background-clip"},{"score":29,"body_markdown":"A nice WebKit-only solution that takes advantage of the `background-clip: text` support: http://jsfiddle.net/sandro_paganotti/wLkVt/\r\n\r\n    span{\r\n       font-size: 100px;\r\n       background: linear-gradient(to right, black, black 50%, grey 50%, grey);\r\n       -webkit-background-clip: text;\r\n       -webkit-text-fill-color: transparent;\r\n    }"},{"score":77,"body_markdown":"Here an ugly implementation in canvas. I tried this solution, but the results are worse than I expected, so here it is anyway.\r\n\r\n![Canvas example][1]\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $(&quot;div&quot;).each(function() {\r\n      var CHARS = $(this).text().split(&#39;&#39;);\r\n      $(this).html(&quot;&quot;);\r\n      $.each(CHARS, function(index, char) {\r\n        var canvas = $(&quot;&lt;canvas /&gt;&quot;)\r\n          .css(&quot;width&quot;, &quot;40px&quot;)\r\n          .css(&quot;height&quot;, &quot;40px&quot;)\r\n          .get(0);\r\n        $(&quot;div&quot;).append(canvas);\r\n        var ctx = canvas.getContext(&quot;2d&quot;);\r\n        var gradient = ctx.createLinearGradient(0, 0, 130, 0);\r\n        gradient.addColorStop(&quot;0&quot;, &quot;blue&quot;);\r\n        gradient.addColorStop(&quot;0.5&quot;, &quot;blue&quot;);\r\n        gradient.addColorStop(&quot;0.51&quot;, &quot;red&quot;);\r\n        gradient.addColorStop(&quot;1.0&quot;, &quot;red&quot;);\r\n        ctx.font = &#39;130pt Calibri&#39;;\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillText(char, 10, 130);\r\n      });\r\n    });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;div&gt;Example Text&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: http://i.stack.imgur.com/ltPQu.png\r\n"},{"score":43,"body_markdown":"Another CSS-only solution (though data-attribute is needed if you don&#39;t want to write letter-specific CSS). This one works more across the board (Tested IE 9/10, Chrome latest &amp; FF latest)\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    span {\r\n      position: relative;\r\n      color: rgba(50,50,200,0.5);\r\n    }\r\n\r\n    span:before {\r\n      content: attr(data-char);\r\n      position: absolute;\r\n      width: 50%;\r\n      overflow: hidden;\r\n      color: rgb(50,50,200);\r\n    }\r\n\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;span data-char=&quot;X&quot;&gt;X&lt;/span&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":53,"body_markdown":"![Enter image description here][1]\r\n\r\nI just played with @Arbel&#39;s solution:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var textToHalfStyle = $(&#39;.textToHalfStyle&#39;).text();\r\n    var textToHalfStyleChars = textToHalfStyle.split(&#39;&#39;);\r\n    $(&#39;.textToHalfStyle&#39;).html(&#39;&#39;);\r\n    $.each(textToHalfStyleChars, function(i,v){\r\n        $(&#39;.textToHalfStyle&#39;).append(&#39;&lt;span class=&quot;halfStyle&quot; data-content=&quot;&#39; + v + &#39;&quot;&gt;&#39; + v + &#39;&lt;/span&gt;&#39;);\r\n    });\r\n\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    body{\r\n        background-color: black;\r\n    }\r\n    .textToHalfStyle{\r\n        display:block;\r\n        margin: 200px 0 0 0;\r\n        text-align:center;\r\n    }\r\n    .halfStyle {\r\n        font-family: &#39;Libre Baskerville&#39;, serif;\r\n        position:relative;\r\n        display:inline-block;\r\n        width:1;\r\n        font-size:70px;\r\n        color: black;\r\n        overflow:hidden;\r\n        white-space: pre;\r\n        text-shadow: 1px 2px 0 white;\r\n    }\r\n    .halfStyle:before {\r\n        display:block;\r\n        z-index:1;\r\n        position:absolute;\r\n        top:0;\r\n        width: 50%;\r\n        content: attr(data-content); /* dynamic content for the pseudo element */\r\n        overflow:hidden;\r\n        color: white;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;span class=&quot;textToHalfStyle&quot;&gt;Dr. Jekyll and M. Hide&lt;/span&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: http://i.stack.imgur.com/RftEr.png\r\n"},{"score":30,"body_markdown":"    .halfStyle {\r\n        position:relative;\r\n        display:inline-block;\r\n        font-size:68px; /* or any font size will work */\r\n        color: rgba(0,0,0,0.8); /* or transparent, any color */\r\n        overflow:hidden;\r\n        white-space: pre; /* to preserve the spaces from collapsing */\r\n        transform:rotate(4deg);\r\n        -webkit-transform:rotate(4deg);\r\n        text-shadow:2px 1px 3px rgba(0,0,0,0.3);\r\n    }\r\n    .halfStyle:before {\r\n        display:block;\r\n        z-index:1;\r\n        position:absolute;\r\n        top:-0.5px;\r\n        left:-3px;\r\n        width: 100%;\r\n        content: attr(data-content); /* dynamic content for the pseudo element */\r\n        overflow:hidden;\r\n        color: white;\r\n        transform:rotate(-4deg);\r\n        -webkit-transform:rotate(-4deg);\r\n        text-shadow:0 0 1px black;\r\n        \r\n    }\r\n\r\nhttp://experimental.samtremaine.co.uk/half-style/\r\n\r\nYou can crowbar this code into doing all sorts of interesting things - this is just one implementation my associate and I came up with last night."},{"score":98,"body_markdown":"It may be irrelevant, maybe not, but sometime ago, I created a jQuery function that does the same thing, but horizontally.\r\n\r\nI called it &quot;Strippex&quot; For &#39;stripe&#39;+&#39;text&#39;, demo : http://cdpn.io/FcIBg\r\n\r\nI&#39;m not saying this is the solution of any problems, but I already tried to apply css to half of a character, but horizontally, So the idea is the same, the realisation may be horrible, but it works.\r\n\r\nAh, and the most important, I had fun creating it !\r\n\r\n![enter image description here][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/z15N0.png"},{"score":17,"body_markdown":"You can also do it using SVG, if you wish:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var title = document.querySelector(&#39;h1&#39;),\r\n        text = title.innerHTML,\r\n        svgTemplate = document.querySelector(&#39;svg&#39;),\r\n        charStyle = svgTemplate.querySelector(&#39;#text&#39;);\r\n\r\n    svgTemplate.style.display = &#39;block&#39;;\r\n\r\n    var space = 0;\r\n\r\n    for (var i = 0; i &lt; text.length; i++) {\r\n      var x = charStyle.cloneNode();\r\n      x.textContent = text[i];\r\n      svgTemplate.appendChild(x);\r\n      x.setAttribute(&#39;x&#39;, space);\r\n      space += x.clientWidth || 15;\r\n    }\r\n\r\n    title.innerHTML = &#39;&#39;;\r\n    title.appendChild(svgTemplate);\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;svg style=&quot;display: none; height: 100px; width: 100%&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:svg=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot;&gt;\r\n        &lt;defs id=&quot;FooDefs&quot;&gt;\r\n            &lt;linearGradient id=&quot;MyGradient&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;100%&quot; y2=&quot;0%&quot;&gt;\r\n                &lt;stop offset=&quot;50%&quot; stop-color=&quot;blue&quot; /&gt;\r\n                &lt;stop offset=&quot;50%&quot; stop-color=&quot;red&quot; /&gt;\r\n            &lt;/linearGradient&gt;\r\n        &lt;/defs&gt;\r\n        &lt;text y=&quot;50%&quot; id=&quot;text&quot; style=&quot;font-size: 72px; fill: url(#MyGradient)&quot;&gt;&lt;/text&gt;\r\n    &lt;/svg&gt;\r\n\r\n    &lt;h1&gt;This is not a solution X&lt;/h1&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\nhttp://codepen.io/nicbell/pen/jGcbq"},{"score":23,"body_markdown":"FWIW, here&#39;s my take on this doing it only with CSS: http://codepen.io/ricardozea/pen/uFbts/\r\n\r\nSeveral notes:\r\n\r\n\r\n* The main reason I did this was to test myself and see if I was able to accomplish styling half of a character while actually providing a meaningful answer to the OP.\r\n\r\n* I am aware that this is not an ideal or the most scalable solution and the solutions proposed by the people here are far better for &quot;real world&quot; scenarios.\r\n\r\n* The CSS code I created is based on the first thoughts that came to my mind and my own personal approach to the problem.\r\n\r\n* My solution only works on symmetrical characters, like X, A, O, M. **It does not work on asymmetric characters like B, C, F, K or lower case letters.\r\n\r\n* ** HOWEVER, this approach creates very interesting &#39;shapes&#39; with asymmetric characters. Try changing the X to a K or to a lower case letter like an *h* or a *p* in the CSS :)\r\n\r\n**HTML**\r\n\r\n    &lt;span class=&quot;half-letter&quot;&gt;&lt;/span&gt;\r\n\r\n**SCSS**\r\n\r\n    .half-character { \r\n      display: inline-block;\r\n      font: bold 350px/.8 Arial;\r\n      position: relative;\r\n      \r\n      &amp;:before, &amp;:after {\r\n        content: &#39;X&#39;; //Change character here\r\n        display: inline-block;\r\n        width: 50%;\r\n        overflow: hidden;\r\n        color: #7db9e8;\r\n      }\r\n      &amp;:after {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 50%;\r\n        color: #1e5799;\r\n        transform: rotateY(-180deg);\r\n      }\r\n    }\r\n"},{"score":76,"body_markdown":"If you are interested in this, then Lucas Bebber&#39;s Glitch is a very similar and super cool effect:\r\n\r\n![enter image description here][1]\r\n\r\nCreated using a simple SASS Mixin such as\r\n  \r\n    .example-one {\r\n      font-size: 100px;\r\n      @include textGlitch(&quot;example-one&quot;, 17, white, black, red, blue, 450, 115);\r\n    }\r\n\r\nMore details at [Chris Coyer&#39;s CSS Tricks][CSSTricks] and [Lucas Bebber&#39;s Codepen page][Glitch]\r\n\r\n[Glitch]:http://codepen.io/lbebber/pen/ypgql\r\n[CSSTricks]:http://css-tricks.com/glitch-effect-text-images-svg/\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/63fkI.gif"},{"score":16,"body_markdown":"This can be achieved with just CSS `:before` selector and `content property value`.\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .halfed, .halfed1 {\r\n      float: left;\r\n    }\r\n\r\n    .halfed, .halfed1 {\r\n      font-family: arial;\r\n      font-size: 300px;\r\n      font-weight: bolder;\r\n      width: 200px;\r\n      height: 300px;\r\n      position: relative; /* To help hold the content value within */\r\n      overflow: hidden;\r\n      color: #000;\r\n    }\r\n\r\n\r\n\r\n\r\n    .halfed:before, .halfed1:before   {\r\n      width: 50%; /* How much we&#39;d like to show */\r\n      overflow: hidden; /* Hide what goes beyond our dimension */  \r\n      content: &#39;X&#39;; /* Halfed character */\r\n      height: 100%;\r\n      position: absolute;\r\n      color: #28507D;\r\n\r\n    }\r\n\r\n\r\n\r\n    /* For Horizontal cut off */ \r\n\r\n    .halfed1:before   {\r\n      width: 100%;\r\n      height: 55%;\r\n      \r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;div class=&quot;halfed&quot;&gt; X &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;halfed1&quot;&gt; X &lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n[&gt;&gt; See on jsFiddle][1]\r\n\r\n\r\n  [1]: https://jsfiddle.net/u5c03mjt/"},{"score":8,"body_markdown":"You can use below code. Here in this example I have used `h1` tag and added an attribute ` data-title-text=&quot;Display Text&quot;` which will appear with different color text on `h1` tag text element, which gives effect halfcolored text as shown in below example \r\n\r\n[![enter image description here][1]][1]\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    body {\r\n      text-align: center;\r\n      margin: 0;\r\n    }\r\n\r\n    h1 {\r\n      color: #111;\r\n      font-family: arial;\r\n      position: relative;\r\n      font-family: &#39;Oswald&#39;, sans-serif;\r\n      display: inline-block;\r\n      font-size: 2.5em;\r\n    }\r\n\r\n    h1::after {\r\n      content: attr(data-title-text);\r\n      color: #e5554e;\r\n      position: absolute;\r\n      left: 0;\r\n      top: 0;\r\n      clip: rect(0, 1000px, 30px, 0);\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;h1 data-title-text=&quot;Display Text&quot;&gt;Display Text&lt;/h1&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/yQQha.png"},{"score":26,"body_markdown":"How about something like this for shorter text? \r\n\r\nIt could even work for longer text if you did something with a loop, repeating the characters with JavaScript. Anyway, the result is something like this:\r\n\r\n[![Is it possible to apply CSS to half of a character?][1]][1]\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    p.char {\r\n      position: relative;\r\n      display: inline-block;\r\n      font-size: 60px;\r\n      color: red;\r\n    }\r\n\r\n    p.char:before {\r\n      position: absolute;\r\n      content: attr(char);\r\n      width: 50%;\r\n      overflow: hidden;\r\n      color: black;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;p class=&quot;char&quot; char=&quot;S&quot;&gt;S&lt;/p&gt;\r\n    &lt;p class=&quot;char&quot; char=&quot;t&quot;&gt;t&lt;/p&gt;\r\n    &lt;p class=&quot;char&quot; char=&quot;a&quot;&gt;a&lt;/p&gt;\r\n    &lt;p class=&quot;char&quot; char=&quot;c&quot;&gt;c&lt;/p&gt;\r\n    &lt;p class=&quot;char&quot; char=&quot;k&quot;&gt;k&lt;/p&gt;\r\n    &lt;p class=&quot;char&quot; char=&quot;o&quot;&gt;o&lt;/p&gt;\r\n    &lt;p class=&quot;char&quot; char=&quot;v&quot;&gt;v&lt;/p&gt;\r\n    &lt;p class=&quot;char&quot; char=&quot;e&quot;&gt;e&lt;/p&gt;\r\n    &lt;p class=&quot;char&quot; char=&quot;r&quot;&gt;r&lt;/p&gt;\r\n    &lt;p class=&quot;char&quot; char=&quot;f&quot;&gt;f&lt;/p&gt;\r\n    &lt;p class=&quot;char&quot; char=&quot;l&quot;&gt;l&lt;/p&gt;\r\n    &lt;p class=&quot;char&quot; char=&quot;o&quot;&gt;o&lt;/p&gt;\r\n    &lt;p class=&quot;char&quot; char=&quot;w&quot;&gt;w&lt;/p&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/IjKUY.png\r\n\r\n\r\n"},{"score":5,"body_markdown":"*Just for the record in history!*\r\n\r\nI&#39;ve come up with a solution for my own work from 5-6 years ago, which is [Gradext](http://mrreiha.github.io/gradext/) ( pure javascript and pure css, no dependency ) .\r\n\r\nThe technical explanation is you can create an element like this:\r\n\r\n    &lt;span&gt;A&lt;/span&gt;\r\n\r\nnow if you want to make a gradient on text, you need to create some multiple layers, each individually specifically colored and the spectrum created will illustrate the gradient effect.\r\n\r\nfor example look at this is the word *lorem* inside of a `&lt;span&gt;` and will cause a horizontal gradient effect ( [check the examples](http://mrreiha.github.io/gradext/#examples) ):\r\n\r\n     &lt;span data-i=&quot;0&quot; style=&quot;color: rgb(153, 51, 34);&quot;&gt;L&lt;/span&gt;\r\n     &lt;span data-i=&quot;1&quot; style=&quot;color: rgb(154, 52, 35);&quot;&gt;o&lt;/span&gt;\r\n     &lt;span data-i=&quot;2&quot; style=&quot;color: rgb(155, 53, 36);&quot;&gt;r&lt;/span&gt;\r\n     &lt;span data-i=&quot;3&quot; style=&quot;color: rgb(156, 55, 38);&quot;&gt;e&lt;/span&gt;\r\n     &lt;span data-i=&quot;4&quot; style=&quot;color: rgb(157, 56, 39);&quot;&gt;m&lt;/span&gt;\r\n\r\nand you can continue doing this pattern for a long time and long paragraph as well.\r\n\r\n[![enter image description here][1]](http://mrreiha.github.io/gradext/#examples)\r\n\r\n**But!**\r\n---\r\n\r\nWhat if you want to create a **vertical gradient** effect on texts?\r\n\r\nThen there&#39;s another solution which could be helpful. I will describe in details.\r\n\r\nAssuming our first `&lt;span&gt;` again. but the content shouldn&#39;t be the letters individually; the content should be the whole text, and now we&#39;re going to copy the same ‍‍`&lt;span&gt;` again and again ( count of spans will define the quality of your gradient, more span, better result, but poor performance ). have a look at this:\r\n\r\n    &lt;span data-i=&quot;6&quot; style=&quot;color: rgb(81, 165, 39); overflow: hidden; height: 11.2px;&quot;&gt;Lorem ipsum dolor sit amet, tincidunt ut laoreet dolore magna aliquam erat volutpat.&lt;/span&gt;\r\n    &lt;span data-i=&quot;7&quot; style=&quot;color: rgb(89, 174, 48); overflow: hidden; height: 12.8px;&quot;&gt;Lorem ipsum dolor sit amet, tincidunt ut laoreet dolore magna aliquam erat volutpat.&lt;/span&gt;\r\n    &lt;span data-i=&quot;8&quot; style=&quot;color: rgb(97, 183, 58); overflow: hidden; height: 14.4px;&quot;&gt;Lorem ipsum dolor sit amet, tincidunt ut laoreet dolore magna aliquam erat volutpat.&lt;/span&gt;\r\n    &lt;span data-i=&quot;9&quot; style=&quot;color: rgb(105, 192, 68); overflow: hidden; height: 16px;&quot;&gt;Lorem ipsum dolor sit amet, tincidunt ut laoreet dolore magna aliquam erat volutpat.&lt;/span&gt;\r\n    &lt;span data-i=&quot;10&quot; style=&quot;color: rgb(113, 201, 78); overflow: hidden; height: 17.6px;&quot;&gt;Lorem ipsum dolor sit amet, tincidunt ut laoreet dolore magna aliquam erat volutpat.&lt;/span&gt;\r\n    &lt;span data-i=&quot;11&quot; style=&quot;color: rgb(121, 210, 88); overflow: hidden; height: 19.2px;&quot;&gt;Lorem ipsum dolor sit amet, tincidunt ut laoreet dolore magna aliquam erat volutpat.&lt;/span&gt;\r\n\r\n[![enter image description here][2]](http://mrreiha.github.io/gradext/#examples)\r\n\r\n**Again, But!**\r\n---\r\n\r\nwhat if you want to make these gradient effects to move and create an animation out of it?\r\n\r\nwell, there&#39;s another solution for it too. You should definitely check [`animation: true`](http://mrreiha.github.io/gradext/) or even [`.hoverable()`](http://mrreiha.github.io/gradext/) method which will lead to a gradient to start based on cursor position! ( sounds cool xD )\r\n\r\n[![enter image description here][3]](http://mrreiha.github.io/gradext/#examples)\r\n\r\nthis is simply how we&#39;re creating gradients ( linear or radial ) on texts. If you liked the idea or want to know more about it, you should check the links provided.\r\n\r\n---\r\n\r\nMaybe this is not the best option, maybe not the best performant way to do this, but it will open up some space to create exciting and delightful animations to inspire some other people for a better solution.\r\n\r\nIt will allow you to use gradient style on texts, which is supported by even IE8!\r\n\r\n[Here you can find a working live demo](http://mrreiha.github.io/gradext/) and the original repository is [here on GitHub as well, open source](https://github.com/mrReiha/Gradext) and ready to get some updates ( :D )\r\n\r\nThis is my first time ( yeah, after 5 years, you&#39;ve heard it right ) to mention this repository anywhere on the Internet, and I&#39;m excited about that!\r\n\r\n-------\r\n\r\n**[Update - 2019 August:]** Github removed *github-pages* demo of that repository because I&#39;m from Iran! Only the source code is available [here](https://github.com/mrReiha/Gradext) tho...\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/yMu0s.png\r\n  [2]: https://i.stack.imgur.com/Zo4J9.png\r\n  [3]: https://i.stack.imgur.com/0zbUJ.gif"}],"score":2889}