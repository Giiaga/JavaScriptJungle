{"body":"The following are two methods of building a link that has the sole purpose of running JavaScript code. Which is better, in terms of functionality, page load speed, validation purposes, etc.?\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function myJsFunc() {\r\n        alert(&quot;myJsFunc&quot;);\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;a href=&quot;#&quot; onclick=&quot;myJsFunc();&quot;&gt;Run JavaScript Code&lt;/a&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n or\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function myJsFunc() {\r\n        alert(&quot;myJsFunc&quot;);\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n     &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;myJsFunc();&quot;&gt;Run JavaScript Code&lt;/a&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n","title":"Which &quot;href&quot; value should I use for JavaScript links, &quot;#&quot; or &quot;javascript:void(0)&quot;?","answers":[{"score":336,"body_markdown":"`&#39;#&#39;` will take the user back to the top of the page, so I usually go with `void(0)`.\r\n\r\n`javascript:;` also behaves like `javascript:void(0);`"},{"score":143,"body_markdown":"The first one, ideally with a real link to follow in case the user has JavaScript disabled. Just make sure to return false to prevent the click event from firing if the JavaScript executes.\r\n\r\n    &lt;a href=&quot;#&quot; onclick=&quot;myJsFunc(); return false;&quot;&gt;Link&lt;/a&gt;\r\n\r\nIf you use Angular2, this way works:\r\n\r\n`&lt;a [routerLink]=&quot;&quot; (click)=&quot;passTheSalt()&quot;&gt;Click me&lt;/a&gt;`.\r\n\r\nSee here https://stackoverflow.com/a/45465728/2803344"},{"score":8,"body_markdown":"Don&#39;t lose sight of the fact that your URL may be necessary -- onclick is fired before the reference is followed, so sometimes you will need to process something clientside before navigating off the page."},{"score":39,"body_markdown":"Unless you&#39;re writing out the link using JavaScript (so that you know it&#39;s enabled in the browser), you should ideally be providing a proper link for people who are browsing with JavaScript disabled and then prevent the default action of the link in your onclick event handler. This way those with JavaScript enabled will run the function and those with JavaScript disabled will jump to an appropriate page (or location within the same page) rather than just clicking on the link and having nothing happen."},{"score":1336,"body_markdown":"Neither.  \r\n\r\nIf you can have an actual URL that makes sense use that as the HREF.  The onclick won&#39;t fire if someone middle-clicks on your link to open a new tab or if they have JavaScript disabled.\r\n\r\nIf that is not possible, then you should at least inject the anchor tag into the document with JavaScript and the appropriate click event handlers.  \r\n\r\nI realize this isn&#39;t always possible, but in my opinion it should be striven for in developing any public website.\r\n\r\nCheck out *[Unobtrusive JavaScript][1]* and *[Progressive enhancement][2]* (both Wikipedia).\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\r\n  [2]: http://en.wikipedia.org/wiki/Progressive_enhancement\r\n\r\n"},{"score":98,"body_markdown":"Ideally you&#39;d do this:\r\n\r\n    &lt;a href=&quot;javascriptlessDestination.html&quot; onclick=&quot;myJSFunc(); return false;&quot;&gt;Link text&lt;/a&gt;\r\n\r\nOr, even better, you&#39;d have the default action link in the HTML, and you&#39;d add the onclick event to the element unobtrusively via JavaScript after the DOM renders, thus ensuring that if JavaScript is not present/utilized you don&#39;t have useless event handlers riddling your code and potentially obfuscating (or at least distracting from) your actual content.\r\n"},{"score":12,"body_markdown":"It&#39;s nice to have your site be accessible by users with JavaScript disabled, in which case the href points to a page that performs the same action as the JavaScript being executed. Otherwise I use &quot;**#**&quot; with a &quot;`return false;`&quot; to prevent the default action (scroll to top of the page) as others have mentioned.\r\n\r\nGoogling for &quot;`javascript:void(0)`&quot; provides a lot of information on this topic. Some of them, like [this one][1] mention reasons to **NOT use void(0)**.\r\n\r\n  [1]: https://web.archive.org/web/20090210041609/http://blog.reindel.com/2006/08/11/a-hrefjavascriptvoid0-avoid-the-void/\r\n"},{"score":7,"body_markdown":"Ideally you should have a real URL as fallback for non-JavaScript users.\r\n\r\nIf this doesn&#39;t make sense, use `#` as the `href` attribute.  I don&#39;t like using the `onclick` attribute since it embeds JavaScript directly in the HTML.  A better idea would be to use an external JS file and then add the event handler to that link.  You can then prevent the default event so that the URL doesn&#39;t change to append the `#` after the user clicks it."},{"score":106,"body_markdown":"Neither if you ask me;\r\n\r\nIf your &quot;link&quot; has the sole purpose of running some JavaScript code it doesn&#39;t qualify as a link; rather a piece of text with a JavaScript function coupled to it. I would recommend to use a `&lt;span&gt;` tag with an `onclick handler` attached to it and some basic CSS to immitate a link. Links are made for navigation, and if your JavaScript code isn&#39;t for navigation it should not be an `&lt;a&gt;` tag.\r\n\r\nExample:\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function callFunction() { console.log(&quot;function called&quot;); }\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .jsAction {\r\n        cursor: pointer;\r\n        color: #00f;\r\n        text-decoration: underline;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;p&gt;I want to call a JavaScript function &lt;span class=&quot;jsAction&quot; onclick=&quot;callFunction();&quot;&gt;here&lt;/span&gt;.&lt;/p&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":16,"body_markdown":"Depending on what you want to accomplish, you could forget the onclick and just use the href:\r\n\r\n    &lt;a href=&quot;javascript:myJsFunc()&quot;&gt;Link Text&lt;/a&gt;\r\n\r\nIt gets around the need to return false. I don&#39;t like the `#` option because, as mentioned, it will take the user to the top of the page. If you have somewhere else to send the user if they don&#39;t have JavaScript enabled (which is rare where I work, but a very good idea), then Steve&#39;s proposed method works great. \r\n\r\n    &lt;a href=&quot;javascriptlessDestination.html&quot; onclick=&quot;myJSFunc(); return false;&quot;&gt;Link text&lt;/a&gt;\r\n\r\nLastly, you can use `javascript:void(0)` if you do not want anyone to go anywhere and if you don&#39;t want to call a JavaScript function. It works great if you have an image you want a mouseover event to happen with, but there&#39;s not anything for the user to click on.\r\n"},{"score":16,"body_markdown":"I believe you are presenting a false dichotomy. These are not the only two options. \r\n\r\nI agree with Mr. D4V360 who suggested that, even though you are using the anchor tag, you do not truly have an anchor here. All you have is a special section of a document that should behave slightly different. A `&lt;span&gt;` tag is far more appropriate."},{"score":6,"body_markdown":"**If** you use a link as a way to **just** execute some JavaScript code (instead of using a span like D4V360 greatly suggested), just do:\r\n\r\n    &lt;a href=&quot;javascript:(function()%7Balert(%22test%22)%3B%7D)()%3B&quot;&gt;test&lt;/a&gt;\r\n    \r\nIf you&#39;re using a link with onclick for navigation, don&#39;t use href=&quot;#&quot; as the fallback when JavaScript is off. It&#39;s usually very annoying when the user clicks on the link. Instead, provide the same link the onclick handler would provide if possible. If you can&#39;t do that, skip the onclick and just use a JavaScript URI in the href.\r\n"},{"score":2194,"body_markdown":"I use `javascript:void(0)`.\r\n\r\nThree reasons. Encouraging the use of `#` amongst a team of developers inevitably leads to some using the return value of the function called like this:\r\n\r\n    function doSomething() {\r\n        //Some code\r\n        return false;\r\n    }\r\n\r\nBut then they forget to use `return doSomething()` in the onclick and just use `doSomething()`.\r\n\r\nA second reason for avoiding `#` is that the final `return false;` will not execute if the called function throws an error. Hence the developers have to also remember to handle any error appropriately in the called function.\r\n\r\nA third reason is that there are cases where the `onclick` event property is assigned dynamically.  I prefer to be able to call a function or assign it dynamically without having to code the function specifically for one method of attachment or another. Hence my `onclick` (or on anything) in HTML markup look like this:\r\n\r\n    onclick=&quot;someFunc.call(this)&quot;\r\n\r\nOR\r\n\r\n    onclick=&quot;someFunc.apply(this, arguments)&quot;\r\n\r\nUsing `javascript:void(0)` avoids all of the above headaches, and I haven&#39;t found any examples of a downside.\r\n\r\nSo if you&#39;re a lone developer then you can clearly make your own choice, but if you work as a team you have to either state:\r\n\r\nUse `href=&quot;#&quot;`, make sure `onclick` always contains `return false;` at the end, that any called function does not throw an error and if you attach a function dynamically to the `onclick` property make sure that as well as not throwing an error it returns `false`.\r\n\r\nOR\r\n\r\nUse `href=&quot;javascript:void(0)&quot;`\r\n\r\nThe second is clearly much easier to communicate.\r\n"},{"score":7,"body_markdown":"If you are using an `&lt;a&gt;` element, just use this:\r\n\r\n    &lt;a href=&quot;javascript:myJSFunc();&quot; /&gt;myLink&lt;/a&gt;\r\n\r\nPersonally I&#39;d attach an event handler with JavaScript later on instead (using `attachEvent` or `addEventListener` or maybe &amp;lt;put your favorite JavaScript framework here &amp;gt; also).\r\n"},{"score":53,"body_markdown":"I agree with suggestions elsewhere stating that you should use regular URL in `href` attribute, then call some JavaScript function in onclick. The flaw is, that they automaticaly add `return false` after the call.\r\n\r\nThe problem with this approach is, that if the function will not work or if there will be any problem, the link will become unclickable. Onclick event will always return `false`, so the normal URL will not be called.\r\n\r\nThere&#39;s very simple solution. Let function return `true` if it works correctly. Then use the returned value to determine if the click should be cancelled or not:\r\n\r\n**JavaScript**\r\n\r\n    function doSomething() {\r\n        alert( &#39;you clicked on the link&#39; );\r\n        return true;\r\n    }\r\n\r\n**HTML**\r\n\r\n    &lt;a href=&quot;path/to/some/url&quot; onclick=&quot;return !doSomething();&quot;&gt;link text&lt;/a&gt;\r\n\r\n----------\r\n\r\nNote, that I negate the result of the `doSomething()` function. If it works, it will return `true`, so it will be negated (`false`) and the `path/to/some/URL` will not be called. If the function will return `false` (for example, the browser doesn&#39;t support something used within the function or anything else goes wrong), it is negated to `true` and the `path/to/some/URL` is called.\r\n"},{"score":51,"body_markdown":"I recommend using a `&lt;button&gt;` element instead, *especially* if the control is supposed to produce a change in the data. (Something like a POST.)\r\n\r\nIt&#39;s even better if you inject the elements unobtrusively, a type of progressive enhancement. (See [this comment][1].)\r\n\r\n  [1]: https://stackoverflow.com/questions/134845/href-for-javascript-links-or-javascriptvoid0#134957"},{"score":19,"body_markdown":"Usually, you should always have a fall back link to make sure that clients with JavaScript disabled still has some functionality. This concept is called unobtrusive JavaScript. \r\n\r\nExample... Let&#39;s say you have the following search link:\r\n\r\n    &lt;a href=&quot;search.php&quot; id=&quot;searchLink&quot;&gt;Search&lt;/a&gt;\r\n\r\nYou can always do the following:\r\n\r\n    var link = document.getElementById(&#39;searchLink&#39;);\r\n\r\n    link.onclick = function() {\r\n        try {\r\n            // Do Stuff Here        \r\n        } finally {\r\n            return false;\r\n        }\r\n    };\r\n\r\nThat way, people with JavaScript disabled are directed to `search.php` while your viewers with JavaScript view your enhanced functionality.\r\n"},{"score":22,"body_markdown":"It would be better to use jQuery,\r\n\r\n    $(document).ready(function() {\r\n        $(&quot;a&quot;).css(&quot;cursor&quot;, &quot;pointer&quot;);\r\n    });\r\n\r\nand omit both `href=&quot;#&quot;` and `href=&quot;javascript:void(0)&quot;`.\r\n\r\nThe anchor tag markup will be like \r\n\r\n    &lt;a onclick=&quot;hello()&quot;&gt;Hello&lt;/a&gt;\r\n\r\nSimple enough!\r\n\r\n"},{"score":8,"body_markdown":"Just to pick up the point some of the other have mentioned.\r\n\r\nIt&#39;s much better to bind the event &#39;onload&#39;a or $(&#39;document&#39;).ready{}; then to put JavaScript directly into the click event.\r\n\r\nIn the case that JavaScript isn&#39;t available, I would use a href to the current URL, and perhaps an anchor to the position of the link. The page is still be usable for the people without JavaScript those who have won&#39;t notice any difference.\r\n\r\nAs I have it to hand, here is some jQuery which might help:\r\n\r\n    var [functionName] = function() {\r\n       // do something\r\n    };\r\n\r\n    jQuery(&quot;[link id or other selector]&quot;).bind(&quot;click&quot;, [functionName]);\r\n"},{"score":11,"body_markdown":"You can also write a hint in an anchor like this:\r\n\r\n    &lt;a href=&quot;javascript:void(&#39;open popup image&#39;)&quot; onclick=&quot;return f()&quot;&gt;...&lt;/a&gt;\r\n\r\nso the user will know what this link does."},{"score":70,"body_markdown":"I use the following\r\n\r\n    &lt;a href=&quot;javascript:;&quot; onclick=&quot;myJsFunc();&quot;&gt;Link&lt;/a&gt;\r\n\r\ninstead\r\n\r\n    &lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;myJsFunc();&quot;&gt;Link&lt;/a&gt;\r\n\r\n"},{"score":36,"body_markdown":"Definitely hash (`#`) is better because in JavaScript it is a pseudoscheme:\r\n\r\n 1. pollutes history \r\n 2. instantiates new copy of engine \r\n 3. runs in global scope and doesn&#39;t respect event system. \r\n\r\nOf course &quot;#&quot; with an onclick handler which prevents default action is [much] better. Moreover, a link that has the sole purpose to run JavaScript is not really &quot;a link&quot; unless you are sending user to some sensible anchor on the page (just # will send to top) when something goes wrong. You can simply simulate look and feel of link with stylesheet and forget about href at all.\r\n\r\nIn addition, regarding cowgod&#39;s suggestion, particularly this: `...href=&quot;javascript_required.html&quot; onclick=&quot;...` This is good approach, but it doesn&#39;t distinguish between &quot;JavaScript disabled&quot; and &quot;onclick fails&quot; scenarios.\r\n"},{"score":50,"body_markdown":"`#` is better than `javascript:anything`, but the following is even better:\r\n\r\nHTML:\r\n\r\n    &lt;a href=&quot;/gracefully/degrading/url/with/same/functionality.ext&quot; class=&quot;some-selector&quot;&gt;For great justice&lt;/a&gt;\r\n\r\nJavaScript:\r\n\r\n    $(function() {\r\n        $(&quot;.some-selector&quot;).click(myJsFunc);\r\n    });\r\n\r\nYou should always strive for graceful degradation (in the event that the user doesn&#39;t have JavaScript enabled...and when it is with specs. and budget).  Also, it is considered bad form to use JavaScript attributes and protocol directly in HTML."},{"score":7,"body_markdown":"In total agreement with the overall sentiment, use `void(0)` when you need it, and use a valid URL when you need it.\r\n\r\nUsing [URL rewriting][9] you can make URLs that not only do what you want to do with JavaScript disabled, but also tell you exactly what its going to do.\r\n\r\n    &lt;a href=&quot;./Readable/Text/URL/Pointing/To/Server-Side/Script&quot; id=&quot;theLinkId&quot;&gt;WhyClickHere&lt;/a&gt;\r\n\r\nOn the server side, you just have to parse the URL and query string and do what you want. If you are clever, you can allow the server side script to respond to both Ajax and standard requests differently. Allowing you to have concise centralized code that handles all the links on your page.\r\n\r\n[URL rewriting tutorials][1]\r\n\r\nPros\r\n\r\n* Shows up in status bar\r\n* Easily upgraded to Ajax via onclick handler in JavaScript\r\n* Practically comments itself\r\n* Keeps your directories from becoming littered with single use HTML files\r\n\r\nCons\r\n\r\n* Should still use event.preventDefault() in JavaScript\r\n* Fairly complex path handling and URL parsing on the server side.\r\n\r\nI am sure there are tons more cons out there. Feel free to discuss them.\r\n\r\n  [1]: http://www.easymodrewrite.com/\r\n  [9]: http://en.wikipedia.org/wiki/Rewrite_engine\r\n"},{"score":9,"body_markdown":"There is one more important thing to remember here. [Section 508][1] compliance.\r\nBecause of it, I feel it&#39;s necessary to point out that you need the anchor tag for screen readers such as [JAWS][8] to be able to focus it through tabbing. So the solution &quot;just use JavaScript and forget the anchor to begin with&quot; is not an option for some of this. Firing the JavaScript inside the href is only necessary if you can&#39;t afford for the screen to jump back up to the top. You can use a settimeout for 0 seconds and have JavaScript fire to where you need focus but even the apage will jump to the top and then back. \r\n\r\n  [1]: http://en.wikipedia.org/wiki/Section_508_Amendment_to_the_Rehabilitation_Act_of_1973\r\n  [8]: http://en.wikipedia.org/wiki/JAWS_%28screen_reader%29\r\n"},{"score":25,"body_markdown":"I choose use `javascript:void(0)`, because use this could prevent right click to open the content menu. But `javascript:;` is shorter and does the same thing."},{"score":76,"body_markdown":"Using just `#` makes some funny movements, so I would recommend to use `#self` if you would like to save on typing efforts of `JavaScript bla, bla,`.\r\n"},{"score":6,"body_markdown":"I strongly prefer to keep my JavaScript out of my HTML markup as much as possible. If I&#39;m using `&lt;a&gt;` as click event handlers then I&#39;d recommend using `&lt;a class=&quot;trigger&quot; href=&quot;#&quot;&gt;Click me!&lt;/a&gt;`.\r\n\r\n    $(&#39;.trigger&#39;).click(function (e) {\r\n        e.preventDefault();\r\n        // Do stuff...\r\n    });\r\nIt&#39;s very important to note that many developers out there believe that using anchor tags for click-event handlers isn&#39;t good. They&#39;d prefer you to use a `&lt;span&gt;` or `&lt;div&gt;` with some CSS that adds `cursor: pointer;` to it. This is a matter if much debate."},{"score":13,"body_markdown":"I&#39;m basically paraphrasing from [this practical article using progressive enhancement][1]. **The short answer is that you never use `javascript:void(0);` or `#` unless your user interface has already inferred that JavaScript is enabled, in which case you should use `javascript:void(0);`**. Also, do not use span as links, since that is semantically false to begin with.\r\n\r\nUsing [SEO][11] friendly URL routes in your application, such as /Home/Action/Parameters is a good practice as well. If you have a link to a page that works without JavaScript first, you can enhance the experience afterward. Use a real link to a working page, then add an onlick event to enhance the presentation.\r\n\r\nHere is a sample. Home/ChangePicture is a working link to a form on a page complete with user interface and standard HTML submit buttons, but it looks nicer injected into a modal dialog with jQueryUI buttons. Either way works, depending on the browser, which satisfies mobile first development.\r\n\r\n    &lt;p&gt;&lt;a href=&quot;Home/ChangePicture&quot; onclick=&quot;return ChangePicture_onClick();&quot; title=&quot;Change Picture&quot;&gt;Change Picture&lt;/a&gt;&lt;/p&gt;\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n        function ChangePicture_onClick() {\r\n            $.get(&#39;Home/ChangePicture&#39;,\r\n                  function (htmlResult) {\r\n                      $(&quot;#ModalViewDiv&quot;).remove(); //Prevent duplicate dialogs\r\n                      $(&quot;#modalContainer&quot;).append(htmlResult);\r\n                      $(&quot;#ModalViewDiv&quot;).dialog({\r\n                          width: 400,\r\n                          modal: true,\r\n                          buttons: {\r\n                              &quot;Upload&quot;: function () {\r\n                                  if(!ValidateUpload()) return false;\r\n                                  $(&quot;#ModalViewDiv&quot;).find(&quot;form&quot;).submit();\r\n                              },\r\n                              Cancel: function () { $(this).dialog(&quot;close&quot;); }\r\n                          },\r\n                          close: function () { }\r\n                      });\r\n                  }\r\n            );\r\n            return false;\r\n        }\r\n    &lt;/script&gt;\r\n\r\n  [1]: http://www.matthidinger.com/archive/2011/02/22/Progressive-enhancement-tutorial-with-ASP-NET-MVC-3-and-jQuery.aspx\r\n  [11]: http://en.wikipedia.org/wiki/Search_engine_optimization\r\n"},{"score":8,"body_markdown":"What I understand from your words is that you want to create a link just to run JavaScript code.\r\n\r\nThen you should consider that there are people who blocks JavaScript out there in their browsers.\r\n\r\nSo if you are really going to use that link only for running a JavaScript function then you should add it dynamically so it won&#39;t be even seen if the users didn&#39;t enable their JavaScript in the browser and you are using that link just to trigger a JavaScript function which makes no sense to use a link like that when JavaScript is disabled in the browser.\r\n\r\nFor that reason neither of them is good when JavaScript is disabled.\r\n\r\nAand if JavaScript is enabled and you only want to use that link to invoke a JavaScript function then\r\n\r\n    &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;myJsFunc();&quot;&gt;Link&lt;/a&gt;\r\n\r\nis far better way than using\r\n\r\n    &lt;a href=&quot;#&quot; onclick=&quot;myJsFunc();&quot;&gt;Link&lt;/a&gt;\r\n\r\nbecause href=&quot;#&quot; is going to cause the page to do actions that are not needed.\r\n\r\nAlso, another reason why `&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;myJsFunc();&quot;&gt;Link&lt;/a&gt;` is better than `&lt;a href=&quot;#&quot; onclick=&quot;myJsFunc();&quot;&gt;Link&lt;/a&gt;` is that JavaScript is used as the default scripting language for most of the browsers. As an example Internet&amp;nbsp;Explorer, uses an onclick attribute to define the type of scripting language that would be used. Unless another good scripting language pops up, JavaScript will be used by Internet&amp;nbsp;Explorer as the default too, but if another scripting language used `javascript:`, it would let Internet&amp;nbsp;Explorer to understand which scripting language is being used.\r\n\r\nConsidering this, I would prefer using and exercising on\r\n\r\n    &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;myJsFunc();&quot;&gt;Link&lt;/a&gt;\r\n\r\nenough to make it a habit and to be more user friendly please add that kind of links within the JavaScript code:\r\n\r\n    $(document).ready(function(){\r\n        $(&quot;.blabla&quot;).append(&#39;&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;myJsFunc();&quot;&gt;Link&lt;/a&gt;&#39;)\r\n    });\r\n"},{"score":284,"body_markdown":"I would honestly suggest neither.  I would use a stylized `&lt;button&gt;&lt;/button&gt;` for that behavior.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    button.link {\r\n      display: inline-block;\r\n      position: relative;\r\n      background-color: transparent;\r\n      cursor: pointer;\r\n      border: 0;\r\n      padding: 0;\r\n      color: #00f;\r\n      text-decoration: underline;\r\n      font: inherit;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;p&gt;A button that looks like a &lt;button type=&quot;button&quot; class=&quot;link&quot;&gt;link&lt;/button&gt;.&lt;/p&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThis way you can assign your onclick.  I also suggest binding via script, not using the `onclick` attribute on the element tag.  The only gotcha is the psuedo 3d text effect in older IEs that cannot be disabled.\r\n\r\n----\r\n\r\nIf you *MUST* use an A element, use `javascript:void(0);` for reasons already mentioned.\r\n\r\n* Will always intercept in case your onclick event fails.\r\n* Will not have errant load calls happen, or trigger other events based on a hash change\r\n* The hash tag can cause unexpected behavior if the click falls through (onclick throws), avoid it unless it&#39;s an appropriate fall-through behavior, and you want to change the navigation history.\r\n\r\nNOTE: You can replace the `0` with a string such as `javascript:void(&#39;Delete record 123&#39;)` which can serve as an extra indicator that will show what the click will actually do."},{"score":27,"body_markdown":"I would use:\r\n\r\n    &lt;a href=&quot;#&quot; onclick=&quot;myJsFunc();return false;&quot;&gt;Link&lt;/a&gt;\r\n\r\n**Reasons:**\r\n\r\n1. This makes the `href` simple, search engines need it. If you use anything else ( such as a string), it may cause a `404 not found` error.\r\n2. When mouse hovers over the link, it doesn&#39;t show that it is a script.\r\n3. By using `return false;`, the page doesn&#39;t jump to the top or break the `back` button."},{"score":783,"body_markdown":"Doing `&lt;a href=&quot;#&quot; onclick=&quot;myJsFunc();&quot;&gt;Link&lt;/a&gt;` or `&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;myJsFunc();&quot;&gt;Link&lt;/a&gt;` or whatever else that contains an `onclick` attribute - was okay back five years ago, though now it can be a bad practice. Here&#39;s why:\r\n\r\n1. It promotes the practice of obtrusive JavaScript - which has turned out to be difficult to maintain and difficult to scale. More on this in *[Unobtrusive JavaScript][1]*.\r\n\r\n2. You&#39;re spending your time writing incredibly overly verbose code - which has very little (if any) benefit to your codebase.\r\n\r\n3. There are now better, easier, and more maintainable and scalable ways of accomplishing the desired result.\r\n\r\n## The unobtrusive JavaScript way\r\n\r\nJust don&#39;t have a `href` attribute at all! Any good CSS reset would take care of the missing default cursor style, so that is a non-issue. Then attach your JavaScript functionality using graceful and unobtrusive  best practices - which are more maintainable as your JavaScript logic stays in JavaScript, instead of in your markup - which is essential when you start developing large scale JavaScript applications which require your logic to be split up into blackboxed components and templates. More on this in *[Large-scale JavaScript Application Architecture][2]*\r\n\r\n## Simple code example\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;a class=&quot;cancel-action&quot;&gt;Cancel this action&lt;/a&gt;\r\n\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // Cancel click event\r\n    $(&#39;.cancel-action&#39;).click(function(){\r\n        alert(&#39;Cancel action occurs!&#39;);\r\n    });\r\n\r\n    // Hover shim for Internet Explorer 6 and Internet Explorer 7.\r\n    $(document.body).on(&#39;hover&#39;,&#39;a&#39;,function(){\r\n        $(this).toggleClass(&#39;hover&#39;);\r\n    });\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    a { cursor: pointer; color: blue; }\r\n    a:hover,a.hover { text-decoration: underline; }\r\n\r\n\r\n&lt;!-- end snippet --&gt;    \r\n\r\n\r\n\r\n\r\n\r\n\r\n## A blackboxed *[Backbone.js][4]* example\r\n\r\nFor a scalable, blackboxed, Backbone.js component example - *[see this working jsfiddle example here][5]*. Notice how we utilize unobtrusive JavaScript practices, and in a tiny amount of code have a component that can be repeated across the page multiple times without side-effects or conflicts between the different component instances. Amazing!\r\n\r\n## Notes\r\n\r\n- Omitting the `href` attribute on the `a` element will cause the element to not be accessible using `tab` key navigation. If you wish for those elements to be accessible via the `tab` key, you can set the `tabindex` attribute, or use `button` elements instead. You can easily style button elements to look like normal links as mentioned in *[Tracker1&#39;s answer][6]*.\r\n\r\n- Omitting the `href` attribute on the `a` element will cause [Internet&amp;nbsp;Explorer&amp;nbsp;6][8] and [Internet&amp;nbsp;Explorer&amp;nbsp;7][7] to not take on the `a:hover` styling, which is why we have added a simple JavaScript shim to accomplish this via `a.hover` instead. Which is perfectly okay, as if you don&#39;t have a href attribute and no graceful degradation then your link won&#39;t work anyway - and you&#39;ll have bigger issues to worry about.\r\n\r\n- If you want your action to still work with JavaScript disabled, then using an `a` element with a `href` attribute that goes to some URL that will perform the action manually instead of via an Ajax request or whatever should be the way to go. If you are doing this, then you want to ensure you do an `event.preventDefault()` on your click call to make sure when the button is clicked it does not follow the link. This option is called graceful degradation.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\r\n  [2]: http://speakerdeck.com/u/addyosmani/p/large-scale-javascript-application-architecture\r\n  [4]: http://documentcloud.github.com/backbone/\r\n  [5]: http://jsfiddle.net/balupton/sTzdD/\r\n  [6]: https://stackoverflow.com/a/8525002/130638\r\n  [7]: http://en.wikipedia.org/wiki/Internet_Explorer_7\r\n  [8]: http://en.wikipedia.org/wiki/Internet_Explorer_6"},{"score":3,"body_markdown":"Here is one more option for completeness sake, that prevents the link from doing anything even if JavaScript is disabled, and it&#39;s short :)\r\n\r\n    &lt;a href=&quot;#void&quot; onclick=&quot;myJsFunc()&quot;&gt;Run JavaScript function&lt;/a&gt;\r\n\r\nIf the id is not present on the page, then the link will do nothing.\r\n\r\nGenerally, I agree with the Aaron Wagner&#39;s answer, the JavaScript link should be injected with JavaScript code into the document.\r\n"},{"score":9,"body_markdown":"I see a lot of answers by people who want to keep using `#` values for `href`, hence, here is an answer hopefully satisfying both camps:\r\n\r\n**A)** I&#39;m happy to have `javascript:void(0)` as my `href` value:\r\n\r\n    &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;someFunc.call(this)&quot;&gt;Link Text&lt;/a&gt;\r\n\r\n**B)** I am using jQuery, and want `#` as my `href` value:\r\n\r\n    &lt;a href=&quot;#&quot; onclick=&quot;someFunc.call(this)&quot;&gt;Link Text&lt;/a&gt;\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n        /* Stop page jumping when javascript links are clicked.\r\n           Only select links where the href value is a #. */\r\n        $(&#39;a[href=&quot;#&quot;]&#39;).live(&quot;click&quot;, function(e) {\r\n             return false; // prevent default click action from happening!\r\n             e.preventDefault(); // same thing as above\r\n        });\r\n    &lt;/script&gt;\r\n\r\nNote, if you know links won&#39;t be created dynamically, use the `click` function instead: \r\n\r\n`$(&#39;a[href=&quot;#&quot;]&#39;).click(function(e) {`\r\n"},{"score":16,"body_markdown":"When I&#39;ve got several faux-links, I prefer to give them a class of &#39;no-link&#39;.\r\n\r\nThen in jQuery, I add the following code:\r\n\r\n    $(function(){\r\n       $(&#39;.no-link&#39;).click(function(e){\r\n           e.preventDefault();\r\n       });\r\n    });\r\n\r\nAnd for the HTML, the link is simply\r\n\r\n    &lt;a href=&quot;/&quot; class=&quot;no-link&quot;&gt;Faux-Link&lt;/a&gt;\r\n\r\nI don&#39;t like using Hash-Tags unless they&#39;re used for anchors, and I only do the above when I&#39;ve got more than two faux-links, otherwise I go with javascript:void(0).\r\n\r\n    &lt;a href=&quot;javascript:void(0)&quot; class=&quot;no-link&quot;&gt;Faux-Link&lt;/a&gt;\r\n\r\nTypically, I like to just avoid using a link at all and just wrap something around in a span and use that as a way to active some JavaScript code, like a pop-up or a content-reveal.\r\n"},{"score":8,"body_markdown":"You could use the href and remove all links that have only hashes:\r\n\r\nHTML:\r\n\r\n    &lt;a href=&quot;#&quot; onclick=&quot;run_foo()&quot;&gt; foo &lt;/a&gt;\r\n\r\n\r\nJS:\r\n\r\n    $(document).ready(function(){         // on DOM ready or some other event\r\n\r\n       $(&#39;a[href=#]&#39;).attr(&#39;href&#39;,&#39;&#39;);    // set all reference handles to blank strings\r\n                                          //  for anchors that have only hashes\r\n\r\n    });"},{"score":6,"body_markdown":"You **should not use** inline `onclick=&quot;something();&quot;` in your HTML to not polluate it with meaningless code; all click bindings must be set in Javascript files (*.js).\r\n\r\nSet binding like this : `$(&#39;#myAnchor&#39;).click(function(){... **return false**;});`  or  `$(&#39;#myAnchor&#39;).bind(&#39;click&#39;, function(){... **return false**;});`\r\n\r\nThen you have a clean HTML file easy to load (and seo friendly) without thousands of `href=&quot;javascript:void(0);&quot;` and just `href=&quot;#&quot;`\r\n"},{"score":19,"body_markdown":"If there is no `href` maybe there is no reason to use an anchor tag.\r\n\r\nYou can attach events (click, hover, etc.) on almost every element, so why not just use a `span`or a `div`?\r\n\r\nAnd for users with JavaScript disabled: if there isn&#39;t a fallback (for example, an alternative `href`), they should at least not be able to see and interact with that element at all, whatever it is an `&lt;a&gt;` or a `&lt;span&gt;` tag.\r\n"},{"score":20,"body_markdown":"If you happen to be using [**AngularJS**][1], you can use the following:\r\n\r\n    &lt;a href=&quot;&quot;&gt;Do some fancy JavaScript&lt;/a&gt;\r\n\r\nWhich will not do anything.\r\n\r\nIn addition\r\n\r\n - It will not take you to the top of the page, as with (#)\r\n   - Therefore, you don&#39;t need to explicitly return `false` with JavaScript\r\n - It is short an concise\r\n\r\n\r\n  [1]: http://angularjs.org/"},{"score":24,"body_markdown":"So, when you are doing some JavaScript things with an `&lt;a /&gt;` tag and if you put `href=&quot;#&quot;` as well, you can add **return false** at the end of the event *(in case of inline event binding)* like:\r\n\r\n    &lt;a href=&quot;#&quot; onclick=&quot;myJsFunc(); return false;&quot;&gt;Run JavaScript Code&lt;/a&gt;\r\n\r\n*Or you can change the **href** attribute with JavaScript like:*\r\n\r\n    &lt;a href=&quot;javascript://&quot; onclick=&quot;myJsFunc();&quot;&gt;Run JavaScript Code&lt;/a&gt;\r\n\r\n**or**\r\n\r\n    &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;myJsFunc();&quot;&gt;Run JavaScript Code&lt;/a&gt;\r\n\r\n----------\r\n\r\nBut semantically, all the above ways to achieve this are wrong *(it works fine though)*. If any element is not created to navigate the page and that have some JavaScript things associated with it, then it should not be a `&lt;a&gt;` tag. \r\n\r\nYou can simply use a `&lt;button /&gt;` instead to do things or any other element like b, span or whatever fits there as per your need, because you are allowed to add events on all the elements.\r\n\r\n----------\r\n\r\nSo, **there is one benefit** to use `&lt;a href=&quot;#&quot;&gt;`. You get the cursor pointer by default on that element when you do `a href=&quot;#&quot;`. For that, I think you can use CSS for this like `cursor:pointer;` which solves this problem also.\r\n\r\nAnd at the end, if you are binding the event from the JavaScript code itself, there you can do `event.preventDefault()` to achieve this if you are using `&lt;a&gt;` tag, but if you are not using a `&lt;a&gt;` tag for this, there you get an advantage, you don&#39;t need to do this.\r\n\r\nSo, if you see, it&#39;s better not to use a tag for this kind of stuff.\r\n\r\n"},{"score":10,"body_markdown":"I use href=&quot;#&quot; for links that I want a dummy behaviour for. Then I use this code:\r\n\r\n    $(document).ready(function() {\r\n\t    $(&quot;a[href=&#39;#&#39;]&quot;).click(function(event) {\r\n\t    \tevent.preventDefault();\r\n\t    });\r\n    });\r\n\r\nMeaning if the href equals to a hash (*=&quot;#&quot;) it prevents the default link behaviour, thus still allowing you to write functionality for it, and it doesn&#39;t affect anchor clicks.\r\n"},{"score":11,"body_markdown":"I&#39;d say the best way is to make an href anchor to an ID you&#39;d never use, like #Do1Not2Use3This4Id5 or a similar ID, that you are 100% sure no one will use and won&#39;t offend people.\r\n\r\n 1. `Javascript:void(0)` is a bad idea and violates Content Security Policy on CSP-enabled HTTPS pages https://developer.mozilla.org/en/docs/Security/CSP (thanks to @jakub.g)\r\n 2. Using just `#` will have the user jump back to the top when pressed\r\n 3. Won&#39;t ruin the page if JavaScript isn&#39;t enabled (unless you have JavaScript  detecting code\r\n 4. If JavaScript is enabled you can disable the default event\r\n 5. You have to use href unless you know how to prevent your browser from selecting some text, (don&#39;t know if using 4 will remove the thing that stops the browser from selecting text)\r\n\r\nBasically no one mentioned 5 in this article which I think is important as your site comes off as unprofessional if it suddenly starts selecting things around the link.\r\n"},{"score":17,"body_markdown":"I personally use them in combination. For example:\r\n\r\nHTML\r\n\r\n    &lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;\r\n\r\n----------\r\n\r\nwith little bit of jQuery\r\n\r\n    $(&#39;a[href=&quot;#&quot;]&#39;).attr(&#39;href&#39;,&#39;javascript:void(0);&#39;);\r\n\r\nor\r\n\r\n    $(&#39;a[href=&quot;#&quot;]&#39;).click(function(e) {\r\n       e.preventDefault();\r\n    });\r\n\r\nBut I&#39;m using that just for preventing the page jumping to the top when the user clicks on an empty anchor. I&#39;m rarely using onClick and other `on` events directly in HTML.\r\n\r\nMy suggestion would be to use `&lt;span&gt;` element with the `class` attribute instead of\r\nan anchor. For example:\r\n\r\n    &lt;span class=&quot;link&quot;&gt;Link&lt;/span&gt;\r\n\r\n----------\r\n\r\nThen assign the function to `.link` with a script wrapped in the body and just before the `&lt;/body&gt;` tag or in an external JavaScript document.\r\n\r\n    &lt;script&gt;\r\n        (function($) {\r\n            $(&#39;.link&#39;).click(function() {\r\n                // do something\r\n            });\r\n        })(jQuery);\r\n    &lt;/script&gt;\r\n\r\n***Note:** For dynamically created elements, use:\r\n\r\n    $(&#39;.link&#39;).on(&#39;click&#39;, function() {\r\n        // do something\r\n    });\r\n\r\nAnd for dynamically created elements which are created with dynamically created elements, use:\r\n\r\n    $(document).on(&#39;click&#39;,&#39;.link&#39;, function() {\r\n        // do something\r\n    });\r\n\r\n----------\r\n\r\nThen you can style the span element to look like an anchor with a little CSS:\r\n\r\n    .link {\r\n        color: #0000ee;\r\n        text-decoration: underline;\r\n        cursor: pointer;\r\n    }\r\n    .link:active {\r\n        color: red;\r\n    }\r\n\r\nHere&#39;s **[a jsFiddle](http://jsFiddle.net/mdesdev/Dn8YT/)** example of above aforementioned.\r\n"},{"score":8,"body_markdown":"Why not using this? This doesn&#39;t scroll page up.\r\n\r\n    &lt;span role=&quot;button&quot; onclick=&quot;myJsFunc();&quot;&gt;Run JavaScript Code&lt;/span&gt;"},{"score":30,"body_markdown":"I usually go for\r\n\r\n    &lt;a href=&quot;javascript:;&quot; onclick=&quot;yourFunction()&quot;&gt;Link description&lt;/a&gt;\r\n\r\nIt&#39;s shorter than javascript:void(0) and does the same."},{"score":23,"body_markdown":"**Don&#39;t use links for the sole purpose of running JavaScript.** \r\n\r\n\r\nThe use of href=&quot;#&quot; scrolls the page to the top; the use of void(0) creates navigational problems within the browser.\r\n\r\nInstead, use an element other than a link:\r\n\r\n    &lt;span onclick=&quot;myJsFunc()&quot; class=&quot;funcActuator&quot;&gt;myJsFunc&lt;/span&gt;\r\n\r\n\r\n   \r\nAnd style it with CSS:\r\n\r\n    .funcActuator { \r\n      cursor: default;\r\n    }\r\n    \r\n    .funcActuator:hover { \r\n      color: #900;\r\n    }\r\n\r\n"},{"score":16,"body_markdown":"I tried both in google chrome with the developer tools, and the `id=&quot;#&quot;` took 0.32 seconds. While the `javascript:void(0)` method took only 0.18 seconds. So in google chrome, `javascript:void(0)` works better and faster."},{"score":12,"body_markdown":"On a modern website the use of href should be avoided if the element is only doing JavaScript functionality (not a real link).\r\n\r\nWhy?\r\nThe presence of this element tells the browser that this is a link with a destination. \r\nWith that, the browser will show the Open In New Tab / Window function (also triggered when you use shift+click). \r\nDoing so will result in opening the same page without the desired function triggered (resulting in user frustration).\r\n\r\nIn regards to IE:\r\nAs of IE8, &lt;a&gt; element styling (including hover) works if the doctype is set. Other versions of IE are not really to worry about anymore.\r\n\r\nOnly Drawback:\r\nRemoving HREF removes the tabindex.\r\nTo overcome this, you can use a button that&#39;s styled as a link or add a tabindex attribute using JS."},{"score":-2,"body_markdown":"Bootstrap modals from before 4.0 have a basically undocumented behavior that they will load `href`s from `a` elements using AJAX unless they are exactly `#`. If you are using Bootstrap 3, `javascript:void(0);` hrefs will cause javascript errors:\r\n\r\n`AJAX Error: error GET javascript:void(0);`\r\n\r\nIn these cases you would need to upgrade to bootstrap 4 or change the href."},{"score":7,"body_markdown":"Edited on 2019 January \r\n=======\r\n\r\nIn **HTML5**, using an a element without an href attribute is **valid**. It is considered to be a **&quot;placeholder hyperlink&quot;**\r\n\r\n&gt; If the a element has no href attribute, then the element represents a placeholder for where a link might otherwise have been placed, if it had been relevant, consisting of just the element&#39;s contents.\r\n\r\n\r\nExample:\r\n\r\n    &lt;a&gt;previous&lt;/a&gt;\r\n\r\n\r\nIf after that you want to do otherwise :\r\n\r\n1 - If your link doesn&#39;t go anywhere, don&#39;t use an `&lt;a&gt;` element. Use a `&lt;span&gt;` or something else appropriate and add CSS `:hover` to style it as you wish.\r\n\r\n2 - Use the `javascript:void(0)` OR `javascript:undefined` OR `javascript:;` if you want to be raw, precise and fast.\r\n"},{"score":3,"body_markdown":"• `Javascript: void(0);` is void to null value **[Not assigned]**, which that mean your browser is going to `NULL` click to **DOM**, and window return to false.&lt;br /&gt;\r\n• The `&#39;#&#39;` is not follow the DOM or Window in javascript. which that mean the &#39;#&#39; sign inside anchor href is a **LINK**. Link to the same current direction."},{"score":1,"body_markdown":"You can use javascript:void(0) here instead of using # to stop anchor tag redirect to header section.\r\n\r\n    function helloFunction() {\r\n        alert(&quot;hello world&quot;);\r\n    }\r\n    &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;helloFunction();&quot;&gt;Call Hello Function&lt;/a&gt;"},{"score":6,"body_markdown":"The most simple and used by everyone mostly is **javascript:void(0)** You can use it instead of using **#** to stop **&lt;a&gt; tag redirect to header section**.\r\n\r\n\r\n    &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;testFunction();&quot;&gt;Click To check Function&lt;/a&gt;\r\n    \r\n    function testFunction() {\r\n        alert(&quot;hello world&quot;);\r\n    }"}],"score":4152}