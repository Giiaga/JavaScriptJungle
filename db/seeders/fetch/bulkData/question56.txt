{"body":"How can I display JSON in an easy-to-read (for human readers) format? I&#39;m looking primarily for indentation and whitespace, with perhaps even colors / font-styles / etc.\r\n","title":"pretty-print JSON using JavaScript","answers":[{"score":26,"body_markdown":"I use the [JSONView Chrome extension][1] (it is as pretty as it gets :):\r\n\r\nEdit: added `jsonreport.js`\r\n\r\nI&#39;ve also released an online stand-alone JSON pretty print viewer, jsonreport.js, that provides a human readable HTML5 report you can use to view any JSON data.\r\n\r\nYou can read more about the format in *[New JavaScript HTML5 Report Format][2]*.\r\n\r\n  [1]: https://chrome.google.com/extensions/detail/chklaanhfefbnpoihckbnefhakgolnmc\r\n  [2]: https://github.com/ServiceStack/ServiceStack/wiki/HTML5ReportFormat\r\n"},{"score":4,"body_markdown":"Douglas Crockford&#39;s JSON in JavaScript library will pretty print JSON via the stringify method.\r\n\r\n\r\nYou may also find the answers to this older question useful: https://stackoverflow.com/questions/352098/how-to-pretty-print-json-script"},{"score":5397,"body_markdown":"**[Pretty-printing is implemented natively in `JSON.stringify()`][1]**. The third argument enables pretty printing and sets the spacing to use:\r\n\r\n    var str = JSON.stringify(obj, null, 2); // spacing level = 2\r\n\r\nIf you need syntax highlighting, you might use some regex magic like so:\r\n\r\n\r\n    function syntaxHighlight(json) {\r\n        if (typeof json != &#39;string&#39;) {\r\n             json = JSON.stringify(json, undefined, 2);\r\n        }\r\n        json = json.replace(/&amp;/g, &#39;&amp;amp;&#39;).replace(/&lt;/g, &#39;&amp;lt;&#39;).replace(/&gt;/g, &#39;&amp;gt;&#39;);\r\n        return json.replace(/(&quot;(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\&quot;])*&quot;(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\r\n            var cls = &#39;number&#39;;\r\n            if (/^&quot;/.test(match)) {\r\n                if (/:$/.test(match)) {\r\n                    cls = &#39;key&#39;;\r\n                } else {\r\n                    cls = &#39;string&#39;;\r\n                }\r\n            } else if (/true|false/.test(match)) {\r\n                cls = &#39;boolean&#39;;\r\n            } else if (/null/.test(match)) {\r\n                cls = &#39;null&#39;;\r\n            }\r\n            return &#39;&lt;span class=&quot;&#39; + cls + &#39;&quot;&gt;&#39; + match + &#39;&lt;/span&gt;&#39;;\r\n        });\r\n    }\r\n\r\nSee in action here: [jsfiddle](http://jsfiddle.net/KJQ9K/554/)\r\n\r\n**Or a full snippet provided below:**\r\n\r\n&lt;!-- begin snippet: js hide: true --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function output(inp) {\r\n        document.body.appendChild(document.createElement(&#39;pre&#39;)).innerHTML = inp;\r\n    }\r\n\r\n    function syntaxHighlight(json) {\r\n        json = json.replace(/&amp;/g, &#39;&amp;amp;&#39;).replace(/&lt;/g, &#39;&amp;lt;&#39;).replace(/&gt;/g, &#39;&amp;gt;&#39;);\r\n        return json.replace(/(&quot;(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\&quot;])*&quot;(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\r\n            var cls = &#39;number&#39;;\r\n            if (/^&quot;/.test(match)) {\r\n                if (/:$/.test(match)) {\r\n                    cls = &#39;key&#39;;\r\n                } else {\r\n                    cls = &#39;string&#39;;\r\n                }\r\n            } else if (/true|false/.test(match)) {\r\n                cls = &#39;boolean&#39;;\r\n            } else if (/null/.test(match)) {\r\n                cls = &#39;null&#39;;\r\n            }\r\n            return &#39;&lt;span class=&quot;&#39; + cls + &#39;&quot;&gt;&#39; + match + &#39;&lt;/span&gt;&#39;;\r\n        });\r\n    }\r\n\r\n    var obj = {a:1, &#39;b&#39;:&#39;foo&#39;, c:[false,&#39;false&#39;,null, &#39;null&#39;, {d:{e:1.3e5,f:&#39;1.3e5&#39;}}]};\r\n    var str = JSON.stringify(obj, undefined, 4);\r\n\r\n    output(str);\r\n    output(syntaxHighlight(str));\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    pre {outline: 1px solid #ccc; padding: 5px; margin: 5px; }\r\n    .string { color: green; }\r\n    .number { color: darkorange; }\r\n    .boolean { color: blue; }\r\n    .null { color: magenta; }\r\n    .key { color: red; }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"},{"score":9,"body_markdown":"For debugging purpose I use:\r\n\r\n&lt;pre&gt;\r\nconsole.debug(&quot;%o&quot;, data);\r\n&lt;/pre&gt;\r\n\r\n* https://getfirebug.com/wiki/index.php/Console_API\r\n* https://developer.mozilla.org/en-US/docs/DOM/console"},{"score":297,"body_markdown":"User Pumbaa80&#39;s answer is great if you have an **object** you want pretty printed. If you&#39;re starting from a valid JSON **string** that you want to pretty printed, you need to convert it to an object first:\r\n\r\n    var jsonString = &#39;{&quot;some&quot;:&quot;json&quot;}&#39;;\r\n    var jsonPretty = JSON.stringify(JSON.parse(jsonString),null,2);  \r\n  \r\nThis builds a JSON object from the string, and then converts it back to a string using JSON stringify&#39;s pretty print."},{"score":33,"body_markdown":"Based on Pumbaa80&#39;s answer I have modified the code to use the console.log colours (working on Chrome for sure) and not HTML. Output can be seen inside console. You can edit the _variables inside the function adding some more styling.\r\n\r\n    function JSONstringify(json) {\r\n    \tif (typeof json != &#39;string&#39;) {\r\n    \t\tjson = JSON.stringify(json, undefined, &#39;\\t&#39;);\r\n    \t}\r\n    \t\r\n    \tvar \r\n    \t\tarr = [],\r\n    \t\t_string = &#39;color:green&#39;,\r\n    \t\t_number = &#39;color:darkorange&#39;,\r\n    \t\t_boolean = &#39;color:blue&#39;,\r\n    \t\t_null = &#39;color:magenta&#39;,\r\n    \t\t_key = &#39;color:red&#39;;\r\n    \t\r\n    \tjson = json.replace(/(&quot;(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\&quot;])*&quot;(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\r\n    \t\tvar style = _number;\r\n    \t\tif (/^&quot;/.test(match)) {\r\n    \t\t\tif (/:$/.test(match)) {\r\n    \t\t\t\tstyle = _key;\r\n    \t\t\t} else {\r\n    \t\t\t\tstyle = _string;\r\n    \t\t\t}\r\n    \t\t} else if (/true|false/.test(match)) {\r\n    \t\t\tstyle = _boolean;\r\n    \t\t} else if (/null/.test(match)) {\r\n    \t\t\tstyle = _null;\r\n    \t\t}\r\n    \t\tarr.push(style);\r\n    \t\tarr.push(&#39;&#39;);\r\n    \t\treturn &#39;%c&#39; + match + &#39;%c&#39;;\r\n    \t});\r\n    \t\r\n    \tarr.unshift(json);\r\n    \t\r\n    \tconsole.log.apply(console, arr);\r\n    }\r\n\r\nHere is a bookmarklet you can use:\r\n\r\n    javascript:function JSONstringify(json) {if (typeof json != &#39;string&#39;) {json = JSON.stringify(json, undefined, &#39;\\t&#39;);}var arr = [],_string = &#39;color:green&#39;,_number = &#39;color:darkorange&#39;,_boolean = &#39;color:blue&#39;,_null = &#39;color:magenta&#39;,_key = &#39;color:red&#39;;json = json.replace(/(&quot;(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\&quot;])*&quot;(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {var style = _number;if (/^&quot;/.test(match)) {if (/:$/.test(match)) {style = _key;} else {style = _string;}} else if (/true|false/.test(match)) {style = _boolean;} else if (/null/.test(match)) {style = _null;}arr.push(style);arr.push(&#39;&#39;);return &#39;%c&#39; + match + &#39;%c&#39;;});arr.unshift(json);console.log.apply(console, arr);};void(0);\r\n\r\n\r\nUsage:\r\n\r\n    var obj = {a:1, &#39;b&#39;:&#39;foo&#39;, c:[false,null, {d:{e:1.3e5}}]};\r\n    JSONstringify(obj);\r\n\r\n\r\n\r\n\r\nEdit: I just tried to escape the % symbol with this line, after the variables declaration:\r\n\r\n    json = json.replace(/%/g, &#39;%%&#39;);\r\n\r\nBut I find out that Chrome is not supporting % escaping in the console. Strange... Maybe this will work in the future.\r\n\r\n\r\nCheers!\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/GsMl9.jpg"},{"score":4,"body_markdown":"I ran into an issue today with @Pumbaa80&#39;s code. I&#39;m trying to apply JSON syntax highlighting to data that I&#39;m rendering in a [Mithril](http://lhorie.github.io/mithril/) view, so I need to create DOM nodes for everything in the `JSON.stringify` output.\r\n\r\nI split the really long regex into its component parts as well.\r\n\r\n&lt;!-- language: lang-coffee --&gt;\r\n\r\n    render_json = (data) -&gt;\r\n      # wraps JSON data in span elements so that syntax highlighting may be\r\n      # applied. Should be placed in a `whitespace: pre` context\r\n      if typeof(data) isnt &#39;string&#39;\r\n        data = JSON.stringify(data, undefined, 2)\r\n      unicode =     /&quot;(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\&quot;])*&quot;(\\s*:)?/\r\n      keyword =     /\\b(true|false|null)\\b/\r\n      whitespace =  /\\s+/\r\n      punctuation = /[,.}{\\[\\]]/\r\n      number =      /-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/\r\n\r\n      syntax = &#39;(&#39; + [unicode, keyword, whitespace,\r\n                punctuation, number].map((r) -&gt; r.source).join(&#39;|&#39;) + &#39;)&#39;\r\n      parser = new RegExp(syntax, &#39;g&#39;)\r\n\r\n      nodes = data.match(parser) ? []\r\n      select_class = (node) -&gt;\r\n        if punctuation.test(node)\r\n          return &#39;punctuation&#39;\r\n        if /^\\s+$/.test(node)\r\n          return &#39;whitespace&#39;\r\n        if /^\\&quot;/.test(node)\r\n          if /:$/.test(node)\r\n            return &#39;key&#39;\r\n          return &#39;string&#39;\r\n\r\n        if /true|false/.test(node)\r\n          return &#39;boolean&#39;\r\n\r\n         if /null/.test(node)\r\n           return &#39;null&#39;\r\n         return &#39;number&#39;\r\n      return nodes.map (node) -&gt;\r\n        cls = select_class(node)\r\n        return Mithril(&#39;span&#39;, {class: cls}, node)\r\n\r\nCode in context on Github [here](https://github.com/justjake/squidwork/blob/f0ed0a2dd25f5182ae792da0695e46ec86a665f9/squidwork/web/monitor/templates/app.coffee#L48)"},{"score":9,"body_markdown":"Unsatisfied with other pretty printers for Ruby, I wrote my own ([NeatJSON](http://github.com/Phrogz/NeatJSON)) and then [ported it to JavaScript](https://github.com/Phrogz/NeatJSON/blob/master/javascript/neatjson.js) including [a free online formatter](http://phrogz.net/js/neatjson/neatjson.html). The code is free under MIT license (quite permissive).\r\n\r\nFeatures (all optional):\r\n\r\n* Set a line width and wrap in a way that keeps objects and arrays on the same line when they fit, wrapping one value per line when they don&#39;t.\r\n* Sort object keys if you like.\r\n* Align object keys (line up the colons).\r\n* Format floating point numbers to specific number of decimals, without messing up the integers.\r\n* &#39;Short&#39; wrapping mode puts opening and closing brackets/braces on the same line as values, providing a format that some prefer.\r\n* Granular control over spacing for arrays and objects, between brackets, before/after colons and commas.\r\n* Function is made available to both web browsers and Node.js.\r\n\r\nI&#39;ll copy the source code here so that this is not just a link to a library, but I encourage you to go to the [GitHub project page](http://github.com/Phrogz/NeatJSON), as that will be kept up-to-date and the code below will not.\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    (function(exports){\r\n    exports.neatJSON = neatJSON;\r\n    \r\n    function neatJSON(value,opts){\r\n      opts = opts || {}\r\n      if (!(&#39;wrap&#39;          in opts)) opts.wrap = 80;\r\n      if (opts.wrap==true) opts.wrap = -1;\r\n      if (!(&#39;indent&#39;        in opts)) opts.indent = &#39;  &#39;;\r\n      if (!(&#39;arrayPadding&#39;  in opts)) opts.arrayPadding  = (&#39;padding&#39; in opts) ? opts.padding : 0;\r\n      if (!(&#39;objectPadding&#39; in opts)) opts.objectPadding = (&#39;padding&#39; in opts) ? opts.padding : 0;\r\n      if (!(&#39;afterComma&#39;    in opts)) opts.afterComma    = (&#39;aroundComma&#39; in opts) ? opts.aroundComma : 0;\r\n      if (!(&#39;beforeComma&#39;   in opts)) opts.beforeComma   = (&#39;aroundComma&#39; in opts) ? opts.aroundComma : 0;\r\n      if (!(&#39;afterColon&#39;    in opts)) opts.afterColon    = (&#39;aroundColon&#39; in opts) ? opts.aroundColon : 0;\r\n      if (!(&#39;beforeColon&#39;   in opts)) opts.beforeColon   = (&#39;aroundColon&#39; in opts) ? opts.aroundColon : 0;\r\n    \r\n      var apad  = repeat(&#39; &#39;,opts.arrayPadding),\r\n          opad  = repeat(&#39; &#39;,opts.objectPadding),\r\n          comma = repeat(&#39; &#39;,opts.beforeComma)+&#39;,&#39;+repeat(&#39; &#39;,opts.afterComma),\r\n          colon = repeat(&#39; &#39;,opts.beforeColon)+&#39;:&#39;+repeat(&#39; &#39;,opts.afterColon);\r\n    \r\n      return build(value,&#39;&#39;);\r\n    \r\n      function build(o,indent){\r\n        if (o===null || o===undefined) return indent+&#39;null&#39;;\r\n        else{\r\n          switch(o.constructor){\r\n            case Number:\r\n              var isFloat = (o === +o &amp;&amp; o !== (o|0));\r\n              return indent + ((isFloat &amp;&amp; (&#39;decimals&#39; in opts)) ? o.toFixed(opts.decimals) : (o+&#39;&#39;));\r\n    \r\n            case Array:\r\n              var pieces  = o.map(function(v){ return build(v,&#39;&#39;) });\r\n              var oneLine = indent+&#39;[&#39;+apad+pieces.join(comma)+apad+&#39;]&#39;;\r\n              if (opts.wrap===false || oneLine.length&lt;=opts.wrap) return oneLine;\r\n              if (opts.short){\r\n                var indent2 = indent+&#39; &#39;+apad;\r\n                pieces = o.map(function(v){ return build(v,indent2) });\r\n                pieces[0] = pieces[0].replace(indent2,indent+&#39;[&#39;+apad);\r\n                pieces[pieces.length-1] = pieces[pieces.length-1]+apad+&#39;]&#39;;\r\n                return pieces.join(&#39;,\\n&#39;);\r\n              }else{\r\n                var indent2 = indent+opts.indent;\r\n                return indent+&#39;[\\n&#39;+o.map(function(v){ return build(v,indent2) }).join(&#39;,\\n&#39;)+&#39;\\n&#39;+indent+&#39;]&#39;;\r\n              }\r\n    \r\n            case Object:\r\n              var keyvals=[],i=0;\r\n              for (var k in o) keyvals[i++] = [JSON.stringify(k), build(o[k],&#39;&#39;)];\r\n              if (opts.sorted) keyvals = keyvals.sort(function(kv1,kv2){ kv1=kv1[0]; kv2=kv2[0]; return kv1&lt;kv2?-1:kv1&gt;kv2?1:0 });\r\n              keyvals = keyvals.map(function(kv){ return kv.join(colon) }).join(comma);\r\n              var oneLine = indent+&quot;{&quot;+opad+keyvals+opad+&quot;}&quot;;\r\n              if (opts.wrap===false || oneLine.length&lt;opts.wrap) return oneLine;\r\n              if (opts.short){\r\n                var keyvals=[],i=0;\r\n                for (var k in o) keyvals[i++] = [indent+&#39; &#39;+opad+JSON.stringify(k),o[k]];\r\n                if (opts.sorted) keyvals = keyvals.sort(function(kv1,kv2){ kv1=kv1[0]; kv2=kv2[0]; return kv1&lt;kv2?-1:kv1&gt;kv2?1:0 });\r\n                keyvals[0][0] = keyvals[0][0].replace(indent+&#39; &#39;,indent+&#39;{&#39;);\r\n                if (opts.aligned){\r\n                  var longest = 0;\r\n                  for (var i=keyvals.length;i--;) if (keyvals[i][0].length&gt;longest) longest = keyvals[i][0].length;\r\n                  var padding = repeat(&#39; &#39;,longest);\r\n                  for (var i=keyvals.length;i--;) keyvals[i][0] = padRight(padding,keyvals[i][0]);\r\n                }\r\n                for (var i=keyvals.length;i--;){\r\n                  var k=keyvals[i][0], v=keyvals[i][1];\r\n                  var indent2 = repeat(&#39; &#39;,(k+colon).length);\r\n                  var oneLine = k+colon+build(v,&#39;&#39;);\r\n                  keyvals[i] = (opts.wrap===false || oneLine.length&lt;=opts.wrap || !v || typeof v!=&quot;object&quot;) ? oneLine : (k+colon+build(v,indent2).replace(/^\\s+/,&#39;&#39;));\r\n                }\r\n                return keyvals.join(&#39;,\\n&#39;) + opad + &#39;}&#39;;\r\n              }else{\r\n                var keyvals=[],i=0;\r\n                for (var k in o) keyvals[i++] = [indent+opts.indent+JSON.stringify(k),o[k]];\r\n                if (opts.sorted) keyvals = keyvals.sort(function(kv1,kv2){ kv1=kv1[0]; kv2=kv2[0]; return kv1&lt;kv2?-1:kv1&gt;kv2?1:0 });\r\n                if (opts.aligned){\r\n                  var longest = 0;\r\n                  for (var i=keyvals.length;i--;) if (keyvals[i][0].length&gt;longest) longest = keyvals[i][0].length;\r\n                  var padding = repeat(&#39; &#39;,longest);\r\n                  for (var i=keyvals.length;i--;) keyvals[i][0] = padRight(padding,keyvals[i][0]);\r\n                }\r\n                var indent2 = indent+opts.indent;\r\n                for (var i=keyvals.length;i--;){\r\n                  var k=keyvals[i][0], v=keyvals[i][1];\r\n                  var oneLine = k+colon+build(v,&#39;&#39;);\r\n                  keyvals[i] = (opts.wrap===false || oneLine.length&lt;=opts.wrap || !v || typeof v!=&quot;object&quot;) ? oneLine : (k+colon+build(v,indent2).replace(/^\\s+/,&#39;&#39;));\r\n                }\r\n                return indent+&#39;{\\n&#39;+keyvals.join(&#39;,\\n&#39;)+&#39;\\n&#39;+indent+&#39;}&#39;\r\n              }\r\n    \r\n            default:\r\n              return indent+JSON.stringify(o);\r\n          }\r\n        }\r\n      }\r\n    \r\n      function repeat(str,times){ // http://stackoverflow.com/a/17800645/405017\r\n        var result = &#39;&#39;;\r\n        while(true){\r\n          if (times &amp; 1) result += str;\r\n          times &gt;&gt;= 1;\r\n          if (times) str += str;\r\n          else break;\r\n        }\r\n        return result;\r\n      }\r\n      function padRight(pad, str){\r\n        return (str + pad).substring(0, pad.length);\r\n      }\r\n    }\r\n    neatJSON.version = &quot;0.5&quot;;\r\n    \r\n    })(typeof exports === &#39;undefined&#39; ? this : exports);\r\n\r\n"},{"score":6,"body_markdown":"Thanks a lot @all!\r\nBased on the previous answers, here is another variant method providing custom replacement rules as parameter:\r\n\r\n     renderJSON : function(json, rr, code, pre){\r\n       if (typeof json !== &#39;string&#39;) {\r\n          json = JSON.stringify(json, undefined, &#39;\\t&#39;);\r\n       }\r\n      var rules = {\r\n       def : &#39;color:black;&#39;,\t\r\n       defKey : function(match){\r\n\t\t\t  \t return &#39;&lt;strong&gt;&#39; + match + &#39;&lt;/strong&gt;&#39;;\r\n\t\t\t  },\r\n       types : [\r\n           {\r\n           \t  name : &#39;True&#39;,\r\n\t\t   \t  regex : /true/,\r\n\t\t   \t  type : &#39;boolean&#39;,\r\n\t\t   \t  style : &#39;color:lightgreen;&#39;\r\n\t\t   },\r\n\t\t   \r\n           {\r\n           \t  name : &#39;False&#39;,\r\n\t\t   \t  regex : /false/,\r\n\t\t   \t  type : &#39;boolean&#39;,\r\n\t\t   \t  style : &#39;color:lightred;&#39;\r\n\t\t   },\r\n\t\t   \r\n           {\r\n           \t  name : &#39;Unicode&#39;,\r\n\t\t   \t  regex : /&quot;(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\&quot;])*&quot;(\\s*:)?/,\r\n\t\t   \t  type : &#39;string&#39;,\r\n\t\t   \t  style : &#39;color:green;&#39;\r\n\t\t   },\r\n\t\t   \r\n\t\t   {\r\n           \t  name : &#39;Null&#39;,\r\n\t\t   \t  regex : /null/,\r\n\t\t   \t  type : &#39;nil&#39;,\r\n\t\t   \t  style : &#39;color:magenta;&#39;\r\n\t\t   },\r\n\t\t   \r\n\t\t   {\r\n           \t  name : &#39;Number&#39;,\r\n\t\t   \t  regex : /-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/,\r\n\t\t   \t  type : &#39;number&#39;,\r\n\t\t   \t  style : &#39;color:darkorange;&#39;\r\n\t\t   },\r\n\t\t   \r\n\t\t   {\r\n           \t  name : &#39;Whitespace&#39;,\r\n\t\t   \t  regex : /\\s+/,\r\n\t\t   \t  type : &#39;whitespace&#39;,\r\n\t\t   \t  style : function(match){\r\n\t\t\t  \t return &#39;&amp;nbsp&#39;;\r\n\t\t\t  }\r\n\t\t   } \r\n\t\t   \r\n        ],\r\n        \r\n        keys : [\r\n           {\r\n\t\t   \t   name : &#39;Testkey&#39;,\r\n\t\t       regex : /(&quot;testkey&quot;)/,\r\n\t\t       type : &#39;key&#39;,\r\n\t\t       style : function(match){\r\n\t\t\t  \t return &#39;&lt;h1&gt;&#39; + match + &#39;&lt;/h1&gt;&#39;;\r\n\t\t\t  }\r\n\t\t   }\r\n        ],\r\n        \r\n        punctuation : {\r\n           \t  name : &#39;Punctuation&#39;,\r\n\t\t   \t  regex : /([\\,\\.\\}\\{\\[\\]])/,\r\n\t\t   \t  type : &#39;punctuation&#39;,\r\n\t\t   \t  style : function(match){\r\n\t\t\t  \t return &#39;&lt;p&gt;________&lt;/p&gt;&#39;;\r\n\t\t\t  }\r\n\t\t   }\r\n      \r\n      };\r\n       \r\n      if(&#39;undefined&#39; !== typeof jQuery){\r\n\t  \t rules = $.extend(rules, (&#39;object&#39; === typeof rr) ? rr : {});  \r\n\t  }else{\r\n\t  \t for(var k in rr ){\r\n\t\t \trules[k] = rr[k];\r\n\t\t }\r\n\t  }\r\n        var str = json.replace(/([\\,\\.\\}\\{\\[\\]]|&quot;(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\&quot;])*&quot;(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\r\n        var i = 0, p;\r\n        if (rules.punctuation.regex.test(match)) {\r\n                   if(&#39;string&#39; === typeof rules.punctuation.style){\r\n\t\t\t\t   \t   return &#39;&lt;span style=&quot;&#39;+ rules.punctuation.style + &#39;&quot;&gt;&#39; + match + &#39;&lt;/span&gt;&#39;;\r\n\t\t\t\t   }else if(&#39;function&#39; === typeof rules.punctuation.style){\r\n\t\t\t\t   \t   return rules.punctuation.style(match);\r\n\t\t\t\t   } else{\r\n\t\t\t\t   \t  return match;\r\n\t\t\t\t   }           \t\r\n        }\r\n        \r\n        if (/^&quot;/.test(match)) {\r\n            if (/:$/.test(match)) {\r\n              \tfor(i=0;i&lt;rules.keys.length;i++){\r\n        \t    p = rules.keys[i];\r\n                if (p.regex.test(match)) {\r\n             \t   if(&#39;string&#39; === typeof p.style){\r\n\t\t\t\t   \t   return &#39;&lt;span style=&quot;&#39;+ p.style + &#39;&quot;&gt;&#39; + match + &#39;&lt;/span&gt;&#39;;\r\n\t\t\t\t   }else if(&#39;function&#39; === typeof p.style){\r\n\t\t\t\t   \t   return p.style(match);\r\n\t\t\t\t   } else{\r\n\t\t\t\t   \t  return match;\r\n\t\t\t\t   }            \t\r\n                 }\t\t\t\t\r\n\t\t\t   }   \r\n\t\t\t    return (&#39;function&#39;===typeof rules.defKey) ? rules.defKey(match) : &#39;&lt;span style=&quot;&#39;+ rules.defKey + &#39;&quot;&gt;&#39; + match + &#39;&lt;/span&gt;&#39;;            \r\n            } else {\r\n                return (&#39;function&#39;===typeof rules.def) ? rules.def(match) : &#39;&lt;span style=&quot;&#39;+ rules.def + &#39;&quot;&gt;&#39; + match + &#39;&lt;/span&gt;&#39;;\r\n            }\r\n        } else {\r\n        \tfor(i=0;i&lt;rules.types.length;i++){\r\n        \t p = rules.types[i];\r\n             if (p.regex.test(match)) {\r\n             \t   if(&#39;string&#39; === typeof p.style){\r\n\t\t\t\t   \t   return &#39;&lt;span style=&quot;&#39;+ p.style + &#39;&quot;&gt;&#39; + match + &#39;&lt;/span&gt;&#39;;\r\n\t\t\t\t   }else if(&#39;function&#39; === typeof p.style){\r\n\t\t\t\t   \t   return p.style(match);\r\n\t\t\t\t   } else{\r\n\t\t\t\t   \t  return match;\r\n\t\t\t\t   }            \t\r\n              }\t\t\t\t\r\n\t\t\t}\r\n            \r\n         }\r\n\r\n        });\r\n\r\n      if(true === pre)str = &#39;&lt;pre&gt;&#39; + str + &#39;&lt;/pre&gt;&#39;;\r\n      if(true === code)str = &#39;&lt;code&gt;&#39; + str + &#39;&lt;/code&gt;&#39;;\r\n      return str;\r\n     }\r\n"},{"score":24,"body_markdown":"You can use `console.dir()`, which is a shortcut for `console.log(util.inspect())`.\r\n(The only difference is that it bypasses any custom `inspect()` function defined on an object.)\r\n\r\nIt uses **syntax-highlighting**, **smart indentation**, **removes quotes from keys** and just makes the output as pretty as it gets.\r\n\r\n    const object = JSON.parse(jsonString)\r\n    \r\n    console.dir(object, {depth: null, colors: true})\r\n\r\nand for the command line:\r\n\r\n`cat package.json | node -e &quot;process.stdin.pipe(new stream.Writable({write: chunk =&gt; console.dir(JSON.parse(chunk), {depth: null, colors: true})}))&quot;`"},{"score":1,"body_markdown":"This is nice:\r\n\r\n https://github.com/mafintosh/json-markup from `mafintosh`\r\n\r\n    const jsonMarkup = require(&#39;json-markup&#39;)\r\n    const html = jsonMarkup({hello:&#39;world&#39;})\r\n    document.querySelector(&#39;#myElem&#39;).innerHTML = html\r\n\r\nHTML\r\n\r\n    &lt;link ref=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;\r\n    &lt;div id=&quot;myElem&gt;&lt;/div&gt;\r\n\r\nExample stylesheet can be found here\r\n\r\n    https://raw.githubusercontent.com/mafintosh/json-markup/master/style.css"},{"score":34,"body_markdown":"    var jsonObj = {&quot;streetLabel&quot;: &quot;Avenue Anatole France&quot;, &quot;city&quot;: &quot;Paris 07&quot;,  &quot;postalCode&quot;: &quot;75007&quot;, &quot;countryCode&quot;: &quot;FRA&quot;,  &quot;countryLabel&quot;: &quot;France&quot; };\r\n\r\n    document.getElementById(&quot;result-before&quot;).innerHTML = JSON.stringify(jsonObj);\r\n\r\n \r\n\r\nIn case of displaying in HTML, you should to add a balise `&lt;pre&gt;&lt;/pre&gt;`\r\n\r\n    document.getElementById(&quot;result-after&quot;).innerHTML = &quot;&lt;pre&gt;&quot;+JSON.stringify(jsonObj,undefined, 2) +&quot;&lt;/pre&gt;&quot;\r\n\r\nExample:\r\n\r\n\r\n\r\n&lt;!-- begin snippet: js hide: true console: false babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var jsonObj = {&quot;streetLabel&quot;: &quot;Avenue Anatole France&quot;, &quot;city&quot;: &quot;Paris 07&quot;,  &quot;postalCode&quot;: &quot;75007&quot;, &quot;countryCode&quot;: &quot;FRA&quot;,  &quot;countryLabel&quot;: &quot;France&quot; };\r\n\r\n    document.getElementById(&quot;result-before&quot;).innerHTML = JSON.stringify(jsonObj);\r\n\r\n    document.getElementById(&quot;result-after&quot;).innerHTML = &quot;&lt;pre&gt;&quot;+JSON.stringify(jsonObj,undefined, 2) +&quot;&lt;/pre&gt;&quot;\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    div { float:left; clear:both; margin: 1em 0; }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;div id=&quot;result-before&quot;&gt;&lt;/div&gt;\r\n    &lt;div id=&quot;result-after&quot;&gt;&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":7,"body_markdown":"It works well: \r\n\r\n    console.table()\r\n\r\nRead more here: [https://developer.mozilla.org/pt-BR/docs/Web/API/Console/table][1]\r\n\r\n\r\n  [1]: https://developer.mozilla.org/pt-BR/docs/Web/API/Console/table"},{"score":3,"body_markdown":"If you need this to work in a textarea the accepted solution will not work.\r\n\r\n `&lt;textarea id=&#39;textarea&#39;&gt;&lt;/textarea&gt;`\r\n\r\n`$(&quot;#textarea&quot;).append(formatJSON(JSON.stringify(jsonobject),true));`\t\r\n\r\n    function formatJSON(json,textarea) {\r\n\t\tvar nl;\r\n\t\tif(textarea) {\r\n\t\t\tnl = &quot;&amp;#13;&amp;#10;&quot;;\r\n\t\t} else {\r\n\t\t\tnl = &quot;&lt;br&gt;&quot;;\r\n\t\t}\r\n\t\tvar tab = &quot;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&quot;;\r\n\t\tvar ret = &quot;&quot;;\r\n\t\tvar numquotes = 0;\r\n\t\tvar betweenquotes = false;\r\n\t\tvar firstquote = false;\r\n\t\tfor (var i = 0; i &lt; json.length; i++) {\r\n\t\t\tvar c = json[i];\r\n\t\t\tif(c == &#39;&quot;&#39;) {\r\n\t\t\t\tnumquotes ++;\r\n\t\t\t\tif((numquotes + 2) % 2 == 1) {\r\n\t\t\t\t\tbetweenquotes = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbetweenquotes = false;\r\n\t\t\t\t}\r\n\t\t\t\tif((numquotes + 3) % 4 == 0) {\r\n\t\t\t\t\tfirstquote = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfirstquote = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(c == &#39;[&#39; &amp;&amp; !betweenquotes) {\r\n\t\t\t\tret += c;\r\n\t\t\t\tret += nl;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif(c == &#39;{&#39; &amp;&amp; !betweenquotes) {\r\n\t\t\t\tret += tab;\r\n\t\t\t\tret += c;\r\n\t\t\t\tret += nl;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif(c == &#39;&quot;&#39; &amp;&amp; firstquote) {\r\n\t\t\t\tret += tab + tab;\r\n\t\t\t\tret += c;\r\n\t\t\t\tcontinue;\r\n\t\t\t} else if (c == &#39;&quot;&#39; &amp;&amp; !firstquote) {\r\n\t\t\t\tret += c;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif(c == &#39;,&#39; &amp;&amp; !betweenquotes) {\r\n\t\t\t\tret += c;\r\n\t\t\t\tret += nl;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif(c == &#39;}&#39; &amp;&amp; !betweenquotes) {\r\n\t\t\t\tret += nl;\r\n\t\t\t\tret += tab;\r\n\t\t\t\tret += c;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif(c == &#39;]&#39; &amp;&amp; !betweenquotes) {\r\n\t\t\t\tret += nl;\r\n\t\t\t\tret += c;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tret += c;\r\n\t\t} // i loop\r\n\t\treturn ret;\r\n\t}"},{"score":51,"body_markdown":"Better way.\r\n\r\n\r\n[Prettify JSON Array in Javascript][1]\r\n\r\n    JSON.stringify(jsonobj,null,&#39;\\t&#39;)\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/11359291/prettify-json-array-in-javascript"},{"score":3,"body_markdown":"If you&#39;re looking for a nice library to prettify json on a web page...\r\n\r\nPrism.js is pretty good.\r\n\r\nhttp://prismjs.com/\r\n\r\nI found using JSON.stringify(obj, undefined, 2) to get the indentation, and then using prism to add a theme was a good approach.\r\n\r\nIf you&#39;re loading in JSON via an ajax call, then you can run one of Prism&#39;s utility methods to prettify\r\n\r\nFor example:\r\n\r\n    Prism.highlightAll()"},{"score":0,"body_markdown":"Here is how you can print without using native function.\r\n\r\n\r\n    function pretty(ob, lvl = 0) {\r\n    \r\n      let temp = [];\r\n      \r\n      if(typeof ob === &quot;object&quot;){\r\n        for(let x in ob) {\r\n          if(ob.hasOwnProperty(x)) {\r\n            temp.push( getTabs(lvl+1) + x + &quot;:&quot; + pretty(ob[x], lvl+1) );\r\n          }\r\n        }\r\n        return &quot;{\\n&quot;+ temp.join(&quot;,\\n&quot;) +&quot;\\n&quot; + getTabs(lvl) + &quot;}&quot;;\r\n      }\r\n      else {\r\n        return ob;\r\n      }\r\n      \r\n    }\r\n    \r\n    function getTabs(n) {\r\n      let c = 0, res = &quot;&quot;;\r\n      while(c++ &lt; n)\r\n        res+=&quot;\\t&quot;;\r\n      return res;\r\n    }\r\n    \r\n    let obj = {a: {b: 2}, x: {y: 3}};\r\n    console.log(pretty(obj));\r\n    \r\n    /*\r\n      {\r\n        a: {\r\n          b: 2\r\n        },\r\n        x: {\r\n          y: 3\r\n        }\r\n      }\r\n    */\r\n\r\n"},{"score":5,"body_markdown":"Here is a simple JSON format/color component written in React:\r\n\r\n    const HighlightedJSON = ({ json }: Object) =&gt; {\r\n      const highlightedJSON = jsonObj =&gt;\r\n        Object.keys(jsonObj).map(key =&gt; {\r\n          const value = jsonObj[key];\r\n          let valueType = typeof value;\r\n          const isSimpleValue =\r\n            [&quot;string&quot;, &quot;number&quot;, &quot;boolean&quot;].includes(valueType) || !value;\r\n          if (isSimpleValue &amp;&amp; valueType === &quot;object&quot;) {\r\n            valueType = &quot;null&quot;;\r\n          }\r\n          return (\r\n            &lt;div key={key} className=&quot;line&quot;&gt;\r\n              &lt;span className=&quot;key&quot;&gt;{key}:&lt;/span&gt;\r\n              {isSimpleValue ? (\r\n                &lt;span className={valueType}&gt;{`${value}`}&lt;/span&gt;\r\n              ) : (\r\n                highlightedJSON(value)\r\n              )}\r\n            &lt;/div&gt;\r\n          );\r\n        });\r\n      return &lt;div className=&quot;json&quot;&gt;{highlightedJSON(json)}&lt;/div&gt;;\r\n    };\r\n\r\nSee it working in this CodePen:\r\nhttps://codepen.io/benshope/pen/BxVpjo\r\n\r\nHope that helps!\r\n\r\n\r\n"},{"score":0,"body_markdown":"&lt;!-- language: lang-js --&gt;\r\n\r\nThe simplest way to display an object for debugging purposes:\r\n\r\n    console.log(&quot;data&quot;,data) // lets you unfold the object manually\r\n\r\nIf you want to display the object in the DOM, you should consider that it could contain strings that would be interpreted as HTML.  Therefore, you need to [do some escaping](https://stackoverflow.com/a/35735254/86967)...\r\n\r\n    var s = JSON.stringify(data,null,2) // format\r\n    var e = new Option(s).innerHTML // escape\r\n    document.body.insertAdjacentHTML(&#39;beforeend&#39;,&#39;&lt;pre&gt;&#39;+e+&#39;&lt;/pre&gt;&#39;) // display\r\n"},{"score":4,"body_markdown":"You can use `JSON.stringify(your object, null, 2)`\r\nThe second parameter can be used as a replacer function which takes key and Val as parameters.This can be used in case you want to modify something within your JSON object.\r\n\r\nmore reference : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"},{"score":13,"body_markdown":"Here&#39;s user123444555621&#39;s awesome HTML one adapted for terminals. Handy for debugging Node scripts:\r\n\r\n    function prettyJ(json) {\r\n      if (typeof json !== &#39;string&#39;) {\r\n        json = JSON.stringify(json, undefined, 2);\r\n      }\r\n      return json.replace(/(&quot;(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\&quot;])*&quot;(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, \r\n        function (match) {\r\n          let cls = &quot;\\x1b[36m&quot;;\r\n          if (/^&quot;/.test(match)) {\r\n            if (/:$/.test(match)) {\r\n              cls = &quot;\\x1b[34m&quot;;\r\n            } else {\r\n              cls = &quot;\\x1b[32m&quot;;\r\n            }\r\n          } else if (/true|false/.test(match)) {\r\n            cls = &quot;\\x1b[35m&quot;; \r\n          } else if (/null/.test(match)) {\r\n            cls = &quot;\\x1b[31m&quot;;\r\n          }\r\n          return cls + match + &quot;\\x1b[0m&quot;;\r\n        }\r\n      );\r\n    }\r\n\r\nUsage:\r\n\r\n    // thing = any json OR string of json\r\n    prettyJ(thing);"},{"score":2,"body_markdown":"Couldn&#39;t find any solution that had good syntax highlighting for the console, so here&#39;s my 2p\r\n\r\n## Install &amp; Add cli-highlight dependency \r\n\r\n    npm install cli-highlight --save\r\n\r\n## Define logjson globally\r\n    const highlight = require(&#39;cli-highlight&#39;).highlight\r\n    console.logjson = (obj) =&gt; console.log(\r\n                                   highlight( JSON.stringify(obj, null, 4), \r\n                                              { language: &#39;json&#39;, ignoreIllegals: true } ));\r\n\r\n\r\n## Use\r\n\r\n    console.logjson({foo: &quot;bar&quot;, someArray: [&quot;string1&quot;, &quot;string2&quot;]});\r\n\r\n\r\n[![output][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/lnJ0Z.png"},{"score":0,"body_markdown":"    &lt;!-- here is a complete example pretty print with more space between lines--&gt;\r\n    &lt;!-- be sure to pass a json string not a json object --&gt;\r\n    &lt;!-- use line-height to increase or decrease spacing between json lines --&gt;\r\n\r\n    &lt;style  type=&quot;text/css&quot;&gt;\r\n    .preJsonTxt{\r\n      font-size: 18px;\r\n      text-overflow: ellipsis;\r\n      overflow: hidden;\r\n      line-height: 200%;\r\n    }\r\n    .boxedIn{\r\n      border: 1px solid black;\r\n      margin: 20px;\r\n      padding: 20px;\r\n    }\r\n    &lt;/style&gt;\r\n\r\n    &lt;div class=&quot;boxedIn&quot;&gt;\r\n        &lt;h3&gt;Configuration Parameters&lt;/h3&gt;\r\n        &lt;pre id=&quot;jsonCfgParams&quot; class=&quot;preJsonTxt&quot;&gt;{{ cfgParams }}&lt;/pre&gt;\r\n    &lt;/div&gt;\r\n\r\n    &lt;script language=&quot;JavaScript&quot;&gt;\r\n    $( document ).ready(function()\r\n    {\r\n         $(formatJson);\r\n\r\n         &lt;!-- this will do a pretty print on the json cfg params      --&gt;\r\n         function formatJson() {\r\n             var element = $(&quot;#jsonCfgParams&quot;);\r\n             var obj = JSON.parse(element.text());\r\n            element.html(JSON.stringify(obj, undefined, 2));\r\n         }\r\n    });\r\n    &lt;/script&gt;"},{"score":0,"body_markdown":"To highlight and beautify it in `HTML` using `Bootstrap`:\r\n\r\n    function prettifyJson(json, prettify) {\r\n        if (typeof json !== &#39;string&#39;) {\r\n            if (prettify) {\r\n                json = JSON.stringify(json, undefined, 4);\r\n            } else {\r\n                json = JSON.stringify(json);\r\n            }\r\n        }\r\n        return json.replace(/(&quot;(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\&quot;])*&quot;(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g,\r\n            function(match) {\r\n                let cls = &quot;&lt;span&gt;&quot;;\r\n                if (/^&quot;/.test(match)) {\r\n                    if (/:$/.test(match)) {\r\n                        cls = &quot;&lt;span class=&#39;text-danger&#39;&gt;&quot;;\r\n                    } else {\r\n                        cls = &quot;&lt;span&gt;&quot;;\r\n                    }\r\n                } else if (/true|false/.test(match)) {\r\n                    cls = &quot;&lt;span class=&#39;text-primary&#39;&gt;&quot;;\r\n                } else if (/null/.test(match)) {\r\n                    cls = &quot;&lt;span class=&#39;text-info&#39;&gt;&quot;;\r\n                }\r\n                return cls + match + &quot;&lt;/span&gt;&quot;;\r\n            }\r\n        );\r\n    }"}],"score":2608}