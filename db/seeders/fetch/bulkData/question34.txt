{"body":"How do I check if a particular key exists in a JavaScript object or array?\r\n\r\nIf a key doesn&#39;t exist, and I try to access it, will it return false? Or throw an error?","title":"Checking if a key exists in a JavaScript object?","answers":[{"score":152,"body_markdown":"It will return `undefined`.\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var aa = {hello: &quot;world&quot;};\r\n    alert( aa[&quot;hello&quot;] );      // popup box with &quot;world&quot;\r\n    alert( aa[&quot;goodbye&quot;] );    // popup box with &quot;undefined&quot;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n`undefined` is a special constant value.  So you can say, e.g.\r\n\r\n    // note the three equal signs so that null won&#39;t be equal to undefined\r\n    if( aa[&quot;goodbye&quot;] === undefined ) {\r\n        // do something\r\n    }\r\n\r\nThis is probably the best way to check for missing keys.  However, as is pointed out in a comment below, it&#39;s theoretically possible that you&#39;d want to have the actual value be `undefined`.  I&#39;ve never needed to do this and can&#39;t think of a reason offhand why I&#39;d ever want to, but just for the sake of completeness, you can use the `in` operator\r\n\r\n    // this works even if you have {&quot;goodbye&quot;: undefined}\r\n    if( &quot;goodbye&quot; in aa ) {\r\n        // do something\r\n    }\r\n"},{"score":4401,"body_markdown":"Checking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually `undefined`?\r\n\r\n    var obj = { key: undefined };\r\n    obj[&quot;key&quot;] !== undefined // false, but the key exists!\r\n\r\nYou should instead use the `in` operator:\r\n\r\n    &quot;key&quot; in obj // true, regardless of the actual value\r\n\r\nIf you want to check if a key doesn&#39;t exist, remember to use parenthesis:\r\n\r\n    !(&quot;key&quot; in obj) // true if &quot;key&quot; doesn&#39;t exist in object\r\n    !&quot;key&quot; in obj   // ERROR!  Equivalent to &quot;false in obj&quot;\r\n\r\nOr, if you want to particularly test for properties of the object instance (and not inherited properties), use `hasOwnProperty`:\r\n\r\n    obj.hasOwnProperty(&quot;key&quot;) // true\r\n\r\nFor performance comparison between the methods that are `in`, `hasOwnProperty` and key is `undefined`, see this [**benchmark**][1]\r\n\r\n  [1]: http://jsben.ch/#/WqlIl"},{"score":31,"body_markdown":"    &quot;key&quot; in obj\r\n\r\nIs likely testing only object attribute values that are very different from array keys"},{"score":25,"body_markdown":"Three ways to check if a property is present in a javascript object:\r\n\r\n1. **`!!obj.theProperty`**   \r\nWill convert value to bool. returns `true` for all but the `false` value\r\n2. **&#39;`theProperty`&#39; in obj**   \r\n   Will return true if the property exists, no matter its value (even empty)\r\n3. **`obj.hasOwnProperty(&#39;theProperty&#39;)`**  \r\n   Does not check the prototype chain. (since all objects have the `toString` method, 1 and 2 will return true on it, while 3 can return false on it.)\r\n\r\nReference: \r\n\r\n&gt; http://book.mixu.net/node/ch5.html"},{"score":317,"body_markdown":"# Quick Answer\r\n&gt; How do I check if a particular key exists in a JavaScript object or array?\r\nIf a key doesn&#39;t exist and I try to access it, will it return false? Or throw an error?\r\n\r\nAccessing directly a missing property using (associative) array style or object style will return an *undefined* constant.\r\n\r\n## The slow and reliable *in* operator and *hasOwnProperty* method\r\n\r\nAs people have already mentioned here, you could have an object with a property associated with an &quot;undefined&quot; constant. \r\n\r\n     var bizzareObj = {valid_key:  undefined};\r\n\r\nIn that case, you will have to use *hasOwnProperty* or *in* operator to know if the key is really there. But, *but at what price?*\r\n\r\n\r\nso, I tell you...\r\n\r\n*in* operator and *hasOwnProperty* are &quot;methods&quot; that use the Property Descriptor mechanism in Javascript (similar to Java reflection in the Java language).\r\n\r\nhttp://www.ecma-international.org/ecma-262/5.1/#sec-8.10\r\n\r\n&gt; The Property Descriptor type is used to explain the manipulation and reification of named property attributes. Values of the Property Descriptor type are records composed of named fields where each fieldâ€™s name is an attribute name and its value is a corresponding attribute value as specified in 8.6.1. In addition, any field may be present or absent.\r\n\r\nOn the other hand, calling an object method or key will use Javascript [[Get]] mechanism. That is a far way faster!\r\n\r\n## Benchmark \r\n\r\nhttp://jsperf.com/checking-if-a-key-exists-in-a-javascript-array\r\n\r\n![Comparing key access in JS](https://i.stack.imgur.com/GjzNU.png).\r\n\r\n#### Using *in* operator\r\n\r\n    var result = &quot;Impression&quot; in array;\r\n    \r\nThe result was \r\n\r\n    12,931,832 &#177;0.21% ops/sec      92% slower \r\n    \r\n#### Using hasOwnProperty\r\n\r\n    var result = array.hasOwnProperty(&quot;Impression&quot;)\r\n\r\nThe result was\r\n\r\n    16,021,758 &#177;0.45% ops/sec     91% slower\r\n    \r\n#### Accessing elements directly (brackets style)\r\n\r\n    var result = array[&quot;Impression&quot;] === undefined\r\n\r\nThe result was\r\n\r\n    168,270,439 &#177;0.13 ops/sec     0.02% slower \r\n\t\r\n#### Accessing elements directly (object style)\r\n\r\n    var result = array.Impression  === undefined;\r\n\r\nThe result was\r\n\r\n    168,303,172 &#177;0.20%     fastest\r\n\r\n## EDIT: What is the reason to assign to a property the `undefined` value?\r\n\r\nThat question puzzles me. In Javascript, there are at least two references for absent objects to avoid problems like this: `null` and `undefined`. \r\n\r\n`null` is the primitive value that represents the intentional absence of any object value, or in short terms, the **confirmed** lack of value. On the other hand, `undefined` is an unknown value (not defined). If there is a property that will be used later with a *proper* value consider use `null` reference instead of `undefined` because in the initial moment the property is **confirmed** to lack value.\r\n\r\n\r\nCompare: \r\n\r\n    var a = {1: null}; \r\n    console.log(a[1] === undefined); // output: false. I know the value at position 1 of a[] is absent and this was by design, i.e.:  the value is defined. \r\n    console.log(a[0] === undefined); // output: true. I cannot say anything about a[0] value. In this case, the key 0 was not in a[].\r\n\r\n\r\n## Advice\r\n\r\nAvoid objects with `undefined` values. Check directly whenever possible and use `null` to initialize property values. Otherwise, use the slow `in` operator or `hasOwnProperty()` method.\r\n\r\n## EDIT: 12/04/2018 - NOT RELEVANT ANYMORE\r\n\r\nAs people have commented, modern versions of the Javascript engines (with firefox exception) have changed the approach for access properties. The current implementation is slower than the previous one for this particular case but the difference between access key and object is neglectable.\r\n"},{"score":15,"body_markdown":"If you are using [underscore.js][1] library then object/array operations become simple. \r\n\r\nIn your case _.has method can be used. Example:\r\n\r\n    yourArray = {age: &quot;10&quot;}\r\n\r\n    _.has(yourArray, &quot;age&quot;)\r\n\r\nreturns **true** \r\n\r\nBut,\r\n\r\n    _.has(yourArray, &quot;invalidKey&quot;)\r\n\r\nreturns **false**\r\n\r\n\r\n  [1]: http://underscorejs.org/"},{"score":33,"body_markdown":"The [accepted answer][1] refers to [Object][2]. Beware using the [`in` operator][3] on [Array][4] to find data instead of keys:\r\n\r\n    (&quot;true&quot; in [&quot;true&quot;, &quot;false&quot;])\r\n    // -&gt; false (Because the keys of the above Array are actually 0 and 1)\r\n\r\nTo test existing elements in an Array: https://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array\r\n\r\n  [1]: https://stackoverflow.com/a/1098955/1619432\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\r\n  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\r\n  [4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\r\n  [5]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray"},{"score":11,"body_markdown":"# Here&#39;s a helper function I find quite useful\r\n\r\nThis `keyExists(key, search)` can be used to easily lookup a key within  objects or arrays! \r\n\r\nJust pass it the key you want to find, and search obj (the object or array) you want to find it in.\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function keyExists(key, search) {\r\n            if (!search || (search.constructor !== Array &amp;&amp; search.constructor !== Object)) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i &lt; search.length; i++) {\r\n                if (search[i] === key) {\r\n                    return true;\r\n                }\r\n            }\r\n            return key in search;\r\n        }\r\n\r\n    // How to use it:\r\n    // Searching for keys in Arrays\r\n    console.log(keyExists(&#39;apple&#39;, [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;])); // true\r\n    console.log(keyExists(&#39;fruit&#39;, [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;])); // false\r\n\r\n    // Searching for keys in Objects\r\n    console.log(keyExists(&#39;age&#39;, {&#39;name&#39;: &#39;Bill&#39;, &#39;age&#39;: 29 })); // true\r\n    console.log(keyExists(&#39;title&#39;, {&#39;name&#39;: &#39;Jason&#39;, &#39;age&#39;: 29 })); // false\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIt&#39;s been pretty reliable and works well cross-browser."},{"score":15,"body_markdown":"**Answer:**\r\n\r\n    if (&quot;key&quot; in myObj)\r\n    {\r\n        console.log(&quot;key exists!&quot;);\r\n    }\r\n    else\r\n    {\r\n        console.log(&quot;key doesn&#39;t exist!&quot;);\r\n    }\r\n\r\n**Explanation:**\r\n\r\nThe `in` operator will check if the key exists in the object. If you checked if the value was undefined: `if (myObj[&quot;key&quot;] === &#39;undefined&#39;)`, you could run into problems because a key could possibly exist in your object with the `undefined` value.\r\n\r\nFor that reason, it is much better practice to first use the `in` operator and then compare the value that is inside the key once you already know it exists."},{"score":6,"body_markdown":"### We can use - &lt;code&gt;hasOwnProperty.call(obj, key);&lt;/code&gt;\r\nThe [underscore.js][1] way - \r\n  \r\n    if(_.has(this.options, &#39;login&#39;)){\r\n      //key &#39;login&#39; exists in this.options \r\n    }\r\n\r\n    _.has = function(obj, key) {\r\n      return hasOwnProperty.call(obj, key);\r\n    };\r\n\r\n  [1]: http://underscorejs.org/#has"},{"score":9,"body_markdown":"vanila js\r\n\r\n    yourObjName.hasOwnProperty(key) : true ? false;\r\n\r\nIf you want to check if the object has at least one property in es2015\r\n\r\n    Object.keys(yourObjName).length : true ? false"},{"score":9,"body_markdown":"&lt;h1&gt; ES6 solution&lt;/h1&gt;\r\n\r\nusing **[`Array#some`][1]** and **[`Object.keys`][2]**. It will return **true** if given key exists in the object or **false** if it doesn&#39;t.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var obj = {foo: &#39;one&#39;, bar: &#39;two&#39;};\r\n        \r\n    function isKeyInObject(obj, key) {\r\n        var res = Object.keys(obj).some(v =&gt; v == key);\r\n        console.log(res);\r\n    }\r\n\r\n    isKeyInObject(obj, &#39;foo&#39;);\r\n    isKeyInObject(obj, &#39;something&#39;);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nOne-line example.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log(Object.keys({foo: &#39;one&#39;, bar: &#39;two&#39;}).some(v =&gt; v == &#39;foo&#39;));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty/Array/some\r\n  [2]: https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"},{"score":4,"body_markdown":"###For those which have `lodash` included in their project:&lt;br&gt;There is a lodash [_.get][1] method  which tries to get &quot;deep&quot; keys:\r\n\r\n&gt; Gets the value at path of object. If the resolved value is undefined,\r\n&gt; the defaultValue is returned in its place.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var object = { &#39;a&#39;: [{ &#39;b&#39;: { &#39;c&#39;: 3 } }] };\r\n\r\n    console.log(\r\n      _.get(object, &#39;a[0].b.c&#39;),           // =&gt; 3\r\n      _.get(object, [&#39;a&#39;, &#39;0&#39;, &#39;b&#39;, &#39;c&#39;]), // =&gt; 3\r\n      _.get(object, &#39;a.b.c&#39;),              // =&gt; undefined \r\n      _.get(object, &#39;a.b.c&#39;, &#39;default&#39;)    // =&gt; &#39;default&#39;\r\n    )\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n----\r\nThis will effectively check if that key, however **deep**, is defined and *will not* throw an error which might harm the flow of your program if that key is not defined.\r\n\r\n  [1]: https://lodash.com/docs/4.17.4#get"},{"score":4,"body_markdown":"While this doesn&#39;t necessarily check if a key exists, it does check for the truthiness of a value. Which `undefined` and `null` fall under.\r\n\r\n`Boolean(obj.foo)`\r\n\r\nThis solution works best for me because I use typescript, and using strings like so `&#39;foo&#39; in obj` or `obj.hasOwnProperty(&#39;foo&#39;)` \r\n  to check whether a key exists or not does not provide me with intellisense.\r\n\r\n\r\n\r\n"},{"score":0,"body_markdown":"These example can demonstrate the differences between defferent ways. Hope it will help you to pick the right one for your needs:\r\n\r\n    // Lets create object `a` using create function `A`\r\n    function A(){};\r\n    A.prototype.onProtDef=2;\r\n    A.prototype.onProtUndef=undefined;\r\n    var a=new A();\r\n    a.ownProp = 3;\r\n    a.ownPropUndef = undefined;\r\n    \r\n    // Let&#39;s try different methods:\r\n    \r\n    a.onProtDef; // 2\r\n    a.onProtUndef; // undefined\r\n    a.ownProp; // 3\r\n    a.ownPropUndef; // undefined\r\n    a.whatEver; // undefined\r\n    a.valueOf; // Æ’ valueOf() { [native code] }\r\n    \r\n    a.hasOwnProperty(&#39;onProtDef&#39;); // false\r\n    a.hasOwnProperty(&#39;onProtUndef&#39;); // false\r\n    a.hasOwnProperty(&#39;ownProp&#39;); // true\r\n    a.hasOwnProperty(&#39;ownPropUndef&#39;); // true\r\n    a.hasOwnProperty(&#39;whatEver&#39;); // false\r\n    a.hasOwnProperty(&#39;valueOf&#39;); // false\r\n    \r\n    &#39;onProtDef&#39; in a; // true\r\n    &#39;onProtUndef&#39; in a; // true\r\n    &#39;ownProp&#39; in a; // true\r\n    &#39;ownPropUndef&#39; in a; // true\r\n    &#39;whatEver&#39; in a; // false\r\n    &#39;valueOf&#39; in a; // true (on the prototype chain - Object.valueOf)\r\n    \r\n    Object.keys(a); // [&quot;ownProp&quot;, &quot;ownPropUndef&quot;]\r\n\r\n"},{"score":-1,"body_markdown":"New awesome solution with **JavaScript Destructuring**:\r\n\r\n    let obj = {\r\n        &quot;key1&quot;: &quot;value1&quot;,\r\n        &quot;key2&quot;: &quot;value2&quot;,\r\n        &quot;key3&quot;: &quot;value3&quot;,\r\n    };\r\n\r\n    let {key1, key2, key3, key4} = obj;\r\n\r\n    // key1 = &quot;value1&quot;\r\n    // key2 = &quot;value2&quot;\r\n    // key3 = &quot;value3&quot;\r\n    // key4 = undefined\r\n\r\n    // Can easily use `if` here on key4\r\n    if(!key4) { console.log(&quot;key not present&quot;); } // Key not present\r\n\r\nDo check [other use of JavaScript Destructuring][1]\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"},{"score":4,"body_markdown":"If you want to check for any key at any depth on an object and account for falsey values consider this line for a utility function:\r\n\r\n    var keyExistsOn = (o, k) =&gt; k.split(&quot;.&quot;).reduce((a, c) =&gt; a.hasOwnProperty(c) ? a[c] || 1 : false, Object.assign({}, o)) === false ? false : true;\r\n\r\n**Results**\r\n\r\n    var obj = {\r\n        test: &quot;&quot;,\r\n        locals: {\r\n            test: &quot;&quot;,\r\n            test2: false,\r\n            test3: NaN,\r\n            test4: 0,\r\n            test5: undefined,\r\n            auth: {\r\n                user: &quot;hw&quot;\r\n            }\r\n        }\r\n    }\r\n\r\n    keyExistsOn(obj, &quot;&quot;)\r\n    &gt; false\r\n    keyExistsOn(obj, &quot;locals.test&quot;)\r\n    &gt; true\r\n    keyExistsOn(obj, &quot;locals.test2&quot;)\r\n    &gt; true\r\n    keyExistsOn(obj, &quot;locals.test3&quot;)\r\n    &gt; true\r\n    keyExistsOn(obj, &quot;locals.test4&quot;)\r\n    &gt; true\r\n    keyExistsOn(obj, &quot;locals.test5&quot;)\r\n    &gt; true\r\n    keyExistsOn(obj, &quot;sdsdf&quot;)\r\n    false\r\n    keyExistsOn(obj, &quot;sdsdf.rtsd&quot;)\r\n    false\r\n    keyExistsOn(obj, &quot;sdsdf.234d&quot;)\r\n    false\r\n    keyExistsOn(obj, &quot;2134.sdsdf.234d&quot;)\r\n    false\r\n    keyExistsOn(obj, &quot;locals&quot;)\r\n    true\r\n    keyExistsOn(obj, &quot;locals.&quot;)\r\n    false\r\n    keyExistsOn(obj, &quot;locals.auth&quot;)\r\n    true\r\n    keyExistsOn(obj, &quot;locals.autht&quot;)\r\n    false\r\n    keyExistsOn(obj, &quot;locals.auth.&quot;)\r\n    false\r\n    keyExistsOn(obj, &quot;locals.auth.user&quot;)\r\n    true\r\n    keyExistsOn(obj, &quot;locals.auth.userr&quot;)\r\n    false\r\n    keyExistsOn(obj, &quot;locals.auth.user.&quot;)\r\n    false\r\n    keyExistsOn(obj, &quot;locals.auth.user&quot;)\r\n    true\r\n\r\nAlso see this NPM package: https://www.npmjs.com/package/has-deep-value"},{"score":5,"body_markdown":"The easiest way to check is \r\n\r\n    &quot;key&quot; in object\r\n\r\nfor example: \r\n\r\n    var obj = {\r\n      a: 1,\r\n      b: 2,\r\n    }\r\n    &quot;a&quot; in obj // true\r\n    &quot;c&quot; in obj // false\r\n\r\n\r\nReturn value as **true** implies that key exists in the object. \r\n"},{"score":2,"body_markdown":"**yourArray.indexOf(yourArrayKeyName) &gt; -1**\r\n\r\n\r\n    fruit = [&#39;apple&#39;, &#39;grapes&#39;, &#39;banana&#39;]\r\n    \r\n    fruit.indexOf(&#39;apple&#39;) &gt; -1\r\n\r\n\r\n\r\n*true*\r\n\r\n\r\n--------------\r\n\r\n\r\n    fruit = [&#39;apple&#39;, &#39;grapes&#39;, &#39;banana&#39;]\r\n    \r\n    fruit.indexOf(&#39;apple1&#39;) &gt; -1\r\n\r\n*false*\r\n"},{"score":3,"body_markdown":"    const object1 = {\r\n      a: &#39;something&#39;,\r\n      b: &#39;something&#39;,\r\n      c: &#39;something&#39;\r\n    };\r\n    \r\n    const key = &#39;s&#39;;\r\n    \r\n    // Object.keys(object1) will return array of the object keys [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\r\n    \r\n    Object.keys(object1).indexOf(key) === -1 ? &#39;the key is not there&#39; : &#39;yep the key is exist&#39;;"},{"score":3,"body_markdown":"In &#39;array&#39; world we can look on indexes as some kind of keys. What is surprising the `in` operator (which is good choice for object) also works with arrays. The returned value for non-existed key is `undefined`\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let arr = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]; // we have indexes: 0,1,2\r\n    delete arr[1];           // set &#39;empty&#39; at index 1\r\n    arr.pop();               // remove last item\r\n\r\n    console.log(0 in arr,  arr[0]);\r\n    console.log(1 in arr,  arr[1]);\r\n    console.log(2 in arr,  arr[2]);\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":0,"body_markdown":"a fast and easy solution is to convert your object to json then you will be able to do this easy task\r\n\r\n\r\n        const allowed = {\r\n            &#39;/login&#39; : &#39;&#39;,\r\n            &#39;/register&#39;: &#39;&#39;,\r\n            &#39;/resetpsw&#39;: &#39;&#39;\r\n        };\r\n        console.log(&#39;/login&#39; in allowed); //returns true\r\n\r\n\r\nif you use an array the object key will be converted to integers ex 0,1,2,3 etc, therefore, it will always be false"}],"score":3164}