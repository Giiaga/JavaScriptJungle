{"body":"What is the most concise and efficient way to find out if a JavaScript array contains a value?\r\n\r\nThis is the only way I know to do it:\r\n\r\n    function contains(a, obj) {\r\n        for (var i = 0; i &lt; a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\nIs there a better and more concise way to accomplish this?\r\n\r\nThis is very closely related to Stack Overflow question *[Best way to find an item in a JavaScript Array?][1]* which addresses finding objects in an array using `indexOf`.\r\n\r\n  [1]: https://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array\r\n","title":"How do I check if an array includes a value in JavaScript?","answers":[{"score":16,"body_markdown":"If you are using JavaScript 1.6 or later (Firefox 1.5 or later) you can use [Array.indexOf][1].  Otherwise, I think you are going to end up with something similar to your original code.\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf"},{"score":218,"body_markdown":"[`indexOf`](https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf) maybe, but it&#39;s a &quot;JavaScript extension to the ECMA-262 standard; as such it may not be present in other implementations of the standard.&quot;\r\n\r\nExample:\r\n\r\n    [1, 2, 3].indexOf(1) =&gt; 0\r\n    [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;].indexOf(&quot;bar&quot;) =&gt; 1\r\n    [1, 2, 3].indexOf(4) =&gt; -1\r\n\r\nAFAICS [Microsoft does *not* offer some kind of alternative][1] to this, but you can add similar functionality to arrays in Internet Explorer (and other browsers that don&#39;t support `indexOf`) if you want to, as a [quick Google search reveals][2] (for example, [this one][3]).\r\n\r\n  [1]: http://msdn.microsoft.com/en-us/library/k4h76zbx%5C%28VS.85%5C%29.aspx\r\n  [2]: http://google.com/search?q=indexof%20internet%20explorer\r\n  [3]: http://soledadpenades.com/2007/05/17/arrayindexof-in-internet-explorer/\r\n"},{"score":451,"body_markdown":"**Update from 2019: This answer is from 2008 (11 years old!) and is not relevant for modern JS usage. The promised performance improvement was based on a benchmark done in browsers of that time. It might not be relevant to modern JS execution contexts. If you need an easy solution, look for other answers. If you need the best performance, benchmark for yourself in the relevant execution environments.**\r\n\r\nAs others have said, the iteration through the array is probably the best way, but it [has been proven][1] that a decreasing `while` loop is the fastest way to iterate in JavaScript. So you may want to rewrite your code as follows:\r\n\r\n    function contains(a, obj) {\r\n        var i = a.length;\r\n        while (i--) {\r\n           if (a[i] === obj) {\r\n               return true;\r\n           }\r\n        }\r\n        return false;\r\n    }\r\n\r\nOf course, you may as well extend Array prototype:\r\n\r\n    Array.prototype.contains = function(obj) {\r\n        var i = this.length;\r\n        while (i--) {\r\n            if (this[i] === obj) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\nAnd now you can simply use the following:\r\n\r\n    alert([1, 2, 3].contains(2)); // =&gt; true\r\n    alert([1, 2, 3].contains(&#39;2&#39;)); // =&gt; false\r\n\r\n   [1]: http://blogs.oracle.com/greimer/entry/best_way_to_code_a"},{"score":81,"body_markdown":"Here&#39;s a [JavaScript 1.6 compatible][1] implementation of `Array.indexOf`:\r\n\r\n    if (!Array.indexOf) {\r\n        Array.indexOf = [].indexOf ?\r\n            function(arr, obj, from) {\r\n                return arr.indexOf(obj, from);\r\n            } :\r\n            function(arr, obj, from) { // (for IE6)\r\n                var l = arr.length,\r\n                    i = from ? parseInt((1 * from) + (from &lt; 0 ? l : 0), 10) : 0;\r\n                i = i &lt; 0 ? 0 : i;\r\n                for (; i &lt; l; i++) {\r\n                    if (i in arr &amp;&amp; arr[i] === obj) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            };\r\n    }\r\n\r\n  [1]: https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf\r\n"},{"score":51,"body_markdown":"Extending the JavaScript `Array` object is a really bad idea because you introduce new properties (your custom methods) into `for-in` loops which can break existing scripts. A few years ago the authors of the [Prototype][1] library had to re-engineer their library implementation to remove just this kind of thing.\r\n\r\nIf you don&#39;t need to worry about compatibility with other JavaScript running on your page, go for it, otherwise, I&#39;d recommend the more awkward, but safer free-standing function solution.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework\r\n"},{"score":4,"body_markdown":"Here&#39;s how [Prototype does it][1]:\r\n\r\n    /**\r\n     *  Array#indexOf(item[, offset = 0]) -&gt; Number\r\n     *  - item (?): A value that may or may not be in the array.\r\n     *  - offset (Number): The number of initial items to skip before beginning the\r\n     *      search.\r\n     *\r\n     *  Returns the position of the first occurrence of `item` within the array &amp;mdash; or\r\n     *  `-1` if `item` doesn&#39;t exist in the array.\r\n    **/\r\n    function indexOf(item, i) {\r\n      i || (i = 0);\r\n      var length = this.length;\r\n      if (i &lt; 0) i = length + i;\r\n      for (; i &lt; length; i++)\r\n        if (this[i] === item) return i;\r\n      return -1;\r\n    }\r\n\r\nAlso see [here][2] for how they hook it up.\r\n\r\n\r\n  [1]: http://github.com/sstephenson/prototype/blob/f405b2c510e09b55d08c926a9e1a5c2e2d0a1834/src/lang/array.js#L286-302\r\n  [2]: http://github.com/sstephenson/prototype/blob/f405b2c510e09b55d08c926a9e1a5c2e2d0a1834/src/lang/array.js#L364-365"},{"score":4607,"body_markdown":"Modern browsers have [`Array#includes`][1], which does *exactly* that and [is widely supported][2] by everyone except IE:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log([&#39;joe&#39;, &#39;jane&#39;, &#39;mary&#39;].includes(&#39;jane&#39;)); //true\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nYou can also use [`Array#indexOf`][3], which is less direct, but doesn&#39;t require polyfills for outdated browsers.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log([&#39;joe&#39;, &#39;jane&#39;, &#39;mary&#39;].indexOf(&#39;jane&#39;) &gt;= 0); //true\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n---\r\n\r\nMany frameworks also offer similar methods:\r\n\r\n* jQuery: [`$.inArray(value, array, [fromIndex])`][4]\r\n* Underscore.js: [``_.contains(array, value)``][5] (also aliased as ``_.include`` and ``_.includes``)\r\n* Dojo Toolkit: [``dojo.indexOf(array, value, [fromIndex, findLast])``][6]\r\n* Prototype: [``array.indexOf(value)``][7]\r\n* MooTools: [``array.indexOf(value)``][8]\r\n* MochiKit: [``findValue(array, value)``][9]\r\n* MS Ajax: [``array.indexOf(value)``][10]\r\n* Ext: [``Ext.Array.contains(array, value)``][11]\r\n* Lodash: [``_.includes(array, value, [from])``][12] (is `_.contains` prior 4.0.0)\r\n* Ramda: [``R.includes(value, array)``][13]\r\n\r\nNotice that some frameworks implement this as a function, while others add the function to the array prototype.\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Browser_compatibility\r\n  [2]: https://kangax.github.io/compat-table/es2016plus/#test-Array.prototype.includes\r\n  [3]: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\r\n  [4]: http://api.jquery.com/jquery.inarray/\r\n  [5]: http://underscorejs.org/#contains\r\n  [6]: http://dojotoolkit.org/reference-guide/dojo/indexOf.html\r\n  [7]: http://api.prototypejs.org/language/Array/prototype/indexOf/\r\n  [8]: https://mootools.net/core/docs/1.6.0/Types/Array#Array:indexOf\r\n  [9]: http://mochi.github.io/mochikit/doc/html/MochiKit/Base.html#fn-findvalue\r\n  [10]: http://www.asp.net/ajaxlibrary/Reference.Array-indexOf-Function.ashx\r\n  [11]: http://docs.sencha.com/extjs/4.0.0/#/api/Ext.Array-method-contains\r\n  [12]: https://lodash.com/docs#includes\r\n  [13]: https://ramdajs.com/docs/#includes"},{"score":32,"body_markdown":"Thinking out of the box for a second, if you are making this call many many times, it is vastly more efficient to use &lt;strike&gt;an associative array&lt;/strike&gt; a Map to do lookups using a hash function.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\r\n\r\n"},{"score":-10,"body_markdown":"Just another option\r\n\r\n    // usage: if ( [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;].contains(&#39;b&#39;) ) { ... }\r\n    Array.prototype.contains = function(value){\r\n        for (var key in this)\r\n            if (this[key] === value) return true;\r\n        return false;\r\n    }\r\n\r\nBe careful because overloading javascript array objects with custom methods can disrupt the behavior of other javascripts, causing unexpected behavior."},{"score":15,"body_markdown":"If you are checking repeatedly for existence of an object in an array you should maybe look into\r\n\r\n 1. Keeping the array sorted at all times by doing [insertion sort][1] in your array (put new objects in on the right place) \r\n 2. Make updating objects as remove+sorted insert operation and\r\n 3. Use a [binary search][2] lookup in your `contains(a, obj)`.\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Insertion_sort\r\n  [2]: http://en.wikipedia.org/wiki/Binary_search_algorithm"},{"score":-4,"body_markdown":"Literally:\n\n(using Firefox v3.6, with `for-in` caveats as previously noted \n(HOWEVER the use below might endorse `for-in` for this very purpose! That is, enumerating array elements that ACTUALLY exist via a property index (HOWEVER, in particular, the array `length` property is NOT enumerated in the `for-in` property list!).).)\n\n(Drag &amp; drop the following complete URI&#39;s for immediate mode browser testing.)\n\n### JavaScript:\n\n      function ObjInRA(ra){var has=false; for(i in ra){has=true; break;} return has;}\n\n      function check(ra){\n          return [&#39;There is &#39;,ObjInRA(ra)?&#39;an&#39;:&#39;NO&#39;,&#39; object in [&#39;,ra,&#39;].&#39;].join(&#39;&#39;)\n      }\n      alert([\n                check([{}]), check([]), check([,2,3]),\n                check([&#39;&#39;]), &#39;\\t (a null string)&#39;, check([,,,])\n            ].join(&#39;\\n&#39;));\n\nwhich displays:\n\n    There is an object in [[object Object]].\n    There is NO object in [].\n    There is an object in [,2,3].\n    There is an object in [].\n         (a null string)\n    There is NO object in [,,].\n\nWrinkles: if looking for a &quot;specific&quot; object consider:\n\nJavaScript: `alert({}!={}); alert({}!=={});`\n\nAnd thus:\n\n### JavaScript:\n \n     obj = {prop:&quot;value&quot;}; \n     ra1 = [obj]; \n     ra2 = [{prop:&quot;value&quot;}];\n     alert(ra1[0] == obj); \n     alert(ra2[0] == obj);\n\nOften `ra2` is considered to &quot;contain&quot; `obj` as the literal entity `{prop:&quot;value&quot;}`.\n\nA very coarse, rudimentary, naive (as in code needs qualification enhancing) solution:\n\n### JavaScript:\n\n      obj={prop:&quot;value&quot;};   ra2=[{prop:&quot;value&quot;}];\n      alert(\n        ra2 . toSource() . indexOf( obj.toSource().match(/^.(.*).$/)[1] ) != -1 ?\n          &#39;found&#39; :\n          &#39;missing&#39; );\n\nSee ref: *[Searching for objects in JavaScript arrays][1]*.\n\n  [1]: https://stackoverflow.com/questions/3624741/searching-for-objects-in-javascript-arrays/5750179#5750179\n"},{"score":4,"body_markdown":"Use:\r\n\r\n    Array.prototype.contains = function(x){\r\n      var retVal = -1;\r\n\r\n      // x is a primitive type\r\n      if([&quot;string&quot;,&quot;number&quot;].indexOf(typeof x)&gt;=0 ){ retVal = this.indexOf(x);}\r\n\r\n      // x is a function\r\n      else if(typeof x ==&quot;function&quot;) for(var ix in this){\r\n        if((this[ix]+&quot;&quot;)==(x+&quot;&quot;)) retVal = ix;\r\n      }\r\n\r\n      //x is an object...\r\n      else {\r\n        var sx=JSON.stringify(x);\r\n        for(var ix in this){\r\n          if(typeof this[ix] ==&quot;object&quot; &amp;&amp; JSON.stringify(this[ix])==sx) retVal = ix;\r\n        }\r\n      }\r\n\r\n      //Return False if -1 else number if numeric otherwise string\r\n      return (retVal === -1)?false : ( isNaN(+retVal) ? retVal : +retVal);\r\n    }\r\n\r\nI know it&#39;s not the best way to go, but since there is no native IComparable way to interact between objects, I guess this is as close as you can get to compare two entities in an array. Also, extending Array object might not be a wise thing to do, but sometimes it&#39;s OK (if you are aware of it and the trade-off).\r\n\r\n"},{"score":117,"body_markdown":"Let&#39;s say you&#39;ve defined an array like so:\r\n\r\n    const array = [1, 2, 3, 4]\r\n\r\nBelow are three ways of checking whether there is a `3` in there. All of them return either `true` or `false`.\r\n\r\n### Native Array method (since ES2016) ([compatibility table][1])\r\n\r\n    array.includes(3) // true\r\n\r\n### As custom Array method (pre ES2016)\r\n\r\n    // Prefixing the method with &#39;_&#39; to avoid name clashes\r\n    Object.defineProperty(Array.prototype, &#39;_includes&#39;, { value: function (v) { return this.indexOf(v) !== -1 }})\r\n    array._includes(3) // true\r\n\r\n### Simple function\r\n\r\n    const includes = (a, v) =&gt; a.indexOf(v) !== -1\r\n    includes(array, 3) // true\r\n\r\n  [1]: https://caniuse.com/#feat=array-includes"},{"score":10,"body_markdown":"While `array.indexOf(x)!=-1` is the most concise way to do this (and has been supported by non-Internet&amp;nbsp;Explorer browsers for over decade...), it is not O(1), but rather O(N), which is terrible. If your array will not be changing, you can convert your array to a hashtable, then do `table[x]!==undefined` or `===undefined`:\r\n\r\n    Array.prototype.toTable = function() {\r\n        var t = {};\r\n        this.forEach(function(x){t[x]=true});\r\n        return t;\r\n    }\r\n\r\nDemo:\r\n\r\n    var toRemove = [2,4].toTable();\r\n    [1,2,3,4,5].filter(function(x){return toRemove[x]===undefined})\r\n\r\n(Unfortunately, while you can create an Array.prototype.contains to &quot;freeze&quot; an array and store a hashtable in this._cache in two lines, this would give wrong results if you chose to edit your array later. JavaScript has insufficient hooks to let you keep this state, unlike Python for example.)\r\n"},{"score":17,"body_markdown":"    function inArray(elem,array)\r\n    {\r\n\t\tvar len = array.length;\r\n\t\tfor(var i = 0 ; i &lt; len;i++)\r\n\t\t{\r\n\t\t\tif(array[i] == elem){return i;}\r\n\t\t}\r\n\t\treturn -1;\r\n    } \r\n\r\nReturns array index if found, or -1 if not found"},{"score":3,"body_markdown":"Similar thing: Finds the first element by a &quot;search lambda&quot;:\r\n\r\n    Array.prototype.find = function(search_lambda) {\r\n      return this[this.map(search_lambda).indexOf(true)];\r\n    };\r\n\r\nUsage:\r\n\r\n    [1,3,4,5,8,3,5].find(function(item) { return item % 2 == 0 })\r\n    =&gt; 4\r\n\r\nSame in coffeescript:\r\n\r\n    Array.prototype.find = (search_lambda) -&gt; @[@map(search_lambda).indexOf(true)]\r\n"},{"score":3,"body_markdown":"As others have mentioned you can use `Array.indexOf`, but it isn&#39;t available in all browsers. Here&#39;s the code from https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf to make it work the same in older browsers.\r\n\r\n&gt; indexOf is a recent addition to the ECMA-262 standard; as such it may\r\n&gt; not be present in all browsers. You can work around this by inserting\r\n&gt; the following code at the beginning of your scripts, allowing use of\r\n&gt; indexOf in implementations which do not natively support it. This\r\n&gt; algorithm is exactly the one specified in ECMA-262, 5th edition,\r\n&gt; assuming Object, TypeError, Number, Math.floor, Math.abs, and Math.max\r\n&gt; have their original value.\r\n\r\n    if (!Array.prototype.indexOf) {\r\n        Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\r\n            &quot;use strict&quot;;\r\n            if (this == null) {\r\n                throw new TypeError();\r\n            }\r\n            var t = Object(this);\r\n            var len = t.length &gt;&gt;&gt; 0;\r\n            if (len === 0) {\r\n                return -1;\r\n            }\r\n            var n = 0;\r\n            if (arguments.length &gt; 1) {\r\n                n = Number(arguments[1]);\r\n                if (n != n) { // shortcut for verifying if it&#39;s NaN\r\n                    n = 0;\r\n                } else if (n != 0 &amp;&amp; n != Infinity &amp;&amp; n != -Infinity) {\r\n                    n = (n &gt; 0 || -1) * Math.floor(Math.abs(n));\r\n                }\r\n            }\r\n            if (n &gt;= len) {\r\n                return -1;\r\n            }\r\n            var k = n &gt;= 0 ? n : Math.max(len - Math.abs(n), 0);\r\n            for (; k &lt; len; k++) {\r\n                if (k in t &amp;&amp; t[k] === searchElement) {\r\n                    return k;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n    }"},{"score":2,"body_markdown":"I looked through submitted answers and got that they only apply if you search for the object via reference. A simple linear search with reference object comparison. \r\n\r\nBut lets say you don&#39;t have the reference to an object, how will you find the correct object in the array? You will have to go linearly and deep compare with each object. Imagine if the list is too large, and the objects in it are very big containing big pieces of text. The performance drops drastically with the number and size of the elements in the array.\r\n\r\nYou can stringify objects and put them in the native hash table, but then you will have data redundancy remembering these keys cause JavaScript keeps them for &#39;for i in obj&#39;, and you only want to check if the object exists or not, that is, you have the key.\r\n\r\nI thought about this for some time constructing a JSON Schema validator, and I devised a simple wrapper for the native hash table, similar to the sole hash table implementation, with some optimization exceptions which I left to the native hash table to deal with. It only needs performance benchmarking...\r\nAll the details and code can be found on my blog: http://stamat.wordpress.com/javascript-quickly-find-very-large-objects-in-a-large-array/\r\nI will soon post benchmark results. \r\n\r\nThe complete solution works like this:\r\n\r\n    var a = {&#39;a&#39;:1,\r\n     &#39;b&#39;:{&#39;c&#39;:[1,2,[3,45],4,5],\r\n     &#39;d&#39;:{&#39;q&#39;:1, &#39;b&#39;:{&#39;q&#39;:1, &#39;b&#39;:8},&#39;c&#39;:4},\r\n     &#39;u&#39;:&#39;lol&#39;},\r\n     &#39;e&#39;:2};\r\n\r\n     var b = {&#39;a&#39;:1, \r\n     &#39;b&#39;:{&#39;c&#39;:[2,3,[1]],\r\n     &#39;d&#39;:{&#39;q&#39;:3,&#39;b&#39;:{&#39;b&#39;:3}}},\r\n     &#39;e&#39;:2};\r\n\r\n     var c = &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&quot;;\r\n     \r\n     var hc = new HashCache([{a:3, b:2, c:5}, {a:15, b:2, c:&#39;foo&#39;}]); //init\r\n     \r\n     hc.put({a:1, b:1});\r\n     hc.put({b:1, a:1});\r\n     hc.put(true);\r\n     hc.put(&#39;true&#39;);\r\n     hc.put(a);\r\n     hc.put(c);\r\n     hc.put(d);\r\n     console.log(hc.exists(&#39;true&#39;));\r\n     console.log(hc.exists(a));\r\n     console.log(hc.exists(c));\r\n     console.log(hc.exists({b:1, a:1}));\r\n     hc.remove(a);\r\n     console.log(hc.exists(c));"},{"score":59,"body_markdown":"Use:\r\n\r\n    function isInArray(array, search)\r\n    {\r\n        return array.indexOf(search) &gt;= 0;\r\n    }\r\n\r\n    // Usage\r\n    if(isInArray(my_array, &quot;my_value&quot;))\r\n    {\r\n        //...\r\n    }\r\n\r\n"},{"score":8,"body_markdown":"Use:\r\n\r\n    var myArray = [&#39;yellow&#39;, &#39;orange&#39;, &#39;red&#39;] ;\r\n\r\n    alert(!!~myArray.indexOf(&#39;red&#39;)); //true\r\n\r\n[Demo][1]\r\n\r\nTo know exactly what the `tilde` `~` do at this point, refer to this question *[What does a tilde do when it precedes an expression?][2]*.\r\n\r\n  [1]: http://jsfiddle.net/An5jQ/\r\n  [2]: https://stackoverflow.com/questions/12299665/what-does-a-tilde-do-when-it-precedes-an-expression\r\n"},{"score":10,"body_markdown":"ECMAScript 6 has an elegant proposal on find.\r\n\r\n&gt; The find method executes the callback function once for each element\r\n&gt; present in the array until it finds one where callback returns a true\r\n&gt; value. If such an element is found, find immediately returns the value\r\n&gt; of that element. Otherwise, find returns undefined. callback is\r\n&gt; invoked only for indexes of the array which have assigned values; it\r\n&gt; is not invoked for indexes which have been deleted or which have never\r\n&gt; been assigned values.\r\n\r\nHere is the [MDN documentation][1] on that.\r\n\r\nThe find functionality works like this.\r\n\r\n    function isPrime(element, index, array) {\r\n        var start = 2;\r\n        while (start &lt;= Math.sqrt(element)) {\r\n            if (element % start++ &lt; 1) return false;\r\n        }\r\n        return (element &gt; 1);\r\n    }\r\n\r\n    console.log( [4, 6, 8, 12].find(isPrime) ); // Undefined, not found\r\n    console.log( [4, 5, 8, 12].find(isPrime) ); // 5\r\n\r\nYou can use this in ECMAScript 5 and below by [defining the function][2].\r\n\r\n    if (!Array.prototype.find) {\r\n      Object.defineProperty(Array.prototype, &#39;find&#39;, {\r\n        enumerable: false,\r\n        configurable: true,\r\n        writable: true,\r\n        value: function(predicate) {\r\n          if (this == null) {\r\n            throw new TypeError(&#39;Array.prototype.find called on null or undefined&#39;);\r\n          }\r\n          if (typeof predicate !== &#39;function&#39;) {\r\n            throw new TypeError(&#39;predicate must be a function&#39;);\r\n          }\r\n          var list = Object(this);\r\n          var length = list.length &gt;&gt;&gt; 0;\r\n          var thisArg = arguments[1];\r\n          var value;\r\n\r\n          for (var i = 0; i &lt; length; i++) {\r\n            if (i in list) {\r\n              value = list[i];\r\n              if (predicate.call(thisArg, value, i, list)) {\r\n                return value;\r\n              }\r\n            }\r\n          }\r\n          return undefined;\r\n        }\r\n      });\r\n    }\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Polyfill\r\n"},{"score":28,"body_markdown":"I use the following:\r\n\r\n    Array.prototype.contains = function (v) {\r\n        return this.indexOf(v) &gt; -1;\r\n    }\r\n    \r\n    var a = [ &#39;foo&#39;, &#39;bar&#39; ];\r\n    \r\n    a.contains(&#39;foo&#39;); // true\r\n    a.contains(&#39;fox&#39;); // false"},{"score":151,"body_markdown":"The top answers assume primitive types but if you want to find out if an array contains an **object** with some trait, [Array.prototype.some()][1] is an elegant solution:\r\n\r\n    const items = [ {a: &#39;1&#39;}, {a: &#39;2&#39;}, {a: &#39;3&#39;} ]\r\n    \r\n    items.some(item =&gt; item.a === &#39;3&#39;)  // returns true\r\n    items.some(item =&gt; item.a === &#39;4&#39;)  // returns false\r\n\r\nThe nice thing about it is that the iteration is aborted once the element is found so unnecessary iteration cycles are spared.\r\n\r\nAlso, it fits nicely in an `if` statement since it returns a boolean:\r\n\r\n    if (items.some(item =&gt; item.a === &#39;3&#39;)) {\r\n      // do something\r\n    }\r\n\r\n\r\n\\* As jamess pointed out in the comment, at the time of this answer, September 2018, `Array.prototype.some()` is fully supported: [caniuse.com support table][2]\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/some\r\n  [2]: http://kangax.github.io/compat-table/es5/#test-Array_methods_Array.prototype.some_a_href=_https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some_title=_MDN_documentation_img_src=_../mdn.png_alt=_MDN_(Mozilla_Development_Network)_logo_width=_15_height=_13_/_/a_nbsp;"},{"score":16,"body_markdown":"We use this snippet (works with objects, arrays, strings):\r\n\r\n    /*\r\n     * @function\r\n     * @name Object.prototype.inArray\r\n     * @description Extend Object prototype within inArray function\r\n     *\r\n     * @param {mix}    needle       - Search-able needle\r\n     * @param {bool}   searchInKey  - Search needle in keys?\r\n     *\r\n     */\r\n    Object.defineProperty(Object.prototype, &#39;inArray&#39;,{\r\n        value: function(needle, searchInKey){\r\n\r\n            var object = this;\r\n\r\n            if( Object.prototype.toString.call(needle) === &#39;[object Object]&#39; || \r\n                Object.prototype.toString.call(needle) === &#39;[object Array]&#39;){\r\n                needle = JSON.stringify(needle);\r\n            }\r\n\r\n            return Object.keys(object).some(function(key){\r\n            \r\n                var value = object[key];\r\n\r\n                if( Object.prototype.toString.call(value) === &#39;[object Object]&#39; || \r\n                    Object.prototype.toString.call(value) === &#39;[object Array]&#39;){\r\n                    value = JSON.stringify(value);\r\n                }\r\n\r\n                if(searchInKey){\r\n                    if(value === needle || key === needle){\r\n                    return true;\r\n                    }\r\n                }else{\r\n                    if(value === needle){\r\n                        return true;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        writable: true,\r\n        configurable: true,\r\n        enumerable: false\r\n    });\r\n\r\n\r\n**Usage:**\r\n    \r\n    var a = {one: &quot;first&quot;, two: &quot;second&quot;, foo: {three: &quot;third&quot;}};\r\n    a.inArray(&quot;first&quot;);          //true\r\n    a.inArray(&quot;foo&quot;);            //false\r\n    a.inArray(&quot;foo&quot;, true);      //true - search by keys\r\n    a.inArray({three: &quot;third&quot;}); //true\r\n\r\n    var b = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, {foo: &#39;val&#39;}];\r\n    b.inArray(&quot;one&quot;);         //true\r\n    b.inArray(&#39;foo&#39;);         //false\r\n    b.inArray({foo: &#39;val&#39;})   //true\r\n    b.inArray(&quot;{foo: &#39;val&#39;}&quot;) //false\r\n    \r\n    var c = &quot;String&quot;;\r\n    c.inArray(&quot;S&quot;);        //true\r\n    c.inArray(&quot;s&quot;);        //false\r\n    c.inArray(&quot;2&quot;, true);  //true\r\n    c.inArray(&quot;20&quot;, true); //false"},{"score":24,"body_markdown":"\r\n    function contains(a, obj) {\r\n        return a.some(function(element){return element == obj;})\r\n    }\r\n\r\n[Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) was added to the ECMA-262 standard in the 5th edition"},{"score":176,"body_markdown":"ECMAScript 7 introduces [`Array.prototype.includes`][1].\r\n\r\nIt can be used like this:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    [1, 2, 3].includes(2); // true\r\n    [1, 2, 3].includes(4); // false\r\n\r\nIt also accepts an optional second argument `fromIndex`:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    [1, 2, 3].includes(3, 3); // false\r\n    [1, 2, 3].includes(3, -1); // true\r\n\r\nUnlike `indexOf`, which uses [Strict Equality Comparison][2], `includes` compares using [SameValueZero][3] equality algorithm. That means that you can detect if an array includes a `NaN`:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    [1, 2, NaN].includes(NaN); // true\r\n\r\nAlso unlike `indexOf`, `includes` does not skip missing indices:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    new Array(5).includes(undefined); // true\r\n\r\nCurrently it&#39;s still a draft but can be [polyfilled][4] to make it work on all browsers.\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\r\n  [2]: http://www.ecma-international.org/ecma-262/6.0/#sec-strict-equality-comparison\r\n  [3]: http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero\r\n  [4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill"},{"score":34,"body_markdown":"One-liner:\r\n\r\n    function contains(arr, x) {\r\n        return arr.filter(function(elem) { return elem == x }).length &gt; 0;\r\n    }\r\n"},{"score":19,"body_markdown":"**A hopefully faster bidirectional `indexOf` / `lastIndexOf` alternative**\r\n\r\n2015\r\n---\r\n\r\nWhile the new method [includes][1] is very nice, the support is basically zero for now.\r\n\r\nIt&#39;s long time that I was thinking of way to replace the slow indexOf/lastIndexOf functions.\r\n\r\nA performant way has already been found, looking at the top answers. From those I chose the `contains` function posted by @Damir Zekic which should be the fastest one. But it also states that the benchmarks are from 2008 and so are outdated.\r\n\r\nI also prefer `while` over `for`, but for not a specific reason I ended writing the function with a for loop. It could be also done with a `while --`.\r\n\r\nI was curious if the iteration was much slower if I check both sides of the array while doing it. Apparently no, and so this function is around two times faster than the top voted ones. Obviously it&#39;s also faster than the native one. This in a real world environment, where you never know if the value you are searching is at the beginning or at the end of the array.\r\n\r\nWhen you know you just pushed an array with a value, using lastIndexOf remains probably the best solution, but if you have to travel through big arrays and the result could be everywhere, this could be a solid solution to make things faster.\r\n\r\n**Bidirectional indexOf/lastIndexOf**\r\n\r\n    function bidirectionalIndexOf(a, b, c, d, e){\r\n      for(c=a.length,d=c*1; c--; ){\r\n        if(a[c]==b) return c; //or this[c]===b\r\n        if(a[e=d-1-c]==b) return e; //or a[e=d-1-c]===b\r\n      }\r\n      return -1\r\n    }\r\n\r\n    //Usage\r\n    bidirectionalIndexOf(array,&#39;value&#39;);\r\n\r\n\r\n###Performance test\r\n\r\nhttp://jsperf.com/bidirectionalindexof\r\n\r\nAs test I created an array with 100k entries.\r\n\r\nThree queries: at the beginning, in the middle &amp; at the end of the array.\r\n\r\nI hope you also find this interesting and test the performance.\r\n\r\nNote: As you can see I slightly modified the `contains` function to reflect the indexOf &amp; lastIndexOf output (so basically `true` with the `index` and `false` with `-1`). That shouldn&#39;t harm it.\r\n\r\n###The array prototype variant\r\n\r\n    Object.defineProperty(Array.prototype,&#39;bidirectionalIndexOf&#39;,{value:function(b,c,d,e){\r\n      for(c=this.length,d=c*1; c--; ){\r\n        if(this[c]==b) return c; //or this[c]===b\r\n        if(this[e=d-1-c] == b) return e; //or this[e=d-1-c]===b\r\n      }\r\n      return -1\r\n    },writable:false, enumerable:false});\r\n\r\n    // Usage\r\n    array.bidirectionalIndexOf(&#39;value&#39;);\r\n\r\nThe function can also be easily modified to return true or false or even the object, string or whatever it is.\r\n\r\nAnd here is the `while` variant:\r\n\r\n    function bidirectionalIndexOf(a, b, c, d){\r\n      c=a.length; d=c-1;\r\n      while(c--){\r\n        if(b===a[c]) return c;\r\n        if(b===a[d-c]) return d-c;\r\n      }\r\n      return c\r\n    }\r\n\r\n    // Usage\r\n    bidirectionalIndexOf(array,&#39;value&#39;);\r\n\r\n###How is this possible?\r\n\r\nI think that the simple calculation to get the reflected index in an array is so simple that it&#39;s two times faster than doing an actual loop iteration.\r\n\r\nHere is a complex example doing three checks per iteration, but this is only possible with a longer calculation which causes the slowdown of the code.\r\n\r\nhttp://jsperf.com/bidirectionalindexof/2\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\r\n"},{"score":12,"body_markdown":"Use lodash&#39;s [some][1] function.\r\n\r\nIt&#39;s concise, accurate and has great cross platform support.\r\n\r\nThe accepted answer does not even meet the requirements.\r\n\r\n*Requirements:* Recommend most concise and efficient way to find out if a JavaScript array contains an object.\r\n\r\n**Accepted Answer:**\r\n\r\n\r\n    $.inArray({&#39;b&#39;: 2}, [{&#39;a&#39;: 1}, {&#39;b&#39;: 2}])\r\n    &gt; -1\r\n\r\n\r\n**My recommendation:**\r\n\r\n    _.some([{&#39;a&#39;: 1}, {&#39;b&#39;: 2}], {&#39;b&#39;: 2})\r\n    &gt; true\r\n\r\n\r\nNotes: \r\n\r\n$.inArray works fine for determining whether a *scalar* value exists in an array of scalars...\r\n\r\n    $.inArray(2, [1,2])\r\n    &gt; 1\r\n\r\n... but the question clearly asks for an efficient way to determine if an *object* is contained in an array.\r\n\r\nIn order to handle both scalars and objects, you could do this:\r\n\r\n    (_.isObject(item)) ? _.some(ary, item) : (_.indexOf(ary, item) &gt; -1)\r\n\r\n\r\n\r\n  [1]: https://lodash.com/docs#some"},{"score":9,"body_markdown":"One can use [Set][1] that has the method &quot;has()&quot;:\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function contains(arr, obj) {\r\n          var proxy = new Set(arr);\r\n          if (proxy.has(obj))\r\n            return true;\r\n          else\r\n            return false;\r\n        }\r\n\r\n        var arr = [&#39;Happy&#39;, &#39;New&#39;, &#39;Year&#39;];\r\n        console.log(contains(arr, &#39;Happy&#39;));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set\r\n"},{"score":6,"body_markdown":"By no means the best, but I was just getting creative and adding to the repertoire.\n\n### Do not use this\n\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\n\n&lt;!-- language: lang-js --&gt;\n\n    Object.defineProperty(Array.prototype, &#39;exists&#39;, {\n      value: function(element, index) {\n\n        var index = index || 0\n\n        return index === this.length ? -1 : this[index] === element ? index : this.exists(element, ++index)\n      }\n    })\n\n\n    // Outputs 1\n    console.log([&#39;one&#39;, &#39;two&#39;].exists(&#39;two&#39;));\n\n    // Outputs -1\n    console.log([&#39;one&#39;, &#39;two&#39;].exists(&#39;three&#39;));\n\n    console.log([&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;].exists(&#39;four&#39;));\n\n&lt;!-- end snippet --&gt;\n"},{"score":5,"body_markdown":"You can also use this trick:\r\n\r\n    var arrayContains = function(object) {\r\n      return (serverList.filter(function(currentObject) {\r\n        if (currentObject === object) {\r\n          return currentObject\r\n        }\r\n        else {\r\n          return false;\r\n        }\r\n      }).length &gt; 0) ? true : false\r\n    }\r\n"},{"score":15,"body_markdown":"Solution that works in all modern browsers:\r\n\r\n    function contains(arr, obj) {\r\n      const stringifiedObj = JSON.stringify(obj); // Cache our object to not call `JSON.stringify` on every iteration\r\n      return arr.some(item =&gt; JSON.stringify(item) === stringifiedObj);\r\n    }\r\n\r\nUsage:\r\n\r\n    contains([{a: 1}, {a: 2}], {a: 1}); // true\r\n\r\n\r\nIE6+ solution:\r\n\r\n    function contains(arr, obj) {\r\n      var stringifiedObj = JSON.stringify(obj)\r\n      return arr.some(function (item) {\r\n        return JSON.stringify(item) === stringifiedObj;\r\n      });\r\n    }\r\n\r\n    // .some polyfill, not needed for IE9+\r\n    if (!(&#39;some&#39; in Array.prototype)) {\r\n      Array.prototype.some = function (tester, that /*opt*/) {\r\n        for (var i = 0, n = this.length; i &lt; n; i++) {\r\n          if (i in this &amp;&amp; tester.call(that, this[i], i, this)) return true;\r\n        } return false;\r\n      };\r\n    }\r\n\r\nUsage:\r\n\r\n    contains([{a: 1}, {a: 2}], {a: 1}); // true\r\n\r\n\r\n\r\n# Why to use `JSON.stringify`?\r\n\r\n`Array.indexOf` and `Array.includes` (as well as most of the answers here) only compare by reference and not by value.\r\n\r\n    [{a: 1}, {a: 2}].includes({a: 1});\r\n    // false, because {a: 1} is a new object\r\n\r\n\r\n# Bonus\r\nNon-optimized ES6 one-liner:\r\n\r\n    [{a: 1}, {a: 2}].some(item =&gt; JSON.stringify(item) === JSON.stringify({a: 1));\r\n    // true\r\n\r\n\r\n---\r\nNote:\r\nComparing objects by value will work better if the keys are in the same order, so to be safe you might sort the keys first with a package like this one: https://www.npmjs.com/package/sort-keys\r\n\r\n---\r\nUpdated the `contains` function with a perf optimization. Thanks [itinance](https://stackoverflow.com/users/1397160/itinance) for pointing it out.\r\n"},{"score":4,"body_markdown":"Or this solution:\r\n\r\n    Array.prototype.includes = function (object) {\r\n      return !!+~this.indexOf(object);\r\n    };"},{"score":7,"body_markdown":"OK, you can just **optimise your** code to get the result! \r\n\r\nThere are many ways to do this which are cleaner and better, but I just wanted to get your pattern and apply to that using `JSON.stringify`, just simply do something like this in your case:\r\n\r\n    function contains(a, obj) {\r\n        for (var i = 0; i &lt; a.length; i++) {\r\n            if (JSON.stringify(a[i]) === JSON.stringify(obj)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }"},{"score":3,"body_markdown":"Using idnexOf() it is a good solution, but you should hide embedded implementation indexOf() function which returns -1 with ~ operator: \r\n\r\n    function include(arr,obj) { \r\n    \treturn !!(~arr.indexOf(obj)); \r\n    } "},{"score":5,"body_markdown":" 1. Either use `Array.indexOf(Object)`. \r\n 2. With ECMA 7 one can use the `Array.includes(Object)`. \r\n 3. With ECMA 6 you can use `Array.find(FunctionName)` where `FunctionName` is a user \r\n    defined function to search for the object in the array.\r\n\r\n   Hope this helps!"},{"score":3,"body_markdown":"I was working on a project that I needed a functionality like python `set` which removes all duplicates values and returns a new list, so I wrote this function maybe useful to someone\r\n\r\n    function set(arr) {\r\n\t    var res = [];\r\n\t    for (var i = 0; i &lt; arr.length; i++) {\r\n\t\t    if (res.indexOf(arr[i]) === -1) {\r\n\t\t\t    res.push(arr[i]);\r\n\t\t    }\r\n\t    }\r\n\t    return res;\r\n    }"},{"score":5,"body_markdown":"It has one parameter: an array numbers of objects. Each object in the array has two integer properties denoted by x and y. The function must return a count of all such objects in the array that satisfy `numbers.x == numbers.y`\r\n   \r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var numbers = [ { x: 1, y: 1 },\r\n                    { x: 2, y: 3 },\r\n                    { x: 3, y: 3 },\r\n                    { x: 3, y: 4 },\r\n                    { x: 4, y: 5 } ];\r\n    var count = 0; \r\n    var n = numbers.length;\r\n    for (var i =0;i&lt;n;i++)\r\n    {\r\n      if(numbers[i].x==numbers[i].y)\r\n        {count+=1;}\r\n    }\r\n\r\n    alert(count);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":4,"body_markdown":"If you&#39;re working with ES6 You can use a set:\r\n\r\n    function arrayHas( array, element ) {\r\n        const s = new Set(array);\r\n        return s.has(element)\r\n    }\r\n\r\nThis should be more performant than just about any other method"},{"score":4,"body_markdown":"I recommended to use underscore library because its return the value and its supported for all browsers. \r\n\r\n[underscorejs][1]\r\n  \r\n\r\n     var findValue = _.find(array, function(item) {\r\n        return item.id == obj.id;\r\n     });\r\n\r\n  [1]: https://underscorejs.org/"},{"score":1,"body_markdown":"  \r\n\r\n&gt; Simple solution : ES6 Features  &quot;**includes**&quot; method\r\n\r\n    let arr = [1, 2, 3, 2, 3, 2, 3, 4];\r\n    \r\n      arr.includes(2) // true\r\n    \r\n      arr.includes(93) // false"},{"score":3,"body_markdown":"In Addition to what others said, if you don&#39;t have a reference of the object which you want to search in the array, then you can do something like this.\r\n\r\n    \r\n    let array = [1, 2, 3, 4, {&quot;key&quot;: &quot;value&quot;}];\r\n    \r\n    array.some((element) =&gt; JSON.stringify(element) === JSON.stringify({&quot;key&quot;: &quot;value&quot;})) // true\r\n\r\n    array.some((element) =&gt; JSON.stringify(element) === JSON.stringify({})) // true\r\n\r\nArray.some returns true if any element matches the given condition and returns false if none of the elements matches the given condition."},{"score":6,"body_markdown":"\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n        function countArray(originalArray) {\r\n         \r\n        \tvar compressed = [];\r\n        \t// make a copy of the input array\r\n        \tvar copyArray = originalArray.slice(0);\r\n         \r\n        \t// first loop goes over every element\r\n        \tfor (var i = 0; i &lt; originalArray.length; i++) {\r\n         \r\n        \t\tvar count = 0;\t\r\n        \t\t// loop over every element in the copy and see if it&#39;s the same\r\n        \t\tfor (var w = 0; w &lt; copyArray.length; w++) {\r\n        \t\t\tif (originalArray[i] == copyArray[w]) {\r\n        \t\t\t\t// increase amount of times duplicate is found\r\n        \t\t\t\tcount++;\r\n        \t\t\t\t// sets item to undefined\r\n        \t\t\t\tdelete copyArray[w];\r\n        \t\t\t}\r\n        \t\t}\r\n         \r\n        \t\tif (count &gt; 0) {\r\n        \t\t\tvar a = new Object();\r\n        \t\t\ta.value = originalArray[i];\r\n        \t\t\ta.count = count;\r\n        \t\t\tcompressed.push(a);\r\n        \t\t}\r\n        \t}\r\n         \r\n        \treturn compressed;\r\n        };\r\n        \r\n        // It should go something like this:\r\n        \r\n        var testArray = new Array(&quot;dog&quot;, &quot;dog&quot;, &quot;cat&quot;, &quot;buffalo&quot;, &quot;wolf&quot;, &quot;cat&quot;, &quot;tiger&quot;, &quot;cat&quot;);\r\n        var newArray = countArray(testArray);\r\n        console.log(newArray);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":4,"body_markdown":"Use includes javascript in-build function, but **not work in Internet Explorer**\r\n\r\n    var optval = [];\r\n    \r\n    optval.push(&#39;A&#39;);    \r\n    optval.push(&#39;B&#39;);    \r\n    optval.push(&#39;C&#39;);\r\n    \r\nWe can search string A in javascript array as:\r\n    \r\n    optval.includes(&#39;A&#39;) // =====&gt; return true"},{"score":6,"body_markdown":"Surprised that this question still doesn&#39;t have latest syntax added, adding my 2 cents.\r\n\r\nLet&#39;s say we have array of Objects arrObj and we want to search obj in it.\r\n\r\nArray.prototype.**indexOf** -&gt; (returns **index or -1**) is generally used for finding index of element in array.\r\nThis can also be used for searching object but only works if you are passing reference to same object.\r\n\r\n    let obj = { name: &#39;Sumer&#39;, age: 36 };\r\n    let arrObj = [obj, { name: &#39;Kishor&#39;, age: 46 }, { name: &#39;Rupen&#39;, age: 26 }];\r\n    \r\n    \r\n    console.log(arrObj.indexOf(obj));// 0\r\n    console.log(arrObj.indexOf({ name: &#39;Sumer&#39;, age: 36 })); //-1\r\n    \r\n    console.log([1, 3, 5, 2].indexOf(2)); //3\r\n\r\nArray.prototype.**includes** -&gt; (returns **true** or **false**)\r\n\r\n    console.log(arrObj.includes(obj));  //true\r\n    console.log(arrObj.includes({ name: &#39;Sumer&#39;, age: 36 })); //false\r\n    \r\n    console.log([1, 3, 5, 2].includes(2)); //true\r\n\r\nArray.prototype.**find** -&gt; (takes callback, returns first **value/object** that returns true in CB).\r\n\r\n    console.log(arrObj.find(e =&gt; e.age &gt; 40));  //{ name: &#39;Kishor&#39;, age: 46 }\r\n    console.log(arrObj.find(e =&gt; e.age &gt; 40)); //{ name: &#39;Kishor&#39;, age: 46 }\r\n    \r\n    console.log([1, 3, 5, 2].find(e =&gt; e &gt; 2)); //3\r\n\r\nArray.prototype.**findIndex** -&gt; (takes callback, returns **index** of first value/object that returns true in CB).\r\n\r\n    console.log(arrObj.findIndex(e =&gt; e.age &gt; 40));  //1\r\n    console.log(arrObj.findIndex(e =&gt; e.age &gt; 40)); //1\r\n    \r\n    console.log([1, 3, 5, 2].findIndex(e =&gt; e &gt; 2)); //1\r\n\r\nSince find and findIndex takes a callback, we can be fetch any object(even if we don&#39;t have the reference) from array by creatively setting the true condition."},{"score":7,"body_markdown":"Simple solution for this requirement is using `find()`\r\n\r\nIf you&#39;re having array of objects like below,\r\n\r\n    var users = [{id: &quot;101&quot;, name: &quot;Choose one...&quot;},\r\n    {id: &quot;102&quot;, name: &quot;shilpa&quot;},\r\n    {id: &quot;103&quot;, name: &quot;anita&quot;},\r\n    {id: &quot;104&quot;, name: &quot;admin&quot;},\r\n    {id: &quot;105&quot;, name: &quot;user&quot;}];\r\n\r\nThen you can check whether the object with your value is already present or not\r\n\r\n    let data = users.find(object =&gt; object[&#39;id&#39;] === &#39;104&#39;);\r\n\r\nif data is null then no admin, else it will return the existing object like below.\r\n\r\n    {id: &quot;104&quot;, name: &quot;admin&quot;}\r\n\r\nThen you can find the index of that object in the array and replace the object using below code.\r\n\r\n    let indexToUpdate = users.indexOf(data);\r\n    let newObject = {id: &quot;104&quot;, name: &quot;customer&quot;};\r\n    users[indexToUpdate] = newObject;//your new object\r\n    console.log(users);\r\nyou will get value like below\r\n\r\n    [{id: &quot;101&quot;, name: &quot;Choose one...&quot;},\r\n    {id: &quot;102&quot;, name: &quot;shilpa&quot;},\r\n    {id: &quot;103&quot;, name: &quot;anita&quot;},\r\n    {id: &quot;104&quot;, name: &quot;customer&quot;},\r\n    {id: &quot;105&quot;, name: &quot;user&quot;}];\r\nhope this will help anyone.\r\n\r\n"},{"score":27,"body_markdown":"Performance\r\n-\r\n\r\nToday 2020.01.07 I perform tests on MacOs HighSierra 10.13.6 on Chrome v78.0.0, Safari v13.0.4 and Firefox v71.0.0 for 15 chosen solutions. Conclusions\r\n\r\n* solutions based on `JSON`, `Set` and surprisingly `find` (K,N,O) are slowest on all browsers\r\n* the es6 `includes` (F) is fast only on chrome\r\n* the solutions based on `for` (C,D) and `indexOf` (G,H) are quite-fast on all browsers on small and big arrays so probably they are best choice for efficient solution\r\n* the solutions where index decrease during loop, (B) is slower probably because the way of [CPU cache works](https://stackoverflow.com/questions/1950878/c-for-loop-indexing-is-forward-indexing-faster-in-new-cpus). \r\n* I also run test for big array when searched element was on position 66% of array length, and solutions based on `for` (C,D,E) gives similar results (~630 ops/sec - but the E on safari and firefox was 10-20% slower than C and D)\r\n\r\nResults\r\n-\r\n\r\n[![enter image description here][1]][1]\r\n\r\nDetails\r\n-\r\n\r\nI perform 2 tests cases: for array with 10 elements, and array with 1 milion elements. In both cases we put searched element in the array middle.\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let log = (name,f) =&gt; console.log(`${name}: 3-${f(arr,&#39;s10&#39;)}  &#39;s7&#39;-${f(arr,&#39;s7&#39;)}  6-${f(arr,6)} &#39;s3&#39;-${f(arr,&#39;s3&#39;)}`)\r\n\r\n    let arr = [1,2,3,4,5,&#39;s6&#39;,&#39;s7&#39;,&#39;s8&#39;,&#39;s9&#39;,&#39;s10&#39;];\r\n    //arr = new Array(1000000).fill(123); arr[500000]=7;\r\n\r\n    function A(a, val) {\r\n        var i = -1;\r\n        var n = a.length;\r\n        while (i++&lt;n) {\r\n           if (a[i] === val) {\r\n               return true;\r\n           }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function B(a, val) {\r\n        var i = a.length;\r\n        while (i--) {\r\n           if (a[i] === val) {\r\n               return true;\r\n           }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function C(a, val) {\r\n        for (var i = 0; i &lt; a.length; i++) {\r\n            if (a[i] === val) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function D(a,val)\r\n    {\r\n        var len = a.length;\r\n        for(var i = 0 ; i &lt; len;i++)\r\n        {\r\n            if(a[i] === val) return true;\r\n        }\r\n        return false;\r\n    } \r\n\r\n    function E(a, val){  \r\n      var n = a.length-1;\r\n      var t = n/2;\r\n      for (var i = 0; i &lt;= t; i++) {\r\n            if (a[i] === val || a[n-i] === val) return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function F(a,val) {\r\n    \treturn a.includes(val);\r\n    }\r\n\r\n    function G(a,val) {\r\n    \treturn a.indexOf(val)&gt;=0;\r\n    }\r\n\r\n    function H(a,val) {\r\n    \treturn !!~a.indexOf(val);\r\n    }\r\n\r\n    function I(a, val) {\r\n      return a.findIndex(x=&gt; x==val)&gt;=0;\r\n    }\r\n\r\n    function J(a,val) {\r\n    \treturn a.some(x=&gt; x===val);\r\n    }\r\n\r\n    function K(a, val) {\r\n      const s = JSON.stringify(val);\r\n      return a.some(x =&gt; JSON.stringify(x) === s);\r\n    }\r\n\r\n    function L(a,val) {\r\n    \treturn !a.every(x=&gt; x!==val);\r\n    }\r\n\r\n    function M(a, val) {\r\n      return !!a.find(x=&gt; x==val);\r\n    }\r\n\r\n    function N(a,val) {\r\n    \treturn a.filter(x=&gt;x===val).length &gt; 0;\r\n    }\r\n\r\n    function O(a, val) {\r\n      return new Set(a).has(val);\r\n    }\r\n\r\n    log(&#39;A&#39;,A);\r\n    log(&#39;B&#39;,B);\r\n    log(&#39;C&#39;,C);\r\n    log(&#39;D&#39;,D);\r\n    log(&#39;E&#39;,E);\r\n    log(&#39;F&#39;,F);\r\n    log(&#39;G&#39;,G);\r\n    log(&#39;H&#39;,H);\r\n    log(&#39;I&#39;,I);\r\n    log(&#39;J&#39;,J);\r\n    log(&#39;K&#39;,K);\r\n    log(&#39;L&#39;,L);\r\n    log(&#39;M&#39;,M);\r\n    log(&#39;N&#39;,N);\r\n    log(&#39;O&#39;,O);\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    This shippet only presents functions used in performance tests - it not perform tests itself!\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n**Array small - 10 elements**\r\n\r\nYou can perform tests in your machine [HERE](https://jsperf.com/array-exist-element/1)\r\n\r\n[![enter image description here][2]][2]\r\n\r\n**Array big - 1.000.000 elements**\r\n\r\nYou can perform tests in your machine [HERE](https://jsperf.com/array-big-exist-element/1)\r\n\r\n[![enter image description here][3]][3]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/YPIG1.png\r\n  [2]: https://i.stack.imgur.com/gDDCp.png\r\n  [3]: https://i.stack.imgur.com/cTL3s.png"},{"score":1,"body_markdown":"`Object.keys` for getting all property names of the object and filter all values that exact or partial match with specified string.\r\n\r\n    function filterByValue(array, string) {\r\n                    return array.filter(o =&gt;\r\n                        Object.keys(o).some(k =&gt; o[k].toLowerCase().includes(string.toLowerCase())));\r\n                }\r\n            \r\n        const arrayOfObject = [{ name: &#39;Paul&#39;, country: &#39;Canada&#39;, }, { name: &#39;Lea&#39;, country: &#39;Italy&#39;, }, { name: &#39;John&#39;, country: &#39;Italy&#39; }];\r\n        \r\n        console.log(filterByValue(arrayOfObject, &#39;lea&#39;)); // [{name: &#39;Lea&#39;, country: &#39;Italy&#39;}]\r\n        console.log(filterByValue(arrayOfObject, &#39;ita&#39;)); // [{name: &#39;Lea&#39;, country: &#39;Italy&#39;}, {name: &#39;John&#39;, country: &#39;Italy&#39;}]\r\n\r\nYou can also filter by specific key such as.\r\n\r\n    Object.keys(o).some(k =&gt; o.country.toLowerCase().includes(string.toLowerCase())));\r\n\r\nNow you can just check array count after filtered to check value contains or not.\r\n \r\nHope it&#39;s helpful."},{"score":3,"body_markdown":"**Adding a unique item to a another list**\r\n```\r\nsearchResults: [\r\n                {\r\n                    name: &#39;Hello&#39;,\r\n                    artist: &#39;Selana&#39;,\r\n                    album: &#39;Riga&#39;,\r\n                    id: 1,\r\n                },\r\n                {\r\n                    name: &#39;Hello;s&#39;,\r\n                    artist: &#39;Selana G&#39;,\r\n                    album: &#39;Riga1&#39;,\r\n                    id: 2,\r\n                },\r\n                {\r\n                    name: &#39;Hello2&#39;,\r\n                    artist: &#39;Selana&#39;,\r\n                    album: &#39;Riga11&#39;,\r\n                    id: 3,\r\n                }\r\n            ],\r\n            playlistTracks: [\r\n              {\r\n                name: &#39;Hello&#39;,\r\n                artist: &#39;Mamunuus&#39;,\r\n                album: &#39;Riga&#39;,\r\n                id: 4,\r\n              },\r\n              {\r\n                name: &#39;Hello;s&#39;,\r\n                artist: &#39;Mamunuus G&#39;,\r\n                album: &#39;Riga1&#39;,\r\n                id: 2,\r\n              },\r\n              {\r\n                name: &#39;Hello2&#39;,\r\n                artist: &#39;Mamunuus New&#39;,\r\n                album: &#39;Riga11&#39;,\r\n                id: 3,\r\n              }\r\n            ],\r\n            playlistName: &quot;New PlayListTrack&quot;,\r\n        };\r\n    }\r\n\r\n    // Adding an unique track in the playList\r\n    addTrack = track =&gt; {\r\n      if(playlistTracks.find(savedTrack =&gt; savedTrack.id === track.id)) {\r\n        return;\r\n      }\r\n      playlistTracks.push(track);\r\n\r\n      this.setState({\r\n        playlistTracks\r\n      })\r\n    };\r\n```"},{"score":4,"body_markdown":"**Use indexOf()**\r\n\r\nYou can use the indexOf() method to check whether a given value or element exists in an array or not. The indexOf() method returns the index of the element inside the array if it is found, and returns -1 if it not found. Let&#39;s take a look at the following example:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var fruits = [&quot;Apple&quot;, &quot;Banana&quot;, &quot;Mango&quot;, &quot;Orange&quot;, &quot;Papaya&quot;];\r\n    var a = &quot;Mango&quot;;\r\n    checkArray(a, fruits);\r\n\r\n\r\n    function checkArray(a, fruits) {\r\n      // Check if a value exists in the fruits array\r\n      if (fruits.indexOf(a) !== -1) {\r\n        return document.write(&quot;true&quot;);\r\n      } else {\r\n        return document.write(&quot;false&quot;);\r\n      }\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n**Use include() Method**\r\n\r\nES6 has introduced the includes() method to perform this task very easily. But, this method returns only true or false instead of index number:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var fruits = [&quot;Apple&quot;, &quot;Banana&quot;, &quot;Mango&quot;, &quot;Orange&quot;, &quot;Papaya&quot;];\r\n    alert(fruits.includes(&quot;Banana&quot;)); // Outputs: true\r\n    alert(fruits.includes(&quot;Coconut&quot;)); // Outputs: false\r\n    alert(fruits.includes(&quot;Orange&quot;)); // Outputs: true\r\n    alert(fruits.includes(&quot;Cherry&quot;)); // Outputs: false\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nFor further reference checkout [here][1]\r\n\r\n\r\n  [1]: https://www.tutorialrepublic.com/faq/how-to-check-if-a-value-exists-in-an-array-in-javascript.php"},{"score":1,"body_markdown":"This may be a **detailed and easy** solution.\r\n\r\n    //plain array\r\n    var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];\r\n    var check = arr.includes(&#39;a&#39;);\r\n    console.log(check); //returns true\r\n    if (check)\r\n    {\r\n       // value exists in array\r\n       //write some codes\r\n    }\r\n    \r\n    // array with objects\r\n    var arr = [\r\n          {x:&#39;a&#39;, y:&#39;b&#39;},\r\n          {x:&#39;p&#39;, y:&#39;q&#39;}\r\n      ];\r\n\r\n    // if you want to check if x:&#39;p&#39; exists in arr\r\n    var check = arr.filter(function (elm){\r\n        if (elm.x == &#39;p&#39;)\r\n        {\r\n           return elm; // returns length = 1 (object exists in array)\r\n        }\r\n    });\r\n\r\n    // or y:&#39;q&#39; exists in arr\r\n    var check = arr.filter(function (elm){\r\n        if (elm.y == &#39;q&#39;)\r\n        {\r\n           return elm; // returns length = 1 (object exists in array)\r\n        }\r\n    });\r\n\r\n    // if you want to check, if the entire object {x:&#39;p&#39;, y:&#39;q&#39;} exists in arr\r\n    var check = arr.filter(function (elm){\r\n        if (elm.x == &#39;p&#39; &amp;&amp; elm.y == &#39;q&#39;)\r\n        {\r\n           return elm; // returns length = 1 (object exists in array)\r\n        }\r\n    });\r\n\r\n    // in all cases\r\n    console.log(check.length); // returns 1\r\n\r\n    if (check.length &gt; 0)\r\n    {\r\n       // returns true\r\n       // object exists in array\r\n       //write some codes\r\n    }"},{"score":3,"body_markdown":"use `Array.prototype.includes` for example: \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const fruits = [&#39;coconut&#39;, &#39;banana&#39;, &#39;apple&#39;]\r\n\r\n    const doesFruitsHaveCoconut = fruits.includes(&#39;coconut&#39;)// true\r\n\r\n    console.log(doesFruitsHaveCoconut)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nmaybe read this documentation from MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"}],"score":4181}