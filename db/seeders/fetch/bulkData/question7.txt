{"body":"I&#39;ve recently started maintaining someone else&#39;s JavaScript code. I&#39;m fixing bugs, adding features and also trying to tidy up the code and make it more consistent.\r\n\r\nThe previous developer used two ways of declaring functions and I can&#39;t work out if there is a reason behind it or not.\r\n\r\nThe two ways are:\r\n\r\n    var functionOne = function() {\r\n        // Some code\r\n    };\r\n\r\n&lt;!-- --&gt;\r\n\r\n    function functionTwo() {\r\n        // Some code\r\n    }\r\n\r\nWhat are the reasons for using these two different methods and what are the pros and cons of each? Is there anything that can be done with one method that can&#39;t be done with the other?\r\n","title":"var functionName = function() {} vs function functionName() {}","answers":[{"score":5175,"body_markdown":"The difference is that `functionOne` is a function expression and so only defined when that line is reached, whereas `functionTwo` is a function declaration and is defined as soon as its surrounding function or script is executed (due to [hoisting][1]).  \r\n\r\nFor example, a function expression:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // TypeError: functionOne is not a function\r\n    functionOne();\r\n\r\n    var functionOne = function() {\r\n      console.log(&quot;Hello!&quot;);\r\n    };\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nAnd, a function declaration:   \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // Outputs: &quot;Hello!&quot;\r\n    functionTwo();\r\n\r\n    function functionTwo() {\r\n      console.log(&quot;Hello!&quot;);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nHistorically, function declarations defined within blocks were handled inconsistently between browsers. Strict mode (introduced in ES5) resolved this by scoping function declarations to their enclosing block.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    &#39;use strict&#39;;    \r\n    { // note this block!\r\n      function functionThree() {\r\n        console.log(&quot;Hello!&quot;);\r\n      }\r\n    }\r\n    functionThree(); // ReferenceError\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: http://adripofjavascript.com/blog/drips/variable-and-function-hoisting.html"},{"score":1974,"body_markdown":"First I want to correct Greg: `function abc(){}` is scoped too &amp;mdash; the name `abc` is defined in the scope where this definition is encountered. Example:\r\n\r\n    function xyz(){\r\n      function abc(){};\r\n      // abc is defined here...\r\n    }\r\n    // ...but not here\r\n\r\nSecondly, it is possible to combine both styles:\r\n\r\n    var xyz = function abc(){};\r\n\r\n`xyz` is going to be defined as usual, `abc` is undefined in all browsers but Internet&amp;nbsp;Explorer &amp;mdash; do not rely on it being defined. But it will be defined inside its body:\r\n\r\n    var xyz = function abc(){\r\n      // xyz is visible here\r\n      // abc is visible here\r\n    }\r\n    // xyz is visible here\r\n    // abc is undefined here\r\n\r\nIf you want to alias functions on all browsers, use this kind of declaration:\r\n\r\n    function abc(){};\r\n    var xyz = abc;\r\n\r\nIn this case, both `xyz` and `abc` are aliases of the same object:\r\n\r\n    console.log(xyz === abc); // prints &quot;true&quot;\r\n\r\nOne compelling reason to use the combined style is the &quot;name&quot; attribute of function objects (**not supported by Internet&amp;nbsp;Explorer**). Basically when you define a function like\r\n\r\n    function abc(){};\r\n    console.log(abc.name); // prints &quot;abc&quot;\r\n\r\nits name is automatically assigned. But when you define it like\r\n\r\n    var abc = function(){};\r\n    console.log(abc.name); // prints &quot;&quot;\r\n\r\nits name is empty &amp;mdash; we created an anonymous function and assigned it to some variable.\r\n\r\nAnother good reason to use the combined style is to use a short internal name to refer to itself, while providing a long non-conflicting name for external users:\r\n\r\n    // Assume really.long.external.scoped is {}\r\n    really.long.external.scoped.name = function shortcut(n){\r\n      // Let it call itself recursively:\r\n      shortcut(n - 1);\r\n      // ...\r\n      // Let it pass itself as a callback:\r\n      someFunction(shortcut);\r\n      // ...\r\n    }\r\n\r\nIn the example above we can do the same with an external name, but it&#39;ll be too unwieldy (and slower).\r\n\r\n*(Another way to refer to itself is to use ``arguments.callee``, which is still relatively long, and not supported in the strict mode.)*\r\n\r\nDeep down, JavaScript treats both statements differently. This is a function declaration:\r\n\r\n    function abc(){}\r\n\r\n`abc` here is defined everywhere in the current scope:\r\n\r\n    // We can call it here\r\n    abc(); // Works\r\n\r\n    // Yet, it is defined down there.\r\n    function abc(){}\r\n\r\n    // We can call it again\r\n    abc(); // Works\r\n\r\nAlso, it hoisted through a `return` statement:\r\n\r\n    // We can call it here\r\n    abc(); // Works\r\n    return;\r\n    function abc(){}\r\n\r\nThis is a function expression:\r\n\r\n    var xyz = function(){};\r\n\r\n`xyz` here is defined from the point of assignment:\r\n\r\n    // We can&#39;t call it here\r\n    xyz(); // UNDEFINED!!!\r\n\r\n    // Now it is defined\r\n    xyz = function(){}\r\n\r\n    // We can call it here\r\n    xyz(); // works\r\n\r\nFunction declaration vs. function expression is the real reason why there is a difference demonstrated by Greg.\r\n\r\nFun fact:\r\n\r\n    var xyz = function abc(){};\r\n    console.log(xyz.name); // Prints &quot;abc&quot;\r\n\r\nPersonally, I prefer the &quot;function expression&quot; declaration because this way I can control the visibility. When I define the function like\r\n\r\n    var abc = function(){};\r\n\r\nI know that I defined the function locally. When I define the function like\r\n\r\n    abc = function(){};\r\n\r\nI know that I defined it globally providing that I didn&#39;t define `abc` anywhere in the chain of scopes. This style of definition is resilient even when used inside `eval()`. While the definition\r\n\r\n    function abc(){};\r\n\r\ndepends on the context and may leave you guessing where it is actually defined, especially in the case of `eval()` &amp;mdash; the answer is: It depends on the browser.\r\n"},{"score":27,"body_markdown":"In computer science terms, we talk about anonymous functions and named functions. I think the most important difference is that an anonymous function is not bound to an name, hence the name anonymous function. In JavaScript it is a first class object dynamically declared at runtime.\r\n\r\nFor more information on anonymous functions and lambda calculus, Wikipedia is a good start (http://en.wikipedia.org/wiki/Anonymous_function)."},{"score":33,"body_markdown":"In terms of code maintenance cost, named functions are more preferable:\r\n\r\n - Independent from the place where they are declared (but still limited by scope).\r\n - More resistant to mistakes like conditional initialization (you are still able to override if wanted to).\r\n - The code becomes more readable by allocating local functions separately of scope functionality. Usually in the scope the functionality goes first, followed by declarations of local functions.\r\n - In a debugger you will clearly see the function name on the call stack instead of an &quot;anonymous/evaluated&quot; function.\r\n\r\nI suspect more PROS for named functions are follow. And what is listed as an advantage of named functions is a disadvantage for anonymous ones.\r\n\r\nHistorically, anonymous functions appeared from the inability of JavaScript as a language to list members with named functions:\r\n\r\n    {\r\n        member:function() { /* How do I make &quot;this.member&quot; a named function? */\r\n        }\r\n    }\r\n"},{"score":130,"body_markdown":"The two code snippets you&#39;ve posted there will, for almost all purposes, behave the same way.\r\n\r\nHowever, the difference in behaviour is that with the first variant (`var functionOne = function() {}`), that function can only be called after that point in the code.\r\n\r\nWith the second variant (`function functionTwo()`), the function is available to code that runs above where the function is declared.\r\n\r\nThis is because with the first variant, the function is assigned to the variable `foo` at run time. In the second, the function is assigned to that identifier, `foo`, at parse time.\r\n\r\n**More technical information**\r\n\r\nJavaScript has three ways of defining functions.\r\n\r\n 1. Your first snippet shows a **function expression**. This involves using the *&quot;function&quot; operator* to create a function - the result of that operator can be stored in any variable or object property. The function expression is powerful that way. The function expression is often called an &quot;anonymous function&quot;, because it does not have to have a name,\r\n 2. Your second example is a **function declaration**. This uses the *&quot;function&quot; statement* to create a function. The function is made available at parse time and can be called anywhere in that scope. You can still store it in a variable or object property later.\r\n 3. The third way of defining a function is the **&quot;Function()&quot; constructor**, which is not shown in your original post. It&#39;s not recommended to use this as it works the same way as `eval()`, which has its problems.\r\n"},{"score":152,"body_markdown":"Speaking about the global context, both, the `var` statement and a `FunctionDeclaration` at the end will create a *non-deleteable* property on the global object, but the value of both *can be overwritten*.\r\n\r\nThe subtle difference between the two ways is that when the [Variable Instantiation][2] process runs (before the actual code execution) all identifiers declared with `var` will be initialized with `undefined`, and the ones used by the `FunctionDeclaration`&#39;s will be available since that moment, for example:\r\n\r\n\r\n     alert(typeof foo); // &#39;function&#39;, it&#39;s already available\r\n     alert(typeof bar); // &#39;undefined&#39;\r\n     function foo () {}\r\n     var bar = function () {};\r\n     alert(typeof bar); // &#39;function&#39;\r\n\r\nThe assignment of the `bar` `FunctionExpression` takes place until runtime.\r\n\r\nA global property created by a `FunctionDeclaration` can be overwritten without any problems just like a variable value, e.g.:\r\n\r\n     function test () {}\r\n     test = null;\r\n\r\n\r\nAnother obvious difference between your two examples is that the first function doesn&#39;t have a name, but the second has it, which can be really useful when debugging (i.e. inspecting a call stack).\r\n\r\nAbout your edited first example (`foo = function() { alert(&#39;hello!&#39;); };`), it is an undeclared assignment, I would highly encourage you to always use the `var` keyword.\r\n\r\nWith an assignment, without the `var` statement, if the referenced identifier is not found in the scope chain, it will become a *deleteable* property of the global object.\r\n\r\nAlso, undeclared assignments throw a `ReferenceError` on ECMAScript 5 under [Strict Mode][3].\r\n\r\n\r\nA must read:\r\n\r\n - [Named function expressions demystified][4]\r\n\r\n\r\n**Note**: This answer has been merged from [another question][1], in which the major doubt and misconception from the OP was that identifiers declared with a `FunctionDeclaration`, couldn&#39;t be overwritten which is not the case.\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/3435709/why-are-functions-in-javascript-set-to-global-variables-instead-of-plain-function\r\n  [2]: http://bclary.com/2004/11/07/#a-10.1.3\r\n  [3]: http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/\r\n  [4]: http://kangax.github.com/nfe/"},{"score":65,"body_markdown":"An important reason is to add one and only one variable as the &quot;Root&quot; of your namespace...\r\n\r\n    var MyNamespace = {}\r\n    MyNamespace.foo= function() {\r\n\r\n    }\r\n\r\nor\r\n\r\n    var MyNamespace = {\r\n      foo: function() {\r\n      },\r\n      ...\r\n    }\r\n\r\nThere are many techniques for namespacing. It&#39;s become more important with the plethora of JavaScript modules available.\r\n\r\nAlso see *[How do I declare a namespace in JavaScript?][1]*\r\n\r\n  [1]: https://stackoverflow.com/questions/881515/\r\n"},{"score":95,"body_markdown":"Other commenters have already covered the semantic difference of the two variants above. I wanted to note a stylistic difference: Only the &quot;assignment&quot; variation can set a property of another object.\r\n\r\nI often build JavaScript modules with a pattern like this:\r\n\r\n    (function(){\r\n        var exports = {};\r\n    \r\n        function privateUtil() {\r\n                ...\r\n        }\r\n    \r\n        exports.publicUtil = function() {\r\n                ...\r\n        };\r\n    \r\n        return exports;\r\n    })();\r\n\r\nWith this pattern, your public functions will all use assignment, while your private functions use declaration.\r\n\r\n(Note also that assignment should require a semicolon after the statement, while declaration prohibits it.)"},{"score":19,"body_markdown":"[@EugeneLazutkin](https://stackoverflow.com/users/26394/eugene-lazutkin) gives an example where he [names an assigned function to be able to use `shortcut()`](https://stackoverflow.com/a/338053/) as an internal reference to itself. [John Resig](http://ejohn.org/) gives another example - *copying a recursive function assigned to another object* in his [Learning Advanced Javascript](http://ejohn.org/apps/learn/) tutorial. While assigning functions to properties isn&#39;t strictly the question here, I recommend actively trying the tutorial out - run the code by clicking the button in the upper right corner, and double click the code to edit to your liking.\r\n\r\nExamples from the tutorial: recursive calls in `yell()`:\r\n\r\n[Tests fail when the original ninja object is removed.](http://ejohn.org/apps/learn/#13) (page 13)\r\n\r\n\tvar ninja = { \r\n\t  yell: function(n){ \r\n\t    return n &gt; 0 ? ninja.yell(n-1) + &quot;a&quot; : &quot;hiy&quot;; \r\n\t  } \r\n\t}; \r\n\tassert( ninja.yell(4) == &quot;hiyaaaa&quot;, &quot;A single object isn&#39;t too bad, either.&quot; ); \r\n\t \r\n\tvar samurai = { yell: ninja.yell }; \r\n\tvar ninja = null; \r\n\t \r\n\ttry { \r\n\t  samurai.yell(4); \r\n\t} catch(e){ \r\n\t  assert( false, &quot;Uh, this isn&#39;t good! Where&#39;d ninja.yell go?&quot; ); \r\n\t}\r\n\r\n[If you name the function that will be called recursively, the tests will pass.](http://ejohn.org/apps/learn/#14) (page 14)\r\n\r\n\tvar ninja = { \r\n\t  yell: function yell(n){ \r\n\t    return n &gt; 0 ? yell(n-1) + &quot;a&quot; : &quot;hiy&quot;; \r\n\t  } \r\n\t}; \r\n\tassert( ninja.yell(4) == &quot;hiyaaaa&quot;, &quot;Works as we would expect it to!&quot; ); \r\n\t \r\n\tvar samurai = { yell: ninja.yell }; \r\n\tvar ninja = {}; \r\n\tassert( samurai.yell(4) == &quot;hiyaaaa&quot;, &quot;The method correctly calls itself.&quot; );"},{"score":17,"body_markdown":"Another difference that is not mentioned in the other answers is that if you use the anonymous function\r\n\r\n    var functionOne = function() {\r\n        // Some code\r\n    };\r\n\r\nand use that as a constructor as in\r\n\r\n    var one = new functionOne();\r\n\r\nthen `one.constructor.name` will not be defined. `Function.name` is non-standard but is supported by Firefox, Chrome, other Webkit-derived browsers and IE 9+.\r\n\r\nWith \r\n\r\n    function functionTwo() {\r\n        // Some code\r\n    }\r\n    two = new functionTwo();\r\n\r\nit is possible to retrieve the name of the constructor as a string with `two.constructor.name`.\r\n\r\n\r\n   \r\n\r\n"},{"score":27,"body_markdown":"I use the variable approach in my code for a very specific reason, the theory of which has been covered in an abstract way above, but an example might help some people like me, with limited JavaScript expertise.\r\n\r\nI have code that I need to run with 160 independently-designed brandings. Most of the code is in shared files, but branding-specific stuff is in a separate file, one for each branding.\r\n\r\nSome brandings require specific functions, and some do not. Sometimes I have to add new functions to do new branding-specific things. I am happy to change the shared coded, but I don&#39;t want to have to change all 160 sets of branding files.\r\n\r\nBy using the variable syntax, I can declare the variable (a function pointer essentially) in the shared code and either assign a trivial stub function, or set to null.\r\n\r\nThe one or two brandings that need a specific implementation of the function can then define their version of the function and assign this to the variable if they want, and the rest do nothing. I can test for a null function before I execute it in the shared code.\r\n\r\nFrom people&#39;s comments above, I gather it may be possible to redefine a static function too, but I think the variable solution is nice and clear.\r\n"},{"score":16,"body_markdown":"The first one (function doSomething(x)) should be part of an object notation.\r\n\r\nThe second one (`var doSomething = function(x){ alert(x);}`) is simply creating an anonymous function and assigning it to a variable, `doSomething`. So doSomething() will call the function.\r\n\r\nYou may want to know what a *function declaration* and *function expression* is.\r\n\r\nA function declaration defines a named function variable without requiring variable assignment. Function declarations occur as standalone constructs and cannot be nested within non-function blocks.\r\n\r\n    function foo() {\r\n        return 3;\r\n    }\r\n\r\n&gt; ECMA 5 (13.0) defines the syntax as &lt;br/&gt;\r\n&gt; function Identifier ( FormalParameterList&lt;sub&gt;opt&lt;/sub&gt; ) { FunctionBody }\r\n\r\nIn above condition the function name is visible within its scope and the scope of its parent (otherwise it would be unreachable).\r\n\r\nAnd in a function expression\r\n\r\nA function expression defines a function as a part of a larger expression syntax (typically a variable assignment ). Functions defined via functions expressions can be named or anonymous. Function expressions should not start with “function”.\r\n\r\n    // Anonymous function expression\r\n    var a = function() {\r\n        return 3;\r\n    }\r\n\r\n    // Named function expression\r\n    var a = function foo() {\r\n        return 3;\r\n    }\r\n\r\n    // Self-invoking function expression\r\n    (function foo() {\r\n        alert(&quot;hello!&quot;);\r\n    })();\r\n\r\n&gt; ECMA 5 (13.0) defines the syntax as &lt;br/&gt;\r\n&gt; function Identifier&lt;sub&gt;opt&lt;/sub&gt; ( FormalParameterList&lt;sub&gt;opt&lt;/sub&gt; ) { FunctionBody }\r\n"},{"score":35,"body_markdown":"A function declaration and a function expression assigned to a variable behave the same once the binding is established.\r\n\r\nThere is a difference however at *how* and *when* the function object is actually associated with its variable. This difference is due to the mechanism called *variable hoisting* in JavaScript.\r\n\r\nBasically, all function declarations and variable declarations are hoisted to the top of the *function* in which the declaration occurs (this is why we say that JavaScript has *function scope*).\r\n\r\n - When a function declaration is hoisted, the function body &quot;follows&quot;\r\n   so when the function body is evaluated, the variable will immediately\r\n   be bound to a function object.\r\n   \r\n - When a variable declaration is hoisted, the initialization does *not*\r\n   follow, but is &quot;left behind&quot;. The variable is initialized to\r\n   `undefined` at the start of the function body, and will be *assigned*\r\n   a value at its original location in the code. (Actually, it will be assigned a value at *every* location where a declaration of a variable with the same name occurs.)\r\n\r\nThe order of hoisting is also important: function declarations take precedence over variable declarations with the same name, and the last function declaration takes precedence over previous function declarations with the same name.\r\n\r\nSome examples...\r\n\r\n    var foo = 1;\r\n    function bar() {\r\n      if (!foo) {\r\n        var foo = 10 }\r\n      return foo; }\r\n    bar() // 10\r\n\r\nVariable `foo` is hoisted to the top of the function, initialized to `undefined`, so that `!foo` is `true`, so `foo` is assigned `10`. The `foo` outside of `bar`&#39;s scope plays no role and is untouched. \r\n\r\n    function f() {\r\n      return a; \r\n      function a() {return 1}; \r\n      var a = 4;\r\n      function a() {return 2}}\r\n    f()() // 2\r\n    \r\n    function f() {\r\n      return a;\r\n      var a = 4;\r\n      function a() {return 1};\r\n      function a() {return 2}}\r\n    f()() // 2\r\n\r\nFunction declarations take precedence over variable declarations, and the last function declaration &quot;sticks&quot;.\r\n\r\n    function f() {\r\n      var a = 4;\r\n      function a() {return 1}; \r\n      function a() {return 2}; \r\n      return a; }\r\n    f() // 4\r\n\r\nIn this example `a` is initialized with the function object resulting from evaluating the second function declaration, and then is assigned `4`.\r\n\r\n    var a = 1;\r\n    function b() {\r\n      a = 10;\r\n      return;\r\n      function a() {}}\r\n    b();\r\n    a // 1\r\n\r\nHere the function declaration is hoisted first, declaring and initializing variable `a`. Next, this variable is assigned `10`. In other words: the assignment does not assign to outer variable `a`.\r\n"},{"score":80,"body_markdown":"An illustration of when to prefer the first method to the second one is when you need to avoid overriding a function&#39;s previous definitions.\r\n\r\nWith\r\n\r\n    if (condition){\r\n        function myfunction(){\r\n            // Some code\r\n        }\r\n    }\r\n\r\n, this definition of `myfunction` will override any previous definition, since it will be done at parse-time.\r\n\r\nWhile\r\n\r\n    if (condition){\r\n        var myfunction = function (){\r\n            // Some code\r\n        }\r\n    }\r\n\r\ndoes the correct job of defining `myfunction` only when `condition` is met.\r\n"},{"score":15,"body_markdown":"If you would use those functions to create objects, you would get:\r\n\r\n    var objectOne = new functionOne();\r\n    console.log(objectOne.__proto__); // prints &quot;Object {}&quot; because constructor is an anonymous function\r\n\r\n    var objectTwo = new functionTwo();\r\n    console.log(objectTwo.__proto__); // prints &quot;functionTwo {}&quot; because constructor is a named function"},{"score":654,"body_markdown":"Here&#39;s the rundown on the standard forms that create functions: *(Originally written for another question, but adapted after being moved into the canonical question.)*\r\n\r\nTerms:\r\n\r\n* **ES5**: [ECMAScript 5th edition][1], 2009\r\n* **ES2015**: [ECMAScript 2015][2] (also known as &quot;ES6&quot;)\r\n\r\nThe quick list:\r\n\r\n* Function Declaration\r\n\r\n* &quot;Anonymous&quot; `function` Expression *(which despite the term, sometimes create functions with names)*\r\n\r\n* Named `function` Expression\r\n\r\n* Accessor Function Initializer (ES5+)\r\n\r\n* Arrow Function Expression (ES2015+) *(which, like anonymous function expressions, don&#39;t involve an explicit name, and yet can create functions with names)*\r\n\r\n* Method Declaration in Object Initializer (ES2015+)\r\n\r\n* Constructor and Method Declarations in `class` (ES2015+)\r\n\r\n### Function Declaration\r\n\r\nThe first form is a *function declaration*, which looks like this:\r\n\r\n    function x() {\r\n        console.log(&#39;x&#39;);\r\n    }\r\n\r\nA function declaration is a *declaration*; it&#39;s not a statement or expression. As such, you don&#39;t follow it with a `;` (although doing so is harmless).\r\n\r\nA function declaration is processed when execution enters the context in which it appears, **before** any step-by-step code is executed. The function it creates is given a proper name (`x` in the example above), and that name is put in the scope in which the declaration appears.\r\n\r\nBecause it&#39;s processed before any step-by-step code in the same context, you can do things like this:\r\n\r\n    x(); // Works even though it&#39;s above the declaration\r\n    function x() {\r\n        console.log(&#39;x&#39;);\r\n    }\r\n\r\nUntil ES2015, the spec didn&#39;t cover what a JavaScript engine should do if you put a function declaration inside a control structure like `try`, `if`, `switch`, `while`, etc., like this:\r\n\r\n    if (someCondition) {\r\n        function foo() {    // &lt;===== HERE THERE\r\n        }                   // &lt;===== BE DRAGONS\r\n    }\r\n\r\nAnd since they&#39;re processed *before* step-by-step code is run, it&#39;s tricky to know what to do when they&#39;re in a control structure.\r\n\r\nAlthough doing this wasn&#39;t *specified* until ES2015, it was an *allowable extension* to support function declarations in blocks. Unfortunately (and inevitably), different engines did different things.\r\n\r\nAs of ES2015, the specification says what to do. In fact, it gives three separate things to do:\r\n\r\n1. If in loose mode *not* on a web browser, the JavaScript engine is supposed to do one thing\r\n2. If in loose mode on a web browser, the JavaScript engine is supposed to do something else\r\n3. If in *strict* mode (browser or not), the JavaScript engine is supposed to do yet another thing\r\n\r\nThe rules for the loose modes are tricky, but in *strict* mode, function declarations in blocks are easy: They&#39;re local to the block (they have *block scope*, which is also new in ES2015), and they&#39;re hoisted to the top of the block. So:\r\n\r\n    &quot;use strict&quot;;\r\n    if (someCondition) {\r\n        foo();               // Works just fine\r\n        function foo() {\r\n        }\r\n    }\r\n    console.log(typeof foo); // &quot;undefined&quot; (`foo` is not in scope here\r\n                             // because it&#39;s not in the same block)\r\n\r\n### &quot;Anonymous&quot; `function` Expression\r\n\r\nThe second common form is called an *anonymous function expression*:\r\n\r\n    var y = function () {\r\n        console.log(&#39;y&#39;);\r\n    };\r\n\r\nLike all expressions, it&#39;s evaluated when it&#39;s reached in the step-by-step execution of the code.\r\n\r\nIn ES5, the function this creates has no name (it&#39;s anonymous). In ES2015, the function is assigned a name if possible by inferring it from context. In the example above, the name would be `y`. Something similar is done when the function is the value of a property initializer. (For details on when this happens and the rules, search for `SetFunctionName` in the [the specification](https://tc39.github.io/ecma262/)&amp;nbsp;&amp;mdash; it appears *all over* the place.)\r\n\r\n### Named `function` Expression\r\n\r\nThe third form is a *named function expression* (&quot;NFE&quot;):\r\n\r\n    var z = function w() {\r\n        console.log(&#39;zw&#39;)\r\n    };\r\n\r\nThe function this creates has a proper name (`w` in this case). Like all expressions, this is evaluated when it&#39;s reached in the step-by-step execution of the code. The name of the function is *not* added to the scope in which the expression appears; the name *is* in scope within the function itself:\r\n\r\n    var z = function w() {\r\n        console.log(typeof w); // &quot;function&quot;\r\n    };\r\n    console.log(typeof w);     // &quot;undefined&quot;\r\n    \r\nNote that NFEs have frequently been a source of bugs for JavaScript implementations. IE8 and earlier, for instance, handle NFEs [completely incorrectly][3], creating two different functions at two different times. Early versions of Safari had issues as well. The good news is that current versions of browsers (IE9 and up, current Safari) don&#39;t have those issues any more. (But as of this writing, sadly, IE8 remains in widespread use, and so using NFEs with code for the web in general is still problematic.)\r\n\r\n### Accessor Function Initializer (ES5+)\r\n\r\nSometimes functions can sneak in largely unnoticed; that&#39;s the case with *accessor functions*. Here&#39;s an example:\r\n\r\n    var obj = {\r\n        value: 0,\r\n        get f() {\r\n            return this.value;\r\n        },\r\n        set f(v) {\r\n            this.value = v;\r\n        }\r\n    };\r\n    console.log(obj.f);         // 0\r\n    console.log(typeof obj.f);  // &quot;number&quot;\r\n\r\nNote that when I used the function, I didn&#39;t use `()`! That&#39;s because it&#39;s an *accessor function* for a property. We get and set the property in the normal way, but behind the scenes, the function is called.\r\n\r\nYou can also create accessor functions with `Object.defineProperty`, `Object.defineProperties`, and the lesser-known second argument to `Object.create`.\r\n\r\n### Arrow Function Expression (ES2015+)\r\n\r\nES2015 brings us the *arrow function*. Here&#39;s one example:\r\n\r\n    var a = [1, 2, 3];\r\n    var b = a.map(n =&gt; n * 2);\r\n    console.log(b.join(&quot;, &quot;)); // 2, 4, 6\r\n\r\nSee that `n =&gt; n * 2` thing hiding in the `map()` call? That&#39;s a function.\r\n\r\nA couple of things about arrow functions:\r\n\r\n1. They don&#39;t have their own `this`. Instead, they *close over* the `this` of the context where they&#39;re defined. (They also close over `arguments` and, where relevant, `super`.) This means that the `this` within them is the same as the `this` where they&#39;re created, and cannot be changed.\r\n\r\n2. As you&#39;ll have noticed with the above, you don&#39;t use the keyword `function`; instead, you use `=&gt;`.\r\n\r\nThe `n =&gt; n * 2` example above is one form of them. If you have multiple arguments to pass the function, you use parens:\r\n\r\n    var a = [1, 2, 3];\r\n    var b = a.map((n, i) =&gt; n * i);\r\n    console.log(b.join(&quot;, &quot;)); // 0, 2, 6\r\n\r\n(Remember that `Array#map` passes the entry as the first argument, and the index as the second.)\r\n\r\nIn both cases, the body of the function is just an expression; the function&#39;s return value will automatically be the result of that expression (you don&#39;t use an explicit `return`).\r\n\r\nIf you&#39;re doing more than just a single expression, use `{}` and an explicit `return` (if you need to return a value), as normal:\r\n\r\n    var a = [\r\n      {first: &quot;Joe&quot;, last: &quot;Bloggs&quot;},\r\n      {first: &quot;Albert&quot;, last: &quot;Bloggs&quot;},\r\n      {first: &quot;Mary&quot;, last: &quot;Albright&quot;}\r\n    ];\r\n    a = a.sort((a, b) =&gt; {\r\n      var rv = a.last.localeCompare(b.last);\r\n      if (rv === 0) {\r\n        rv = a.first.localeCompare(b.first);\r\n      }\r\n      return rv;\r\n    });\r\n    console.log(JSON.stringify(a));\r\n\r\nThe version without `{ ... }` is called an arrow function with an *expression body* or *concise body*. (Also: A *concise* arrow function.) The one with `{ ... }` defining the body is an arrow function with a *function body*. (Also: A *verbose* arrow function.)\r\n\r\n### Method Declaration in Object Initializer (ES2015+)\r\n\r\nES2015 allows a shorter form of declaring a property that references a function called a *method definition*; it looks like this:\r\n\r\n    var o = {\r\n        foo() {\r\n        }\r\n    };\r\n\r\nthe almost-equivalent in ES5 and earlier would be:\r\n\r\n    var o = {\r\n        foo: function foo() {\r\n        }\r\n    };\r\n\r\nthe difference (other than verbosity) is that a method can use `super`, but a function cannot. So for instance, if you had an object that defined (say) `valueOf` using method syntax, it could use `super.valueOf()` to get the value `Object.prototype.valueOf` would have returned (before presumably doing something else with it), whereas the ES5 version would have to do `Object.prototype.valueOf.call(this)` instead.\r\n\r\nThat also means that the method has a reference to the object it was defined on, so if that object is temporary (for instance, you&#39;re passing it into `Object.assign` as one of the source objects), method syntax *could* mean that the object is retained in memory when otherwise it could have been garbage collected (if the JavaScript engine doesn&#39;t detect that situation and handle it if none of the methods uses `super`).\r\n\r\n### Constructor and Method Declarations in `class` (ES2015+)\r\n\r\nES2015 brings us `class` syntax, including declared constructors and methods:\r\n\r\n    class Person {\r\n        constructor(firstName, lastName) {\r\n            this.firstName = firstName;\r\n            this.lastName = lastName;\r\n        }\r\n    \r\n        getFullName() {\r\n            return this.firstName + &quot; &quot; + this.lastName;\r\n        }\r\n    }\r\n\r\nThere are two function declarations above: One for the constructor, which gets the name `Person`, and one for `getFullName`, which is a function assigned to `Person.prototype`.\r\n\r\n\r\n  [1]: http://ecma-international.org/ecma-262/5.1/\r\n  [2]: http://www.ecma-international.org/ecma-262/6.0/index.html\r\n  [3]: http://blog.niftysnippets.org/2010/09/double-take.html"},{"score":34,"body_markdown":"The first example is a function declaration:\r\n\r\n    function abc(){}\r\n\r\nThe second example is a function expression:\r\n\r\n    var abc = function() {};\r\n\r\nThe main difference is how they are hoisted (lifted and declared). In the first example, the whole function declaration is hoisted. In the second example only the var &#39;abc&#39; is hoisted, its value (the function) will be undefined, and the function itself remains at the position that it is declared.\r\n\r\nTo put it simply:\r\n\r\n    //this will work\r\n    abc(param);\r\n    function abc(){}\r\n\r\n    //this would fail\r\n    abc(param);\r\n    var abc = function() {}\r\n\r\nTo study more about this topic I strongly recommend you this\r\n[link][1]\r\n\r\n\r\n  [1]: http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/#comment-43792"},{"score":109,"body_markdown":"A better explanation to [Greg&#39;s answer](https://stackoverflow.com/a/336868/2351696)\n\n    functionTwo();\n    function functionTwo() {\n    }\n\n**Why no error? We were always taught that expressions are executed from top to bottom(??)**\n\n## Because:\n\n&gt; Function declarations and variable declarations are always moved (`hoisted`) invisibly to the top of their containing scope by the JavaScript interpreter. Function parameters and language-defined names are, obviously, already there. [ben cherry](http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting)\n\nThis means that code like this:\n\n    functionOne();                  ---------------      var functionOne;\n                                    | is actually |      functionOne();\n    var functionOne = function(){   | interpreted |--&gt;\n    };                              |    like     |      functionOne = function(){\n                                    ---------------      };\n\nNotice that the assignment portion of the declarations were not hoisted. Only the name is hoisted.\n\n*But in the case with function declarations, the entire function body will be hoisted as well*:\n\n    functionTwo();              ---------------      function functionTwo() {\n                                | is actually |      };\n    function functionTwo() {    | interpreted |--&gt;\n    }                           |    like     |      functionTwo();\n                                ---------------\n"},{"score":12,"body_markdown":"In light of the &quot;named functions show up in stack traces&quot; argument, modern JavaScript engines are actually quite capable of representing anonymous functions.\r\n\r\nAs of this writing, V8, SpiderMonkey, Chakra and Nitro always refer to named functions by their names. They almost always refer to an anonymous function by its identifier if it has one.\r\n\r\nSpiderMonkey can figure out the name of an anonymous function returned from another function. The rest can&#39;t.\r\n\r\nIf you really, really wanted your iterator and success callbacks to show up in the trace, you could name those too...\r\n\r\n    [].forEach(function iterator() {});\r\n\r\nBut for the most part it&#39;s not worth stressing over.\r\n\r\nHarness ([Fiddle][1])\r\n---------------------\r\n\r\n    &#39;use strict&#39;;\r\n    \r\n    var a = function () {\r\n        throw new Error();\r\n    },\r\n        b = function b() {\r\n            throw new Error();\r\n        },\r\n        c = function d() {\r\n            throw new Error();\r\n        },\r\n        e = {\r\n            f: a,\r\n            g: b,\r\n            h: c,\r\n            i: function () {\r\n                throw new Error();\r\n            },\r\n            j: function j() {\r\n                throw new Error();\r\n            },\r\n            k: function l() {\r\n                throw new Error();\r\n            }\r\n        },\r\n        m = (function () {\r\n            return function () {\r\n                throw new Error();\r\n            };\r\n        }()),\r\n        n = (function () {\r\n            return function n() {\r\n                throw new Error();\r\n            };\r\n        }()),\r\n        o = (function () {\r\n            return function p() {\r\n                throw new Error();\r\n            };\r\n        }());\r\n    \r\n    console.log([a, b, c].concat(Object.keys(e).reduce(function (values, key) {\r\n        return values.concat(e[key]);\r\n    }, [])).concat([m, n, o]).reduce(function (logs, func) {\r\n    \r\n        try {\r\n            func();\r\n        } catch (error) {\r\n            return logs.concat(&#39;func.name: &#39; + func.name + &#39;\\n&#39; +\r\n                               &#39;Trace:\\n&#39; +\r\n                               error.stack);\r\n            // Need to manually log the error object in Nitro.\r\n        }\r\n    \r\n    }, []).join(&#39;\\n\\n&#39;));\r\n\r\nV8\r\n--\r\n\r\n    func.name: \r\n    Trace:\r\n    Error\r\n        at a (http://localhost:8000/test.js:4:11)\r\n        at http://localhost:8000/test.js:47:9\r\n        at Array.reduce (native)\r\n        at http://localhost:8000/test.js:44:27\r\n    \r\n    func.name: b\r\n    Trace:\r\n    Error\r\n        at b (http://localhost:8000/test.js:7:15)\r\n        at http://localhost:8000/test.js:47:9\r\n        at Array.reduce (native)\r\n        at http://localhost:8000/test.js:44:27\r\n    \r\n    func.name: d\r\n    Trace:\r\n    Error\r\n        at d (http://localhost:8000/test.js:10:15)\r\n        at http://localhost:8000/test.js:47:9\r\n        at Array.reduce (native)\r\n        at http://localhost:8000/test.js:44:27\r\n    \r\n    func.name: \r\n    Trace:\r\n    Error\r\n        at a (http://localhost:8000/test.js:4:11)\r\n        at http://localhost:8000/test.js:47:9\r\n        at Array.reduce (native)\r\n        at http://localhost:8000/test.js:44:27\r\n    \r\n    func.name: b\r\n    Trace:\r\n    Error\r\n        at b (http://localhost:8000/test.js:7:15)\r\n        at http://localhost:8000/test.js:47:9\r\n        at Array.reduce (native)\r\n        at http://localhost:8000/test.js:44:27\r\n    \r\n    func.name: d\r\n    Trace:\r\n    Error\r\n        at d (http://localhost:8000/test.js:10:15)\r\n        at http://localhost:8000/test.js:47:9\r\n        at Array.reduce (native)\r\n        at http://localhost:8000/test.js:44:27\r\n    \r\n    func.name: \r\n    Trace:\r\n    Error\r\n        at e.i (http://localhost:8000/test.js:17:19)\r\n        at http://localhost:8000/test.js:47:9\r\n        at Array.reduce (native)\r\n        at http://localhost:8000/test.js:44:27\r\n    \r\n    func.name: j\r\n    Trace:\r\n    Error\r\n        at j (http://localhost:8000/test.js:20:19)\r\n        at http://localhost:8000/test.js:47:9\r\n        at Array.reduce (native)\r\n        at http://localhost:8000/test.js:44:27\r\n    \r\n    func.name: l\r\n    Trace:\r\n    Error\r\n        at l (http://localhost:8000/test.js:23:19)\r\n        at http://localhost:8000/test.js:47:9\r\n        at Array.reduce (native)\r\n        at http://localhost:8000/test.js:44:27\r\n    \r\n    func.name: \r\n    Trace:\r\n    Error\r\n        at http://localhost:8000/test.js:28:19\r\n        at http://localhost:8000/test.js:47:9\r\n        at Array.reduce (native)\r\n        at http://localhost:8000/test.js:44:27\r\n    \r\n    func.name: n\r\n    Trace:\r\n    Error\r\n        at n (http://localhost:8000/test.js:33:19)\r\n        at http://localhost:8000/test.js:47:9\r\n        at Array.reduce (native)\r\n        at http://localhost:8000/test.js:44:27\r\n    \r\n    func.name: p\r\n    Trace:\r\n    Error\r\n        at p (http://localhost:8000/test.js:38:19)\r\n        at http://localhost:8000/test.js:47:9\r\n        at Array.reduce (native)\r\n        at http://localhost:8000/test.js:44:27 test.js:42\r\n\r\nSpiderMonkey\r\n------------\r\n\r\n    func.name: \r\n    Trace:\r\n    a@http://localhost:8000/test.js:4:5\r\n    @http://localhost:8000/test.js:47:9\r\n    @http://localhost:8000/test.js:54:1\r\n    \r\n    \r\n    func.name: b\r\n    Trace:\r\n    b@http://localhost:8000/test.js:7:9\r\n    @http://localhost:8000/test.js:47:9\r\n    @http://localhost:8000/test.js:54:1\r\n    \r\n    \r\n    func.name: d\r\n    Trace:\r\n    d@http://localhost:8000/test.js:10:9\r\n    @http://localhost:8000/test.js:47:9\r\n    @http://localhost:8000/test.js:54:1\r\n    \r\n    \r\n    func.name: \r\n    Trace:\r\n    a@http://localhost:8000/test.js:4:5\r\n    @http://localhost:8000/test.js:47:9\r\n    @http://localhost:8000/test.js:54:1\r\n    \r\n    \r\n    func.name: b\r\n    Trace:\r\n    b@http://localhost:8000/test.js:7:9\r\n    @http://localhost:8000/test.js:47:9\r\n    @http://localhost:8000/test.js:54:1\r\n    \r\n    \r\n    func.name: d\r\n    Trace:\r\n    d@http://localhost:8000/test.js:10:9\r\n    @http://localhost:8000/test.js:47:9\r\n    @http://localhost:8000/test.js:54:1\r\n    \r\n    \r\n    func.name: \r\n    Trace:\r\n    e.i@http://localhost:8000/test.js:17:13\r\n    @http://localhost:8000/test.js:47:9\r\n    @http://localhost:8000/test.js:54:1\r\n    \r\n    \r\n    func.name: j\r\n    Trace:\r\n    j@http://localhost:8000/test.js:20:13\r\n    @http://localhost:8000/test.js:47:9\r\n    @http://localhost:8000/test.js:54:1\r\n    \r\n    \r\n    func.name: l\r\n    Trace:\r\n    l@http://localhost:8000/test.js:23:13\r\n    @http://localhost:8000/test.js:47:9\r\n    @http://localhost:8000/test.js:54:1\r\n    \r\n    \r\n    func.name: \r\n    Trace:\r\n    m&lt;/&lt;@http://localhost:8000/test.js:28:13\r\n    @http://localhost:8000/test.js:47:9\r\n    @http://localhost:8000/test.js:54:1\r\n    \r\n    \r\n    func.name: n\r\n    Trace:\r\n    n@http://localhost:8000/test.js:33:13\r\n    @http://localhost:8000/test.js:47:9\r\n    @http://localhost:8000/test.js:54:1\r\n    \r\n    \r\n    func.name: p\r\n    Trace:\r\n    p@http://localhost:8000/test.js:38:13\r\n    @http://localhost:8000/test.js:47:9\r\n    @http://localhost:8000/test.js:54:1\r\n\r\nChakra\r\n------\r\n\r\n    func.name: undefined\r\n    Trace:\r\n    Error\r\n       at a (http://localhost:8000/test.js:4:5)\r\n       at Anonymous function (http://localhost:8000/test.js:47:9)\r\n       at Global code (http://localhost:8000/test.js:42:1)\r\n    \r\n    \r\n    func.name: undefined\r\n    Trace:\r\n    Error\r\n       at b (http://localhost:8000/test.js:7:9)\r\n       at Anonymous function (http://localhost:8000/test.js:47:9)\r\n       at Global code (http://localhost:8000/test.js:42:1)\r\n    \r\n    \r\n    func.name: undefined\r\n    Trace:\r\n    Error\r\n       at d (http://localhost:8000/test.js:10:9)\r\n       at Anonymous function (http://localhost:8000/test.js:47:9)\r\n       at Global code (http://localhost:8000/test.js:42:1)\r\n    \r\n    \r\n    func.name: undefined\r\n    Trace:\r\n    Error\r\n       at a (http://localhost:8000/test.js:4:5)\r\n       at Anonymous function (http://localhost:8000/test.js:47:9)\r\n       at Global code (http://localhost:8000/test.js:42:1)\r\n    \r\n    \r\n    func.name: undefined\r\n    Trace:\r\n    Error\r\n       at b (http://localhost:8000/test.js:7:9)\r\n       at Anonymous function (http://localhost:8000/test.js:47:9)\r\n       at Global code (http://localhost:8000/test.js:42:1)\r\n    \r\n    \r\n    func.name: undefined\r\n    Trace:\r\n    Error\r\n       at d (http://localhost:8000/test.js:10:9)\r\n       at Anonymous function (http://localhost:8000/test.js:47:9)\r\n       at Global code (http://localhost:8000/test.js:42:1)\r\n    \r\n    \r\n    func.name: undefined\r\n    Trace:\r\n    Error\r\n       at e.i (http://localhost:8000/test.js:17:13)\r\n       at Anonymous function (http://localhost:8000/test.js:47:9)\r\n       at Global code (http://localhost:8000/test.js:42:1)\r\n    \r\n    \r\n    func.name: undefined\r\n    Trace:\r\n    Error\r\n       at j (http://localhost:8000/test.js:20:13)\r\n       at Anonymous function (http://localhost:8000/test.js:47:9)\r\n       at Global code (http://localhost:8000/test.js:42:1)\r\n    \r\n    \r\n    func.name: undefined\r\n    Trace:\r\n    Error\r\n       at l (http://localhost:8000/test.js:23:13)\r\n       at Anonymous function (http://localhost:8000/test.js:47:9)\r\n       at Global code (http://localhost:8000/test.js:42:1)\r\n    \r\n    \r\n    func.name: undefined\r\n    Trace:\r\n    Error\r\n       at Anonymous function (http://localhost:8000/test.js:28:13)\r\n       at Anonymous function (http://localhost:8000/test.js:47:9)\r\n       at Global code (http://localhost:8000/test.js:42:1)\r\n    \r\n    \r\n    func.name: undefined\r\n    Trace:\r\n    Error\r\n       at n (http://localhost:8000/test.js:33:13)\r\n       at Anonymous function (http://localhost:8000/test.js:47:9)\r\n       at Global code (http://localhost:8000/test.js:42:1)\r\n    \r\n    \r\n    func.name: undefined\r\n    Trace:\r\n    Error\r\n       at p (http://localhost:8000/test.js:38:13)\r\n       at Anonymous function (http://localhost:8000/test.js:47:9)\r\n       at Global code (http://localhost:8000/test.js:42:1)\r\n\r\nNitro\r\n-----\r\n\r\n    func.name: \r\n    Trace:\r\n    a@http://localhost:8000/test.js:4:22\r\n    http://localhost:8000/test.js:47:13\r\n    reduce@[native code]\r\n    global code@http://localhost:8000/test.js:44:33\r\n    \r\n    func.name: b\r\n    Trace:\r\n    b@http://localhost:8000/test.js:7:26\r\n    http://localhost:8000/test.js:47:13\r\n    reduce@[native code]\r\n    global code@http://localhost:8000/test.js:44:33\r\n    \r\n    func.name: d\r\n    Trace:\r\n    d@http://localhost:8000/test.js:10:26\r\n    http://localhost:8000/test.js:47:13\r\n    reduce@[native code]\r\n    global code@http://localhost:8000/test.js:44:33\r\n    \r\n    func.name: \r\n    Trace:\r\n    a@http://localhost:8000/test.js:4:22\r\n    http://localhost:8000/test.js:47:13\r\n    reduce@[native code]\r\n    global code@http://localhost:8000/test.js:44:33\r\n    \r\n    func.name: b\r\n    Trace:\r\n    b@http://localhost:8000/test.js:7:26\r\n    http://localhost:8000/test.js:47:13\r\n    reduce@[native code]\r\n    global code@http://localhost:8000/test.js:44:33\r\n    \r\n    func.name: d\r\n    Trace:\r\n    d@http://localhost:8000/test.js:10:26\r\n    http://localhost:8000/test.js:47:13\r\n    reduce@[native code]\r\n    global code@http://localhost:8000/test.js:44:33\r\n    \r\n    func.name: \r\n    Trace:\r\n    i@http://localhost:8000/test.js:17:30\r\n    http://localhost:8000/test.js:47:13\r\n    reduce@[native code]\r\n    global code@http://localhost:8000/test.js:44:33\r\n    \r\n    func.name: j\r\n    Trace:\r\n    j@http://localhost:8000/test.js:20:30\r\n    http://localhost:8000/test.js:47:13\r\n    reduce@[native code]\r\n    global code@http://localhost:8000/test.js:44:33\r\n    \r\n    func.name: l\r\n    Trace:\r\n    l@http://localhost:8000/test.js:23:30\r\n    http://localhost:8000/test.js:47:13\r\n    reduce@[native code]\r\n    global code@http://localhost:8000/test.js:44:33\r\n    \r\n    func.name: \r\n    Trace:\r\n    http://localhost:8000/test.js:28:30\r\n    http://localhost:8000/test.js:47:13\r\n    reduce@[native code]\r\n    global code@http://localhost:8000/test.js:44:33\r\n    \r\n    func.name: n\r\n    Trace:\r\n    n@http://localhost:8000/test.js:33:30\r\n    http://localhost:8000/test.js:47:13\r\n    reduce@[native code]\r\n    global code@http://localhost:8000/test.js:44:33\r\n    \r\n    func.name: p\r\n    Trace:\r\n    p@http://localhost:8000/test.js:38:30\r\n    http://localhost:8000/test.js:47:13\r\n    reduce@[native code]\r\n    global code@http://localhost:8000/test.js:44:33\r\n\r\n\r\n  [1]: http://jsfiddle.net/us9dg6y8/"},{"score":43,"body_markdown":"I&#39;m adding my own answer just because everyone else has covered the hoisting part thoroughly.\r\n\r\nI&#39;ve wondered about which way is better for a long while now, and thanks to http://jsperf.com now I know :)\r\n\r\n![enter image description here][1]\r\n\r\n**Function declarations** are faster, and that&#39;s what really matters in web dev right? ;)\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/bCrSm.png"},{"score":8,"body_markdown":"This is just two possible ways of declaring functions, and in the second way, you can use the function before declaration.\r\n"},{"score":26,"body_markdown":"[Greg&#39;s Answer][1] is good enough, but I still would like to add something to it that I learned just now watching [Douglas Crockford&#39;s][2] videos.\r\n\r\n**Function expression:**\r\n\r\n    var foo = function foo() {};\r\n\r\n**Function statement:**\r\n\r\n    function foo() {};\r\n\r\nThe function statement is just a shorthand for `var` statement with a `function` value.\r\n\r\nSo\r\n\r\n    function foo() {};\r\n\r\nexpands to\r\n\r\n    var foo = function foo() {};\r\n\r\nWhich expands further to:\r\n\r\n    var foo = undefined;\r\n    foo = function foo() {};\r\n\r\nAnd they are both hoisted to the top of the code.\r\n\r\n![Screenshot from video][3]\r\n\r\n  [1]: https://stackoverflow.com/a/336868/2730064\r\n  [2]: https://en.wikipedia.org/wiki/Douglas_Crockford\r\n  [3]: http://i.stack.imgur.com/6TVZL.jpg\r\n"},{"score":16,"body_markdown":"I&#39;m listing out the differences below:\r\n\r\n1. A function declaration can be placed anywhere in the code. Even if it is invoked before the definition appears in code, it gets executed as function declaration is committed to memory or in a way it is hoisted up, before any other code in the page starts execution.\r\n\r\n    Take a look at the function below:\r\n\r\n        function outerFunction() {\r\n            function foo() {\r\n               return 1;\r\n            }\r\n            return foo();\r\n            function foo() {\r\n               return 2;\r\n            }\r\n        }\r\n        alert(outerFunction()); // Displays 2\r\n\r\n    This is because, during execution, it looks like:-\r\n\r\n        function foo() {  // The first function declaration is moved to top\r\n            return 1;\r\n        }\r\n        function foo() {  // The second function declaration is moved to top\r\n            return 2;\r\n        }\r\n        function outerFunction() {\r\n            return foo();\r\n        }\r\n        alert(outerFunction()); //So executing from top to bottom,\r\n                                //the last foo() returns 2 which gets displayed\r\n\r\n    A function expression, if not defined before calling it, will result in an error. Also, here the function definition itself is not moved to the top or committed to memory like in the function declarations. But the variable to which we assign the function gets hoisted up and **undefined** gets assigned to it.\r\n\r\n    Same function using function expressions:\r\n\r\n        function outerFunction() {\r\n            var foo = function() {\r\n               return 1;\r\n            }\r\n            return foo();\r\n            var foo = function() {\r\n               return 2;\r\n            }\r\n        }\r\n        alert(outerFunction()); // Displays 1\r\n\r\n    This is because during execution, it looks like:\r\n\r\n        function outerFunction() {\r\n           var foo = undefined;\r\n           var foo = undefined;\r\n\r\n           foo = function() {\r\n              return 1;\r\n           };\r\n           return foo ();\r\n           foo = function() {   // This function expression is not reachable\r\n              return 2;\r\n           };\r\n        }\r\n        alert(outerFunction()); // Displays 1\r\n\r\n2. It is not safe to write function declarations in non-function blocks like **if** because they won&#39;t be accessible.\r\n\r\n        if (test) {\r\n            function x() { doSomething(); }\r\n        }\r\n\r\n3. Named function expression like the one below, may not work in Internet&amp;nbsp;Explorer browsers prior to version 9.\r\n\r\n        var today = function today() {return new Date()}\r\n\r\n\r\n\r\n"},{"score":11,"body_markdown":"Both are different ways of defining a function. The difference is how the browser interprets and loads them into an execution context. \r\n\r\nThe first case is of function expressions which loads only when the interpreter reaches that line of code. So if you do it like the following, you will get an error that the **functionOne is not a function**.\r\n\r\n    functionOne();\r\n    var functionOne = function() {\r\n        // Some code\r\n    };\r\n\r\nThe reason is that on the first line no value is assigned to functionOne, and hence it is undefined. We are trying to call it as a function, and hence we are getting an error.\r\n\r\nOn the second line we are assigning the reference of an anonymous function to functionOne.\r\n\r\nThe second case is of function declarations that loads before any code is executed. So if you do like the following you won&#39;t get any error as the declaration loads before code execution.\r\n\r\n    functionOne();\r\n    function functionOne() {\r\n       // Some code\r\n    }\r\n"},{"score":58,"body_markdown":"**[Hoisting][1]** *is the JavaScript interpreter’s action of moving all variable and function declarations to the top of the current scope.* \r\n\r\n*However, only the actual declarations are hoisted. by leaving assignments where they are.*\r\n\r\n - variable&#39;s/Function&#39;s declared inside the page are global can access anywhere in that page.\r\n - variable&#39;s/Functions declared inside the function are having local scope. means they are available/accessed inside the function body (scope), they are not available outside the function body.\r\n \r\n\r\n**[Variable][2]**\r\n\r\n*Javascript is called loosely typed language. Which means Javascript variables can hold value of any [Data-Type][3]. Javascript automatically takes care of changing the variable-type based on the value/literal provided during runtime.*\r\n\r\n    global_Page = 10;                                               var global_Page;      &#171; undefined\r\n    \t&#171; Integer literal, Number Type.   -------------------      \tglobal_Page = 10;     &#171; Number         \r\n    global_Page = &#39;Yash&#39;;                 |   Interpreted   |      \tglobal_Page = &#39;Yash&#39;; &#171; String\r\n    \t&#171; String literal, String Type.    &#171;       AS        &#171;      \tglobal_Page = true;   &#171; Boolean \r\n    var global_Page = true;               |                 |      \tglobal_Page = function (){          &#171; function\r\n        &#171; Boolean Type                    -------------------                 var local_functionblock;  &#171; undefined\r\n    global_Page = function (){                                                local_functionblock = 777;&#171; Number\r\n    \tvar local_functionblock = 777;                              };  \r\n    \t// Assigning function as a data.\r\n    };\t\r\n  \r\n-----\r\n\r\n**Function**\r\n\r\n    function Identifier_opt ( FormalParameterList_opt ) { \r\n          FunctionBody | sequence of statements\r\n    \t  \r\n    \t  &#171; return;  Default undefined\r\n    \t  &#171; return &#39;some data&#39;;\r\n    }\r\n\r\n   \r\n\r\n - functions declared inside the page are hoisted to top of the page having global access.\r\n - functions declared inside the function-block are hoisted to top of the block.\r\n - Default return value of function is &#39;[undefined][4]&#39;, [Variable][5] declaration default value also &#39;undefined&#39;\r\n\r\n        Scope with respect to function-block global. \r\n        Scope with respect to page undefined | not available.\r\n\r\n \r\n**Function Declaration**\r\n\r\n\r\n    function globalAccess() {                                  function globalAccess() {      \r\n    }                                  -------------------     }\r\n    globalAccess();                    |                 |     function globalAccess() { &#171; Re-Defined / overridden.\r\n    localAccess();                     &#171;   Hoisted  As   &#171;         function localAccess() {\r\n    function globalAccess() {          |                 |         }\r\n    \t localAccess();                -------------------         localAccess(); &#171; function accessed with in globalAccess() only.\r\n    \t function localAccess() {                              }\r\n    \t }                                                     globalAccess();\r\n    }                                                          localAccess(); &#171; ReferenceError as the function is not defined\r\n\r\n   \r\n\r\n**Function Expression**\r\n\r\n            10;   \t\t\t\t&#171; literal\r\n           (10);  \t\t\t\t&#171; Expression  \t\t\t    (10).toString() -&gt; &#39;10&#39;\r\n    var a;                      \r\n    \ta = 10;   \t\t\t\t&#171; Expression var              a.toString()  -&gt; &#39;10&#39;\r\n    (function invoke() {        &#171; Expression Function\r\n     console.log(&#39;Self Invoking&#39;);        \t\t\t\t(function () {\r\n    });\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t      }) () -&gt; &#39;Self Invoking&#39;\r\n    \r\n    var f; \r\n        f = function (){        &#171; Expression var Function\r\n    \tconsole.log(&#39;var Function&#39;);                                   f ()  -&gt; &#39;var Function&#39;\r\n    \t};\r\n\r\n\r\n*Function assigned to variable Example:*\r\n\r\n    (function selfExecuting(){\r\n    \tconsole.log(&#39;IIFE - Immediately-Invoked Function Expression&#39;);\r\n    }());\r\n    \r\n    var anonymous = function (){\r\n    \tconsole.log(&#39;anonymous function Expression&#39;);\r\n    };\r\n    \r\n    var namedExpression = function for_InternalUSE(fact){\r\n    \tif(fact === 1){\r\n    \t\treturn 1;\r\n    \t}\r\n    \r\n    \tvar localExpression = function(){\r\n    \t\tconsole.log(&#39;Local to the parent Function Scope&#39;);\r\n    \t};\r\n    \tglobalExpression = function(){ \r\n    \t\tconsole.log(&#39;creates a new global variable, then assigned this function.&#39;);\r\n    \t};\r\n    \t\r\n    \t//return; //undefined.\r\n    \treturn fact * for_InternalUSE( fact - 1);\t\r\n    };\r\n    \r\n    namedExpression();\r\n    globalExpression();\r\n\r\n\r\njavascript interpreted as\r\n\r\n    var anonymous;\r\n    var namedExpression;\r\n    var globalExpression;\r\n    \r\n    anonymous = function (){\r\n    \tconsole.log(&#39;anonymous function Expression&#39;);\r\n    };\r\n    \r\n    namedExpression = function for_InternalUSE(fact){\r\n    \tvar localExpression;\r\n    \t\r\n    \tif(fact === 1){\r\n    \t\treturn 1;\r\n    \t}\r\n    \tlocalExpression = function(){\r\n    \t\tconsole.log(&#39;Local to the parent Function Scope&#39;);\r\n    \t};\r\n    \tglobalExpression = function(){ \r\n    \t\tconsole.log(&#39;creates a new global variable, then assigned this function.&#39;);\r\n    \t};\r\n    \t\r\n    \treturn fact * for_InternalUSE( fact - 1);\t // DEFAULT UNDEFINED.\r\n    };\r\n    \r\n    namedExpression(10);\r\n    globalExpression();\r\n \r\n\r\n You can check function declaration, expression test over different browser&#39;s using [`jsperf Test Runner`][6]\r\n\r\n-----\r\n\r\n**[ES5 Constructor Function Classes](https://stackoverflow.com/a/45759444/5081877): Function objects created using Function.prototype.bind**\r\n\r\nJavaScript treats functions as first-class objects, so being an object, you can assign properties to a function.\r\n\r\n\tfunction Shape(id) { // Function Declaration\r\n\t\tthis.id = id;\r\n\t};\r\n\t\t// Adding a prototyped method to a function.\r\n\t\tShape.prototype.getID = function () {\r\n\t\t\treturn this.id;\r\n\t\t};\r\n\t\tShape.prototype.setID = function ( id ) {\r\n\t\t\tthis.id = id;\r\n\t\t};\r\n\r\n\tvar expFn = Shape; // Function Expression\r\n\r\n\tvar funObj = new Shape( ); // Function Object\r\n\tfunObj.hasOwnProperty(&#39;prototype&#39;); // false\r\n\tfunObj.setID( 10 );\r\n\tconsole.log( funObj.getID() ); // 10\r\n\r\n-----\r\n\r\nES6 introduced **Arrow function**: An arrow function expression has a shorter syntax, they are best suited for non-method functions, and they cannot be used as constructors.\r\n\r\n&gt;  [`ArrowFunction : ArrowParameters =&gt; ConciseBody`](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-arrow-function-definitions-static-semantics-early-errors).\r\n&gt;\r\n&gt;     const fn = (item) =&gt; { return item &amp; 1 ? &#39;Odd&#39; : &#39;Even&#39;; };\r\n    console.log( fn(2) ); // Even\r\n    console.log( fn(3) ); // Odd\r\n\r\n\r\n  [1]: http://www.sitepoint.com/back-to-basics-javascript-hoisting/\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Variables\r\n  [3]: https://msdn.microsoft.com/en-us/library/7wkd9z69(v=vs.94).aspx\r\n  [4]: https://javascriptweblog.wordpress.com/2010/08/16/understanding-undefined-and-preventing-referenceerrors/\r\n  [5]: http://javascript.info/tutorial/variables-and-statements\r\n  [6]: http://jsperf.com/yashfunctions"},{"score":7,"body_markdown":"`new Function()` can be used to pass the function&#39;s body in a string. And hence this can be used to create dynamic functions. Also passing the script without executing the script.\r\n\r\n    var func = new Function(&quot;x&quot;, &quot;y&quot;, &quot;return x*y;&quot;);\r\n    function secondFunction(){\r\n       var result;\r\n       result = func(10,20);\r\n       console.log ( result );\r\n    }\r\n    \r\n    secondFunction()\r\n\r\n"},{"score":12,"body_markdown":"In JavaScript there are two ways to create functions:\r\n\r\n1. Function declaration:\r\n\r\n        function fn(){\r\n          console.log(&quot;Hello&quot;);\r\n        }\r\n        fn();\r\n\r\n    This is very basic, self-explanatory, used in many languages and standard across C family of languages. We declared a function defined it and executed it by calling it.\r\n\r\n    What you should be knowing is that functions are actually objects in JavaScript; internally we have created an object for above function and given it a name called fn or the reference to the object is stored in fn. Functions are objects in JavaScript; an instance of function is actually an object instance.\r\n\r\n2. Function expression:\r\n\r\n        var fn=function(){\r\n          console.log(&quot;Hello&quot;);\r\n        }\r\n        fn();\r\n\r\n    JavaScript has first-class functions, that is, create a function and assign it to a variable just like you create a string or number and assign it to a variable. Here, the fn variable is assigned to a function. The reason for this concept is functions are objects in JavaScript; fn is pointing to the object instance of the above function. We have initialized a function and assigned it to a variable. It&#39;s not executing the function and assigning the result.\r\n\r\nReference: *[JavaScript function declaration syntax: var fn = function() {} vs function fn() {}][1]*\r\n\r\n  [1]: http://jkoder.com/javascript-function-declaration-syntax-var-fn-function-vs-function-fn/\r\n"},{"score":10,"body_markdown":"They are pretty similar with some small differences, first one is a variable which assigned to an anonymous function (Function Declaration) and second one is the normal way to create a function in JavaScript(Anonymous function Declaration), both has usage, cons and pros:\r\n\r\n **1. Function Expression**&lt;br&gt;\r\n\r\n    var functionOne = function() {\r\n        // Some code\r\n    };\r\n\r\n&gt; A Function Expression defines a function as a part of a larger\r\n&gt; expression syntax (typically a variable assignment ). Functions\r\n&gt; defined via Functions Expressions can be named or anonymous. Function\r\n&gt; Expressions must not start with “function” (hence the parentheses\r\n&gt; around the self invoking example below).\r\n\r\nAssign a variable to a function, means no Hoisting, as we know functions in JavaScript can Hoist, means they can be called before they get declared, while variables need to be declared before getting access to them, so means in this case we can not access the function before where it&#39;s declared, also it could be a way that you write your functions, for the functions which return another function, this kind of declaration could make sense, also in ECMA6 &amp; above you can assign this to an arrow function which can be used to call anonymous functions, also this way of declaring is a better way to create Constructor functions in JavaScript.\r\n\r\n\r\n\r\n **2. Function Declaration**&lt;br&gt;\r\n\r\n    function functionTwo() {\r\n        // Some code\r\n    }\r\n\r\n&gt; A Function Declaration defines a named function variable without\r\n&gt; requiring variable assignment. Function Declarations occur as\r\n&gt; standalone constructs and cannot be nested within non-function blocks.\r\n&gt; It’s helpful to think of them as siblings of Variable Declarations.\r\n&gt; Just as Variable Declarations must start with “var”, Function\r\n&gt; Declarations must begin with “function”.\r\n\r\nThis is the normal way of calling a function in JavaScript, this function can be called before you even declare it as in JavaScript all functions get Hoisted, but if you have &#39;use strict&#39; this won&#39;t Hoist as expected, it&#39;s a good way to call all normal functions which are not big in lines and neither are a  constructor function.\r\n\r\nAlso, if you need more info about how hoisting works in JavaScript, visit the link below:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Glossary/Hoisting\r\n"},{"score":11,"body_markdown":"***About performance:***\r\n\r\nNew versions of `V8` introduced several under-the-hood optimizations and so did `SpiderMonkey`.\r\n\r\nThere is almost no difference now between expression and declaration. &lt;br&gt;Function expression [appears to be faster][1] now.\r\n\r\n***Chrome 62.0.3202***\r\n[![Chrome test][2]][2]\r\n\r\n\r\n***FireFox 55***\r\n[![Firefox test][3]][3]\r\n\r\n\r\n***Chrome Canary 63.0.3225***\r\n[![Chrome Canary test][4]][4]\r\n\r\n&lt;br&gt;\r\n\r\n&gt; `Anonymous` function expressions [appear to have better performance][5]\r\n&gt; against `Named` function expression.\r\n\r\n&lt;br&gt;\r\n\r\n\r\n***Firefox***\r\n[![Firefox named_anonymous][6]][6]\r\n***Chrome Canary***\r\n[![Chrome canary named_anonymous][7]][7]\r\n***Chrome***\r\n[![Chrome named_anonymous][8]][8]\r\n\r\n\r\n  [1]: https://jsperf.com/fdeclaration-vs-fexpression\r\n  [2]: https://i.stack.imgur.com/lW91X.png\r\n  [3]: https://i.stack.imgur.com/po3gG.png\r\n  [4]: https://i.stack.imgur.com/lcPvN.png\r\n  [5]: https://jsperf.com/named-vs-anonymous-expressions\r\n  [6]: https://i.stack.imgur.com/npaAl.png\r\n  [7]: https://i.stack.imgur.com/6YkeY.png\r\n  [8]: https://i.stack.imgur.com/x9H8J.png"},{"score":29,"body_markdown":"# &#120295;&#120309;&#120306;&#120319;&#120306; &#120302;&#120319;&#120306; &#120307;&#120316;&#120322;&#120319; &#120315;&#120316;&#120321;&#120306;&#120324;&#120316;&#120319;&#120321;&#120309;&#120326; &#120304;&#120316;&#120314;&#120317;&#120302;&#120319;&#120310;&#120320;&#120316;&#120315;&#120320; &#120303;&#120306;&#120321;&#120324;&#120306;&#120306;&#120315; &#120321;&#120309;&#120306; &#120321;&#120324;&#120316; &#120305;&#120310;&#120307;&#120307;&#120306;&#120319;&#120306;&#120315;&#120321; &#120305;&#120306;&#120304;&#120313;&#120302;&#120319;&#120302;&#120321;&#120310;&#120316;&#120315;&#120320; &#120316;&#120307; &#120307;&#120322;&#120315;&#120304;&#120321;&#120310;&#120316;&#120315;&#120320; &#120302;&#120320; &#120313;&#120310;&#120320;&#120321;&#120306;&#120305; &#120303;&#120306;&#120313;&#120316;&#120324;.\r\n\r\n\r\n\r\n1. Availability (scope) of the function\r\n\r\nThe following works because `function add()` is scoped to the nearest block:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    try {\r\n      console.log(&quot;Success: &quot;, add(1, 1));\r\n    } catch(e) {\r\n      console.log(&quot;ERROR: &quot; + e);\r\n    }\r\n\r\n    function add(a, b){\r\n      return a + b;\r\n    }\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThe following does not work because the variable is called before a function value is assigned to the variable `add`.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    try {\r\n      console.log(&quot;Success: &quot;, add(1, 1));\r\n    } catch(e) {\r\n      console.log(&quot;ERROR: &quot; + e);\r\n    }\r\n\r\n    var add=function(a, b){\r\n      return a + b;\r\n    }\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThe above code is identical in functionality to the code below. Note that explicitly assigning `add = undefined` is superfluous because simply doing `var add;` is the exact same as `var add=undefined`.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var add = undefined;\r\n    \r\n    try {\r\n      console.log(&quot;Success: &quot;, add(1, 1));\r\n    } catch(e) {\r\n      console.log(&quot;ERROR: &quot; + e);\r\n    }\r\n\r\n    add = function(a, b){\r\n      return a + b;\r\n    }\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\nThe following does not work because the `var add=` superseeds the `function add()`.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    try {\r\n      console.log(&quot;Success: &quot;, add(1, 1));\r\n    } catch(e) {\r\n      console.log(&quot;ERROR: &quot; + e);\r\n    }\r\n\r\n    var add=function add(a, b){\r\n      return a + b;\r\n    }\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n2. *(function)*.name\r\n\r\nThe name of a function `function thefuncname(){}` is *thefuncname* when it is declared this way.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function foobar(a, b){}\r\n    \r\n    console.log(foobar.name);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var a = function foobar(){};\r\n    \r\n    console.log(a.name);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nOtherwise, if a function is declared as `function(){}`, the *function*.name is the first variable used to store the function.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var a = function(){};\r\n    var b = (function(){ return function(){} });\r\n    \r\n    console.log(a.name);\r\n    console.log(b.name);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIf there are no variables set to the function, then the functions name is the empty string (`&quot;&quot;`).\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log((function(){}).name === &quot;&quot;);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nLastly, while the variable the function is assigned to initially sets the name, successive variables set to the function do not change the name.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var a = function(){};\r\n    var b = a;\r\n    var c = b;\r\n    \r\n    console.log(a.name);\r\n    console.log(b.name);\r\n    console.log(c.name);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n3. Performance\r\n\r\nIn Google&#39;s V8 and Firefox&#39;s Spidermonkey there might be a few microsecond JIST compilation difference, but ultimately the result is the exact same. To prove this, let&#39;s examine the efficiency of JSPerf at microbenchmarks by comparing the speed of two blank code snippets. The [JSPerf tests are found here][1]. And, the [jsben.ch testsare  found here][2]. As you can see, there is a noticable difference when there should be none. If you are really a performance freak like me, then it might be more worth your while trying to reduce the number of variables and functions in the scope and especially eliminating polymorphism (such as using the same variable to store two different types).\r\n\r\n4. Variable Mutability\r\n\r\nWhen you use the `var` keyword to declare a variable, you can then reassign a different value to the variable like so.\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    (function(){\r\n        &quot;use strict&quot;;\r\n        var foobar = function(){}; // initial value\r\n        try {\r\n            foobar = &quot;Hello World!&quot;; // new value\r\n            console.log(&quot;[no error]&quot;);\r\n        } catch(error) {\r\n            console.log(&quot;ERROR: &quot; + error.message);\r\n        }\r\n        console.log(foobar, window.foobar);\r\n    })();\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nHowever, when we use the const-statement, the variable reference becomes immutable. This means that we cannot assign a new value to the variable. Please note, however, that this does not make the contents of the variable immutable: if you do `const arr = []`, then you can still do `arr[10] = &quot;example&quot;`. Only doing something like `arr = &quot;new value&quot;` or `arr = []` would throw an error as seen below.\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    (function(){\r\n        &quot;use strict&quot;;\r\n        const foobar = function(){}; // initial value\r\n        try {\r\n            foobar = &quot;Hello World!&quot;; // new value\r\n            console.log(&quot;[no error]&quot;);\r\n        } catch(error) {\r\n            console.log(&quot;ERROR: &quot; + error.message);\r\n        }\r\n        console.log(foobar, window.foobar);\r\n    })();\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nInterestingly, if we declare the variable as `function funcName(){}`, then the immutability of the variable is the same as declaring it with `var`.\r\n\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    (function(){\r\n        &quot;use strict&quot;;\r\n        function foobar(){}; // initial value\r\n        try {\r\n            foobar = &quot;Hello World!&quot;; // new value\r\n            console.log(&quot;[no error]&quot;);\r\n        } catch(error) {\r\n            console.log(&quot;ERROR: &quot; + error.message);\r\n        }\r\n        console.log(foobar, window.foobar);\r\n    })();\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n## &#120298;&#120309;&#120302;&#120321; &#120284;&#120320; &#120295;&#120309;&#120306; &quot;&#120289;&#120306;&#120302;&#120319;&#120306;&#120320;&#120321; &#120277;&#120313;&#120316;&#120304;&#120312;&quot;\r\nThe &quot;nearest block&quot; is the nearest &quot;function,&quot; (including asynchronous functions, generator functions, and asynchronous generator functions). However, interestingly, a `function functionName() {}` behaves like a `var functionName = function() {}` when in a non-closure block to items outside said closure. Observe.\r\n\r\n* Normal `var add=function(){}`\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    try {\r\n      // typeof will simply return &quot;undefined&quot; if the variable does not exist\r\n      if (typeof add !== &quot;undefined&quot;) {\r\n        add(1, 1); // just to prove it\r\n        console.log(&quot;Not a block&quot;);\r\n      }else if(add===undefined){ // this throws an exception if add doesn&#39;t exist\r\n        console.log(&#39;Behaves like var add=function(a,b){return a+b}&#39;);\r\n      }\r\n    } catch(e) {\r\n      console.log(&quot;Is a block&quot;);\r\n    }\r\n    var add=function(a, b){return a + b}\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n* Normal `function add(){}`\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    try {\r\n      // typeof will simply return &quot;undefined&quot; if the variable does not exist\r\n      if (typeof add !== &quot;undefined&quot;) {\r\n        add(1, 1); // just to prove it\r\n        console.log(&quot;Not a block&quot;);\r\n      }else if(add===undefined){ // this throws an exception if add doesn&#39;t exist\r\n        console.log(&#39;Behaves like var add=function(a,b){return a+b}&#39;)\r\n      }\r\n    } catch(e) {\r\n      console.log(&quot;Is a block&quot;);\r\n    }\r\n    function add(a, b){\r\n      return a + b;\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n* Function\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    try {\r\n      // typeof will simply return &quot;undefined&quot; if the variable does not exist\r\n      if (typeof add !== &quot;undefined&quot;) {\r\n        add(1, 1); // just to prove it\r\n        console.log(&quot;Not a block&quot;);\r\n      }else if(add===undefined){ // this throws an exception if add doesn&#39;t exist\r\n        console.log(&#39;Behaves like var add=function(a,b){return a+b}&#39;)\r\n      }\r\n    } catch(e) {\r\n      console.log(&quot;Is a block&quot;);\r\n    }\r\n    (function () {\r\n        function add(a, b){\r\n          return a + b;\r\n        }\r\n    })();\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n* Statement (such as `if`, `else`, `for`, `while`, `try`/`catch`/`finally`, `switch`, `do`/`while`, `with`)\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    try {\r\n      // typeof will simply return &quot;undefined&quot; if the variable does not exist\r\n      if (typeof add !== &quot;undefined&quot;) {\r\n        add(1, 1); // just to prove it\r\n        console.log(&quot;Not a block&quot;);\r\n      }else if(add===undefined){ // this throws an exception if add doesn&#39;t exist\r\n        console.log(&#39;Behaves like var add=function(a,b){return a+b}&#39;)\r\n      }\r\n    } catch(e) {\r\n      console.log(&quot;Is a block&quot;);\r\n    }\r\n    {\r\n        function add(a, b){\r\n          return a + b;\r\n        }\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n* Arrow Function with `var add=function()`\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    try {\r\n      // typeof will simply return &quot;undefined&quot; if the variable does not exist\r\n      if (typeof add !== &quot;undefined&quot;) {\r\n        add(1, 1); // just to prove it\r\n        console.log(&quot;Not a block&quot;);\r\n      }else if(add===undefined){ // this throws an exception if add doesn&#39;t exist\r\n        console.log(&#39;Behaves like var add=function(a,b){return a+b}&#39;)\r\n      }\r\n    } catch(e) {\r\n      console.log(&quot;Is a block&quot;);\r\n    }\r\n    (() =&gt; {\r\n        var add=function(a, b){\r\n          return a + b;\r\n        }\r\n    })();\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n* Arrow Function With `function add()`\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    try {\r\n      // typeof will simply return &quot;undefined&quot; if the variable does not exist\r\n      if (typeof add !== &quot;undefined&quot;) {\r\n        add(1, 1); // just to prove it\r\n        console.log(&quot;Not a block&quot;);\r\n      }else if(add===undefined){ // this throws an exception if add doesn&#39;t exist\r\n        console.log(&#39;Behaves like var add=function(a,b){return a+b}&#39;)\r\n      }\r\n    } catch(e) {\r\n      console.log(&quot;Is a block&quot;);\r\n    }\r\n    (() =&gt; {\r\n        function add(a, b){\r\n          return a + b;\r\n        }\r\n    })();\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://jsperf.com/microbenchmark-analysis/1\r\n  [2]: http://jsben.ch/Ov6eJ"},{"score":1,"body_markdown":"I prefer defining function as variable:\r\n\r\n    let first = function(x){\r\n       return x[0];\r\n    }\r\n\r\nInstead of:\r\n\r\n    function first(){\r\n        ....\r\n    }\r\n\r\nBecause i can use expressions and decorators when defining the function. For example:\r\n\r\n    let safe = function(f){\r\n      try {f()...}\r\n    }\r\n    let last = safe(function(x){return x[0]}).\r\n\r\nAlso with ES6 its much shorter:\r\n   \r\n\r\n     let last = x =&gt; x[0]\r\n     ...........\r\n     function last(x){\r\n         return x[0];\r\n     }\r\n    ......\r\n    \r\n    let last = safe(x =&gt; x[0]);"},{"score":1,"body_markdown":"\r\n**Expression in JS**:  Something that returns a value &lt;br&gt;\r\nExample: Try out following in chrome console:\r\n\r\n    a = 10\r\n    output : 10\r\n\r\n    (1 + 3)\r\n    output = 4\r\n\r\n\r\n**Declaration/Statement**: Something that does not return a value &lt;br&gt;\r\nExample:\r\n\r\n    if (1 &gt; 2) {\r\n     // do something. \r\n    }\r\n\r\nhere (1&gt;2) is an expression but the &#39;if&#39; statament is not. Its not returning anything. \r\n\r\n&lt;br&gt;\r\n\r\nSimilarly, we have Function Declaration/Statement vs Function Expression &lt;br&gt;\r\nLets take an example:\r\n\r\n    // test.js\r\n    \r\n    var a = 10;\r\n    \r\n    // function expression\r\n    var fun_expression = function() {\r\n       console.log(&quot;Running function Expression&quot;);\r\n    }\r\n    \r\n    // funciton expression\r\n    \r\n    function fun_declaration() {\r\n       console.log(&quot;Running function Statement&quot;);\r\n    }\r\n\r\n**Important:** \r\nWhat happens when JavaScript engines runs the above js file.\r\n\r\n- When this js runs following things will happen:\r\n \r\n  1. Memory will be created variable &#39;a&#39; and &#39;fun_expression&#39;. And memory will be created for function statement &#39;fun_declaration&#39;\r\n  2. &#39;a&#39; will be assigned &#39;undefined&#39;. &#39;fun_expression&#39; will be assigned &#39;undefined&#39;. &#39;fun_declaration&#39; will be in the memory in its entirety. &lt;br&gt; \r\n  **Note: Step 1 and 2 above are called &#39;Execution Context - Creation Phase&#39;**. \r\n\r\nNow suppose we update the js to.\r\n\r\n    // test.js\r\n    \r\n    console.log(a)  //output: udefined (No error)\r\n    console.log(fun_expression)  // output: undefined (No error)\r\n    console.log(fun_expression()) // output: Error. As we trying to invoke undefined. \r\n    console.log(fun_declaration()) // output: running function statement  (As fun_declaration is already hoisted in the memory). \r\n    \r\n    var a = 10;\r\n    \r\n    // function expression\r\n    var fun_expression = function() {\r\n       console.log(&#39;Running function expression&#39;)\r\n    }\r\n    \r\n    // function declaration\r\n    \r\n    function fun_declaration() {\r\n       console.log(&#39;running function declaration&#39;)\r\n    }\r\n    \r\n    console.log(a)   // output: 10\r\n    console.log(fun_expression()) //output: Running function expression\r\n    console.log(fun_declaration()) //output: running function declaration\r\n\r\n\r\nThe output mentioned above in the comments, should be useful to understand the different between function expression and function statement/declaration.\r\n"},{"score":4,"body_markdown":"This is called a Function Expression:\r\n\r\n    var getRectArea = function(width, height) {\r\n        return width * height;\r\n    };\r\n    \r\n    console.log(&quot;Area of Rectangle: &quot; + getRectArea(3,4));\r\n    // This should return the following result in the console: \r\n    // Area of Rectangle: 12\r\n\r\nThis is called a Function Declaration:\r\n\r\n    var w = 5;\r\n    var h = 6;\r\n    \r\n    function RectArea(width, height) {  //declaring the function\r\n      return area = width * height;\r\n    }                                   //note you do not need ; after }\r\n    \r\n    RectArea(w,h);                      //calling or executing the function\r\n    console.log(&quot;Area of Rectangle: &quot; + area);\r\n    // This should return the following result in the console: \r\n    // Area of Rectangle: 30\r\n\r\nHope this helps explain what is the difference between Function Expression and Function Declaration and how to use them.  Thanks.\r\n\r\n\r\n"},{"score":1,"body_markdown":"One important point to note is :-\r\n\r\nlet there are two functions :-\r\n\r\n    sum(1,2);\r\n\r\n    const sum = function(first, second) {\r\n      return first + second;\r\n    }\r\n\r\nIn above case, it will give error that sum is not defined, but\r\n\r\n    sum(1,2);\r\n\r\n    function sum(first, second) {\r\n      return first + second;\r\n    }\r\n\r\nThis function will not any error as [Hoisting][1] will take place in this case.\r\n   \r\n\r\n    \r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"},{"score":4,"body_markdown":"The first one is an **Anonymous Function Expression**:\r\n\r\n    var functionOne = function() {\r\n      // some code\r\n    };\r\n\r\nWhile the second one is a **Function Declaration**:\r\n\r\n    function functionTwo () {\r\n      // some code\r\n    }\r\n\r\nThe main clear difference between both is the function name since **Anonymous Functions** have no name to call. \r\n\r\n# Named Functions Vs. Anonymous Functions\r\n\r\nThe anonymous function is quick and easy to type, and many libraries and tools tend to encourage this idiomatic style of code. However, anonymous functions have some **drawbacks**:\r\n\r\n - **Readability:** anonymous functions omit a name which could cause less readable code.\r\n\r\n - **Debugging:** anonymous functions have no name in stack traces, which can make debugging more difficult.\r\n\r\n - **Self-Reference:** what if the function needs to refer to itself, for recursion for example.\r\n\r\n\r\n**Naming Function Expression:**\r\n\r\nProviding a name for your function expression quite effectively addresses all these drawbacks, and has no tangible downsides. The best practice is to always name your function expressions:\r\n\r\n    setTimeout(function timeHandler() { // &lt;-- look, a name here!\r\n      console.log(&quot;I&#39;ve waited 1 second&quot;);\r\n    }, 1000);\r\n\r\n**Naming IIFEs (Immediate Invoked Function Expression)**: \r\n\r\n    (function IIFE(str) { // &lt;-- look, always name IIFEs!\r\n      console.log(str); // &quot;Hello!&quot;\r\n    })(&#39;Hello!&#39;);\r\n\r\nFor functions assigned to a variable, naming the function, in this case, is not very common and may cause confusion, in this case, the arrow function may be a better choice."},{"score":0,"body_markdown":"Another difference between both function is functionOne can be used as a variable that can hold multiple functions within and functionTwo holds some block of code that gets executed all when called. Please check below :\r\n\r\n \r\n\r\n       var functionOne = (function() {\r\n    \t  return {\r\n    \t\t \r\n    \t\t sayHello: function(){\r\n    \t\t\t\tconsole.log(&#39;say hello&#39;)\r\n    \t\t\t \r\n    \t\t },\r\n             redirectPage:function(_url){\r\n    \t\t\t\twindow.location.href = _url;\r\n    \t\t }\r\n    \r\n    \t  }\r\n    })();\r\n\r\nYou have a choice which function to be called. e.g functionOne.sayHello or functionOne. redirectPage. And if you call functionTwo then whole block of code will get executed.\r\n"},{"score":-2,"body_markdown":"The hoisting behavior between function declarations and expressions is important, but there is another difference between the two:\r\n\r\n## functions within conditional statements ##\r\n\r\nA general practice recommended by the [MDN][1] is to use function expressions instead of declarations inside `if` statements. From the example in the link, function declarations inside `if` statements will behave the same across Chrome and Firefox but **not** on Safari.\r\n\r\n*Disclaimer: macOS can&#39;t run Microsoft Edge, so I can&#39;t validate.*\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n    // function declaration example\r\n    \r\n    var hoisted = &quot;foo&quot; in this;\r\n\r\n    console.log(`&#39;foo&#39; name ${hoisted ? &quot;is&quot; : &quot;is not&quot;} hoisted. typeof foo is ${typeof foo}`);\r\n\r\n    if (false) {\r\n      function foo() {\r\n        return 1;\r\n      }\r\n    }\r\n\r\n    // In Chrome: \r\n    // &#39;foo&#39; name is hoisted. typeof foo is undefined\r\n\r\n    // In Firefox:\r\n    // &#39;foo&#39; name is hoisted. typeof foo is undefined\r\n\r\n    // In Safari:\r\n    // &#39;foo&#39; name is hoisted. typeof foo is function\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nTransforming `foo` into a function expression will yield consistent results across all three web browsers.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n    // function expression example\r\n\r\n    var hoisted = &quot;foo&quot; in this;\r\n\r\n    console.log(`&#39;foo&#39; name ${hoisted ? &quot;is&quot; : &quot;is not&quot;} hoisted. typeof foo is ${typeof foo}`);\r\n\r\n    if (false) {\r\n      var foo = function() {\r\n        return 1;\r\n      }\r\n    }\r\n\r\n    // In Chrome: \r\n    // &#39;foo&#39; name is hoisted. typeof foo is undefined\r\n\r\n    // In Firefox:\r\n    // &#39;foo&#39; name is hoisted. typeof foo is undefined\r\n\r\n    // In Safari:\r\n    // &#39;foo&#39; name is hoisted. typeof foo is undefined\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function#Conditionally_created_functions"},{"score":1,"body_markdown":"## Difference function declaration and function expression: ##\r\n\r\nJavascript has first class functions. This means that they can be treated just like any other variable. Functions can be passed as arguments in a function, be returned from a function, **and can be stored in variables**.\r\n\r\nHowever storing function in a variable (**function expression**) isn&#39;t the only way to create a function, this can also be done via a **function declaration**. Here are the key differences:\r\n\r\n 1. Function expressions can be anonymous whereas a function declaration must have a name. \r\n 2. Both have a name property which is used to identify the function. A function expression&#39;s name property is the name of the variable which it is bound to, whereas the name of a function declaration is simply the given name.\r\n 3. Function declarations are hoisted whereas, function expressions are not. Only the variable is hoisted to have the value of `undefined`.\r\n\r\nHere is an example:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    try {\r\n      functionOne();\r\n    } catch (e) {\r\n      console.log(&#39;i cant run because im not hoisted&#39;);\r\n    }\r\n\r\n    functionTwo();\r\n\r\n    // function expression, does not get hoisted\r\n    let functionOne = function randomName() {\r\n        // Some code\r\n    };\r\n\r\n    // function declaration, gets hoisted\r\n    function functionTwo() {\r\n       console.log(&#39;I get hoisted&#39;);\r\n    }\r\n\r\n    try {\r\n      randomName(); // this isn&#39;t the proper name, it is functionOne\r\n    } catch (e) {\r\n      console.log(&#39;You cant call me with randomName my name is function one&#39;);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n:\r\n\r\n"},{"score":0,"body_markdown":"The `var functionOne = function() {}` defines at run-time and the `function functionTwo() {}` defines at parse-time.\r\n```js\r\n// Run-Time function declaration \r\nfunctionOne(); // Calling functionOne function here will give an Error\r\nvar functionOne = function () {\r\n  // Some code\r\n};\r\n\r\n// Parse-Time function declaration \r\nfunctionTwo(); // Calling functionTwo function will not give an Error\r\nfunction functionTwo() {\r\n  // Some code...\r\n}\r\n```\r\nThe explanation between Run-time vs Parse-time\r\n[javascript run-time vs parse-time][1]\r\n      \r\n\r\n  [1]: http://khaidoan.wikidot.com/javascript-difference-between-runtime-and-parse-time"},{"score":-1,"body_markdown":"You can&#39;t use the `.bind()` method on function declarations, but you can on function expressions.\r\n\r\nFunction declaration:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function x() {\r\n      console.log(this)\r\n    }.bind(&#39;string&#39;)\r\n\r\n    x()\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nFunction expression:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var x = function() {\r\n      console.log(this)\r\n    }.bind(&#39;string&#39;)\r\n\r\n    x()\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}],"score":7045}