{"body":"How can I get a timestamp in JavaScript?\r\n\r\nSomething similar to [Unix timestamp][1], that is, a single number that represents the current time and date. Either as a number or a string.\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Unix_time","title":"How do you get a timestamp in JavaScript?","answers":[{"score":5108,"body_markdown":"Short &amp; Snazzy:\r\n==\r\n    + new Date()\r\n\r\nA unary operator like `plus` triggers the `valueOf` method in the `Date` object and it returns the timestamp (without any alteration).\r\n\r\n**Details:**\r\n\r\nOn almost all current browsers you can use [`Date.now()`][1] to get the UTC timestamp in **milliseconds**; a notable exception to this is IE8 and earlier (see [compatibility table][3]).\r\n\r\nYou can easily make a shim for this, though:\r\n\r\n    if (!Date.now) {\r\n        Date.now = function() { return new Date().getTime(); }\r\n    }\r\n\r\nTo get the timestamp in **seconds**, you can use:\r\n\r\n    Math.floor(Date.now() / 1000)\r\n\r\nOr alternatively you could use:\r\n\r\n    Date.now() / 1000 | 0\r\n\r\nWhich should be slightly faster, but also less readable (also [see this answer][2]).\r\n\r\nI would recommend using `Date.now()` (with compatibility shim). It&#39;s slightly better because it&#39;s shorter &amp; doesn&#39;t create a new `Date` object. However, if you don&#39;t want a shim &amp; maximum compatibility, you could use the &quot;old&quot; method to get the timestamp in **milliseconds**:\r\n\r\n    new Date().getTime()\r\n\r\nWhich you can then convert to seconds like this:\r\n\r\n    Math.round(new Date().getTime()/1000)\r\n\r\nAnd you can also use the `valueOf` method which we showed above:\r\n\r\n    new Date().valueOf()\r\n\r\n**Timestamp in Milliseconds**\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var timeStampInMs = window.performance &amp;&amp; window.performance.now &amp;&amp; window.performance.timing &amp;&amp; window.performance.timing.navigationStart ? window.performance.now() + window.performance.timing.navigationStart : Date.now();\r\n\r\n    console.log(timeStampInMs, Date.now());\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.4\r\n[2]: https://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number\r\n[3]: http://kangax.github.io/compat-table/es5/#Date.now"},{"score":152,"body_markdown":"    var time = Date.now || function() {\r\n      return +new Date;\r\n    };\r\n\r\n    time();"},{"score":93,"body_markdown":"    var timestamp = Number(new Date()); // current time as number"},{"score":45,"body_markdown":"\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log(new Date().valueOf()); // returns the number of milliseconds since the epoch\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":-20,"body_markdown":"    time = Math.round(((new Date()).getTime()-Date.UTC(1970,0,1))/1000);"},{"score":539,"body_markdown":"I like this, because it is small:\r\n\r\n    +new Date\r\n\r\nI also like this, because it is just as short and is compatible with modern browsers, and over 500 people voted that it is better: \r\n\r\n    Date.now()\r\n"},{"score":284,"body_markdown":"JavaScript works with the number of milliseconds since the epoch whereas most other languages work with the seconds. You could work with milliseconds but as soon as you pass a value to say PHP, the PHP native functions will probably fail. So to be sure I always use the seconds, not milliseconds.\r\n\r\nThis will give you a Unix timestamp (in seconds):\r\n\r\n    var unix = Math.round(+new Date()/1000);\r\n\r\nThis will give you the milliseconds since the epoch (not Unix timestamp):\r\n\r\n    var milliseconds = new Date().getTime();\r\n\r\n"},{"score":27,"body_markdown":"The [`Date.getTime()`][1] method can be used with a little tweak:\r\n\r\n&gt; The value returned by the getTime method is the number of milliseconds\r\n&gt; since 1 January 1970 00:00:00 UTC.\r\n\r\nDivide the result by 1000 to get the Unix timestamp, [`floor`][2] if necessary:\r\n\r\n    (new Date).getTime() / 1000\r\n\r\n----\r\n\r\n&lt;sup&gt;The `Date.valueOf()` method is functionally equivalent to `Date.getTime()`, which makes it possible to use arithmetic operators on date object to achieve identical results. In my opinion, this approach affects readability.&lt;/sup&gt;\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor"},{"score":134,"body_markdown":"***I provide multiple solutions with descriptions in this answer. Feel free to ask questions if anything is unclear***  \r\nPS: sadly someone merged this to the top answer without giving credit.\r\n\r\n---\r\n**Quick and dirty solution:**\r\n\r\n    Date.now() /1000 |0\r\n\r\n&gt; ***Warning**: it **might** break in 2038 and return negative numbers if you do the `|0` magic. Use `Math.floor()` instead by that time*\r\n\r\n**`Math.floor()` solution:**\r\n\r\n    Math.floor(Date.now() /1000);\r\n\r\n---\r\n\r\n**Some nerdy alternative by [Derek 朕會功夫][4] taken from the comments below this answer:**\r\n\r\n    new Date/1e3|0\r\n\r\n---\r\n\r\n**Polyfill to get `Date.now()` working:**\r\n\r\nTo get it working in IE you could do this (Polyfill from [MDN][1]):\r\n\r\n    if (!Date.now) {\r\n        Date.now = function now() {\r\n            return new Date().getTime();\r\n        };\r\n    }\r\n\r\n---\r\n\r\n**If you do not care about the year / day of week / daylight saving time you could strip it away and use this after 2038:**  \r\n\r\n    var now = (function () {\r\n        var year = new Date(new Date().getFullYear().toString()).getTime();\r\n        return function () {\r\n            return Date.now() - year\r\n        }\r\n    })();\r\n\r\n&gt; Some output of how it will look:\r\n\r\n&gt;     new Date()\r\n&gt;     Thu Oct 29 2015 08:46:30 GMT+0100 (Mitteleurop&#228;ische Zeit )\r\n&gt;     new Date(now())\r\n&gt;     Thu Oct 29 1970 09:46:30 GMT+0100 (Mitteleurop&#228;ische Zeit )\r\n\r\n&gt; Of course it will break daylight saving time but depending on what you\r\n&gt; are building this might be useful to you if you need to do binary\r\n&gt; operations on timestamps after int32 will break in 2038.\r\n&gt; \r\n&gt; This will also return negative values but only if the user of that PC\r\n&gt; you are running your code on is changing their PC&#39;s clock at least to\r\n&gt; 31th of december of the previous year.\r\n\r\n---\r\n\r\nIf you just want to know the relative time from the point of when the code was run through first you could use something like this:\r\n\r\n    var relativeTime = (function () {\r\n        var start = Date.now();\r\n        return function () {\r\n            return Date.now() - start\r\n        }\r\n    })();\r\n\r\n---\r\n\r\n**In case you are using jQuery you could use `$.now()` as described in [jQuery&#39;s Docs][2] which makes the polyfill obsolete since `$.now()` internally does the same thing: `(new Date).getTime()`**\r\n\r\nIf you are just happy about jQuery&#39;s version consider upvoting [**this**][3] answer since I did not find it myself.\r\n\r\n---\r\n\r\n**Now a tiny explaination of what `|0` does:**\r\n\r\nBy providing `|`, you tell the interpreter to do a binary OR operation. Bit operations require absolute numbers which turns the decimal result from `Date.now() / 1000` into an integer.  \r\n\r\nDuring that conversion, decimals are removed, resulting in the same result as using `Math.floor()` but using less code.\r\n\r\n&gt; **Be warned though:** it will convert a 64 bit double to a 32 bit integer. This will result in information loss when dealing with huge numbers. Timestamps will break after 2038 due to 32 bit integer overflow.\r\n\r\n---\r\n\r\n**For further information about `Date.now` follow this link: [`Date.now()` @ MDN][1]**\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\r\n  [2]: http://api.jquery.com/jquery.now/\r\n  [3]: //stackoverflow.com/a/15434736/1519836\r\n  [4]: //stackoverflow.com/users/283863"},{"score":43,"body_markdown":"Just to add up, here&#39;s a function to return a timestamp string in Javascript. \r\nExample: 15:06:38 PM\r\n\r\n\r\n    function displayTime() {\r\n        var str = &quot;&quot;;\r\n    \r\n        var currentTime = new Date()\r\n        var hours = currentTime.getHours()\r\n        var minutes = currentTime.getMinutes()\r\n        var seconds = currentTime.getSeconds()\r\n    \r\n        if (minutes &lt; 10) {\r\n            minutes = &quot;0&quot; + minutes\r\n        }\r\n        if (seconds &lt; 10) {\r\n            seconds = &quot;0&quot; + seconds\r\n        }\r\n        str += hours + &quot;:&quot; + minutes + &quot;:&quot; + seconds + &quot; &quot;;\r\n        if(hours &gt; 11){\r\n            str += &quot;PM&quot;\r\n        } else {\r\n            str += &quot;AM&quot;\r\n        }\r\n        return str;\r\n    }"},{"score":60,"body_markdown":"*jQuery* provides [its own method][1] to get the timestamp:\r\n\r\n    var timestamp = $.now();\r\n\r\n&lt;sup&gt;(besides it just implements `(new Date).getTime()` expression)&lt;/sup&gt;\r\n\r\n**REF:** http://api.jquery.com/jQuery.now/\r\n\r\n  [1]: http://api.jquery.com/jQuery.now/"},{"score":16,"body_markdown":"Any browsers not supported Date.now, you can use this for get current date time:\r\n\r\n    currentTime = Date.now() || +new Date()"},{"score":20,"body_markdown":"Here is a simple function to generate timestamp in the format: mm/dd/yy hh:mi:ss \r\n\r\n    function getTimeStamp() {\r\n        var now = new Date();\r\n        return ((now.getMonth() + 1) + &#39;/&#39; +\r\n                (now.getDate()) + &#39;/&#39; +\r\n                 now.getFullYear() + &quot; &quot; +\r\n                 now.getHours() + &#39;:&#39; +\r\n                 ((now.getMinutes() &lt; 10)\r\n                     ? (&quot;0&quot; + now.getMinutes())\r\n                     : (now.getMinutes())) + &#39;:&#39; +\r\n                 ((now.getSeconds() &lt; 10)\r\n                     ? (&quot;0&quot; + now.getSeconds())\r\n                     : (now.getSeconds())));\r\n    }\r\n\r\n\r\n"},{"score":14,"body_markdown":"This one has a solution : which converts unixtime stamp to tim in js try this\r\n\r\n    var a = new Date(UNIX_timestamp*1000);\r\n    var hour = a.getUTCHours();\r\n    var min = a.getUTCMinutes();\r\n    var sec = a.getUTCSeconds();"},{"score":8,"body_markdown":"more simpler way:\r\n\r\n\r\n    var timeStamp=event.timestamp || new Date().getTime();"},{"score":30,"body_markdown":"One I haven&#39;t seen yet \r\n\r\n    Math.floor(Date.now() / 1000); // current time in seconds\r\n\r\nAnother one I haven&#39;t seen yet is\r\n\r\n\r\n    var _ = require(&#39;lodash&#39;); // from here https://lodash.com/docs#now\r\n    _.now();"},{"score":7,"body_markdown":"sometime I need it in objects for xmlhttp calls, so I do like this.\r\n\r\n    timestamp : parseInt(new Date().getTime()/1000, 10)"},{"score":1,"body_markdown":"Here is another solution to generate a timestamp in JavaScript - including a padding method for single numbers - using day, month, year, hour, minute and seconds in its result (working example at [jsfiddle][1]):\r\n\r\n    var pad = function(int) { return int &lt; 10 ? 0 + int : int; };\r\n    var timestamp = new Date();\r\n\r\n        timestamp.day = [\r\n            pad(timestamp.getDate()),\r\n            pad(timestamp.getMonth() + 1), // getMonth() returns 0 to 11.\r\n            timestamp.getFullYear()\r\n        ];\r\n    \r\n        timestamp.time = [\r\n            pad(timestamp.getHours()),\r\n            pad(timestamp.getMinutes()),\r\n            pad(timestamp.getSeconds())\r\n        ];\r\n    \r\n    timestamp.now = parseInt(timestamp.day.join(&quot;&quot;) + timestamp.time.join(&quot;&quot;));\r\n    alert(timestamp.now);\r\n\r\n\r\n  [1]: http://jsfiddle.net/AcLzd/9/"},{"score":10,"body_markdown":"[Moment.js][1] can abstract away a lot of the pain in dealing with Javascript Dates. \r\n\r\nSee: http://momentjs.com/docs/#/displaying/unix-timestamp/\r\n\r\n    moment().unix();\r\n\r\n\r\n  [1]: http://momentjs.com"},{"score":14,"body_markdown":"I learned a really cool way of converting a given Date object to a Unix timestamp from the source code of [JQuery Cookie](https://github.com/carhartl/jquery-cookie/blob/master/src/jquery.cookie.js) the other day.\r\n\r\nHere&#39;s an example:\r\n\r\n    var date = new Date();\r\n    var timestamp = +date;\r\n\r\n"},{"score":3,"body_markdown":"`var my_timestamp = ~~(Date.now()/1000);`"},{"score":4,"body_markdown":"The advised, proper way is `Number(new Date())`, \r\nin terms of code- readability,\r\n\r\nAlso, UglifyJS and Google-Closure-Compiler will lower the complexity of the parsed code-logic-tree (relevant if you are using one of them to obscure/minify your code). \r\n\r\nfor Unix timestamp, which has a lower time resolution,  just divide current number with `1000`, keeping the whole. "},{"score":12,"body_markdown":"For [lodash][1] and [underscore][2] users, use `_.now`.\r\n\r\n    var timestamp = _.now(); // in milliseconds\r\n\r\n\r\n  [1]: https://lodash.com/docs#now\r\n  [2]: http://underscorejs.org/#now"},{"score":4,"body_markdown":"    var d = new Date();\r\n    console.log(d.valueOf()); \r\n"},{"score":14,"body_markdown":"If want a basic way to generate a timestamp in Node.js this works well.\r\n\r\n    var time = process.hrtime();\r\n    var timestamp = Math.round( time[ 0 ] * 1e3 + time[ 1 ] / 1e6 );\r\n\r\nOur team is using this to bust cache in a localhost environment. The output is `/dist/css/global.css?v=245521377` where `245521377` is the timestamp generated by `hrtime()`. \r\n\r\nHopefully this helps, the methods above can work as well but I found this to be the simplest approach for our needs in Node.js."},{"score":22,"body_markdown":"For a timestamp with microsecond resolution, there&#39;s [`performance.now`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now):\r\n\r\n    function time() { \r\n      return performance.now() + performance.timing.navigationStart;\r\n    }\r\n\r\nThis could for example yield `1436140826653.139`, while `Date.now` only gives `1436140826653`."},{"score":21,"body_markdown":"I highly recommend using `moment.js`. To get the number of milliseconds since UNIX epoch, do \r\n\r\n    moment().valueOf()\r\n\r\nTo get the number of seconds since UNIX epoch, do\r\n\r\n    moment().unix()\r\n\r\nYou can also convert times like so:\r\n\r\n    moment(&#39;2015-07-12 14:59:23&#39;, &#39;YYYY-MM-DD HH:mm:ss&#39;).valueOf()\r\n\r\nI do that all the time. No pun intended.\r\n\r\nTo use `moment.js` in the browser:\r\n\r\n    &lt;script src=&quot;moment.js&quot;&gt;&lt;/script&gt;\r\n    &lt;script&gt;\r\n        moment().valueOf();\r\n    &lt;/script&gt;\r\n\r\nFor more details, including other ways of installing and using MomentJS, see their [docs][1]\r\n\r\n\r\n  [1]: http://momentjs.com/docs/"},{"score":20,"body_markdown":"    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // The Current Unix Timestamp\r\n    // 1443534720 seconds since Jan 01 1970. (UTC)\r\n\r\n    // seconds\r\n    console.log(Math.floor(new Date().valueOf() / 1000)); // 1443534720\r\n    console.log(Math.floor(Date.now() / 1000)); // 1443534720\r\n    console.log(Math.floor(new Date().getTime() / 1000)); // 1443534720\r\n\r\n    // milliseconds\r\n    console.log(Math.floor(new Date().valueOf())); // 1443534720087\r\n    console.log(Math.floor(Date.now())); // 1443534720087\r\n    console.log(Math.floor(new Date().getTime())); // 1443534720087\r\n\r\n    // jQuery\r\n    // seconds\r\n    console.log(Math.floor($.now() / 1000)); // 1443534720\r\n    // milliseconds\r\n    console.log($.now()); // 1443534720087\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":14,"body_markdown":"This seems to work.\r\n\r\n    console.log(clock.now);\r\n    // returns 1444356078076\r\n    \r\n    console.log(clock.format(clock.now));\r\n    //returns 10/8/2015 21:02:16\r\n\r\n    console.log(clock.format(clock.now + clock.add(10, &#39;minutes&#39;))); \r\n    //returns 10/8/2015 21:08:18\r\n\r\n    var clock = {\r\n        now:Date.now(),\r\n        add:function (qty, units) {\r\n                switch(units.toLowerCase()) {\r\n                    case &#39;weeks&#39;   :  val = qty * 1000 * 60 * 60 * 24 * 7;  break;\r\n                    case &#39;days&#39;    :  val = qty * 1000 * 60 * 60 * 24;  break;\r\n                    case &#39;hours&#39;   :  val = qty * 1000 * 60 * 60;  break;\r\n                    case &#39;minutes&#39; :  val = qty * 1000 * 60;  break;\r\n                    case &#39;seconds&#39; :  val = qty * 1000;  break;\r\n                    default       :  val = undefined;  break;\r\n                    }\r\n                return val;\r\n                },\r\n        format:function (timestamp){\r\n                var date = new Date(timestamp);\r\n                var year = date.getFullYear();\r\n                var month = date.getMonth() + 1;\r\n                var day = date.getDate();\r\n                var hours = date.getHours();\r\n                var minutes = &quot;0&quot; + date.getMinutes();\r\n                var seconds = &quot;0&quot; + date.getSeconds();\r\n                // Will display time in xx/xx/xxxx 00:00:00 format\r\n                return formattedTime = month + &#39;/&#39; + \r\n                                    day + &#39;/&#39; + \r\n                                    year + &#39; &#39; + \r\n                                    hours + &#39;:&#39; + \r\n                                    minutes.substr(-2) + \r\n                                    &#39;:&#39; + seconds.substr(-2);\r\n                }\r\n    };"},{"score":26,"body_markdown":"The code `Math.floor(new Date().getTime() / 1000)` can be shortened to `new Date / 1E3 | 0`.\r\n\r\nConsider to skip direct [`getTime()`][1] invocation and use `| 0` as a replacement for [`Math.floor()`][2] function.\r\nIt&#39;s also good to remember `1E3` is a shorter equivalent for `1000` (uppercase E is preferred than lowercase to indicate `1E3` as a constant).\r\n\r\nAs a result you get the following:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var ts = new Date / 1E3 | 0;\r\n\r\n    console.log(ts);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\r\n  [2]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor"},{"score":47,"body_markdown":"In addition to the other options, if you want a dateformat ISO, you get can get it directly\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log(new Date().toISOString());\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":21,"body_markdown":"You can only use \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n        var timestamp = new Date().getTime();\r\n        console.log(timestamp);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nto get the current timestamp. No need to do anything extra."},{"score":42,"body_markdown":"**Date**, a **native object** in JavaScript is the way we get all data about time.\r\n\r\nJust be careful in JavaScript the timestamp depends on the client computer set, so it&#39;s not 100% accurate timestamp. To get the best result, you need to get the timestamp from the **server-side**. \r\n\r\nAnyway, my preferred way is using vanilla. This is a common way of doing it in JavaScript:\r\n\r\n    Date.now(); //return 1495255666921\r\n\r\nIn MDN it&#39;s mentioned as below:\r\n\r\n&gt; The Date.now() method returns the number of milliseconds elapsed since\r\n&gt; 1 January 1970 00:00:00 UTC.&lt;br&gt;\r\n&gt; Because now() is a static method of Date, you always use it as Date.now().\r\n\r\nIf you using a version below ES5, `Date.now();` not works and you need to use:\r\n\r\n    new Date().getTime();"},{"score":9,"body_markdown":"As of writing this, the top answer is 9 years old, and a lot has changed since then - not least, we have near universal support for a non-hacky solution:\r\n\r\n    Date.now()\r\n\r\nIf you want to be absolutely certain that this won&#39;t break in some ancient (pre ie9) browser, you can put it behind a check, like so:\r\n\r\n    const currentTimestamp = (!Date.now ? +new Date() : Date.now());\r\n\r\nThis will return the milliseconds since epoch time, of course, not seconds.\r\n\r\n[MDN Documentation on Date.now][1]\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now &quot;Date.now on MDN&quot;"},{"score":2,"body_markdown":"    function getTimeStamp() {\r\n        var now = new Date();\r\n        return ((now.getMonth() + 1) + &#39;/&#39; +\r\n                (now.getDate()) + &#39;/&#39; +\r\n                 now.getFullYear() + &quot; &quot; +\r\n                 now.getHours() + &#39;:&#39; +\r\n                 ((now.getMinutes() &lt; 10)\r\n                     ? (&quot;0&quot; + now.getMinutes())\r\n                     : (now.getMinutes())) + &#39;:&#39; +\r\n                 ((now.getSeconds() &lt; 10)\r\n                     ? (&quot;0&quot; + now.getSeconds())\r\n                     : (now.getSeconds())));\r\n    }"},{"score":33,"body_markdown":"# Performance\n\n\nToday - 2020.04.23 I perform tests for chosen solutions. I tested on MacOs High Sierra 10.13.6 on Chrome 81.0, Safari 13.1, Firefox 75.0\n\n### Conclusions \n\n* Solution `Date.now()` (E) is fastest on Chrome and Safari and second fast on Firefox and this is probably best choice for fast cross-browser solution\n* Solution `performance.now()` (G), what is surprising, is more than 100x faster than other solutions on Firefox but slowest on Chrome\n* Solutions C,D,F are quite slow on all browsers\n\n[![enter image description here][1]][1]\n\n### Details\n\nResults for chrome\n\n[![enter image description here][2]][2]\n\n\nYou can perform test on your machine [HERE](https://jsbench.me/f5k9ckm6lh/1)\n\nCode used in tests is presented in below snippet\n\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\n\n&lt;!-- language: lang-js --&gt;\n\n    function A() {\n      return new Date().getTime();\n    }\n\n    function B() {\n      return new Date().valueOf();\n    }\n\n    function C() {\n      return +new Date();\n    }\n\n    function D() {\n      return new Date()*1;\n    }\n\n    function E() {\n      return Date.now();\n    }\n\n    function F() {\n      return Number(new Date());\n    }\n\n    function G() {\n      // this solution returns time counted from loading the page.\n      // (and on Chrome it gives better precission)\n      return performance.now(); \n    }\n\n\n\n    // TEST\n\n    log = (n,f) =&gt; console.log(`${n} : ${f()}`);\n\n    log(&#39;A&#39;,A);\n    log(&#39;B&#39;,B);\n    log(&#39;C&#39;,C);\n    log(&#39;D&#39;,D);\n    log(&#39;E&#39;,E);\n    log(&#39;F&#39;,F);\n    log(&#39;G&#39;,G);\n\n&lt;!-- language: lang-html --&gt;\n\n    This snippet only presents code used in external benchmark\n\n&lt;!-- end snippet --&gt;\n\n\n  [1]: https://i.stack.imgur.com/lCTrK.png\n  [2]: https://i.stack.imgur.com/Eaco2.png"},{"score":14,"body_markdown":"If it is for logging purposes, you can use &lt;strong&gt;ISOString&lt;/strong&gt;\r\n\r\n`new Date().toISOString()`\r\n\r\n&gt; &quot;2019-05-18T20:02:36.694Z&quot;"},{"score":3,"body_markdown":"**Get TimeStamp In JavaScript**\n&gt; In JavaScript, a timestamp is the number of milliseconds that have passed since January 1, 1970.\n&gt;\n&gt; If you don&#39;t intend to support &lt; IE8, you can use\n    \n    new Date().getTime(); + new Date(); and Date.now();\n\n  to directly get the timestamp without having to create a new Date object.\n\n&gt; To return the required timestamp\n\n    new Date(&quot;11/01/2018&quot;).getTime()\n\n    "},{"score":0,"body_markdown":"&gt; To get time, month, day, year separately this will work\r\n\r\n    var currentTime = new Date();\r\n    var month = currentTime.getMonth() + 1;\r\n    var day = currentTime.getDate();\r\n    var year = currentTime.getFullYear();"}],"score":4164}