{"body":"Is there a universal JavaScript function that checks that a variable has a value and ensures that it&#39;s not `undefined` or `null`? I&#39;ve got this code, but I&#39;m not sure if it covers all cases:\r\n\r\n    function isEmpty(val){\r\n        return (val === undefined || val == null || val.length &lt;= 0) ? true : false;\r\n    }","title":"Is there a standard function to check for null, undefined, or blank variables in JavaScript?","answers":[{"score":4679,"body_markdown":"You can just check if the *variable* has a `truthy` value or not. That means\r\n\r\n    if( value ) {\r\n    }\r\n\r\nwill evaluate to `true` if `value` is **not**:\r\n\r\n - null\r\n - undefined\r\n - NaN\r\n - empty string (&quot;&quot;)\r\n - 0\r\n - false\r\n\r\nThe above list represents all possible `falsy` values in ECMA-/Javascript. Find it in the [specification][1] at the `ToBoolean` section.\r\n\r\nFurthermore, if you do not **know** whether a variable exists (that means, if it was *declared*) you should check with the `typeof` operator. For instance\r\n\r\n    if( typeof foo !== &#39;undefined&#39; ) {\r\n        // foo could get resolved and it&#39;s defined\r\n    }\r\n\r\nIf you can be sure that a *variable* is declared at least, you should directly check if it has a `truthy` value like shown above.\r\n\r\nFurther read: http://typeofnan.blogspot.com/2011/01/typeof-is-fast.html\r\n\r\n\r\n  [1]: https://www.ecma-international.org/ecma-262/5.1/#sec-9.2"},{"score":89,"body_markdown":"    function isEmpty(value){\r\n      return (value == null || value.length === 0);\r\n    }\r\n\r\nThis will return true for\r\n\r\n    undefined  // Because undefined == null\r\n\r\n    null\r\n\r\n    []\r\n\r\n    &quot;&quot;\r\n\r\nand zero argument functions since a function&#39;s `length` is the number of declared parameters it takes.\r\n\r\nTo disallow the latter category, you might want to just check for blank strings\r\n\r\n    function isEmpty(value){\r\n      return (value == null || value === &#39;&#39;);\r\n    }"},{"score":242,"body_markdown":"The verbose method to check if value is undefined or null is:\r\n\r\n    return value === undefined || value === null;\r\n\r\nYou can also use the `==` operator but this expects one to [know all the rules][1]:\r\n\r\n    return value == null; // also returns true if value is undefined\r\n\r\n\r\n  [1]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\r\n"},{"score":15,"body_markdown":"You are a bit overdoing it. To check if a variable is not given a value, you would only need to check against undefined and null.\r\n\r\n\r\n    function isEmpty(value){\r\n        return (typeof value === &quot;undefined&quot; || value === null);\r\n    }\r\n\r\nThis is assuming `0`, `&quot;&quot;`, and objects(even empty object and array) are valid &quot;values&quot;."},{"score":6,"body_markdown":"If the variable hasn&#39;t been declared, you wont be able to test for undefined using a function because you will get an error. \r\n\r\n    if (foo) {}\r\n    function (bar) {}(foo)\r\n\r\nBoth will generate an error if foo has not been declared.\r\n\r\nIf you want to test if a variable has been declared you can use\r\n\r\n    typeof foo != &quot;undefined&quot;\r\n\r\nif you want to test if foo has been declared and it has a value you can use\r\n\r\n    if (typeof foo != &quot;undefined&quot; &amp;&amp; foo) {\r\n        //code here\r\n    }"},{"score":53,"body_markdown":"This is the safest check and I haven&#39;t seen it posted here exactly like that:\r\n\r\n    if (typeof value !== &#39;undefined&#39; &amp;&amp; value) {\r\n        //deal with value&#39;\r\n    };\r\n\r\nIt will cover cases where **value** was never defined, and also any of these:\r\n\r\n - null\r\n - undefined (value of undefined is not the same as a parameter that was never defined)\r\n - 0\r\n - &quot;&quot; (empty string)\r\n - false\r\n - NaN\r\n\r\n\r\n&lt;sub&gt;Edited: Changed to strict equality (!==) because it&#39;s the norm by now ;)&lt;/sub&gt;\r\n"},{"score":11,"body_markdown":"Here&#39;s mine - returns true if value is null, undefined, etc or blank (ie contains only blank spaces):\r\n\r\n    function stringIsEmpty(value) {\r\n    \r\n        return value ? value.trim().length == 0 : true;\r\n    \r\n    }"},{"score":27,"body_markdown":"The first answer with best rating is wrong. If value is undefined it will throw an exception in modern browsers. You have to use: \r\n\r\n    if (typeof(value) !== &quot;undefined&quot; &amp;&amp; value)\r\n\r\nor \r\n\r\n    if (typeof value  !== &quot;undefined&quot; &amp;&amp; value)"},{"score":18,"body_markdown":"**!** check for **empty strings (&quot;&quot;), null, undefined, false and the number 0 and NaN.** Say, if a string is empty `var name = &quot;&quot;` then `console.log(!name)` returns `true`.\r\n\r\n    function isEmpty(val){\r\n      return !val;\r\n    }\r\n\r\nthis function will return true if **val** is **empty, null, undefined, false, the number 0 or NaN**.\r\n\r\n**OR**\r\n\r\nAccording to your problem domain you can just use like `!val` or `!!val`."},{"score":30,"body_markdown":"You may find the following function useful: \r\n\r\n    function typeOf(obj) {\r\n      return {}.toString.call(obj).split(&#39; &#39;)[1].slice(0, -1).toLowerCase();\r\n    }\r\n\r\nOr in ES7 (comment if further improvements)\r\n\r\n    function typeOf(obj) {\r\n      const { toString } = Object.prototype;\r\n      const stringified = obj::toString();\r\n      const type = stringified.split(&#39; &#39;)[1].slice(0, -1);\r\n          \r\n      return type.toLowerCase();\r\n    }\r\n\r\nResults:\r\n\r\n    typeOf(); //undefined\r\n    typeOf(null); //null\r\n    typeOf(NaN); //number\r\n    typeOf(5); //number\r\n    typeOf({}); //object\r\n    typeOf([]); //array\r\n    typeOf(&#39;&#39;); //string\r\n    typeOf(function () {}); //function\r\n    typeOf(/a/) //regexp\r\n    typeOf(new Date()) //date\r\n    typeOf(new WeakMap()) //weakmap\r\n    typeOf(new Map()) //map\r\n\r\n&quot;Note that the bind operator (::) is not part of ES2016 (ES7) nor any later edition of the ECMAScript standard at all. It&#39;s currently a stage 0 (strawman) proposal for being introduced to the language.&quot; – Simon Kjellberg. the author wishes to add his support for this beautiful proposal to receive royal ascension."},{"score":18,"body_markdown":"This condition check\r\n\r\n\r\n    if (!!foo) {\r\n        //foo is defined\r\n    }\r\n\r\n\r\nis all you need."},{"score":11,"body_markdown":"If you prefer plain javascript try this:\r\n\r\n      /**\r\n       * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\r\n       * length of `0` and objects with no own enumerable properties are considered\r\n       * &quot;empty&quot;.\r\n       *\r\n       * @static\r\n       * @memberOf _\r\n       * @category Objects\r\n       * @param {Array|Object|string} value The value to inspect.\r\n       * @returns {boolean} Returns `true` if the `value` is empty, else `false`.\r\n       * @example\r\n       *\r\n       * _.isEmpty([1, 2, 3]);\r\n       * // =&gt; false\r\n       *\r\n       * _.isEmpty([]);\r\n       * // =&gt; true\r\n       *\r\n       * _.isEmpty({});\r\n       * // =&gt; true\r\n       *\r\n       * _.isEmpty(&#39;&#39;);\r\n       * // =&gt; true\r\n       */\r\n\r\n    function isEmpty(value) {\r\n        if (!value) {\r\n          return true;\r\n        }\r\n        if (isArray(value) || isString(value)) {\r\n          return !value.length;\r\n        }\r\n        for (var key in value) {\r\n          if (hasOwnProperty.call(value, key)) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n\r\nOtherwise, if you are already using underscore or lodash, try:\r\n\r\n    _.isEmpty(value)\r\n\r\n"},{"score":5,"body_markdown":"*To check Default Value*\r\n\r\n    function typeOfVar (obj) {\r\n    \t  return {}.toString.call(obj).split(&#39; &#39;)[1].slice(0, -1).toLowerCase();\r\n    }\r\n    function isVariableHaveDefaltVal(variable) {\r\n    \tif ( typeof(variable) === &#39;string&#39; ) {  // number, boolean, string, object \r\n    \t\tconsole.log(&#39; Any data Between single/double Quotes is treated as String &#39;);\t\t\r\n    \t\treturn (variable.trim().length === 0) ? true : false;\r\n    \t}else if ( typeof(variable) === &#39;boolean&#39; ) {\r\n          console.log(&#39;boolean value with default value \\&#39;false\\&#39;&#39;);\r\n    \t\treturn (variable === false) ? true : false;\r\n    \t}else if ( typeof(variable) === &#39;undefined&#39; ) {\r\n    \t\tconsole.log(&#39;EX: var a; variable is created, but has the default value of undefined.&#39;); \r\n    \t\treturn true;\r\n    \t}else if ( typeof(variable) === &#39;number&#39; ) { \r\n    \t\tconsole.log(&#39;number : &#39;+variable);\r\n    \t\treturn (variable === 0 ) ? true : false;\r\n    \t}else if ( typeof(variable) === &#39;object&#39; ) {\r\n       //\t-----Object-----\r\n    \t\tif (typeOfVar(variable) === &#39;array&#39; &amp;&amp; variable.length === 0) {\r\n    \t\t\tconsole.log(&#39;\\t Object Array with length = &#39; + [].length); // Object.keys(variable)\r\n    \t\t\treturn true;\r\n    \t\t}else if (typeOfVar(variable) === &#39;string&#39; &amp;&amp; variable.length === 0 ) {\r\n    \t\t\tconsole.log(&#39;\\t Object String with length = &#39; + variable.length);\r\n    \t\t\treturn true;\r\n    \t\t}else if (typeOfVar(variable) === &#39;boolean&#39; ) {\r\n    \t\t\tconsole.log(&#39;\\t Object Boolean = &#39; + variable);\r\n    \t\t\treturn (variable === false) ? true : false;\r\n    \t\t}else if (typeOfVar(variable) === &#39;number&#39; ) {\r\n    \t\t\tconsole.log(&#39;\\t Object Number = &#39; + variable);\r\n    \t\t\treturn (variable === 0 ) ? true : false;\r\n    \t\t}else if (typeOfVar(variable) === &#39;regexp&#39; &amp;&amp; variable.source.trim().length === 0 ) {\r\n           console.log(&#39;\\t Object Regular Expression : &#39;);\r\n            return true;\r\n    \t\t}else if (variable === null) {\r\n           console.log(&#39;\\t Object null value&#39;);\r\n            return true;\r\n    \t\t}\r\n    \t}\r\n    \treturn false;\r\n    }\r\n    var str = &quot;A Basket For Every Occasion&quot;;\r\n    str = str.replace(/\\s/g, &quot;-&quot;);\r\n    //The &quot;g&quot; flag in the regex will cause all spaces to get replaced.\r\n\r\ncheck Result:\r\n\r\n    isVariableHaveDefaltVal(&#39; &#39;); // string          \r\n    isVariableHaveDefaltVal(false); // boolean       \r\n    var a;           \r\n    isVariableHaveDefaltVal(a);               \r\n    isVariableHaveDefaltVal(0); // number             \r\n    isVariableHaveDefaltVal(parseInt(&#39;&#39;)); // NAN isNAN(&#39; &#39;); - true         \r\n    isVariableHaveDefaltVal(null);              \r\n    isVariableHaveDefaltVal([]);               \r\n    isVariableHaveDefaltVal(/ /);              \r\n    isVariableHaveDefaltVal(new Object(&#39;&#39;));               \r\n    isVariableHaveDefaltVal(new Object(false));            \r\n    isVariableHaveDefaltVal(new Object(0)); \r\n    typeOfVar( function() {} );\r\n\r\nI used @Vix function() to check the object of which type.\r\n\r\n\r\nusing instansof &#171;\r\n\r\n\tvar prototypes_or_Literals = function (obj) {\r\n\t\tswitch (typeof(obj)) {\r\n            // object prototypes\r\n\t\t\tcase &#39;object&#39;:\r\n\t\t\t\tif (obj instanceof Array)\r\n\t\t\t\t\treturn &#39;[object Array]&#39;;\r\n\t\t\t\telse if (obj instanceof Date)\r\n\t\t\t\t\treturn &#39;[object Date]&#39;;\r\n\t\t\t\telse if (obj instanceof RegExp)\r\n\t\t\t\t\treturn &#39;[object regexp]&#39;;\r\n\t\t\t\telse if (obj instanceof String)\r\n\t\t\t\t\treturn &#39;[object String]&#39;;\r\n\t\t\t\telse if (obj instanceof Number)\r\n\t\t\t\t\treturn &#39;[object Number]&#39;;\r\n\r\n\t\t\t\telse\r\n\t\t\t\t\treturn &#39;object&#39;;\r\n            // object literals\r\n\t\t\tdefault:\r\n\t\t\t\treturn typeof(obj);\r\n\t\t}\t\r\n\t};\r\n    output test &#171;\r\n\tprototypes_or_Literals( &#39;&#39; ) // &quot;string&quot;\r\n\tprototypes_or_Literals( new String(&#39;&#39;) ) // &quot;[object String]&quot;\r\n\tObject.prototype.toString.call(&quot;foo bar&quot;) //&quot;[object String]&quot;        \r\n"},{"score":0,"body_markdown":"I think using the ? operator is slightly cleaner.\r\n\r\n    var ? function_if_exists() : function_if_doesnt_exist();"},{"score":1,"body_markdown":"This will check if variable of indeterminate nesting is undefined\r\n\r\n    function Undef(str) \r\n    {\r\n      var ary = str.split(&#39;.&#39;);\r\n      var w = window;\r\n      for (i in ary) {\r\n        try      { if (typeof(w = w[ary[i]]) === &quot;undefined&quot;) return true; }\r\n        catch(e) { return true; }\r\n      }\r\n      return false;\r\n    }\r\n    \r\n    if (!Undef(&quot;google.translate.TranslateElement&quot;)) {\r\n\r\nThe above checks if the Google translate function TranslateElement exists.  This is equivalent to:\r\n\r\n    if (!(typeof google === &quot;undefined&quot; \r\n     || typeof google.translate === &quot;undefined&quot; \r\n     || typeof google.translate.TranslateElement === &quot;undefined&quot;)) {\r\n"},{"score":-3,"body_markdown":"For my case I tried with if null,&#39;&#39;, !variable, But it did not work.\r\n\r\nSee my code below to get the text from an html field\r\n\r\n    var status=$(this).text(); //for example (for my case)\r\n\r\nif there was no value(no text) in the status variable ,I was trying to set the value &#39;novalue&#39; to status variable. \r\n\r\nthe following code worked.\r\n\r\n   \r\n\r\n    if(status == false)\r\n    {\r\n       status=&#39;novalue&#39;;\r\n    } \r\n\r\nwhen there was no text found for satus variable the above code assigned &#39;novalue&#39; to the status variable\r\n\r\n"},{"score":0,"body_markdown":"Although an oldie, what forget is that they should wrap their code block and then catch the error and then test...\r\n\r\n    function checkup( t ){\r\n      try{\r\n        for(p in t){\r\n          if( p.hasOwnProperty( t ) ){\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      }catch(e){\r\n        console.log(&quot;ERROR : &quot;+e);\r\n        return e;\r\n      }\r\n    }\r\n\r\nSo you really don&#39;t have to check for a potential problem before hand, you simply catch it and then deal with it how you want."},{"score":2,"body_markdown":"    function isEmpty(val){\r\n        return !val;\r\n    }\r\n\r\nbut this solution is over-engineered, if you dont&#39;want to modify the function later for busines-model needings, then is cleaner to use it directly in code:\r\n\r\n    if(!val)...\r\n\r\n"},{"score":2,"body_markdown":"    var myNewValue = myObject &amp;&amp; myObject.child &amp;&amp; myObject.child.myValue;\r\n\r\nThis will never throw an error. If *myObject*, *child*, or *myValue* is null then *myNewValue* will be null. No errors will be thrown"},{"score":2,"body_markdown":"For everyone coming here for having similar question, the following works great and I have it in my library the last years:\r\n\r\n    (function(g3, $, window, document, undefined){\r\n       g3.utils = g3.utils || {};\r\n    /********************************Function type()********************************\r\n    * Returns a lowercase string representation of an object&#39;s constructor.\r\n    * @module {g3.utils}\r\n    * @function {g3.utils.type}\r\n    * @public\r\n    * @param {Type} &#39;obj&#39; is any type native, host or custom.\r\n    * @return {String} Returns a lowercase string representing the object&#39;s \r\n    * constructor which is different from word &#39;object&#39; if they are not custom.\r\n    * @reference http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\r\n    * http://stackoverflow.com/questions/3215046/differentiating-between-arrays-and-hashes-in-javascript\r\n    * http://javascript.info/tutorial/type-detection\r\n    *******************************************************************************/\r\n    g3.utils.type = function (obj){\r\n       if(obj === null)\r\n          return &#39;null&#39;;\r\n       else if(typeof obj === &#39;undefined&#39;)\r\n          return &#39;undefined&#39;;\r\n       return Object.prototype.toString.call(obj).match(/^\\[object\\s(.*)\\]$/)[1].toLowerCase();\r\n    };\r\n    }(window.g3 = window.g3 || {}, jQuery, window, document));\r\n"},{"score":5,"body_markdown":"It may be usefull.\r\n\r\nAll values in array represent what you want to be (null, undefined or another things) and you search what you want in it.\r\n\r\n    var variablesWhatILookFor = [null, undefined, &#39;&#39;];\r\n    variablesWhatILookFor.indexOf(document.DocumentNumberLabel) &gt; -1"},{"score":-1,"body_markdown":"This function check for `empty object {}`,`empty array []`, `null`, `undefined` and `blank string &quot;&quot;`\r\n\r\n    function isEmpty(val) {\r\n      //check for empty object {}, array []\r\n      if (val !== null &amp;&amp; typeof val === &#39;object&#39;) {\r\n        if (Object.keys(obj).length === 0) {\r\n          return true;\r\n        }\r\n      }\r\n      //check for undefined, null and &quot;&quot; \r\n      else if (val == null || val === &quot;&quot;) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n&gt; var val={};  \r\n isEmpty(val) -&gt;   true  \r\nval=[];    \r\nisEmpty(val) -&gt;   true   \r\nisEmpty(undefined) -&gt; true  \r\n&gt; isEmpty(null) -&gt; true   \r\nisEmpty(&quot;&quot;) -&gt; true   \r\nisEmpty(false) -&gt; false  \r\n&gt; isEmpty(0) -&gt; false  "},{"score":0,"body_markdown":"You can directly use the equality operator\r\n\r\n    &lt;script&gt;\r\n        var firstName;\r\n        var lastName = null;\r\n        /* Since null == undefined is true, the following statements will catch both null and undefined */\r\n            if(firstName == null){\r\n                alert(&#39;Variable &quot;firstName&quot; is undefined.&#39;);\r\n            }    \r\n            if(lastName == null){\r\n               alert(&#39;Variable &quot;lastName&quot; is null.&#39;);\r\n            }\r\n    &lt;/script&gt;\r\n\r\ndemo @ [How to determine if variable is undefined or null using JavaScript][1]\r\n\r\n\r\n  [1]: http://www.jquerypot.com/how-to-determine-if-variable-is-undefined-or-null-using-javascript/"},{"score":3,"body_markdown":"**Try With Different Logic**. You can use bellow code for check all four(4) condition for validation like not null, not blank, not undefined and not zero only use this code (!(!(variable))) in javascript and jquery.\r\n\r\n    function myFunction() {\r\n        var data;  //The Values can be like as null, blank, undefined, zero you can test\r\n    \r\n        if(!(!(data)))\r\n        {\r\n            alert(&quot;data &quot;+data);\r\n        } \r\n        else \r\n        {\r\n            alert(&quot;data is &quot;+data);\r\n        }\r\n    }"},{"score":5,"body_markdown":"    function isEmpty(obj) {\r\n    \tif (typeof obj == &#39;number&#39;) return false;\r\n    \telse if (typeof obj == &#39;string&#39;) return obj.length == 0;\r\n    \telse if (Array.isArray(obj)) return obj.length == 0;\r\n    \telse if (typeof obj == &#39;object&#39;) return obj == null || Object.keys(obj).length == 0;\r\n    \telse if (typeof obj == &#39;boolean&#39;) return false;\r\n    \telse return !obj;\r\n    }\r\n\r\nIn ES6 with trim to handle whitespace strings:\r\n\r\n    const isEmpty = value =&gt; {\r\n        if (typeof value === &#39;number&#39;) return false\r\n        else if (typeof value === &#39;string&#39;) return value.trim().length === 0\r\n        else if (Array.isArray(value)) return value.length === 0\r\n        else if (typeof value === &#39;object&#39;) return value == null || Object.keys(value).length === 0\r\n        else if (typeof value === &#39;boolean&#39;) return false\r\n        else return !value\r\n    }"},{"score":4,"body_markdown":"If you are using **`TypeScript`** and don&#39;t want to account for __&quot;values those are `false`&quot;__ then this is the solution for you:                       \r\n\r\nFirst:   `import { isNullOrUndefined } from &#39;util&#39;;`\r\n\r\nThen:    `isNullOrUndefined(this.yourVariableName)`                  \r\n\r\n\r\nPlease Note: As mentioned [below](https://stackoverflow.com/questions/5515310/is-there-a-standard-function-to-check-for-null-undefined-or-blank-variables-in/51086731?noredirect=1#comment92168451_51086731) this is now deprecated, use `value === undefined || value === null` instead. [ref](https://nodejs.org/api/util.html#util_util_isnullorundefined_object)."},{"score":0,"body_markdown":"    try{\r\n\r\n         let vari = obj.propTest; // obj may be don&#39;t have propTest property\r\n\r\n            ...\r\n    } catch(NullException){\r\n        // do something here\r\n    }\r\nI think using try catch will avoid any error of null check, also in Angular or JavaScript\r\nJust catching null exception and process in it."},{"score":7,"body_markdown":"    return val || &#39;Handle empty variable&#39;\r\n\r\nis a really nice and clean way to handle it in a lot of places, can also be used to assign variables \r\n\r\n    const res = val || &#39;default value&#39;"},{"score":19,"body_markdown":"A solution I like a lot:\r\n\r\nLet&#39;s define that a blank variable is `null`, or `undefined`, or if it has length, it is zero, or if it is an object, it has no keys:\r\n\r\n    function isEmpty (value) {\r\n      return (\r\n        // null or undefined\r\n        (value == null) ||\r\n\r\n        // has length and it&#39;s zero\r\n        (value.hasOwnProperty(&#39;length&#39;) &amp;&amp; value.length === 0) ||\r\n\r\n        // is an Object and has no keys\r\n        (value.constructor === Object &amp;&amp; Object.keys(value).length === 0)\r\n      )\r\n    }\r\n\r\nReturns:\r\n\r\n- **true:** `undefined`, `null`, `&quot;&quot;`, `[]`, `{}`\r\n- **false:** `true`, `false`, `1`, `0`, `-1`, `&quot;foo&quot;`, `[1, 2, 3]`, `{ foo: 1 }`"},{"score":3,"body_markdown":"&lt;h1&gt;Vacuousness&lt;/h1&gt;\r\nI don&#39;t recommend trying to define or use a function which computes whether any value in the whole world is empty. What does it really mean to be &quot;empty&quot;? If I have `let human = { name: &#39;bob&#39;, stomach: &#39;empty&#39; }`, should `isEmpty(human)` return `true`? If I have `let reg = new RegExp(&#39;&#39;);`, should `isEmpty(reg)` return `true`? What about `isEmpty([ null, null, null, null ])` - this list only contains emptiness, so is the list itself empty? I want to put forward here some notes on &quot;vacuousness&quot; (an intentionally obscure word, to avoid pre-existing associations) in javascript - and I want to argue that &quot;vacuousness&quot; in javascript values should never be dealt with generically.\r\n\r\n----------\r\n\r\n&lt;h2&gt;Truthiness/Falsiness&lt;/h2&gt;\r\nFor deciding how to determine the &quot;vacuousness&quot; of values, we need to accomodate javascript&#39;s inbuilt, inherent sense of whether values are &quot;truthy&quot; or &quot;falsy&quot;. Naturally, `null` and `undefined` are both &quot;falsy&quot;. Less naturally, the number `0` (and no other number except `NaN`) is also &quot;falsy&quot;. Least naturally: `&#39;&#39;` is falsy, but `[]` and `{}` (and `new Set()`, and `new Map()`) are truthy - although they all seem equally vacuous!\r\n\r\n----------\r\n\r\n&lt;h2&gt;Null vs Undefined&lt;/h2&gt;\r\nThere is also some discussion concerning `null` vs `undefined` - do we really need both in order to express vacuousness in our programs? I personally avoid ever having the letters u, n, d, e, f, i, n, e, d appear in my code in that order. I always use `null` to signify &quot;vacuousness&quot;. Again, though, we need to accomodate javascript&#39;s inherent sense of how `null` and `undefined` differ:\r\n\r\n - Trying to access a non-existent property gives `undefined`\r\n - Omitting a parameter when calling a function results in that parameter receiving `undefined`:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n    let f = a =&gt; a;\r\n    console.log(f(&#39;hi&#39;));\r\n    console.log(f());\r\n&lt;!-- end snippet --&gt;\r\n\r\n - Parameters with default values receive the default only when given `undefined`, not `null`:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n    let f = (v=&#39;hello&#39;) =&gt; v;\r\n    console.log(f(null));\r\n    console.log(f(undefined));\r\n&lt;!-- end snippet --&gt;\r\n\r\n----------\r\n\r\n&lt;h2&gt;Non-generic Vacuousness&lt;/h2&gt;\r\nI believe that vacuousness should never be dealt with in a generic fashion. We should instead always have the rigour to get more information about our data before determining if it is vacuous - I mainly do this by checking what type of data I&#39;m dealing with:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n    let isType = (value, Cls) =&gt; {\r\n      try {\r\n        return Object.getPrototypeOf(value).constructor === Cls;\r\n      } catch(err) {\r\n        return false;\r\n      }\r\n    };\r\n&lt;!-- end snippet --&gt;\r\n\r\nNote that this function ignores polymorphism - it expects `value` to be a direct instance of `Cls`, and not an instance of a subclass of `Cls`. I avoid `instanceof` for two main reasons:\r\n\r\n - `([] instanceof Object) === true`   (&quot;An Array is an Object&quot;)\r\n - `(&#39;&#39; instanceof String) === false`  (&quot;A String is not a String&quot;)\r\n\r\nNote that `Object.getPrototypeOf` is used to avoid a case like `let v = { constructor: String };` The `isType` function still returns correctly for `isType(v, String)` (false), and `isType(v, Object)` (true).\r\n\r\nOverall, I recommend using this `isType` function along with these tips:\r\n\r\n - **Minimize the amount of code processing values of unknown type.** E.g., for `let v = JSON.parse(someRawValue);`, our `v` variable is now of unknown type. As early as possible, we should limit our possibilities. The best way to do this can be by requiring a particular type: e.g. `if (!isType(v, Array)) throw new Error(&#39;Expected Array&#39;);` - this is a really quick and expressive way to remove the generic nature of `v`, and ensure it&#39;s always an `Array`. Sometimes, though, we need to allow `v` to be of multiple types. In those cases, we should create blocks of code where `v` is no longer generic, as early as possible:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n    if (isType(v, String)) {\r\n      /* v isn&#39;t generic in this block - It&#39;s a String! */\r\n    } else if (isType(v, Number)) {\r\n      /* v isn&#39;t generic in this block - It&#39;s a Number! */\r\n    } else if (isType(v, Array)) {\r\n      /* v isn&#39;t generic in this block - it&#39;s an Array! */\r\n    } else {\r\n      throw new Error(&#39;Expected String, Number, or Array&#39;);\r\n    }\r\n&lt;!-- end snippet --&gt;\r\n\r\n - **Always use &quot;whitelists&quot; for validation.** If you require a value to be, e.g., a String, Number, or Array, check for those 3 &quot;white&quot; possibilities, and throw an Error if none of the 3 are satisfied. We should be able to see that checking for &quot;black&quot; possibilities isn&#39;t very useful: Say we write `if (v === null) throw new Error(&#39;Null value rejected&#39;);` - this is great for ensuring that `null` values don&#39;t make it through, but if a value *does* make it through, we still know hardly anything about it. A value `v` which passes this null-check is still VERY generic - it&#39;s *anything but `null`*! Blacklists hardly dispell generic-ness.\r\n - **Unless a value is `null`, never consider &quot;a vacuous value&quot;. Instead, consider &quot;an X which is vacuous&quot;.** Essentially, never consider doing anything like `if (isEmpty(val)) { /* ... */ }` - no matter how that `isEmpty` function is implemented (I don&#39;t want to know...), it isn&#39;t meaningful! And it&#39;s way too generic! Vacuousness should only be calculated with knowledge of `val`&#39;s type. Vacuousness-checks should look like this:\r\n   - &quot;A string, with no chars&quot;:\r\n     `if (isType(val, String) &amp;&amp; val.length === 0) ...`\r\n   - &quot;An Object, with 0 props&quot;: `if (isType(val, Object) &amp;&amp; Object.entries(val).length === 0) ...`\r\n   - &quot;A number, equal or less than zero&quot;: `if (isType(val, Number) &amp;&amp; val &lt;= 0) ...`\r\n   - &quot;An Array, with no items&quot;: `if (isType(val, Array) &amp;&amp; val.length === 0) ...`\r\n   \r\n   - The only exception is when `null` is used to signify certain functionality. In this case it&#39;s meaningful to say: &quot;A vacuous value&quot;: `if (val === null) ...`\r\n"},{"score":2,"body_markdown":"If you want to avoid getting true if the value is any of the following, according to [jAndy&#39;s answer](https://stackoverflow.com/a/5515349/1934402):\r\n\r\n- null\r\n- undefined\r\n- NaN\r\n- empty string (&quot;&quot;)\r\n- 0\r\n- false\r\n\r\nOne possible solution that might avoid getting truthy values is the following:\r\n\r\n    function isUsable(valueToCheck) {\r\n        if (valueToCheck === 0     || // Avoid returning false if the value is 0.\r\n            valueToCheck === &#39;&#39;    || // Avoid returning false if the value is an empty string.\r\n            valueToCheck === false || // Avoid returning false if the value is false.\r\n            valueToCheck)             // Returns true if it isn&#39;t null, undefined, or NaN.\r\n        {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\nIt would be used as follows:\r\n\r\n    if (isUsable(x)) {\r\n        // It is usable!\r\n    }\r\n    // Make sure to avoid placing the logical NOT operator before the parameter (isUsable(!x)) and instead, use it before the function, to check the returned value.\r\n    if (!isUsable(x)) {\r\n        // It is NOT usable!\r\n    }\r\n\r\n***\r\n\r\nIn addition to those scenarios, you may want to return false if the **object** or **array** is empty:\r\n\r\n- Object: {} (Using [ECMA 7+](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries#Browser_compatibility))\r\n- Array: [] (Using [ECMA 5+](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray#Browser_compatibility))\r\n\r\nYou would go about it this way:\r\n\r\n    function isEmptyObject(valueToCheck) {\r\n        if(typeof valueToCheck === &#39;object&#39; &amp;&amp; !Object.keys(valueToCheck).length){\r\n            // Object is empty!\r\n            return true;\r\n        } else {\r\n            // Object is not empty!\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function isEmptyArray(valueToCheck) {\r\n        if(Array.isArray(valueToCheck) &amp;&amp; !valueToCheck.length) {\r\n            // Array is empty!\r\n            return true;\r\n        } else {\r\n            // Array is not empty!\r\n            return false;\r\n        }\r\n    }\r\n\r\nIf you wish to check for all whitespace strings (&quot; &quot;), you may do the following:\r\n\r\n    function isAllWhitespace(){\r\n        if (valueToCheck.match(/^ *$/) !== null) {\r\n            // Is all whitespaces!\r\n            return true;\r\n        } else {\r\n            // Is not all whitespaces!\r\n            return false;\r\n        }\r\n    }\r\n\r\n***\r\n\r\nNote: `hasOwnProperty` returns true for empty strings, 0, false, NaN, null, and undefined, if the variable was declared as any of them, so it might not be the best to use. The function may be modified to use it to show that it was declared, but is not usable."},{"score":0,"body_markdown":"This covers empty Array and empty Object also\r\n\r\n&gt; null, undefined, &#39; &#39;, 0, [ ], { }\r\n\r\n    isEmpty = (value) =&gt; (!value  || (typeof v === &#39;object&#39; &amp;&amp;\r\n       Object.keys(value).length &lt; 1));"},{"score":9,"body_markdown":"&gt;Take a look at the new ECMAScript [Nullish coalescing operator][1]\r\n\r\nYou can think of this feature - the &lt;code&gt;??&lt;/code&gt; operator - as a way to “fall back” to a default value when dealing with &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let x = foo ?? bar();\r\n&lt;!-- end snippet --&gt;\r\n\r\nAgain, the above code is equivalent to the following.\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let x = (foo !== null &amp;&amp; foo !== undefined) ? foo : bar();\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"},{"score":2,"body_markdown":"[Code on GitHub](https://github.com/ppo/gist/tree/master/javascript/is-utils)\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n```\r\nconst isEmpty = value =&gt; (\r\n  (!value &amp;&amp; value !== 0 &amp;&amp; value !== false)\r\n  || (Array.isArray(value) &amp;&amp; value.length === 0)\r\n  || (isObject(value) &amp;&amp; Object.keys(value).length === 0)\r\n  || (typeof value.size === &#39;number&#39; &amp;&amp; value.size === 0)\r\n\r\n  // `WeekMap.length` is supposed to exist!?\r\n  || (typeof value.length === &#39;number&#39;\r\n      &amp;&amp; typeof value !== &#39;function&#39; &amp;&amp; value.length === 0)\r\n);\r\n\r\n// Source: https://levelup.gitconnected.com/javascript-check-if-a-variable-is-an-object-and-nothing-else-not-an-array-a-set-etc-a3987ea08fd7\r\nconst isObject = value =&gt;\r\n  Object.prototype.toString.call(value) === &#39;[object Object]&#39;;\r\n```\r\n\r\n**Poor man&#39;s tests &#128513;**\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n```\r\nconst test = () =&gt; {\r\n  const run = (label, values, expected) =&gt; {\r\n    const length = values.length;\r\n    console.group(`${label} (${length} tests)`);\r\n    values.map((v, i) =&gt; {\r\n      console.assert(isEmpty(v) === expected, `${i}: ${v}`);\r\n    });\r\n    console.groupEnd();\r\n  };\r\n\r\n  const empty = [\r\n    null, undefined, NaN, &#39;&#39;, {}, [],\r\n    new Set(), new Set([]), new Map(), new Map([]),\r\n  ];\r\n  const notEmpty = [\r\n    &#39; &#39;, &#39;a&#39;, 0, 1, -1, false, true, {a: 1}, [0],\r\n    new Set([0]), new Map([[&#39;a&#39;, 1]]),\r\n    new WeakMap().set({}, 1),\r\n    new Date(), /a/, new RegExp(), () =&gt; {},\r\n  ];\r\n  const shouldBeEmpty = [\r\n    {undefined: undefined}, new Map([[]]),\r\n  ];\r\n\r\n  run(&#39;EMPTY&#39;, empty, true);\r\n  run(&#39;NOT EMPTY&#39;, notEmpty, false);\r\n  run(&#39;SHOULD BE EMPTY&#39;, shouldBeEmpty, true);\r\n};\r\n```\r\n\r\n**Test results:**\r\n\r\n```\r\nEMPTY (10 tests)\r\nNOT EMPTY (16 tests)\r\nSHOULD BE EMPTY (2 tests)\r\n  Assertion failed: 0: [object Object]\r\n  Assertion failed: 1: [object Map]\r\n```"},{"score":0,"body_markdown":"Below worked for me. Please do a slight change to make this fast\r\n```js\r\nfunction isEmpty(obj) {\r\n    if (!obj) return true;\r\n    if (typeof obj == &#39;number&#39;) return false;\r\n    else if (typeof obj == &#39;string&#39;) return obj.length == 0;\r\n    else if (Array.isArray(obj)) return obj.length == 0;\r\n    else if (typeof obj == &#39;object&#39;) return obj == null || Object.keys(obj).length == 0;\r\n    else if (typeof obj == &#39;boolean&#39;) return false;\r\n}\r\n```"},{"score":0,"body_markdown":"Most of the existing answers failed for my use case, most returned empty if a function was assigned to the variable or if NaN was returned. Pascal&#39;s answer was good.\r\n\r\nHere&#39;s my implementation, please test and let me know if you find anything. You can see how I tested this function [here][1].\r\n\r\n```\r\nfunction isEmpty(value) {\r\n  return (\r\n    // Null or undefined.\r\n    (value == null) ||\r\n    // Check if a Set() or Map() is empty\r\n    (value.size === 0) ||\r\n    // NaN - The only JavaScript value that is unequal to itself.\r\n    (value !== value) ||\r\n    // Length is zero &amp;&amp; it&#39;s not a function.\r\n    (value.length === 0 &amp;&amp; typeof value !== &quot;function&quot;) ||\r\n    // Is an Object &amp;&amp; has no keys.\r\n    (value.constructor === Object &amp;&amp; Object.keys(value).length === 0)\r\n  )\r\n}\r\n```\r\nReturns:\r\n\r\n- **true:** `undefined`, `null`, `&quot;&quot;`, `[]`, `{}`, `NaN`, `new Set()`, `//`\r\n- **false:** `true`, `false`, `1`, `0`, `-1`, `&quot;foo&quot;`, `[1, 2, 3]`, `{ foo: 1 }`, `function () {}`\r\n\r\n\r\n\r\n  [1]: https://gist.github.com/SeanBannister/e80882d89f104a0b46020e310640ca4f"},{"score":1,"body_markdown":"The optional chaining operator provides a way to simplify accessing values through connected objects when it&#39;s possible that a reference or function may be undefined or null.\r\n\r\n    let customer = {\r\n      name: &quot;Carl&quot;,\r\n      details: {\r\n        age: 82,\r\n        location: &quot;Paradise Falls&quot; // detailed address is unknown\r\n      }\r\n    };\r\n    let customerCity = customer.details?.address?.city;\r\n    \r\nThe nullish coalescing operator may be used after optional chaining in order to build a default value when none was found:\r\n\r\n    let customer = {\r\n      name: &quot;Carl&quot;,\r\n      details: { age: 82 }\r\n    };\r\n    const customerCity = customer?.city ?? &quot;Unknown city&quot;;\r\n    console.log(customerCity); // Unknown city"},{"score":4,"body_markdown":"The probably shortest answer is\r\n\r\n    val==null || val==&#39;&#39;\r\n\r\nif you change rigth side to `val===&#39;&#39;` then empty array will give false. Proof \r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function isEmpty(val){\r\n        return val==null || val==&#39;&#39;\r\n    }\r\n\r\n    // ------------\r\n    // TEST\r\n    // ------------\r\n\r\n    var log = (name,val) =&gt; console.log(`${name} -&gt; ${isEmpty(val)}`);\r\n\r\n    log(&#39;null&#39;, null);\r\n    log(&#39;undefined&#39;, undefined);\r\n    log(&#39;NaN&#39;, NaN);\r\n    log(&#39;&quot;&quot;&#39;, &quot;&quot;);\r\n    log(&#39;{}&#39;, {});\r\n    log(&#39;[]&#39;, []);\r\n    log(&#39;[1]&#39;, [1]);\r\n    log(&#39;[0]&#39;, [0]);\r\n    log(&#39;[[]]&#39;, [[]]);\r\n    log(&#39;true&#39;, true);\r\n    log(&#39;false&#39;, false);\r\n    log(&#39;&quot;true&quot;&#39;, &quot;true&quot;);\r\n    log(&#39;&quot;false&quot;&#39;, &quot;false&quot;);\r\n    log(&#39;Infinity&#39;, Infinity);\r\n    log(&#39;-Infinity&#39;, -Infinity);\r\n    log(&#39;1&#39;, 1);\r\n    log(&#39;0&#39;, 0);\r\n    log(&#39;-1&#39;, -1);\r\n    log(&#39;&quot;1&quot;&#39;, &quot;1&quot;);\r\n    log(&#39;&quot;0&quot;&#39;, &quot;0&quot;);\r\n    log(&#39;&quot;-1&quot;&#39;, &quot;-1&quot;);\r\n\r\n    // &quot;void 0&quot; case\r\n    console.log(&#39;---\\n&quot;true&quot; is:&#39;, true);\r\n    console.log(&#39;&quot;void 0&quot; is:&#39;, void 0);\r\n    log(void 0,void 0); // &quot;void 0&quot; is &quot;undefined&quot; - so we should get here TRUE\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nMore details about `==` (source [here][1])\r\n\r\n[![Enter image description here][2]][2]\r\n\r\n**BONUS**: Reason why `===` is more clear than `==` \r\n\r\n[![Enter image description here][3]][3]\r\n\r\nTo write clear and  easy \r\nunderstandable  code, use explicite list of accepted values\r\n\r\n    val===undefined || val===null || val===&#39;&#39;|| (Array.isArray(val) &amp;&amp; val.length===0)\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function isEmpty(val){\r\n        return val===undefined || val===null || val===&#39;&#39; || (Array.isArray(val) &amp;&amp; val.length===0)\r\n    }\r\n\r\n    // ------------\r\n    // TEST\r\n    // ------------\r\n\r\n    var log = (name,val) =&gt; console.log(`${name} -&gt; ${isEmpty(val)}`);\r\n\r\n    log(&#39;null&#39;, null);\r\n    log(&#39;undefined&#39;, undefined);\r\n    log(&#39;NaN&#39;, NaN);\r\n    log(&#39;&quot;&quot;&#39;, &quot;&quot;);\r\n    log(&#39;{}&#39;, {});\r\n    log(&#39;[]&#39;, []);\r\n    log(&#39;[1]&#39;, [1]);\r\n    log(&#39;[0]&#39;, [0]);\r\n    log(&#39;[[]]&#39;, [[]]);\r\n    log(&#39;true&#39;, true);\r\n    log(&#39;false&#39;, false);\r\n    log(&#39;&quot;true&quot;&#39;, &quot;true&quot;);\r\n    log(&#39;&quot;false&quot;&#39;, &quot;false&quot;);\r\n    log(&#39;Infinity&#39;, Infinity);\r\n    log(&#39;-Infinity&#39;, -Infinity);\r\n    log(&#39;1&#39;, 1);\r\n    log(&#39;0&#39;, 0);\r\n    log(&#39;-1&#39;, -1);\r\n    log(&#39;&quot;1&quot;&#39;, &quot;1&quot;);\r\n    log(&#39;&quot;0&quot;&#39;, &quot;0&quot;);\r\n    log(&#39;&quot;-1&quot;&#39;, &quot;-1&quot;);\r\n\r\n    // &quot;void 0&quot; case\r\n    console.log(&#39;---\\n&quot;true&quot; is:&#39;, true);\r\n    console.log(&#39;&quot;void 0&quot; is:&#39;, void 0);\r\n    log(void 0,void 0); // &quot;void 0&quot; is &quot;undefined&quot; - so we should get here TRUE\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: https://dorey.github.io/JavaScript-Equality-Table/\r\n  [2]: https://i.stack.imgur.com/nkpj6.png\r\n  [3]: https://i.stack.imgur.com/7MeG6.png"},{"score":-4,"body_markdown":"you can always use loadash functions ,like _.nil or _.undefined .They are pretty good to use."},{"score":2,"body_markdown":"    function notEmpty(value){\r\n      return (typeof value !== &#39;undefined&#39; &amp;&amp; value.trim().length);\r\n    }\r\n\r\nit will also check white spaces (&#39;    &#39;) along with following:\r\n\r\n - null ,undefined ,NaN ,empty ,string (&quot;&quot;) ,0 ,false"},{"score":1,"body_markdown":"Try [Boolean()][1] and [isNaN()][2] (for number type) to check a variable has a value or not.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function isEmpty(val) {\r\n      return typeof val === &#39;number&#39; ? isNaN(val) : !Boolean(val);\r\n    }\r\n\r\n    var emptyVals = [undefined, null, false, NaN, &#39;&#39;];\r\n    emptyVals.forEach(v =&gt; console.log(isEmpty(v)));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN"},{"score":0,"body_markdown":"1) you can use the arguments\r\n2) become arguments to array\r\n3) filter \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function validateAttrs(arg1, arg2, arg3,arg4){\r\n        var args = Object.values(arguments);\r\n        return (args.filter(x=&gt; x===null || !x)).length&lt;=0\r\n    }\r\n    console.log(validateAttrs(&#39;1&#39;,2, 3, 4));\r\n    console.log(validateAttrs(&#39;1&#39;,2, 3, null));\r\n    console.log(validateAttrs(&#39;1&#39;,undefined, 3, 4));\r\n    console.log(validateAttrs(&#39;1&#39;,2, &#39;&#39;, 4));\r\n    console.log(validateAttrs(&#39;1&#39;,2, 3, null));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}],"score":2425}