{"body":"Can I convert a string representing a boolean value (e.g., &#39;true&#39;, &#39;false&#39;) into a intrinsic type in JavaScript?\r\n\r\nI have a hidden form in HTML that is updated based upon a user&#39;s selection within a list. This form contains some fields which represent boolean values and are dynamically populated with an intrinsic boolean value. However, once this value is placed into the hidden input field it becomes a string.\r\n\r\nThe only way I could find to determine the field&#39;s boolean value, once it was converted into a string, was to depend upon the literal value of its string representation.\r\n\r\n    var myValue = document.myForm.IS_TRUE.value;\r\n    var isTrueSet = myValue == &#39;true&#39;;\r\n\r\nIs there a better way to accomplish this?","title":"How can I convert a string to boolean in JavaScript?","answers":[{"score":-42,"body_markdown":"     var myBool = Boolean.parse(&quot;true&quot;);\r\nor\r\n\r\n    var myBool = Boolean(&quot;true&quot;);\r\n\r\nor \r\n\r\n    var myBool = !!&quot;true&quot;;\r\n\r\nNot sure if the first one is IE specific."},{"score":3759,"body_markdown":"Do:\r\n===\r\n\r\n    var isTrueSet = (myValue == &#39;true&#39;);\r\n\r\nYou could make it stricter by using the identity operator (`===`), which doesn&#39;t make any implicit type conversions when the compared variables have different types, instead of the equality operator (`==`).\r\n\r\n    var isTrueSet = (myValue === &#39;true&#39;);\r\n\r\n---\r\n\r\nDon&#39;t:\r\n---\r\n\r\nYou should probably **be cautious about using these two methods** for your specific needs:\r\n\r\n    var myBool = Boolean(&quot;false&quot;);  // == true\r\n\r\n    var myBool = !!&quot;false&quot;;  // == true\r\n\r\nAny string which isn&#39;t the empty string will evaluate to `true` by using them. Although they&#39;re the cleanest methods I can think of concerning to boolean conversion, I think they&#39;re not what you&#39;re looking for.\r\n"},{"score":136,"body_markdown":"Remember to match case:\r\n\r\n    var isTrueSet = (myValue.toLowerCase() === &#39;true&#39;);\r\n\r\nAlso, if it&#39;s a form element checkbox, you can also detect if the checkbox is checked:\r\n\r\n    var isTrueSet = document.myForm.IS_TRUE.checked;\r\n\r\nAssuming that if it is checked, it is &quot;set&quot; equal to true. This evaluates as true/false."},{"score":33,"body_markdown":"Your solution is fine.\r\n\r\nUsing `===` would just be silly in this case, as the field&#39;s `value` will always be a `String`."},{"score":8,"body_markdown":"You need to separate (in your thinking) the value of your selections and the representation of that value. \r\n\r\nPick a point in the JavaScript logic where they need to transition from string sentinels to native type and do a comparison there, preferably where it only gets done once for each value that needs to be converted. Remember to address what needs to happen if the string sentinel is not one the script knows (i.e. do you default to true or to false?)\r\n\r\nIn other words, yes, you need to depend on the string&#39;s value. :-)\r\n"},{"score":2,"body_markdown":"If there&#39;s some other code that&#39;s converting the boolean value to a string, you need to know exactly how that code stores true/false values. Either that or you need to have access to a function that reverses that conversion.\r\n\r\nThere are infinitely many ways to represent boolean values in strings (&quot;true&quot;, &quot;Y&quot;, &quot;1&quot;, etc.). So you shouldn&#39;t rely on some general-purpose string-to-boolean converter, like Boolean(myValue). You need to use a routine that reverses the original boolean-to-string conversion, whatever that is.\r\n\r\nIf you know that it converts true booleans to &quot;true&quot; strings, then your sample code is fine. Except that you should use === instead of ==, so there&#39;s no automatic type conversion."},{"score":120,"body_markdown":"You can use regular expressions:\r\n\r\n    /*\r\n     * Converts a string to a bool.\r\n     *\r\n     * This conversion will:\r\n     *\r\n     *  - match &#39;true&#39;, &#39;on&#39;, or &#39;1&#39; as true.\r\n     *  - ignore all white-space padding\r\n     *  - ignore capitalization (case).\r\n     *\r\n     * &#39;  tRue  &#39;,&#39;ON&#39;, and &#39;1   &#39; will all evaluate as true.\r\n     *\r\n     */\r\n    function strToBool(s)\r\n    {\r\n        // will match one and only one of the string &#39;true&#39;,&#39;1&#39;, or &#39;on&#39; rerardless\r\n        // of capitalization and regardless off surrounding white-space.\r\n        //\r\n        regex=/^\\s*(true|1|on)\\s*$/i\r\n    \r\n        return regex.test(s);\r\n    }\r\n\r\nIf you like extending the String class you can do:\r\n\r\n    String.prototype.bool = function() {\r\n        return strToBool(this);\r\n    };\r\n\r\n    alert(&quot;true&quot;.bool());\r\n\r\nFor those (see the comments) that would like to extend the String object to get this but are worried about enumerability and are worried about clashing with other code that extends the String object:\r\n\r\n    Object.defineProperty(String.prototype, &quot;com_example_bool&quot;, {\r\n        get : function() {\r\n            return (/^(true|1)$/i).test(this);\r\n        }\r\n    });\r\n    alert(&quot;true&quot;.com_example_bool);\r\n\r\n(Won&#39;t work in older browsers of course and Firefox shows false while Opera, Chrome, Safari and IE show true. [Bug 720760](https://bugzilla.mozilla.org/show_bug.cgi?id=720760))    \r\n"},{"score":195,"body_markdown":"I think this is much universal:\r\n\r\n`if (String(a).toLowerCase() == &quot;true&quot;)` ...\r\n\r\nIt goes:\r\n\r\n    String(true) == &quot;true&quot;     //returns true\r\n    String(false) == &quot;true&quot;    //returns false\r\n    String(&quot;true&quot;) == &quot;true&quot;   //returns true\r\n    String(&quot;false&quot;) == &quot;true&quot;  //returns false\r\n"},{"score":2,"body_markdown":"\r\n    if (String(a) == &quot;true&quot;){\r\n      //true block\r\n    } else {\r\n      //false block\r\n    }"},{"score":241,"body_markdown":"\tstringToBoolean: function(string){\r\n\t\tswitch(string.toLowerCase().trim()){\r\n\t\t\tcase &quot;true&quot;: case &quot;yes&quot;: case &quot;1&quot;: return true;\r\n\t\t\tcase &quot;false&quot;: case &quot;no&quot;: case &quot;0&quot;: case null: return false;\r\n\t\t\tdefault: return Boolean(string);\r\n\t\t}\r\n\t}"},{"score":-23,"body_markdown":"Just do a:\r\n\r\n    var myBool = eval (yourString);\r\n\r\nExamples:\r\n\r\n    alert (eval (&quot;true&quot;) == true); // TRUE\r\n    alert (eval (&quot;true&quot;) == false); // FALSE\r\n    alert (eval (&quot;1&quot;) == true); // TRUE\r\n    alert (eval (&quot;1&quot;) == false); // FALSE\r\n    alert (eval (&quot;false&quot;) == true); // FALSE;\r\n    alert (eval (&quot;false&quot;) == false); // TRUE\r\n    alert (eval (&quot;0&quot;) == true); // FALSE\r\n    alert (eval (&quot;0&quot;) == false); // TRUE\r\n    alert (eval (&quot;&quot;) == undefined); // TRUE\r\n    alert (eval () == undefined); // TRUE\r\n\r\nThis method handles the empty string and undefined string naturally as if you declare a variable without assigning it a value."},{"score":13,"body_markdown":"    Boolean.parse = function (str) {\r\n      switch (str.toLowerCase ()) {\r\n        case &quot;true&quot;:\r\n          return true;\r\n        case &quot;false&quot;:\r\n          return false;\r\n        default:\r\n          throw new Error (&quot;Boolean.parse: Cannot convert string to boolean.&quot;);\r\n      }\r\n    };"},{"score":1,"body_markdown":"The following would be enough\r\n\r\n    String.prototype.boolean = function() {\r\n        return &quot;true&quot; == this; \r\n    };\r\n    \r\n    &quot;true&quot;.boolean() // returns true &quot;false&quot;.boolean() // returns false"},{"score":21,"body_markdown":"The Boolean object doesn&#39;t have a &#39;parse&#39; method. `Boolean(&#39;false&#39;)` returns true, so that won&#39;t work. `!!&#39;false&#39;` also returns `true`, so that won&#39;t work also.\r\n\r\nIf you want string `&#39;true&#39;` to return boolean `true` and string `&#39;false&#39;` to return boolean `false`, then the simplest solution is to use `eval()`. `eval(&#39;true&#39;)` returns true and `eval(&#39;false&#39;)` returns false. Keep in mind the performance implications when using `eval()` though."},{"score":8,"body_markdown":"Hands down the easiest way (assuming you string will be &#39;true&#39; or &#39;false&#39;) is:\r\n\r\n    var z = &#39;true&#39;;\r\n    var y = &#39;false&#39;;\r\n    var b = (z === &#39;true&#39;); // will evaluate to true\r\n    var c = (y === &#39;true&#39;); // will evaluate to false\r\n\r\n***Always*** use the === operator instead of the == operator for these types of conversions!"},{"score":1,"body_markdown":"    function returnBoolean(str){\r\n    \t\r\n    \tstr=str.toString().toLowerCase();\r\n    \r\n    \tif(str==&#39;true&#39; || str==&#39;1&#39; || str==&#39;yes&#39; || str==&#39;y&#39; || str==&#39;on&#39; || str==&#39;+&#39;){\r\n    \t\treturn(true);\r\n    \t}\r\n    \telse if(str==&#39;false&#39; || str==&#39;0&#39; || str==&#39;no&#39; || str==&#39;n&#39; || str==&#39;off&#39; || str==&#39;-&#39;){\r\n    \t\treturn(false);\r\n    \t}else{\r\n    \t\treturn(undefined);\r\n    \t}\r\n    }\r\n\r\n"},{"score":722,"body_markdown":"# Warning\r\n\r\nThis highly upvoted legacy answer is technically correct but only covers a very specific scenario, when your string value is EXACTLY `&quot;true&quot;` or `&quot;false&quot;`.\r\n\r\nAn invalid json string passed into these functions below **WILL throw an exception**.\r\n\r\n-----\r\n\r\n**Original answer:**\r\n\r\nHow about?\r\n\r\n    JSON.parse(&quot;True&quot;.toLowerCase());\r\n\r\nor with jQuery\r\n\r\n    $.parseJSON(&quot;TRUE&quot;.toLowerCase());"},{"score":4,"body_markdown":"I&#39;ve found that using &#39;1&#39; and an empty value &#39;&#39; for boolean values works far more predictably than &#39;true&#39; or &#39;false&#39; string values... specifically with html forms since uninitialized/empty values in Dom elements will consistently evaluate to false whereas *any* value within them evaluates to true. \r\n\r\nFor instance:\r\n\r\n    &lt;input type=&#39;button&#39; onclick=&#39;this.value = tog(this.value);&#39; /&gt;\r\n\r\n\t&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n        function tog(off) {\r\n\t\t\tif(off) {\r\n\t\t\t\talert(&#39;true, toggle to false&#39;);\r\n\t\t\t\treturn &#39;&#39;;\r\n\t\t\t} else {\r\n\t\t\t\talert(&#39;false, toggle to true&#39;);\r\n    \t\t\treturn &#39;1&#39;;\r\n\t\t\t}\r\n        }\t\r\n    &lt;/script&gt;\r\n\r\nJust seemed like an easier road, so far it&#39;s been very consistent/easy... perhaps someone can determine a way to break this?\r\n"},{"score":8,"body_markdown":"Like @Shadow2531 said, you can&#39;t just convert it directly. I&#39;d also suggest that you consider string inputs besides &quot;true&quot; and &quot;false&quot; that are &#39;truthy&#39; and &#39;falsey&#39; if your code is going to be reused/used by others. This is what I use:\r\n\r\n    function parseBoolean(string) {\r\n      switch (String(string).toLowerCase()) {\r\n        case &quot;true&quot;:\r\n        case &quot;1&quot;:\r\n        case &quot;yes&quot;:\r\n        case &quot;y&quot;:\r\n          return true;\r\n        case &quot;false&quot;:\r\n        case &quot;0&quot;:\r\n        case &quot;no&quot;:\r\n        case &quot;n&quot;:\r\n          return false;\r\n        default:\r\n          //you could throw an error, but &#39;undefined&#39; seems a more logical reply\r\n          return undefined;\r\n      }\r\n    }"},{"score":4,"body_markdown":"@guinaps&gt; Any string which isn&#39;t the empty string will evaluate to true by using them.\r\n\r\nHow about using the String.match() method\r\n\r\n    var str=&quot;true&quot;;\r\n    var boolStr=Boolean(str.match(/^true$/i)); \r\n\r\nthis alone won&#39;t get the 1/0 or the yes/no, but it will catch the TRUE/true, as well, it will return false for any string that happens to have  &quot;true&quot; as a substring.\r\n\r\n**EDIT**\r\n\r\nBelow is a function to handle true/false, 1/0, yes/no (case-insensitive)\r\n\r\n    ​function stringToBool(str) {\r\n        var bool;\r\n        if (str.match(/^(true|1|yes)$/i) !== null) {\r\n            bool = true;\r\n        } else if (str.match(/^(false|0|no)*$/i) !== null) {\r\n            bool = false;\r\n        } else {\r\n            bool = null;\r\n            if (console) console.log(&#39;&quot;&#39; + str + &#39;&quot; is not a boolean value&#39;);\r\n        }\r\n        return bool;\r\n    }\r\n    \r\n    stringToBool(&#39;1&#39;); // true\r\n    stringToBool(&#39;No&#39;); // false\r\n    stringToBool(&#39;falsey&#39;); // null (&quot;falsey&quot; is not a boolean value.)\r\n    stringToBool(&#39;&#39;); // false"},{"score":1,"body_markdown":"`Boolean.parse()` does exist in some browser implementations.  It&#39;s definitely not universal, so if that&#39;s something that you need than you shouldn&#39;t use this method.  But in Chrome, for example (I&#39;m using v21) it works just fine and as one would expect.  "},{"score":1,"body_markdown":"I&#39;ve been using this snippet to convert Numbers and Booleans:\r\n\r\n    var result = !isNaN(value) ? parseFloat(value) : /^\\s*(true|false)\\s*$/i.exec(value) ? RegExp.$1.toLowerCase() === &quot;true&quot; : value;"},{"score":13,"body_markdown":"The expression you&#39;re looking for simply is\r\n\r\n    /^true$/i.test(myValue)\r\n\r\nas in\r\n\r\n    var isTrueSet = /^true$/i.test(myValue);\r\n\r\nThis tests `myValue` against a regular expression , case-insensitive, and doesn&#39;t modify the prototype.\r\n\r\nExamples:\r\n\r\n    /^true$/i.test(&quot;true&quot;); // true\r\n    /^true$/i.test(&quot;TRUE&quot;); // true\r\n    /^true$/i.test(&quot;tRuE&quot;); // true\r\n    /^true$/i.test(&quot; tRuE&quot;); // false (notice the space at the beginning)\r\n    /^true$/i.test(&quot;untrue&quot;); // false (some other solutions here will incorrectly return true\r\n    /^true$/i.test(&quot;false&quot;);// returns false\r\n    /^true$/i.test(&quot;xyz&quot;);  // returns false\r\n\r\n"},{"score":7,"body_markdown":"My take on this question is that it aims to satisfy three objectives:\r\n\r\n- Return true/false for truthy and falsey values, but also return true/false for multiple string values that would be truthy or falsey if they were Booleans instead of strings.\r\n- Second, provide a resilient interface so that values other than those specified will not fail, but rather return a default value\r\n- Third, do all this with as little code as possible.\r\n\r\nThe problem with using JSON is that it fails by causing a Javascript error. This solution is not resilient (though it satisfies 1 and 3):\r\n\r\n    JSON.parse(&quot;FALSE&quot;) // fails\r\n\r\nThis solution is not concise enough:\r\n\r\n    if(value === &quot;TRUE&quot; || value === &quot;yes&quot; || ...) { return true; }\r\n\r\nI am working on solving this exact problem for [Typecast.js](http://typecastjs.org). And the best solution to all three objectives is this one:\r\n\r\n    return /^true$/i.test(v);\r\n\r\nIt works for many cases, does not fail when values like {} are passed in, and is very concise. Also it returns false as the default value rather than undefined or throwing an Error, which is more useful in loosely-typed Javascript development. Bravo to the other answers that suggested it!"},{"score":1,"body_markdown":"Building on Steven&#39;s answer above, I wrote this function as a generic parser for string input:\r\n\r\n    parse:\r\n      function (value) {\r\n        switch (value &amp;&amp; value.toLowerCase()) {\r\n          case null: return null;\r\n          case &quot;true&quot;: return true;\r\n          case &quot;false&quot;: return false;\r\n          default: try { return parseFloat(value); } catch (e) { return value; }\r\n        }\r\n      }\r\n"},{"score":1,"body_markdown":"You even do not need to convert the string to boolean. just use the following:\r\n`var yourstring = yourstringValue  == 1 ? true : false;`"},{"score":2,"body_markdown":"i wrote a helper function that handles your cases (and some more). Feel free to alter it to your specific needs\r\n\r\n    /**\r\n     * @example\r\n     * &lt;code&gt;\r\n     * var pageRequestParams = {&#39;enableFeatureX&#39;: &#39;true&#39;};\r\n     * toBool(pageRequestParams.enableFeatureX);  // returns true\r\n     *\r\n     * toBool(pageRequestParams.enableFeatureY, true, options.enableFeatureY)\r\n     * &lt;/code&gt;\r\n     * @param {*}value\r\n     * @param {Boolean}[mapEmptyStringToTrue=false]\r\n     * @param {Boolean}[defaultVal=false] this is returned if value is undefined.\r\n     *\r\n     * @returns {Boolean}\r\n     * @example\r\n     * &lt;code&gt;\r\n     * toBool({&#39;enableFeatureX&#39;: &#39;&#39;        }.enableFeatureX);          // false\r\n     * toBool({&#39;enableFeatureX&#39;: &#39;&#39;        }.enableFeatureX, true);    // true\r\n     * toBool({                            }.enableFeatureX, true);    // false\r\n     * toBool({&#39;enableFeatureX&#39;: 0         }.enableFeatureX);          // false\r\n     * toBool({&#39;enableFeatureX&#39;: &#39;0&#39;       }.enableFeatureX);          // false\r\n     * toBool({&#39;enableFeatureX&#39;: &#39;0 &#39;      }.enableFeatureX);          // false\r\n     * toBool({&#39;enableFeatureX&#39;: &#39;false&#39;   }.enableFeatureX);          // false\r\n     * toBool({&#39;enableFeatureX&#39;: &#39;falsE &#39;  }.enableFeatureX);          // false\r\n     * toBool({&#39;enableFeatureX&#39;: &#39;no&#39;      }.enableFeatureX);          // false\r\n     *\r\n     * toBool({&#39;enableFeatureX&#39;: 1         }.enableFeatureX);          // true\r\n     * toBool({&#39;enableFeatureX&#39;: &#39;-2&#39;      }.enableFeatureX);          // true\r\n     * toBool({&#39;enableFeatureX&#39;: &#39;true&#39;    }.enableFeatureX);          // true\r\n     * toBool({&#39;enableFeatureX&#39;: &#39;false_&#39;  }.enableFeatureX);          // true\r\n     * toBool({&#39;enableFeatureX&#39;: &#39;john doe&#39;}.enableFeatureX);          // true\r\n     * &lt;/code&gt;\r\n     *\r\n     */\r\n    var toBool = function (value, mapEmptyStringToTrue, defaultVal) {\r\n        if (value === undefined) {return Boolean(defaultVal); }\r\n        mapEmptyStringToTrue = mapEmptyStringToTrue !== undefined ? mapEmptyStringToTrue : false; // default to false\r\n        var strFalseValues = [&#39;0&#39;, &#39;false&#39;, &#39;no&#39;].concat(!mapEmptyStringToTrue ? [&#39;&#39;] : []);\r\n        if (typeof value === &#39;string&#39;) {\r\n            return (strFalseValues.indexOf(value.toLowerCase().trim()) === -1);\r\n        }\r\n        // value is likely null, boolean, or number\r\n        return Boolean(value);\r\n    };\r\n"},{"score":1,"body_markdown":"        MyLib.Convert.bool = function(param) {\r\n             var res = String(param).toLowerCase();\r\n             return !(!Boolean(res) || res === &quot;false&quot; || res === &quot;0&quot;);\r\n         }; "},{"score":2,"body_markdown":"Here is my 1 liner submission: I needed to evaluate a string and output, true if &#39;true&#39;, false if &#39;false&#39; and a number if anything like &#39;-12.35673&#39;.\r\n\r\n    val = &#39;false&#39;;\r\n\r\n    val = /^false$/i.test(val) ? false : ( /^true$/i.test(val) ? true : val*1 ? val*1 : val );\r\n"},{"score":16,"body_markdown":"I use the following:\r\n\r\n    function parseBool(b) {\r\n    \treturn !(/^(false|0)$/i).test(b) &amp;&amp; !!b;\r\n    }\r\n\r\nThis function performs the usual Boolean coercion with the exception of the strings &quot;false&quot; (case insensitive) and &quot;0&quot;."},{"score":7,"body_markdown":"I&#39;m a little late, but I have a little snippet to do this, it essentially maintains all of JScripts truthey/falsey/*filthy*-ness but includes `&quot;false&quot;` as an acceptible value for false.\r\n\r\nI prefer this method to the ones mentioned because it doesn&#39;t rely on a 3rd party to parse the code (i.e: eval/JSON.parse), which is overkill in my mind, it&#39;s short enough to not require a utility function and maintains other truthey/falsey conventions.\r\n\r\n    var value = &quot;false&quot;;\r\n    var result = (value == &quot;false&quot;) != Boolean(value);\r\n    \r\n    // value = &quot;true&quot;  =&gt; result = true\r\n    // value = &quot;false&quot; =&gt; result = false\r\n    // value = true    =&gt; result = true\r\n    // value = false   =&gt; result = false\r\n    // value = null    =&gt; result = false\r\n    // value = []      =&gt; result = true\r\n    // etc..\r\n"},{"score":5,"body_markdown":"    function parseBool(value) {\r\n        if (typeof value === &quot;boolean&quot;) return value;\r\n    \r\n        if (typeof value === &quot;number&quot;) {\r\n            return value === 1 ? true : value === 0 ? false : undefined;\r\n        }\r\n    \r\n        if (typeof value != &quot;string&quot;) return undefined;\r\n    \r\n        return value.toLowerCase() === &#39;true&#39; ? true : false;\r\n    }"},{"score":6,"body_markdown":"I wrote a function to match PHP&#39;s filter_var which does this nicely. Available in a gist: https://gist.github.com/CMCDragonkai/7389368\r\n\r\n    /**\r\n     * Parses mixed type values into booleans. This is the same function as filter_var in PHP using boolean validation\r\n     * @param  {Mixed}        value \r\n     * @param  {Boolean}      nullOnFailure = false\r\n     * @return {Boolean|Null}\r\n     */\r\n    var parseBooleanStyle = function(value, nullOnFailure = false){\r\n    \tswitch(value){\r\n    \t\tcase true:\r\n    \t\tcase &#39;true&#39;:\r\n    \t\tcase 1:\r\n    \t\tcase &#39;1&#39;:\r\n    \t\tcase &#39;on&#39;:\r\n    \t\tcase &#39;yes&#39;:\r\n    \t\t\tvalue = true;\r\n    \t\t\tbreak;\r\n    \t\tcase false:\r\n    \t\tcase &#39;false&#39;:\r\n    \t\tcase 0:\r\n    \t\tcase &#39;0&#39;:\r\n    \t\tcase &#39;off&#39;:\r\n    \t\tcase &#39;no&#39;:\r\n    \t\t\tvalue = false;\r\n    \t\t\tbreak;\r\n    \t\tdefault:\r\n    \t\t\tif(nullOnFailure){\r\n    \t\t\t\tvalue = null;\r\n    \t\t\t}else{\r\n    \t\t\t\tvalue = false;\r\n    \t\t\t}\r\n    \t\t\tbreak;\r\n    \t}\r\n    \treturn value;\r\n    };"},{"score":39,"body_markdown":"Universal solution with JSON parse:\r\n\r\n    function getBool(val) {\r\n        return !!JSON.parse(String(val).toLowerCase());\r\n    }\r\n    \r\n    getBool(&quot;1&quot;); //true\r\n    getBool(&quot;0&quot;); //false\r\n    getBool(&quot;true&quot;); //true\r\n    getBool(&quot;false&quot;); //false\r\n    getBool(&quot;TRUE&quot;); //true\r\n    getBool(&quot;FALSE&quot;); //false\r\n\r\nUPDATE (without JSON):\r\n\r\n    function getBool(val){ \r\n        var num = +val;\r\n        return !isNaN(num) ? !!num : !!String(val).toLowerCase().replace(!!0,&#39;&#39;);\r\n    }\r\n\r\nI also created fiddle to test it http://jsfiddle.net/remunda/2GRhG/"},{"score":2,"body_markdown":"A lot of the existing answers are similar, but most ignore the fact that the given argument could also be an object.\r\n\r\nHere is something I just whipped up:\r\n\r\n\tUtils.parseBoolean = function(val){\r\n\t\tif (typeof val === &#39;string&#39; || val instanceof String){\r\n\t\t\treturn /true/i.test(val);\r\n\t\t} else if (typeof val === &#39;boolean&#39; || val instanceof Boolean){\r\n\t\t\treturn new Boolean(val).valueOf();\r\n\t\t} else if (typeof val === &#39;number&#39; || val instanceof Number){\r\n\t\t\treturn new Number(val).valueOf() !== 0;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n...and the unit test for it\r\n\r\n\tUtils.Tests = function(){\r\n\t\twindow.console.log(&#39;running unit tests&#39;);\r\n\r\n\t\tvar booleanTests = [\r\n\t\t\t[&#39;true&#39;, true],\r\n\t\t\t[&#39;false&#39;, false],\r\n\t\t\t[&#39;True&#39;, true],\r\n\t\t\t[&#39;False&#39;, false],\r\n\t\t\t[, false],\r\n\t\t\t[true, true],\r\n\t\t\t[false, false],\r\n\t\t\t[&#39;gibberish&#39;, false],\r\n\t\t\t[0, false],\r\n\t\t\t[1, true]\r\n\t\t];\r\n\r\n\t\tfor (var i = 0; i &lt; booleanTests.length; i++){\r\n\t\t\tvar lhs = Utils.parseBoolean(booleanTests[i][0]);\r\n\t\t\tvar rhs = booleanTests[i][1];\r\n\t\t\tvar result = lhs === rhs;\r\n\r\n\t\t\tif (result){\r\n\t\t\t\tconsole.log(&#39;Utils.parseBoolean(&#39;+booleanTests[i][0]+&#39;) === &#39;+booleanTests[i][1]+&#39;\\t : \\tpass&#39;);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(&#39;Utils.parseBoolean(&#39;+booleanTests[i][0]+&#39;) === &#39;+booleanTests[i][1]+&#39;\\t : \\tfail&#39;);\r\n\t\t\t}\r\n\t\t}\r\n\t};"},{"score":43,"body_markdown":"I thought that @Steven &#39;s answer was the best one, and took care of a lot more cases than if the incoming value was just a string. I wanted to extend it a bit and offer the following:\r\n\r\n    function isTrue(value){\r\n\t\tif (typeof(value) === &#39;string&#39;){\r\n\t\t\tvalue = value.trim().toLowerCase();\r\n\t\t}\r\n\t\tswitch(value){\r\n\t\t\tcase true:\r\n\t\t\tcase &quot;true&quot;:\r\n\t\t\tcase 1:\r\n\t\t\tcase &quot;1&quot;:\r\n\t\t\tcase &quot;on&quot;:\r\n\t\t\tcase &quot;yes&quot;:\r\n\t\t\t\treturn true;\r\n\t\t\tdefault: \r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\nIt&#39;s not necessary to cover all the `false` cases if you already know all of the `true` cases you&#39;d have to account for. You can pass anything into this method that could pass for a `true` value (or add others, it&#39;s pretty straightforward), and everything else would be considered `false`"},{"score":57,"body_markdown":"Wood-eye be careful. \r\nAfter seeing the consequences after applying the top answer with 500+ upvotes, I feel obligated to post something that is actually useful:\r\n\r\nLet&#39;s start with the shortest, but very strict way:\r\n\r\n    var str = &quot;true&quot;;\r\n    var mybool = JSON.parse(str);\r\n\r\n\r\nAnd end with a proper, more tolerant way:\r\n\r\n\r\n\r\n\r\n    var parseBool = function(str) \r\n    {\r\n        // console.log(typeof str);\r\n        // strict: JSON.parse(str)\r\n        \r\n        if(str == null)\r\n            return false;\r\n        \r\n        if (typeof str === &#39;boolean&#39;)\r\n        {\r\n    \t\treturn (str === true);\r\n        } \r\n        \r\n        if(typeof str === &#39;string&#39;)\r\n        {\r\n    \t\tif(str == &quot;&quot;)\r\n    \t\t\treturn false;\r\n    \t\t\t\r\n    \t\tstr = str.replace(/^\\s+|\\s+$/g, &#39;&#39;);\r\n    \t\tif(str.toLowerCase() == &#39;true&#39; || str.toLowerCase() == &#39;yes&#39;)\r\n    \t\t\treturn true;\r\n    \t\t\r\n    \t\tstr = str.replace(/,/g, &#39;.&#39;);\r\n    \t\tstr = str.replace(/^\\s*\\-\\s*/g, &#39;-&#39;);\r\n    \t}\r\n    \t\r\n    \t// var isNum = string.match(/^[0-9]+$/) != null;\r\n    \t// var isNum = /^\\d+$/.test(str);\r\n        if(!isNaN(str))\r\n    \t\treturn (parseFloat(str) != 0);\r\n    \t\t\r\n    \treturn false;\r\n    }\r\n\r\n\r\n\r\n\r\nTesting:\r\n\r\n    var array_1 = new Array(true, 1, &quot;1&quot;,-1, &quot;-1&quot;, &quot; - 1&quot;, &quot;true&quot;, &quot;TrUe&quot;, &quot;  true  &quot;, &quot;  TrUe&quot;, 1/0, &quot;1.5&quot;, &quot;1,5&quot;, 1.5, 5, -3, -0.1, 0.1, &quot; - 0.1&quot;, Infinity, &quot;Infinity&quot;, -Infinity, &quot;-Infinity&quot;,&quot; - Infinity&quot;, &quot; yEs&quot;);\r\n    \r\n    var array_2 = new Array(null, &quot;&quot;, false, &quot;false&quot;, &quot;   false   &quot;, &quot; f alse&quot;, &quot;FaLsE&quot;, 0, &quot;00&quot;, &quot;1/0&quot;, 0.0, &quot;0.0&quot;, &quot;0,0&quot;, &quot;100a&quot;, &quot;1 00&quot;, &quot; 0 &quot;, 0.0, &quot;0.0&quot;, -0.0, &quot;-0.0&quot;, &quot; -1a &quot;, &quot;abc&quot;);\r\n    \r\n    \r\n    for(var i =0; i &lt; array_1.length;++i){ console.log(&quot;array_1[&quot;+i+&quot;] (&quot;+array_1[i]+&quot;): &quot; + parseBool(array_1[i]));}\r\n    \r\n    for(var i =0; i &lt; array_2.length;++i){ console.log(&quot;array_2[&quot;+i+&quot;] (&quot;+array_2[i]+&quot;): &quot; + parseBool(array_2[i]));}\r\n    \r\n    for(var i =0; i &lt; array_1.length;++i){ console.log(parseBool(array_1[i]));}\r\n    for(var i =0; i &lt; array_2.length;++i){ console.log(parseBool(array_2[i]));}\r\n\r\n\r\n"},{"score":2,"body_markdown":"A shorter way to write this, could be `var isTrueSet = (myValue === &quot;true&quot;) ? true : false;` Presuming only &quot;true&quot; is true and other values are false. "},{"score":3,"body_markdown":"Simple solution i have been using it for a while\r\n\r\n    function asBoolean(value) {\r\n    \r\n        return (&#39;&#39;+value) === &#39;true&#39;; \r\n    \r\n    }\r\n\r\n\r\n    // asBoolean(true) ==&gt; true\r\n    // asBoolean(false) ==&gt; false\r\n    // asBoolean(&#39;true&#39;) ==&gt; true\r\n    // asBoolean(&#39;false&#39;) ==&gt; false\r\n\r\n\r\n"},{"score":24,"body_markdown":"    var falsy = /^(?:f(?:alse)?|no?|0+)$/i;\r\n    Boolean.parse = function(val) { \r\n    \treturn !falsy.test(val) &amp;&amp; !!val;\r\n    };\r\n\r\nThis returns `false` for every falsy value and `true` for every truthy value except for `&#39;false&#39;`, `&#39;f&#39;`, `&#39;no&#39;`, `&#39;n&#39;`, and `&#39;0&#39;` (case-insensitive).\r\n\r\n    // False\r\n    Boolean.parse(false);\r\n    Boolean.parse(&#39;false&#39;);\r\n    Boolean.parse(&#39;False&#39;);\r\n    Boolean.parse(&#39;FALSE&#39;);\r\n    Boolean.parse(&#39;f&#39;);\r\n    Boolean.parse(&#39;F&#39;);\r\n    Boolean.parse(&#39;no&#39;);\r\n    Boolean.parse(&#39;No&#39;);\r\n    Boolean.parse(&#39;NO&#39;);\r\n    Boolean.parse(&#39;n&#39;);\r\n    Boolean.parse(&#39;N&#39;);\r\n    Boolean.parse(&#39;0&#39;);\r\n    Boolean.parse(&#39;&#39;);\r\n    Boolean.parse(0);\r\n    Boolean.parse(null);\r\n    Boolean.parse(undefined);\r\n    Boolean.parse(NaN);\r\n    Boolean.parse();\r\n    \r\n    //True\r\n    Boolean.parse(true);\r\n    Boolean.parse(&#39;true&#39;);\r\n    Boolean.parse(&#39;True&#39;);\r\n    Boolean.parse(&#39;t&#39;);\r\n    Boolean.parse(&#39;yes&#39;);\r\n    Boolean.parse(&#39;YES&#39;);\r\n    Boolean.parse(&#39;y&#39;);\r\n    Boolean.parse(&#39;1&#39;);\r\n    Boolean.parse(&#39;foo&#39;);\r\n    Boolean.parse({});\r\n    Boolean.parse(1);\r\n    Boolean.parse(-1);\r\n    Boolean.parse(new Date());\r\n\r\n"},{"score":4,"body_markdown":"I do this, which will handle 1=TRUE=yes=YES=true, 0=FALSE=no=NO=false:\r\n\r\n    BOOL=false\r\n    if (STRING)\r\n      BOOL=JSON.parse(STRING.toLowerCase().replace(&#39;no&#39;,&#39;false&#39;).replace(&#39;yes&#39;,&#39;true&#39;));\r\n\r\nReplace STRING with the name of your string variable.\r\n\r\nIf it&#39;s not null, a numerical value or one of these strings:\r\n&quot;true&quot;, &quot;TRUE&quot;, &quot;false&quot;, &quot;FALSE&quot;, &quot;yes&quot;, &quot;YES&quot;, &quot;no&quot;, &quot;NO&quot;\r\nIt will throw an error (intentionally.)"},{"score":4,"body_markdown":"I use an own method which includes a check if the object exists first and a more intuitive conversion to boolean:\r\n\r\n    function str2bool(strvalue){\r\n      return (strvalue &amp;&amp; typeof strvalue == &#39;string&#39;) ? (strvalue.toLowerCase() == &#39;true&#39; || strvalue == &#39;1&#39;) : (strvalue == true);\r\n    }\r\n\r\nThe results are:\r\n\r\n    var test; // false\r\n    var test2 = null; // false\r\n    var test3 = &#39;undefined&#39;; // false\r\n    var test4 = &#39;true&#39;; // true\r\n    var test5 = &#39;false&#39;; // false\r\n    var test6 = true; // true\r\n    var test7 = false; // false\r\n    var test8 = 1; // true\r\n    var test9 = 0; // false\r\n    var test10 = &#39;1&#39;; // true\r\n    var test11 = &#39;0&#39;; // false\r\n\r\nFiddle:\r\nhttp://jsfiddle.net/av5xcj6s/"},{"score":10,"body_markdown":"I&#39;m using this one\r\n\r\n\tString.prototype.maybeBool = function(){\r\n\r\n\t\tif ( [&quot;yes&quot;, &quot;true&quot;, &quot;1&quot;, &quot;on&quot;].indexOf( this.toLowerCase() ) !== -1 ) return true;\r\n\t\tif ( [&quot;no&quot;, &quot;false&quot;, &quot;0&quot;, &quot;off&quot;].indexOf( this.toLowerCase() ) !== -1 ) return false;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n    &quot;on&quot;.maybeBool(); //returns true;\r\n    &quot;off&quot;.maybeBool(); //returns false;\r\n    &quot;I like js&quot;.maybeBool(); //returns &quot;I like js&quot;"},{"score":18,"body_markdown":"There are a lot of answers and it&#39;s hard to pick one. In my case, I prioritise the performance when choosing, so I create [this jsPerf][1] that I hope can throw some light here.\r\n\r\nBrief of results (the higher the better):\r\n\r\n 1. [**Conditional statement**][2]: 2,826,922\r\n 2. [**Switch case on Bool object**][3]: 2,825,469\r\n 3. [**Casting to JSON**][4]: 1,867,774\r\n 4. [**!! conversions**][5]: 805,322\r\n 5. [**Prototype of String**][6]: 713,637\r\n\r\nThey are linked to the related answer where you can find more information (pros and cons) about each one; specially in the comments.\r\n\r\n\r\n  [1]: https://jsperf.com/cast-booleans\r\n  [2]: https://stackoverflow.com/a/264037/2824333\r\n  [3]: https://stackoverflow.com/a/2114091/2824333\r\n  [4]: https://stackoverflow.com/a/7833897/2824333\r\n  [5]: https://stackoverflow.com/a/21285901/2824333\r\n  [6]: https://stackoverflow.com/a/264180/2824333"},{"score":2,"body_markdown":"To evaluate both boolean and boolean-like strings like boolean I used this easy formula:\r\n\r\n    var trueOrStringTrue = (trueOrStringTrue === true) || (trueOrStringTrue === &#39;true&#39;);\r\n\r\nAs is apparent, it will return true for both true and &#39;true&#39;. Everything else returns false."},{"score":13,"body_markdown":"To convert both string(&quot;true&quot;, &quot;false&quot;) and boolean to boolean\r\n\r\n    (&#39;&#39; + flag) === &quot;true&quot;\r\n\r\nWhere `flag` can be \r\n\r\n     var flag = true\r\n     var flag = &quot;true&quot;\r\n     var flag = false\r\n     var flag = &quot;false&quot;\r\n\r\n"},{"score":-4,"body_markdown":"works perfectly and very simple: \r\n\r\n    var boolean = &quot;false&quot;;\r\n    boolean = (boolean === &quot;true&quot;);\r\n\r\n    //boolean = JSON.parse(boolean); //or this way.. \r\n\r\nto test it: \r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var boolean = &quot;false&quot;;\r\n    boolean = (boolean === &quot;true&quot;);\r\n    \r\n    //boolean = JSON.parse(boolean); //or this way.. \r\n    \r\n    if(boolean == true){\r\n        alert(&quot;boolean = &quot;+boolean);\r\n    }else{\r\n        alert(&quot;boolean = &quot;+boolean);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;"},{"score":8,"body_markdown":"another solution.  [jsFiddle][1]\r\n\r\n    var toBoolean = function(value) {\r\n        var strValue = String(value).toLowerCase();\r\n        strValue = ((!isNaN(strValue) &amp;&amp; strValue !== &#39;0&#39;) &amp;&amp;\r\n            strValue !== &#39;&#39; &amp;&amp;\r\n            strValue !== &#39;null&#39; &amp;&amp;\r\n            strValue !== &#39;undefined&#39;) ? &#39;1&#39; : strValue;\r\n        return strValue === &#39;true&#39; || strValue === &#39;1&#39; ? true : false\r\n    };\r\n\r\n\r\n\r\ntest cases run in node\r\n\r\n    &gt; toBoolean(true)\r\n    true\r\n    &gt; toBoolean(false)\r\n    false\r\n    &gt; toBoolean(undefined)\r\n    false\r\n    &gt; toBoolean(null)\r\n    false\r\n    &gt; toBoolean(&#39;true&#39;)\r\n    true\r\n    &gt; toBoolean(&#39;True&#39;)\r\n    true\r\n    &gt; toBoolean(&#39;False&#39;)\r\n    false\r\n    &gt; toBoolean(&#39;false&#39;)\r\n    false\r\n    &gt; toBoolean(&#39;0&#39;)\r\n    false\r\n    &gt; toBoolean(&#39;1&#39;)\r\n    true\r\n    &gt; toBoolean(&#39;100&#39;)\r\n    true\r\n    &gt; \r\n\r\n\r\n  [1]: http://jsfiddle.net/r5p7qobn/"},{"score":3,"body_markdown":"# The fastest safe way to convert a string to a boolean in one line of code\n\nOne of features that help to fasten the code execution in Javascript is _Short-Circuit Evaluation_:\n\n&gt;As logical expressions are evaluated left to right, they are tested for possible &quot;short-circuit&quot; evaluation using the following rules:\n&gt;\n&gt;-    false &amp;&amp; (anything) is short-circuit evaluated to false.\n&gt;-    true || (anything) is short-circuit evaluated to true.\n\nSo that if you want to test a string value for being `true` of `false` in `JSON.parse` way of test and keep the performance strong, you may use the `||` operator to exclude the slow code from execution in case the test value is of boolean type.\n\n    test === true || [&#39;true&#39;,&#39;yes&#39;,&#39;1&#39;].indexOf(test.toString().toLowerCase()) &gt; -1\n\nAs the `Array.prototype.indexOf()` method is a part of _ECMA-262_ standard in the 5th edition, you may need a __polyfill__ for the old browsers support.\n\n    // Production steps of ECMA-262, Edition 5, 15.4.4.14\n    // Reference: http://es5.github.io/#x15.4.4.14\n    if (!Array.prototype.indexOf) {\n      Array.prototype.indexOf = function(searchElement, fromIndex) {\n    \n        var k;\n    \n        // 1. Let O be the result of calling ToObject passing\n        //    the this value as the argument.\n        if (this == null) {\n          throw new TypeError(&#39;&quot;this&quot; is null or not defined&#39;);\n        }\n    \n        var O = Object(this);\n    \n        // 2. Let lenValue be the result of calling the Get\n        //    internal method of O with the argument &quot;length&quot;.\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length &gt;&gt;&gt; 0;\n    \n        // 4. If len is 0, return -1.\n        if (len === 0) {\n          return -1;\n        }\n    \n        // 5. If argument fromIndex was passed let n be\n        //    ToInteger(fromIndex); else let n be 0.\n        var n = +fromIndex || 0;\n    \n        if (Math.abs(n) === Infinity) {\n          n = 0;\n        }\n    \n        // 6. If n &gt;= len, return -1.\n        if (n &gt;= len) {\n          return -1;\n        }\n    \n        // 7. If n &gt;= 0, then Let k be n.\n        // 8. Else, n&lt;0, Let k be len - abs(n).\n        //    If k is less than 0, then let k be 0.\n        k = Math.max(n &gt;= 0 ? n : len - Math.abs(n), 0);\n    \n        // 9. Repeat, while k &lt; len\n        while (k &lt; len) {\n          // a. Let Pk be ToString(k).\n          //   This is implicit for LHS operands of the in operator\n          // b. Let kPresent be the result of calling the\n          //    HasProperty internal method of O with argument Pk.\n          //   This step can be combined with c\n          // c. If kPresent is true, then\n          //    i.  Let elementK be the result of calling the Get\n          //        internal method of O with the argument ToString(k).\n          //   ii.  Let same be the result of applying the\n          //        Strict Equality Comparison Algorithm to\n          //        searchElement and elementK.\n          //  iii.  If same is true, return k.\n          if (k in O &amp;&amp; O[k] === searchElement) {\n            return k;\n          }\n          k++;\n        }\n        return -1;\n      };\n    }"},{"score":1,"body_markdown":"To Get Boolean values from string or number Here is good solution:\r\n\r\n    var boolValue = Boolean(Number(&#39;0&#39;));\r\n\r\n    var boolValue = Boolean(Number(&#39;1&#39;));\r\n\r\nFirst will return `false` and second will return `true`."},{"score":3,"body_markdown":"\tfunction isTrue(val) {\r\n\t    try {\r\n\t        return !!JSON.parse(val);\r\n\t    } catch (e) {\r\n\t        return false;\r\n\t    }\r\n\t}"},{"score":2,"body_markdown":"Take care, maybe in the future the code change and return boolean instead of one string at the moment.\r\n\r\nThe solution would be:\r\n\r\n    //Currently\r\n    var isTrue = &#39;true&#39;;\r\n    //In the future (Other developer change the code)\r\n    var isTrue = true;\r\n    //The solution to both cases\r\n    (isTrue).toString() == &#39;true&#39;\r\n"},{"score":5,"body_markdown":"Lots of fancy answers here. Really surprised no one has posted this solution:\r\n\r\n    var booleanVal = toCast &gt; &#39;&#39;;\r\n\r\nThis resolves to true in most cases other than bool false, number zero and empty string (obviously). You can easily look for other falsey string values after the fact e.g.:\r\n\r\n    var booleanVal = toCast &gt; &#39;&#39; &amp;&amp; toCast != &#39;false&#39; &amp;&amp; toCast != &#39;0&#39;;  "},{"score":13,"body_markdown":"There are already so many answers available. But following can be useful in some scenarios.\r\n \r\n    // One can specify all values against which you consider truthy\r\n    var TRUTHY_VALUES = [true, &#39;true&#39;, 1];\r\n    \r\n    function getBoolean(a) {\r\n        return TRUTHY_VALUES.some(function(t) {\r\n            return t === a;\r\n        });\r\n    }\r\n\r\nThis can be useful where one examples with non-boolean values.\r\n\r\n    getBoolean(&#39;aa&#39;); // false\r\n    getBoolean(false); //false\r\n    getBoolean(&#39;false&#39;); //false\r\n\r\n    getBoolean(&#39;true&#39;); // true\r\n    getBoolean(true); // true\r\n    getBoolean(1); // true\r\n"},{"score":18,"body_markdown":"This has been taken from the accepted answer, but really it has a very weak point, and I am shocked how it got that count of upvotes, the problem with it that you have to consider the case of the string because this is case sensitive\r\n\r\n\r\n    var isTrueSet = (myValue.toLowerCase() === &#39;true&#39;);"},{"score":3,"body_markdown":"I use this simple approach (using &quot;myVarToTest&quot;):\r\n\r\n    var trueValuesRange = [&#39;1&#39;, 1, &#39;true&#39;, true];\r\n    \r\n    myVarToTest = (trueValuesRange.indexOf(myVarToTest) &gt;= 0);"},{"score":3,"body_markdown":"Take it easy using this lib.\r\n\r\nhttps://github.com/rohmanhm/force-boolean\r\n\r\nyou just need to write a single line\r\n\r\n    const ForceBoolean = require(&#39;force-boolean&#39;)\r\n    \r\n    const YOUR_VAR = &#39;false&#39;\r\n    console.log(ForceBoolean(YOUR_VAR)) // it&#39;s return boolean false\r\n\r\nIt&#39;s also support for following\r\n\r\n \r\n\r\n     return false if value is number 0\r\n     return false if value is string &#39;0&#39;\r\n     return false if value is string &#39;false&#39;\r\n     return false if value is boolean false\r\n     return true if value is number 1\r\n     return true if value is string &#39;1&#39;\r\n     return true if value is string &#39;true&#39;\r\n     return true if value is boolean true"},{"score":1,"body_markdown":"    var trueVals = [&quot;y&quot;, &quot;t&quot;, &quot;yes&quot;, &quot;true&quot;, &quot;gimme&quot;];\r\n    var isTrueSet = (trueVals.indexOf(myValue) &gt; -1) ? true : false;\r\n\r\nor even just\r\n\r\n    var trueVals = [&quot;y&quot;, &quot;t&quot;, &quot;yes&quot;, &quot;true&quot;, &quot;gimme&quot;];\r\n    var isTrueSet = (trueVals.indexOf(myValue) &gt; -1);\r\n\r\nSimilar to some of the switch statements but more compact. The value returned will only be true if the string is one of the trueVals strings. Everything else is false. Of course, you might want to normalise the input string to make it lower case and trim any spaces."},{"score":1,"body_markdown":"**Convert String to Boolean**\r\n\r\n    var vIn = &quot;true&quot;;\r\n    var vOut = vIn.toLowerCase()==&quot;true&quot;?1:0;\r\n\r\n**Convert String to Number**\r\n\r\n    var vIn = 0;\r\n    var vOut = parseInt(vIn,10/*base*/);"},{"score":3,"body_markdown":"Here is simple function that will do the trick,\r\n \r\n\r\n       function convertStringToBool(str){\r\n            return ((str === &quot;True&quot;) || (str === &quot;true&quot;)) ? true:false;\r\n        }\r\n\r\nThis will give the following result\r\n\r\n    convertStringToBool(&quot;false&quot;) //returns false\r\n    convertStringToBool(&quot;true&quot;) // returns true\r\n    convertStringToBool(&quot;False&quot;) // returns false\r\n    convertStringToBool(&quot;True&quot;) // returns true"},{"score":9,"body_markdown":"# One Liner\r\n\r\nWe just need to account for the &quot;false&quot; string since any other string (including &quot;true&quot;) is already `true`.\r\n\r\n    function b(v){ return v===&quot;false&quot; ? false : !!v; }\r\n**Test**\r\n\r\n    b(true)    //true\r\n    b(&#39;true&#39;)  //true\r\n    b(false)   //false\r\n    b(&#39;false&#39;) //false\r\n\r\n---\r\n\r\n### A more exaustive version\r\n\r\n    function bool(v){ return v===&quot;false&quot; || v===&quot;null&quot; || v===&quot;NaN&quot; || v===&quot;undefined&quot; || v===&quot;0&quot; ? false : !!v; }\r\n    \r\n **Test**\r\n    \r\n    bool(true)        //true\r\n    bool(&quot;true&quot;)      //true\r\n    bool(1)           //true\r\n    bool(&quot;1&quot;)         //true\r\n    bool(&quot;hello&quot;)     //true\r\n    \r\n    bool(false)       //false\r\n    bool(&quot;false&quot;)     //false\r\n    bool(0)           //false\r\n    bool(&quot;0&quot;)         //false\r\n    bool(null)        //false\r\n    bool(&quot;null&quot;)      //false\r\n    bool(NaN)         //false\r\n    bool(&quot;NaN&quot;)       //false\r\n    bool(undefined)   //false\r\n    bool(&quot;undefined&quot;) //false\r\n    bool(&quot;&quot;)          //false\r\n    \r\n    bool([])          //true\r\n    bool({})          //true\r\n    bool(alert)       //true\r\n    bool(window)      //true\r\n\r\n\r\n"},{"score":5,"body_markdown":"    String(true).toLowerCase() == &#39;true&#39;; // true\r\n    String(&quot;true&quot;).toLowerCase() == &#39;true&#39;; // true\r\n    String(&quot;True&quot;).toLowerCase() == &#39;true&#39;; // true\r\n    String(&quot;TRUE&quot;).toLowerCase() == &#39;true&#39;; // true\r\n    \r\n    String(false).toLowerCase() == &#39;true&#39;; // false\r\n\r\nIf you are not sure of the input, the above works for boolean and as well any string.\r\n"},{"score":0,"body_markdown":"You can use `Function` to return a `Boolean` value from string `&quot;true&quot;` or `&quot;false&quot;`\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const TRUE_OR_FALSE = str =&gt; new Function(`return ${str}`)();\r\n\r\n    const [TRUE, FALSE] = [&quot;true&quot;, &quot;false&quot;];\r\n\r\n    const [T, F] = [TRUE_OR_FALSE(TRUE), TRUE_OR_FALSE(FALSE)];\r\n\r\n    console.log(T, typeof T); // `true` `&quot;boolean&quot;`\r\n\r\n    console.log(F, typeof F); // `false` `&quot;boolean&quot;`\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":13,"body_markdown":"you can use `JSON.parse` as follows:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n   \r\n    var trueOrFalse=&#39;True&#39;;\r\n    result =JSON.parse(trueOrFalse.toLowerCase());\r\n    if(result==true)\r\n      alert(&#39;this is true&#39;);\r\n    else \r\n      alert(&#39;this is false&#39;);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nin this case `.toLowerCase` is important  "},{"score":0,"body_markdown":"The `toBoolean&#39; function returns false for null, undefined, &#39;&#39;, &#39;false&#39;. It returns true for any other string:\r\n\r\n    const toBoolean = (bool) =&gt; {\r\n      if (bool === &#39;false&#39;) bool = false\r\n      return !!bool\r\n    }\r\n\r\n    toBoolean(&#39;false&#39;) // returns false\r\n"},{"score":3,"body_markdown":"I&#39;m using this one when I get value from URL/Form or other source.\r\n\r\nIt is pretty universal one line piece of code.\r\n\r\nMaybe not the best for performance, if you need to run it millions times let me know, we can check how to optimize it, otherwise is pretty good and customizable.\r\n\r\n    boolResult = !([&#39;false&#39;, &#39;0&#39;, &#39;&#39;, &#39;undefined&#39;].indexOf(String(myVar).toLowerCase().trim()) + 1);\r\n\r\nResult:\r\n\r\n    myVar = true;  // true\r\n    myVar = &#39;true&#39;;  // true\r\n    myVar = &#39;TRUE&#39;;  // true\r\n    myVar = &#39;1&#39;;  // true\r\n    myVar = &#39;any other value not related to false&#39;;  // true\r\n\r\n    myVar = false; // false\r\n    myVar = &#39;false&#39;;  // false\r\n    myVar = &#39;FALSE&#39;;  // false\r\n    myVar = &#39;0&#39;;  // false\r\n\r\n\r\n"},{"score":7,"body_markdown":"Holy god some of these answers are just wild.  I love JS and its infinite number of ways to skin a bool.\r\n\r\nMy preference, which I was shocked not to see already, is:\r\n\r\n\r\n    testVar = testVar.toString().match(/^(true|[1-9][0-9]*|[0-9]*[1-9]+|yes)$/i) ? true : false;\r\n\r\n"},{"score":10,"body_markdown":"why don&#39;t you try something like this\r\n\r\n    Boolean(JSON.parse((yourString.toString()).toLowerCase()));\r\n\r\nIt will return an error when some other text is given rather than true or false regardless of the case and it will capture the numbers also as \r\n\r\n    // 0-&gt; false\r\n    // any other number -&gt; true"},{"score":11,"body_markdown":"This function can handle string as well as Boolean true/false.\r\n\r\n    function stringToBoolean(val){\r\n        var a = {\r\n            &#39;true&#39;:true,\r\n            &#39;false&#39;:false\r\n        };\r\n        return a[val];\r\n    }\r\n\r\nDemonstration below:  \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function stringToBoolean(val) {\r\n      var a = {\r\n        &#39;true&#39;: true,\r\n        &#39;false&#39;: false\r\n      };\r\n      return a[val];\r\n    }\r\n\r\n    console.log(stringToBoolean(&quot;true&quot;));\r\n\r\n    console.log(typeof(stringToBoolean(&quot;true&quot;)));\r\n\r\n    console.log(stringToBoolean(&quot;false&quot;));\r\n\r\n    console.log(typeof(stringToBoolean(&quot;false&quot;)));\r\n\r\n    console.log(stringToBoolean(true));\r\n\r\n    console.log(typeof(stringToBoolean(true)));\r\n\r\n    console.log(stringToBoolean(false));\r\n\r\n    console.log(typeof(stringToBoolean(false)));\r\n\r\n    console.log(&quot;=============================================&quot;);\r\n    // what if value was undefined? \r\n    console.log(&quot;undefined result:  &quot; + stringToBoolean(undefined));\r\n    console.log(&quot;type of undefined result:  &quot; + typeof(stringToBoolean(undefined)));\r\n    console.log(&quot;=============================================&quot;);\r\n    // what if value was an unrelated string?\r\n    console.log(&quot;unrelated string result:  &quot; + stringToBoolean(&quot;hello world&quot;));\r\n    console.log(&quot;type of unrelated string result:  &quot; + typeof(stringToBoolean(undefined)));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":4,"body_markdown":"In nodejs by using [node-boolify][1] it is possible\r\n\r\n**Boolean Conversion Results**\r\n\r\n    Boolify(true); //true\r\n    Boolify(&#39;true&#39;); //true\r\n    Boolify(&#39;TRUE&#39;); //null\r\n    Boolify(1); //true\r\n    Boolify(2); //null\r\n    Boolify(false); //false\r\n    Boolify(&#39;false&#39;); //false\r\n    Boolify(&#39;FALSE&#39;); //null\r\n    Boolify(0); //false\r\n    Boolify(null); //null\r\n    Boolify(undefined); //null\r\n    Boolify(); //null\r\n    Boolify(&#39;&#39;); //null\r\n\r\n\r\n  [1]: https://www.npmjs.com/package/node-boolify"},{"score":3,"body_markdown":"For TypeScript we can use the function:\r\n\r\n    export function stringToBoolean(s: string, valueDefault: boolean = false): boolean {\r\n        switch(s.toLowerCase())\r\n        {\r\n            case &quot;true&quot;:\r\n            case &quot;1&quot;:\r\n            case &quot;on&quot;:\r\n            case &quot;yes&quot;:\r\n            case &quot;y&quot;:\r\n                return true;\r\n    \r\n            case &quot;false&quot;:\r\n            case &quot;0&quot;:\r\n            case &quot;off&quot;:\r\n            case &quot;no&quot;:\r\n            case &quot;n&quot;:\r\n                return false;\r\n        }\r\n    \r\n        return valueDefault;\r\n    }"},{"score":5,"body_markdown":"If you are certain that the test subject is always a string, then explicitly checking that it equals `true` is your best bet.\r\n\r\nYou may want to consider including an extra bit of code just in case the subject could actually a boolean.\r\n\r\n```\r\nvar isTrueSet =\r\n    myValue === true ||\r\n    myValue != null &amp;&amp;\r\n    myValue.toString().toLowerCase() === &#39;true&#39;;\r\n```\r\n\r\nThis could save you a bit of work in the future if the code gets improved/refactored to use actual boolean values instead of strings.  "},{"score":6,"body_markdown":"The simplest way which I always use:\r\n\r\n    let value = &#39;true&#39;;\r\n    let output = value === &#39;true&#39;;\r\n\r\n"},{"score":1,"body_markdown":"I hope this is a most comprehensive use case\r\n\r\n    function parseBoolean(token) {\r\n      if (typeof token === &#39;string&#39;) {\r\n        switch (token.toLowerCase()) {\r\n          case &#39;on&#39;:\r\n          case &#39;yes&#39;:\r\n          case &#39;ok&#39;:\r\n          case &#39;ja&#39;:\r\n          case &#39;да&#39;:\r\n          // case &#39;&#39;:\r\n          // case &#39;&#39;:\r\n            token = true;\r\n            break;\r\n          default:\r\n            token = false;\r\n        }\r\n      }\r\n      let ret = false;\r\n      try {\r\n        ret = Boolean(JSON.parse(token));\r\n      } catch (e) {\r\n        // do nothing or make a notification\r\n      }\r\n      return ret;\r\n    }\r\n\r\n"},{"score":3,"body_markdown":"Try this solution (it works like a charm!):\r\n\r\n\tfunction convertStrToBool(str)\r\n\t\t{\r\n\t\t\tswitch(String(str).toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase &#39;undefined&#39;: case &#39;null&#39;: case &#39;nan&#39;: case &#39;false&#39;: case &#39;no&#39;: case &#39;f&#39;: case &#39;n&#39;: case &#39;0&#39;: case &#39;off&#39;: case &#39;&#39;:\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t};\r\n\t\t};\r\n"},{"score":1,"body_markdown":"In HTML the values of attributes eventually become strings. To mitigate that in undesired situations you can have a function to conditionally parse them into values they represent in the JavaScript or any other programming langauge of interest.\r\n\r\nFollowing is an explanation to do it for reviving boolean type from the string type, but it can be further expanded into other data types too, like numbers, arrays or objects.\r\n\r\nIn addition to that JSON.parse has a [revive parameter][1] which is a function. It also can be used to achieve the same.\r\n\r\nLet&#39;s call a string looking like a *boolean*, &quot;true&quot;, a *boolean string* likewise we can call a string like a number, &quot;1&quot;, a *number string*. Then we can determine if a string is a *boolean string*:\r\n\r\n    const isBooleanString = (string) =&gt; [&#39;true&#39;, &#39;false&#39;].some(item =&gt; item === string);\r\n\r\nAfter that we need to parse the *boolean string* as JSON by `JSON.parse` method:\r\n\r\n    JSON.parse(aBooleanString);\r\n\r\nHowever, any string that is not a *boolean string*, *number string*, or any stringified object or array (any invalid JSON) will cause the `JSON.parse` method to throw a `SyntaxError`.\r\n\r\nSo, you will need to know with what to call it, i.e. if it is a *boolean string*. You can achieve this by writing a function that makes the above defiend *boolean string* check and call `JSON.parse`:\r\n\r\n    function parse(string){\r\n      return isBooleanString(string) ? JSON.parse(string)\r\n        : string;\r\n    }\r\n\r\nOne can further generalize the `isBooleanString` utility to have a more broader perspective on what qualifies as a *boolean string* by further parametrizing it to accept an optional array of accepted *boolean* strings:\r\n\r\n    const isBooleanString = (string, spec = [&#39;true&#39;, &#39;false&#39;, &#39;True&#39;, &#39;False&#39;]) =&gt; spec.some(item =&gt; item === string);\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Examples"},{"score":5,"body_markdown":"The most simple way is \r\n\r\n    a = &#39;True&#39;;\r\n    a = !!a &amp;&amp; [&#39;1&#39;, &#39;true&#39;, 1, true].indexOf(a.toLowerCase()) &gt; -1;"},{"score":1,"body_markdown":"    const result: Boolean = strValue === &quot;true&quot; ? true : false"},{"score":3,"body_markdown":"Many of the existing answers use an approach that is semantically similar to this,\r\nbut I think there is value in mentioning that the following &quot;one liner&quot; is often sufficient. For example, in addition to the OP&#39;s case (strings in a form) one often wants to read environment variables from [`process.env`](https://nodejs.org/dist/latest-v14.x/docs/api/process.html#process_process_env) in [NodeJS](https://nodejs.org/) (whose values, to the best of my knowledge, are always strings) in order to enable or disable certain behaviors, and it is common for these to have the form `SOME_ENV_VAR=1`.\r\n\r\n```language:lang-js\r\nconst toBooleanSimple = (input) =&gt; \r\n  [&#39;t&#39;, &#39;y&#39;, &#39;1&#39;].some(truePrefix =&gt; truePrefix === input[0].toLowerCase());\r\n```\r\n\r\nA slightly more robust and expressive implementation might look like this:\r\n```language:lang-js\r\n/**\r\n * Converts strings to booleans in a manner that is less surprising\r\n * to the non-JS world (e.g. returns true for &quot;1&quot;, &quot;yes&quot;, &quot;True&quot;, etc.\r\n * and false for &quot;0&quot;, &quot;No&quot;, &quot;false&quot;, etc.)\r\n * @param input\r\n * @returns {boolean}\r\n */\r\nfunction toBoolean(input) {\r\n  if (typeof input !== &#39;string&#39;) {\r\n    return Boolean(input);\r\n  }\r\n  const s = input.toLowerCase();\r\n  return [&#39;t&#39;, &#39;y&#39;, &#39;1&#39;].some(prefix =&gt; s.startsWith(prefix));\r\n}\r\n```\r\n\r\nA (jest) unit test for this might look like this:\r\n```language:lang-js\r\ndescribe(`toBoolean`, function() {\r\n  const groups = [{\r\n    inputs: [&#39;y&#39;, &#39;Yes&#39;, &#39;true&#39;, &#39;1&#39;, true, 1],\r\n    expectedOutput: true\r\n  }, {\r\n    inputs: [&#39;n&#39;, &#39;No&#39;, &#39;false&#39;, &#39;0&#39;, false, 0],\r\n    expectedOutput: false\r\n  }]\r\n  for (let group of groups) {\r\n    for (let input of group.inputs) {\r\n      it(`should return ${group.expectedOutput} for ${JSON.stringify(input)}`, function() {\r\n        expect(toBoolean(input)).toEqual(group.expectedOutput);\r\n      });\r\n    }      \r\n  }\r\n});\r\n```\r\n"},{"score":1,"body_markdown":"# Use an `if` statment: \n\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\n\n&lt;!-- language: lang-js --&gt;\n\n    function parseBool(str) {\n      if (str.toLowerCase() == &#39;true&#39;) {\n        var val = true;\n      } else if (str.toLowerCase() == &#39;false&#39;) {\n        var val = false;\n      } else {\n        //If it is not true of false it returns undefined.//\n        var val = undefined;\n      }\n      return val;\n    }\n    console.log(parseBool(&#39;&#39;), typeof parseBool(&#39;&#39;));\n    console.log(parseBool(&#39;TrUe&#39;), typeof parseBool(&#39;TrUe&#39;));\n    console.log(parseBool(&#39;false&#39;), typeof parseBool(&#39;false&#39;));\n\n&lt;!-- end snippet --&gt;\n\n"},{"score":1,"body_markdown":"**WARNING:** *Never* use this method for untrusted input, such as URL parameters.\r\n\r\nYou can use the `eval()` function.\r\nDirectly pass your string to `eval()` function.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log(eval(&#39;true&#39;), typeof eval(&#39;true&#39;))\r\n    console.log(eval(&#39;false&#39;), typeof eval(&#39;false&#39;))\r\n\r\n&lt;!-- end snippet --&gt;"},{"score":0,"body_markdown":"You don&#39;t even need to use a variable, if you know that &#39;true&#39; will always be lowercase you can use this which will return true or false:\r\n\r\n    (eval(yourBooleanString == &#39;true&#39;))"},{"score":1,"body_markdown":"I think it can be done in 1 liner with a use arrow function\r\n\r\n    const convertStringToBoolean = (value) =&gt; value ? String(value).toLowerCase() === &#39;true&#39; : false;\r\n\r\n\r\nYou guys can run and test various cases with following code snippet\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const convertStringToBoolean = (value) =&gt; value ? String(value).toLowerCase() === &#39;true&#39; : false;\r\n\r\n    console.log(convertStringToBoolean(&quot;a&quot;));\r\n    console.log(convertStringToBoolean(null));\r\n    console.log(convertStringToBoolean(undefined));\r\n    console.log(convertStringToBoolean(&quot;undefined&quot;));\r\n    console.log(convertStringToBoolean(true));\r\n    console.log(convertStringToBoolean(false));\r\n    console.log(convertStringToBoolean(0));\r\n    console.log(convertStringToBoolean(1)); // only case which will not work\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":-1,"body_markdown":"The simplest way to convert a string to a boolean is the following:\r\n\r\n    Boolean(&lt;stringVariable&gt;)"},{"score":0,"body_markdown":"Simple one line operation if you need Boolean `false` and `true` from the string values:\r\n\r\n    storeBooleanHere = stringVariable==&quot;true&quot;?true:false;\r\n\r\n - storeBooleanHere - This variable will hold the boolean value\r\n - stringVariable - Variable that has boolean stored as string"},{"score":0,"body_markdown":"[![Possible ways to convert String to Boolean][1]][1]\r\nI recommend you to create a function like the third option in the image and place it in a helper class as export, and reuse this function when you need.\r\n\r\n  [1]: https://i.stack.imgur.com/TnPaA.png"},{"score":1,"body_markdown":"    /// Convert something to boolean\r\n    function toBoolean( o ) {\r\n    \tif ( null !== o ) {\r\n    \t\tlet t = typeof o;\r\n    \t\tif ( &quot;undefined&quot; !== typeof o ) {\r\n    \t\t\tif ( &quot;string&quot; !== t ) return !!o;\r\n    \t\t\to = o.toLowerCase().trim();\r\n    \t\t\treturn &quot;true&quot; === o || &quot;1&quot; === o;\r\n    \t\t}\r\n    \t}\r\n    \treturn false;\r\n    }\r\n\r\n    toBoolean(false) --&gt; false\r\n    toBoolean(true) --&gt; true\r\n    toBoolean(&quot;false&quot;) --&gt; false\r\n    toBoolean(&quot;true&quot;) --&gt; true\r\n    toBoolean(&quot;TRue&quot;) --&gt; true\r\n    toBoolean(&quot;1&quot;) --&gt; true\r\n    toBoolean(&quot;0&quot;) --&gt; false\r\n    toBoolean(1) --&gt; true\r\n    toBoolean(0) --&gt; false\r\n    toBoolean(123.456) --&gt; true\r\n    toBoolean(0.0) --&gt; false\r\n    toBoolean(&quot;&quot;) --&gt; false\r\n    toBoolean(null) --&gt; false\r\n    toBoolean() --&gt; false\r\n"},{"score":0,"body_markdown":"The strongest way in as follows because it also handle undefined case:\r\n\r\n```\r\n    ({&#39;true&#39;: true, &#39;false&#39;: false})[myValue];\r\n```\r\n```\r\n    ({&#39;true&#39;: true, &#39;false&#39;: false})[undefined] // =&gt; undefined\r\n    ({&#39;true&#39;: true, &#39;false&#39;: false})[&#39;true&#39;] // =&gt; true\r\n    ({&#39;true&#39;: true, &#39;false&#39;: false})[&#39;false] // =&gt; false\r\n```"}],"score":2738}