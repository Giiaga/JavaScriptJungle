{"body":"Is there a way to generate a random number in a specified range (e.g. from 1 to 6: 1, 2, 3, 4, 5, or 6) in JavaScript?\r\n","title":"Generate random number between two numbers in JavaScript","answers":[{"score":2225,"body_markdown":"&lt;h3&gt;Important&lt;/h3&gt;\r\nThe following code works only if the minimum value is `1`. It does not work for minimum values other than `1`.\r\n\r\n\r\nIf you wanted to get a random integer between 1 (**and only 1**) and 6, you would calculate:\r\n\r\n    Math.floor(Math.random() * 6) + 1  \r\n\r\nWhere:  \r\n\r\n - 1 is the start number    \r\n - 6 is the number of possible results (1 + start *(6)* - end *(1)*)\r\n"},{"score":25,"body_markdown":"    var x = 6; // can be any number\r\n    var rand = Math.floor(Math.random()*x) + 1;\r\n\r\n"},{"score":2462,"body_markdown":"    function randomIntFromInterval(min, max) { // min and max included \r\n      return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\nWhat it does &quot;extra&quot; is it allows random intervals that do not start with 1.\r\nSo you can get a random number from 10 to 15 for example. Flexibility."},{"score":91,"body_markdown":"Other solutions:\r\n\r\n - `(Math.random() * 6 | 0) + 1`\r\n - `~~(Math.random() * 6) + 1`\r\n\r\n[**Try online**][1]\r\n\r\n\r\n  [1]: https://code.labstack.com/xObK_c4M"},{"score":14,"body_markdown":"Math is not my strong point, but I&#39;ve been working on a project where I needed to generate a lot of random numbers between both positive and negative.  \r\n\r\n    function randomBetween(min, max) {\r\n\t    if (min &lt; 0) {\r\n\t    \treturn min + Math.random() * (Math.abs(min)+max);\r\n\t    }else {\r\n\t\t    return min + Math.random() * max;\r\n\t    }\r\n    }\r\n\r\nE.g  \r\n\r\n    randomBetween(-10,15)//or..\r\n    randomBetween(10,20)//or...\r\n    randomBetween(-200,-100)\r\n\r\nOf course, you can also add some validation to make sure you don&#39;t do this with anything other than numbers. Also make sure that min is always less than or equal to max."},{"score":364,"body_markdown":"# [Math.random()][1]\n\nReturns an [integer random number][2] between min (**included**) and max (**included**):\n\n    function randomInteger(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\nOr [any random number][3] between min (**included**) and max (**not included**):\n\n    function randomNumber(min, max) {\n      return Math.random() * (max - min) + min;\n    }\n\nUseful examples (integers):\n\n    // 0 -&gt; 10\n    Math.floor(Math.random() * 11);\n\n    // 1 -&gt; 10\n    Math.floor(Math.random() * 10) + 1;\n\n    // 5 -&gt; 20\n    Math.floor(Math.random() * 16) + 5;\n\n    // -10 -&gt; (-2)\n    Math.floor(Math.random() * 9) - 10;\n\n** And always nice to be reminded (Mozilla):\n\n&gt; Math.random() does not provide cryptographically secure random\n&gt; numbers. Do not use them for anything related to security. Use the Web\n&gt; Crypto API instead, and more precisely the\n&gt; window.crypto.getRandomValues() method.\n\n\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values_inclusive\n  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_number_between_two_values"},{"score":7,"body_markdown":"I was searching random number generator written in TypeScript and I have written this after reading all of the answers, hope It would work for TypeScript coders.\r\n\r\n        Rand(min: number, max: number): number {\r\n            return (Math.random() * (max - min + 1) | 0) + min;\r\n        }   "},{"score":25,"body_markdown":"Or, in [Underscore](http://underscorejs.org/#random)\r\n\r\n    _.random(min, max)"},{"score":10,"body_markdown":"I wrote more flexible function which can give you random number but not only integer.\r\n\r\n    function rand(min,max,interval)\r\n    {\r\n        if (typeof(interval)===&#39;undefined&#39;) interval = 1;\r\n        var r = Math.floor(Math.random()*(max-min+interval)/interval);\r\n        return r*interval+min;\r\n    }\r\n\r\n    var a = rand(0,10); //can be 0, 1, 2 (...) 9, 10\r\n    var b = rand(4,6,0.1); //can be 4.0, 4.1, 4.2 (...) 5.9, 6.0\r\n\r\n\r\nFixed version."},{"score":6,"body_markdown":"`Math.random()` is fast and suitable for many purposes, but it&#39;s not appropriate if you need cryptographically-secure values (it&#39;s not secure), or if you need integers from a completely uniform unbiased distribution (the multiplication approach used in others answers produces certain values slightly more often than others).\r\n\r\nIn such cases, we can use `crypto.getRandomValues()` to generate secure integers, and reject any generated values that we can&#39;t map uniformly into the target range. This will be slower, but it shouldn&#39;t be significant unless you&#39;re generating extremely large numbers of values.\r\n\r\nTo clarify the biased distribution concern, consider the case where we want to generate a value between 1 and 5, but we have a random number generator that produces values between 1 and 16 (a 4-bit value). We want to have the same number of generated values mapping to each output value, but 16 does not evenly divide by 5: it leaves a remainder of 1. So we need to reject 1 of the possible generated values, and only continue when we get one of the 15 lesser values that can be uniformly mapped into our target range. Our behaviour could look like this pseudocode:\r\n\r\n```none\r\nGenerate a 4-bit integer in the range 1-16.\r\nIf we generated  1,  6, or 11 then output 1.\r\nIf we generated  2,  7, or 12 then output 2.\r\nIf we generated  3,  8, or 13 then output 3.\r\nIf we generated  4,  9, or 14 then output 4.\r\nIf we generated  5, 10, or 15 then output 5.\r\nIf we generated 16 then reject it and try again.\r\n```\r\n\r\nThe following code uses similar logic, but generates a 32-bit integer instead, because that&#39;s the largest common integer size that can be represented by JavaScript&#39;s standard `number` type. (This could be modified to use `BigInt`s if you need a larger range.) Regardless of the chosen range, the fraction of generated values that are rejected will always be less than 0.5, so the expected number of rejections will always be less than 1.0 and usually close to 0.0; you don&#39;t need to worry about it looping forever.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const randomInteger = (min, max) =&gt; {\r\n      const range = max - min;\r\n      const maxGeneratedValue = 0xFFFFFFFF;\r\n      const possibleResultValues = range + 1;\r\n      const possibleGeneratedValues = maxGeneratedValue + 1;\r\n      const remainder = possibleGeneratedValues % possibleResultValues;\r\n      const maxUnbiased = maxGeneratedValue - remainder;\r\n\r\n      if (!Number.isInteger(min) || !Number.isInteger(max) ||\r\n           max &gt; Number.MAX_SAFE_INTEGER || min &lt; Number.MIN_SAFE_INTEGER) {\r\n        throw new Error(&#39;Arguments must be safe integers.&#39;);\r\n      } else if (range &gt; maxGeneratedValue) {\r\n        throw new Error(`Range of ${range} (from ${min} to ${max}) &gt; ${maxGeneratedValue}.`);\r\n      } else if (max &lt; min) {\r\n        throw new Error(`max (${max}) must be &gt;= min (${min}).`);\r\n      } else if (min === max) {\r\n        return min;\r\n      } \r\n\r\n      let generated;\r\n      do {\r\n        generated = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } while (generated &gt; maxUnbiased);\r\n\r\n      return min + (generated % possibleResultValues);\r\n    };\r\n\r\n    console.log(randomInteger(-8, 8));          // -2\r\n    console.log(randomInteger(0, 0));           // 0\r\n    console.log(randomInteger(0, 0xFFFFFFFF));  // 944450079\r\n    console.log(randomInteger(-1, 0xFFFFFFFF));\r\n    // Error: Range of 4294967296 covering -1 to 4294967295 is &gt; 4294967295.\r\n    console.log(new Array(12).fill().map(n =&gt; randomInteger(8, 12)));\r\n    // [11, 8, 8, 11, 10, 8, 8, 12, 12, 12, 9, 9]\r\n\r\n&lt;!-- end snippet --&gt;"},{"score":9,"body_markdown":"Example\r\n\r\nReturn a random number between 1 and 10:\r\n\r\n    Math.floor((Math.random() * 10) + 1);\r\n\r\nThe result could be:\r\n    `3`\r\n\r\nTry yourself: [here][1]\r\n\r\n--\r\n\r\nor using lodash / undescore:\r\n\r\n`_.random(min, max)`\r\n\r\nDocs:\r\n- [lodash][2]\r\n- [undescore][3]\r\n\r\n\r\n  [1]: http://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_random2\r\n  [2]: https://lodash.com/docs#random\r\n  [3]: http://underscorejs.org/#random"},{"score":7,"body_markdown":"Inspite of many answers and almost same result. I would like to add my answer and explain its working. Because it is important to understand its working rather than copy pasting one line code. Generating random numbers is nothing but simple maths. \r\n\r\nCODE:\r\n\r\n \r\n\r\n    function getR(lower, upper) {\r\n    \r\n      var percent = (Math.random() * 100);\r\n      // this will return number between 0-99 because Math.random returns decimal number from 0-0.9929292 something like that\r\n      //now you have a percentage, use it find out the number between your INTERVAL :upper-lower \r\n      var num = ((percent * (upper - lower) / 100));\r\n      //num will now have a number that falls in your INTERVAL simple maths\r\n      num += lower;\r\n      //add lower to make it fall in your INTERVAL\r\n      //but num is still in decimal\r\n      //use Math.floor&gt;downward to its nearest integer you won&#39;t get upper value ever\r\n      //use Math.ceil&gt;upward to its nearest integer upper value is possible\r\n      //Math.round&gt;to its nearest integer 2.4&gt;2 2.5&gt;3\tboth lower and upper value possible\r\n      console.log(Math.floor(num), Math.ceil(num), Math.round(num));\r\n    }\r\n\r\n"},{"score":23,"body_markdown":"jsfiddle: https://jsfiddle.net/cyGwf/477/\r\n\r\n**Random Integer**: to get a random integer between `min` and `max`, use the following code\r\n\r\n    function getRandomInteger(min, max) {\r\n      min = Math.ceil(min);\r\n      max = Math.floor(max);\r\n      return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n\r\n\r\n**Random Floating Point Number**: to get a random floating point number between `min` and `max`, use the following code\r\n\r\n    function getRandomFloat(min, max) {\r\n      return Math.random() * (max - min) + min;\r\n    }\r\n\r\n\r\nReference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"},{"score":62,"body_markdown":"**TL;DR**\r\n\r\n    function generateRandomInteger(min, max) {\r\n      return Math.floor(min + Math.random()*(max + 1 - min))\r\n    }\r\nTo get the random number\r\n`generateRandomInteger(-20, 20);`\r\n\r\n**EXPLANATION BELOW**\r\n\r\nWe need to get a random integer, say **X** between min and max.\r\n\r\nRight? \r\n\r\ni.e \r\n**min &lt;= X &lt;= max**\r\n\r\n\r\nIf we subtract min from the equation, this is equivalent to \r\n\r\n**0 &lt;= (X - min) &lt;= (max - min)**\r\n\r\nNow, lets multiply this with a random number **r**\r\nwhich is \r\n\r\n**0 &lt;= (X - min) * r &lt;= (max - min) * r**\r\n\r\nNow, lets add back **min** to the equation\r\n\r\n**min &lt;= min + (X - min) * r &lt;= min + (max - min) * r**\r\n\r\nNow, lets chose a function which results in **r** such that it satisfies our equation range as [min,max]. This is only possible if **0&lt;= r &lt;=1**\r\n\r\nOK. Now, the range of **r** i.e [0,1] is very similar to Math.random() function result. Isn&#39;t it?\r\n&gt; The Math.random() function returns a floating-point, pseudo-random\r\n&gt; number in the range [0, 1); that is, from 0 (inclusive) up to but not\r\n&gt; including 1 (exclusive)\r\n\r\nFor example,\r\n\r\n# Case r = 0\r\n`min` + 0 * (`max`-`min`) = **min**\r\n\r\n# Case r = 1\r\n`min` + 1 * (`max`-`min`) = **max**\r\n\r\n# Random Case using Math.random 0 &lt;= r &lt; 1 \r\n`min` + r * (`max`-`min`) = **X**, where **X** has range of **min** &lt;= **X** &lt; **max**\r\n\r\nThe above result **X** is a random numeric. However due to Math.random() our left bound is inclusive, and the right bound is exclusive. To include our right bound we increase the right bound by 1 and floor the result.\r\n\r\n    function generateRandomInteger(min, max) {\r\n      return Math.floor(min + Math.random()*(max + 1 - min))\r\n    }\r\n\r\n# To get the random number\r\n`generateRandomInteger(-20, 20)`;\r\n\r\n"},{"score":4,"body_markdown":"Adding `float` with fixed precision version based on the `int` version in @Francisc&#39;s answer:\r\n\r\n    function randomFloatFromInterval (min, max, fractionDigits) {\r\n      const fractionMultiplier = Math.pow(10, fractionDigits)\r\n      return Math.round(\r\n        (Math.random() * (max - min) + min) * fractionMultiplier,\r\n      ) / fractionMultiplier\r\n    }\r\n\r\nso:\r\n\r\n    randomFloatFromInterval(1,3,4) // =&gt; 2.2679, 1.509, 1.8863, 2.9741, ...\r\n\r\nand for int answer\r\n\r\n    randomFloatFromInterval(1,3,0) // =&gt; 1, 2, 3\r\n\r\n\r\n"},{"score":2,"body_markdown":"This should work:\r\n\r\n    const getRandomNum = (min, max) =&gt; Math.floor(Math.random() * (max - min + 1)) + min\r\n"},{"score":1,"body_markdown":"I discovered a great new way to do this using ES6 default parameters. It is very nifty since it allows either one argument or two arguments. Here it is:\r\n\r\n\r\n    function random(n, b = 0) {\r\n        return Math.random() * (b-n) + n;\r\n    }"},{"score":3,"body_markdown":"[Crypto-strong][1] random integer number in range [a,b] (assumption: a &lt; b )\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let rand= (a,b)=&gt; a+(b-a+1)*crypto.getRandomValues(new Uint32Array(1))[0]/2**32|0\r\n\r\n    console.log( rand(1,6) );\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues"},{"score":3,"body_markdown":"to return 1-6 like a dice basically,\r\n\r\n    return Math.round(Math.random() * 5 + 1);"},{"score":1,"body_markdown":"This is about nine years late, but [randojs.com][1] makes this a simple one-liner:\r\n\r\n    rando(1, 6)\r\nYou just need to add this to the head of your html document, and you can do pretty much whatever you want with randomness easily. Random values from arrays, random jquery elements, random properties from objects, and even preventing repetitions if needed.\r\n\r\n    &lt;script src=&quot;https://randojs.com/1.0.0.js&quot;&gt;&lt;/script&gt;\r\n\r\n\r\n  [1]: https://randojs.com"},{"score":1,"body_markdown":"This works for me and produces values like Python&#39;s [random.randint][1] standard library function:\r\n\r\n```javascript\r\n\r\nfunction randint(min, max) {\r\n   return Math.round((Math.random() * Math.abs(max - min)) + min);\r\n}\r\n    \r\nconsole.log(&quot;Random integer: &quot; + randint(-5, 5));\r\n```\r\n\r\n  [1]: https://docs.python.org/3/library/random.html#random.randint"},{"score":2,"body_markdown":"Try using:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function random(min, max) {\r\n       return Math.round((Math.random() *( Math.abs(max - min))) + min);\r\n    }\r\n    console.log(random(1, 6));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":0,"body_markdown":"This function can generate a random integer number between (and including) min and max numbers:\r\n\r\n    function randomNumber(min, max) {\r\n\t  if (min &gt; max) {\r\n\t\tlet temp = max;\r\n\t\tmax = min;\r\n\t\tmin = temp;\r\n\t  }\r\n\r\n\t  if (min &lt;= 0) {\r\n\t\treturn Math.floor(Math.random() * (max + Math.abs(min) + 1)) + min;\r\n\t  } else {\r\n\t\treturn Math.floor(Math.random() * max) + min;\r\n\t  }\r\n    }\r\n\r\nExample:\r\n\r\n    randomNumber(-2, 3); // can be -2, -1, 0, 1, 2 and 3\r\n    randomNumber(-5, -2); // can be -5, -4, -3 and -2\r\n    randomNumber(0, 4); // can be 0, 1, 2, 3 and 4\r\n    randomNumber(4, 0); // can be 0, 1, 2, 3 and 4"},{"score":0,"body_markdown":"for big number.\r\n\r\n    var min_num = 900;\r\n    var max_num = 1000;\r\n    while(true){\r\n\t\t\r\n        let num_random = Math.random()* max_num;\r\n\t\tconsole.log(&#39;input : &#39;+num_random);\r\n        if(num_random &gt;= min_num){\r\n            console.log(Math.floor(num_random));\r\n           break; \r\n        } else {\r\n            console.log(&#39;:::&#39;+Math.floor(num_random));\r\n        }\r\n    }"}],"score":1930}