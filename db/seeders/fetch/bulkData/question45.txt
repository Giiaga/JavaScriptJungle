{"body":"How do I append an object (such as a string or number) to an array in JavaScript?          ","title":"How to append something to an array?","answers":[{"score":4606,"body_markdown":"Use the [`Array.prototype.push`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) method to append values to the end of an array:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // initialize array\r\n    var arr = [\r\n      &quot;Hi&quot;,\r\n      &quot;Hello&quot;,\r\n      &quot;Bonjour&quot;\r\n    ];\r\n\r\n    // append new value to the array\r\n    arr.push(&quot;Hola&quot;);\r\n\r\n    console.log(arr);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n----\r\n\r\nYou can use the `push()` function to append more than one value to an array in a single call:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // initialize array\r\n    var arr = [&quot;Hi&quot;, &quot;Hello&quot;, &quot;Bonjour&quot;, &quot;Hola&quot;];\r\n\r\n    // append multiple values to the array\r\n    arr.push(&quot;Salut&quot;, &quot;Hey&quot;);\r\n\r\n    // display all values\r\n    for (var i = 0; i &lt; arr.length; i++) {\r\n      console.log(arr[i]);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n----\r\n\r\n\r\n**Update**\r\n\r\nIf you want to add the items of one array to another array, you can use [`firstArray.concat(secondArray)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat):\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var arr = [\r\n      &quot;apple&quot;,\r\n      &quot;banana&quot;,\r\n      &quot;cherry&quot;\r\n    ];\r\n\r\n    arr = arr.concat([\r\n      &quot;dragonfruit&quot;,\r\n      &quot;elderberry&quot;,\r\n      &quot;fig&quot;\r\n    ]);\r\n\r\n    console.log(arr);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n**Update**\r\n\r\nJust an addition to this answer if you want to prepend any value to the start of an array (i.e. first index) then you can use [`Array.prototype.unshift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift) for this purpose.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var arr = [1, 2, 3];\r\n    arr.unshift(0);\r\n    console.log(arr);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIt also supports appending multiple values at once just like `push`.\r\n\r\n---\r\n\r\n**Update**\r\n\r\nAnother way with ***ES6*** syntax is to return a new array with the ***[spread syntax][1]***. This leaves the original array unchanged, but returns a new array with new items appended, compliant with the spirit of functional programming.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const arr = [\r\n      &quot;Hi&quot;,\r\n      &quot;Hello&quot;,\r\n      &quot;Bonjour&quot;,\r\n    ];\r\n    \r\n    const newArr = [\r\n      ...arr,\r\n      &quot;Salut&quot;,\r\n    ];\r\n\r\n    console.log(newArr);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"},{"score":1059,"body_markdown":"If you&#39;re only appending a single variable, then `push()` works just fine. If you need to append another array, use `concat()`:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var ar1 = [1, 2, 3];\r\n    var ar2 = [4, 5, 6];\r\n\r\n    var ar3 = ar1.concat(ar2);\r\n\r\n    alert(ar1);\r\n    alert(ar2);\r\n    alert(ar3);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThe concat does not affect `ar1` and `ar2` unless reassigned, for example:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var ar1 = [1, 2, 3];\r\n    var ar2 = [4, 5, 6];\r\n\r\n    ar1 = ar1.concat(ar2);\r\n    alert(ar1);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nLots of great info [here](http://www.javascriptkit.com/jsref/)."},{"score":412,"body_markdown":"Some quick benchmarking (each test = 500k appended elements and the results are averages of multiple runs) showed the following:\r\n\r\nFirefox 3.6 (Mac):\r\n\r\n - Small arrays: **`arr[arr.length] = b` is faster** (300ms vs. 800ms)\r\n - Large arrays: **`arr.push(b)` is faster** (500ms vs. 900ms)\r\n\r\nSafari 5.0 (Mac):\r\n\r\n - Small arrays: **`arr[arr.length] = b` is faster** (90ms vs. 115ms)\r\n - Large arrays: **`arr[arr.length] = b` is faster** (160ms vs. 185ms)\r\n\r\n\r\nGoogle Chrome 6.0 (Mac):\r\n\r\n - Small arrays: **No significant difference** (and Chrome is FAST! Only ~38ms !!)\r\n - Large arrays: **No significant difference** (160ms)\r\n\r\n\r\nI like the `arr.push()` syntax better, but I think I&#39;d be better off with the `arr[arr.length]` Version, at least in raw speed. I&#39;d love to see the results of an IE run though.\r\n\r\n\r\n----------\r\n\r\nMy benchmarking loops:\r\n\r\n    function arrpush_small() {\r\n        var arr1 = [];\r\n        for (a = 0; a &lt; 100; a++)\r\n        {\r\n            arr1 = [];\r\n            for (i = 0; i &lt; 5000; i++)\r\n            {\r\n                arr1.push(&#39;elem&#39; + i);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function arrlen_small() {\r\n        var arr2 = [];\r\n        for (b = 0; b &lt; 100; b++)\r\n        {\r\n            arr2 = [];\r\n            for (j = 0; j &lt; 5000; j++)\r\n            {\r\n                arr2[arr2.length] = &#39;elem&#39; + j;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function arrpush_large() {\r\n        var arr1 = [];\r\n        for (i = 0; i &lt; 500000; i++)\r\n        {\r\n            arr1.push(&#39;elem&#39; + i);\r\n        }\r\n    }\r\n    \r\n    function arrlen_large() {\r\n        var arr2 = [];\r\n        for (j = 0; j &lt; 500000; j++)\r\n        {\r\n            arr2[arr2.length] = &#39;elem&#39; + j;\r\n        }\r\n    }"},{"score":52,"body_markdown":"If `arr` is an array, and `val` is the value you wish to add use:\r\n\r\n    arr.push(val);\r\n\r\nE.g.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];\r\n    arr.push(&#39;d&#39;);\r\n    console.log(arr);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":50,"body_markdown":"Use [`concat`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/concat):\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    a = [1, 2, 3];\r\n    b = [3, 4, 5];\r\n    a = a.concat(b);\r\n    console.log(a);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":18,"body_markdown":"If you know the highest index (such as stored in a variable &quot;i&quot;) then you can do\r\n\r\n    myArray[i + 1] = someValue;\r\n\r\nHowever if you don&#39;t know then you can either use \r\n\r\n    myArray.push(someValue);\r\nas other answers suggested, or you can use\r\n\r\n    myArray[myArray.length] = someValue; \r\nNote that the array is zero based so .length return the highest index plus one.\r\n\r\nAlso note that you don&#39;t have to add in order and you can actually skip values, as in\r\n    \r\n    myArray[myArray.length + 1000] = someValue;\r\nIn which case the values in between will have a value of undefined.\r\n\r\nIt is therefore a good practice when looping through a JavaScript to verify that a value actually exists at that point.\r\n\r\nThis can be done by something like the following:\r\n\r\n    if(myArray[i] === &quot;undefined&quot;){ continue; }\r\n\r\nif you are certain that you don&#39;t have any zeros in the array then you can just do:\r\n\r\n    if(!myArray[i]){ continue; }\r\n\r\nOf course make sure in this case that you don&#39;t use as the condition myArray[i] (as some people over the internet suggest based on the end that as soon as i is greater then the highest index it will return undefined which evaluates to false)\r\n     "},{"score":306,"body_markdown":"I think it&#39;s worth mentioning that push can be called with multiple arguments, which will be appended to the array in order. For example:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var arr = [&#39;first&#39;];\r\n    arr.push(&#39;second&#39;, &#39;third&#39;);\r\n    console.log(arr);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nAs a result of this you can use push.apply to append an array to another array like so:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var arr = [&#39;first&#39;];\r\n    arr.push(&#39;second&#39;, &#39;third&#39;);\r\n    arr.push.apply(arr, [&#39;forth&#39;, &#39;fifth&#39;]);\r\n    console.log(arr);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n[Annotated ES5][1] has more info on exactly what [push][2] and [apply][3] do.\r\n\r\n2016 update: with [spread][4], you don&#39;t need that `apply` anymore, like:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var arr = [&#39;first&#39;];\r\n    arr.push(&#39;second&#39;, &#39;third&#39;);\r\n\r\n    arr.push(...[&#39;fourth&#39;, &#39;fifth&#39;]);\r\n    console.log(arr) ;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: http://es5.github.com/\r\n  [2]: http://es5.github.com/#x15.4.4.7\r\n  [3]: http://es5.github.com/#x15.3.4.3\r\n  [4]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator"},{"score":83,"body_markdown":"You can use `push` and `apply` function to append two arrays.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var array1 = [11, 32, 75];\r\n    var array2 = [99, 67, 34];\r\n\r\n    Array.prototype.push.apply(array1, array2);\r\n    console.log(array1);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIt will append `array2` to `array1`. Now `array1` contains `[11, 32, 75, 99, 67, 34]`.\r\nThis code is much simpler than writing `for` loops to copy each and every items in the array."},{"score":32,"body_markdown":"If you want to append two arrays -\r\n\r\n    var a = [&#39;a&#39;, &#39;b&#39;];\r\n    var b = [&#39;c&#39;, &#39;d&#39;];\r\n\r\n\r\nthen you could use:\r\n\r\n    var c = a.concat(b);\r\n\r\nAnd if you want to add record `g` to array  (`var a=[]`) then you could use:\r\n\r\n    a.push(&#39;g&#39;);\r\n"},{"score":11,"body_markdown":"Let the array length property do the work:\r\n======================================\r\n\r\n    myarray[myarray.length] = &#39;new element value added to the end of the array&#39;;\r\n\r\nmyarray.length returns the number of strings in the array.\r\n**JS is zero based** so the next element key of the array will be the current length of the array.\r\nEX:\r\n\r\n\r\n    var myarray = [0, 1, 2, 3],\r\n        myarrayLength = myarray.length; //myarrayLength is set to 4"},{"score":25,"body_markdown":"The `push()` method adds new items to the end of an array, and returns the new length. Example:\r\n\r\n    var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\r\n    fruits.push(&quot;Kiwi&quot;);\r\n\r\n    // The result of fruits will be:\r\n    Banana, Orange, Apple, Mango, Kiwi\r\n\r\nThe exact answer to your question is already answered, but let&#39;s look at some other ways to add items to an array.\r\n\r\nThe `unshift()` method adds new items to the beginning of an array, and returns the new length. Example:\r\n\r\n    var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];\r\n    fruits.unshift(&quot;Lemon&quot;, &quot;Pineapple&quot;);\r\n    \r\n    // The result of fruits will be:\r\n    Lemon, Pineapple, Banana, Orange, Apple, Mango\r\n\r\nAnd lastly, the `concat()` method is used to join two or more arrays. Example:\r\n\r\n\r\n    var fruits = [&quot;Banana&quot;, &quot;Orange&quot;];\r\n    var moreFruits = [&quot;Apple&quot;, &quot;Mango&quot;, &quot;Lemon&quot;];\r\n    var allFruits = fruits.concat(moreFruits);\r\n\r\n    // The values of the children array will be:\r\n    Banana, Orange, Apple, Mango, Lemon"},{"score":65,"body_markdown":"With the new ES6 [spread operator][1], joining two arrays using `push` becomes even easier:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var arr = [1, 2, 3, 4, 5];\r\n    var arr2 = [6, 7, 8, 9, 10];\r\n    arr.push(...arr2);\r\n    console.log(arr);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThis adds the contents of `arr2` onto the end of `arr`.\r\n\r\n[Babel REPL Example][2]\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\r\n  [2]: https://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;code=var%20arr%20%3D%20%5B1%2C%202%2C%203%2C%204%2C%205%5D%3B%0Aarr.push(...%5B6%2C%207%2C%208%2C%209%2C%2010%5D)%3B%0Aconsole.log(arr)%3B"},{"score":10,"body_markdown":"&gt;Just want to add a snippet for non-destructive addition of an element.\r\n\r\n    var newArr = oldArr.concat([newEl]);"},{"score":12,"body_markdown":"`concat()`, of course, can be used with 2 dimensional arrays as well. No looping required.\r\n\r\n&gt; var a = [\r\n&gt;     [1, 2],\r\n&gt;     [3, 4] ];\r\n&gt; \r\n&gt; \r\n&gt; var b = [\r\n&gt;     [&quot;a&quot;, &quot;b&quot;],\r\n&gt;     [&quot;c&quot;, &quot;d&quot;] ];\r\n&gt; \r\n&gt; \r\n&gt; \r\n&gt; b = b.concat(a); \r\n&gt;\r\n&gt; alert(b[2][1]); // result 2"},{"score":36,"body_markdown":"Javascript with **ECMAScript 5** standard which is supported by most browsers now, you can use `apply()` to append `array1` to `array2`.\r\n\r\n    var array1 = [3, 4, 5];\r\n    var array2 = [1, 2];\r\n    \r\n    Array.prototype.push.apply(array2, array1);\r\n    \r\n    console.log(array2); // [1, 2, 3, 4, 5]\r\n\r\nJavascript with **ECMAScript 6** standard which is supported by Chrome and FF and IE Edge, you can use the `spread` operator:\r\n\r\n    &quot;use strict&quot;;\r\n    let array1 = [3, 4, 5];\r\n    let array2 = [1, 2];\r\n    \r\n    array2.push(...array1);\r\n    \r\n    console.log(array2); // [1, 2, 3, 4, 5]\r\n\r\nThe `spread` operator will replace `array2.push(...array1);` with `array2.push(3, 4, 5);` when the browser is thinking the logic.\r\n\r\n**Bonus point**\r\n\r\nIf you&#39;d like to create *another* variable to store all the items from both array, you can do this:\r\n\r\n**ES5** `var combinedArray = array1.concat(array2);`\r\n\r\n**ES6** `const combinedArray = [...array1, ...array2]`\r\n\r\nThe spread operator (`...`) is to spread out all items from a collection."},{"score":4,"body_markdown":"If you want to append a single value into an array, simply use the push method. It will add a new element at the end of the array.\r\n\r\nBut if you intend to add multiple elements then store the elements in a new array and concat the second array with the first array...either way you wish.\r\n\r\n    arr=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;];\r\n    arr.push(&#39;d&#39;);\r\n    //now print the array in console.log and it will contain &#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39; as elements.\r\n    console.log(array);"},{"score":5,"body_markdown":"if you want to combine 2 arrays without the duplicate you may try the code below\r\n\r\n    array_merge = function (arr1, arr2) {\r\n      return arr1.concat(arr2.filter(function(item){\r\n        return arr1.indexOf(item) &lt; 0;\r\n      }))\r\n    }\r\n\r\n\r\n**usage:**\r\n\r\n    array1 = [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]\r\n    array2 = [&#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;]\r\n    combined_array = array_merge(array1, array2)\r\n\r\n**Output:**\r\n[1,2,3,4,5]    "},{"score":7,"body_markdown":"If you are using the ES6 you can use [spread][1] operator to do it.\r\n\r\n    var arr = [\r\n        &quot;apple&quot;,\r\n        &quot;banana&quot;,\r\n        &quot;cherry&quot;\r\n    ];\r\n\r\n    var arr2 = [\r\n        &quot;dragonfruit&quot;,\r\n        &quot;elderberry&quot;,\r\n        &quot;fig&quot;\r\n    ];\r\n\r\n    arr.push(...arr2);\r\n\r\n  [1]: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Spread_operator"},{"score":28,"body_markdown":"**There are a couple of ways to append an array in JavaScript:**\r\n\r\n**1)** The `push()` method adds one or more elements to the end of an array and returns the new length of the array.\r\n\r\n    var a = [1, 2, 3];\r\n    a.push(4, 5);\r\n    console.log(a);\r\n\r\nOutput:\r\n\r\n    [1, 2, 3, 4, 5]\r\n\r\n**2)** The `unshift()` method adds one or more elements to the beginning of an array and returns the new length of the array:\r\n\r\n\r\n    var a = [1, 2, 3];\r\n    a.unshift(4, 5);\r\n    console.log(a); \r\n\r\nOutput:\r\n\r\n    [4, 5, 1, 2, 3]\r\n\r\n**3)** The `concat()` method is used to merge two or more arrays. This method **does not change** the existing arrays, but instead returns a new array.\r\n\r\n\r\n    var arr1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\r\n    var arr2 = [&quot;d&quot;, &quot;e&quot;, &quot;f&quot;];\r\n    var arr3 = arr1.concat(arr2);\r\n    console.log(arr3);\r\n\r\n\r\nOutput:\r\n\r\n    [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot; ]\r\n\r\n**4)** You can use the array&#39;s `.length` property to add an element to the end of the array:\r\n\r\n\r\n    var ar = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];\r\n    ar[ar.length] = &#39;four&#39;;\r\n    console.log( ar ); \r\n\r\n\r\nOutput:\r\n\r\n     [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;]\r\n\r\n**5)** The `splice()` method changes the content of an array by removing existing elements and/or adding new elements:\r\n\r\n\r\n    var myFish = [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;surgeon&quot;];\r\n    myFish.splice(4, 0, &quot;nemo&quot;);\r\n    //array.splice(start, deleteCount, item1, item2, ...)\r\n    console.log(myFish);\r\n\r\nOutput:\r\n\r\n    [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;surgeon&quot;,&quot;nemo&quot;]\r\n\r\n**6)** You can also add a new element to an array simply by specifying a new index and assigning a value:\r\n\r\n\r\n    var ar = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];\r\n    ar[3] = &#39;four&#39;; // add new element to ar\r\n    console.log(ar);\r\n\r\nOutput:\r\n\r\n    [&quot;one&quot;, &quot;two&quot;,&quot;three&quot;,&quot;four&quot;]"},{"score":24,"body_markdown":"Now, you can take advantage of ES6 syntax and just do:\r\n\r\n\r\n    let array = [1, 2];\r\n    console.log([...array, 3]);\r\n\r\nkeeping the original array immutable."},{"score":2,"body_markdown":"We don&#39;t have append function for Array in javascript, but we have **push** and **unshift**, imagine you have the array below:\r\n\r\n    var arr = [1, 2, 3, 4, 5];\r\n\r\nand we like append a value to this array, we can do, arr.push(6) and it will add 6 to the end of the array:\r\n\r\n    arr.push(6); // return [1, 2, 3, 4, 5, 6];\r\n\r\nalso we can use unshift, look at how we can apply this:\r\n\r\n    arr.unshift(0); //return [0, 1, 2, 3, 4, 5];\r\n\r\nThey are main functions to add or append new values to the arrays.\r\n\r\n"},{"score":4,"body_markdown":"You .push() that value in. \r\n**Example:** array.push(value);"},{"score":7,"body_markdown":"**you can do it using new javascript Es 6 feature :**\r\n\r\n    // initialize array\r\n\r\n    var arr = [\r\n        &quot;Hi&quot;,\r\n        &quot;Hello&quot;,\r\n        &quot;Bangladesh&quot;\r\n    ];\r\n    \r\n    // append new value to the array\r\n\r\n    arr= [...arr , &quot;Feni&quot;];\r\n\r\n    // or you can put a variable value\r\n\r\n    var testValue = &quot;Cool&quot;;\r\n\r\n    arr = [...arr , testValue ];\r\n\r\n    console.log(arr); \r\n\r\n    // final output  [ &#39;Hi&#39;, &#39;Hello&#39;, &#39;Bangladesh&#39;, &#39;Feni&#39;, &#39;Cool&#39; ]\r\n\r\n\r\n"},{"score":1,"body_markdown":"You can use push method.\r\n\r\n    Array.prototype.append = function(destArray){\r\n    \t destArray = destArray || [];\r\n         this.push.call(this,...destArray);\r\n    \t return this;\r\n    }\r\n    var arr = [1,2,5,67];\r\n    var arr1 = [7,4,7,8];\r\n    console.log(arr.append(arr1));// [7, 4, 7, 8, 1, 4, 5, 67, 7]\r\n    console.log(arr.append(&quot;Hola&quot;))//[1, 2, 5, 67, 7, 4, 7, 8, &quot;H&quot;, &quot;o&quot;, &quot;l&quot;, &quot;a&quot;]"},{"score":8,"body_markdown":"Append a value to an array\r\n--------------------------\r\n\r\nSince [Array.prototype.push][1] adds one or more elements to the end of an array and *returns the new length of the array*, sometimes we want just to get the new up-to-date array so we can do something like so:\r\n\r\n    const arr = [1, 2, 3];\r\n    const val = 4;\r\n    \r\n    arr.concat([val]); // [1, 2, 3, 4]\r\n\r\nOr just:\r\n    \r\n    [...arr, val] // [1, 2, 3, 4]\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push"},{"score":0,"body_markdown":"`push()` adds a new element to the end of an array.  \r\n`pop()` removes an element from the end of an array.\r\n\r\nTo append an object (such as a string or number) to an array use -  \r\n`array.push(toAppend);`"},{"score":6,"body_markdown":"## Append a single item\r\n\r\nTo append a single item to an array, use the [`push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) method provided by the Array object:\r\n\r\n\r\n\r\n    const fruits = [&#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;]\r\n    fruits.push(&#39;mango&#39;)\r\n    console.log(fruits)\r\n\r\n\r\n`push()` mutates the original array.\r\n\r\nTo create a new array instead, use the [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) Array method:\r\n\r\n\r\n\r\n\r\n    const fruits = [&#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;]\r\n    const allfruits = fruits.concat(&#39;mango&#39;)\r\n    console.log(allfruits)\r\n\r\n\r\n\r\n\r\nNotice that `concat()` does not actually add an item to the array, but creates a new array, which you can assign to another variable, or reassign to the original array (declaring it as `let`, as you cannot reassign a `const`):\r\n\r\n\r\n\r\n    const fruits = [&#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;]\r\n    const allfruits = fruits.concat(&#39;mango&#39;)\r\n    console.log(allfruits)\r\n\r\n\r\n\r\n```js\r\nlet fruits = [&#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;]\r\nfruits = fruits.concat(&#39;mango&#39;)\r\n```\r\n\r\n## Append multiple items\r\n\r\nTo append a multiple item to an array, you can use [`push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) by calling it with multiple arguments:\r\n\r\n\r\n\r\n\r\n    const fruits = [&#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;]\r\n    fruits.push(&#39;mango&#39;, &#39;melon&#39;, &#39;avocado&#39;)\r\n    console.log(fruits)\r\n\r\n\r\nYou can also use the [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) method you saw before, passing a list of items separated by a comma:\r\n\r\n\r\n\r\n    const fruits = [&#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;]\r\n    const allfruits = fruits.concat(&#39;mango&#39;, &#39;melon&#39;, &#39;avocado&#39;)\r\n    console.log(allfruits)\r\n\r\n\r\nor an array:\r\n\r\n\r\n    const fruits = [&#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;]\r\n    const allfruits = fruits.concat([&#39;mango&#39;, &#39;melon&#39;, &#39;avocado&#39;])\r\n    console.log(allfruits)\r\n\r\n\r\n\r\nRemember that as described previously this method does not mutate the original array, but it  returns a new array.\r\n\r\n&gt; Originally [posted at](https://flaviocopes.com/how-to-append-item-to-array/) \r\n"},{"score":17,"body_markdown":"**Append Single Element**\r\n\r\n    //Append to the end\r\n    arrName.push(&#39;newName1&#39;);\r\n    \r\n    //Prepend to the start\r\n    arrName.unshift(&#39;newName1&#39;);\r\n    \r\n    //Insert at index 1\r\n    arrName.splice(1, 0,&#39;newName1&#39;);\r\n    //1: index number, 0: number of element to remove, newName1: new element\r\n    \r\n    \r\n    // Replace index 3 (of exists), add new element otherwise.\r\n    arrName[3] = &#39;newName1&#39;;\r\n\r\n**Append Multiple Elements**\r\n\r\n    //Insert from index number 1\r\n    arrName.splice(1, 0,&#39;newElemenet1&#39;, &#39;newElemenet2&#39;, &#39;newElemenet3&#39;);\r\n    //1: index number from where insert starts, \r\n    //0: number of element to remove, \r\n    //newElemenet1,2,3: new elements\r\n\r\n**Append array**\r\n\r\n    //join two or more arrays\r\n    arrName.concat(newAry1, newAry2);\r\n    //newAry1,newAry2: Two different arrays which are to be combined (concatenated) to an existing array"},{"score":0,"body_markdown":"Appending items on an array\r\n\r\n    let fruits =[&quot;orange&quot;,&quot;banana&quot;,&quot;apple&quot;,&quot;lemon&quot;]; /*array declaration*/\r\n\r\n    fruits.push(&quot;avacado&quot;); /* Adding an element to the array*/\r\n\r\n    /*displaying elements of the array*/\r\n\r\n    for(var i=0; i &lt; fruits.length; i++){\r\n      console.log(fruits[i]);\r\n    }\r\n\r\n"},{"score":1,"body_markdown":"You can use the push() if you want to add values\r\ne.g. `arr.push(&quot;Test1&quot;, &quot;Test2&quot;);`\r\n\r\nIf you have array you can use concat()\r\ne.g. `Array1.concat(Array2)`\r\n\r\nIf you have just one element to add you can also try length menthod\r\ne.g. `array[aray.length] = &#39;test&#39;;`\r\n"}],"score":2893}