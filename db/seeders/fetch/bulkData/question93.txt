{"body":"I want a 5 character string composed of characters picked randomly from the set `[a-zA-Z0-9]`.\r\n\r\nWhat&#39;s the best way to do this with JavaScript?","title":"Generate random string/characters in JavaScript","answers":[{"score":2711,"body_markdown":"I think this will work for you:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\nfunction makeid(length) {\r\n   var result           = &#39;&#39;;\r\n   var characters       = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;;\r\n   var charactersLength = characters.length;\r\n   for ( var i = 0; i &lt; length; i++ ) {\r\n          result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n   }\r\n   return result;\r\n}\r\n\r\nconsole.log(makeid(5));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":102,"body_markdown":"Something like this should work\r\n\r\n    function randomString(len, charSet) {\r\n    \tcharSet = charSet || &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;;\r\n    \tvar randomString = &#39;&#39;;\r\n    \tfor (var i = 0; i &lt; len; i++) {\r\n    \t\tvar randomPoz = Math.floor(Math.random() * charSet.length);\r\n    \t\trandomString += charSet.substring(randomPoz,randomPoz+1);\r\n    \t}\r\n    \treturn randomString;\r\n    }\r\n\r\nCall with default charset [a-zA-Z0-9] or send in your own:\r\n\r\n    var randomValue = randomString(5);\r\n\r\n    var randomValue = randomString(5, &#39;PICKCHARSFROMTHISSET&#39;);\r\n"},{"score":75,"body_markdown":"&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function randomstring(L) {\r\n      var s = &#39;&#39;;\r\n      var randomchar = function() {\r\n        var n = Math.floor(Math.random() * 62);\r\n        if (n &lt; 10) return n; //1-10\r\n        if (n &lt; 36) return String.fromCharCode(n + 55); //A-Z\r\n        return String.fromCharCode(n + 61); //a-z\r\n      }\r\n      while (s.length &lt; L) s += randomchar();\r\n      return s;\r\n    }\r\n    console.log(randomstring(5));\r\n\r\n&lt;!-- end snippet --&gt;"},{"score":6,"body_markdown":"This works for sure\r\n\r\n\r\n    &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;\r\n    function randomString() {\r\n     var chars = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;\r\n     var string_length = 8;\r\n     var randomstring = &#39;&#39;;\r\n     for (var i=0; i&lt;string_length; i++) {\r\n      var rnum = Math.floor(Math.random() * chars.length);\r\n      randomstring += chars.substring(rnum,rnum+1);\r\n     }\r\n     document.randform.randomfield.value = randomstring;\r\n    }\r\n    &lt;/script&gt;"},{"score":23,"body_markdown":"I know everyone has got it right already, but i felt like having a go at this one in the most lightweight way possible(light on code, not CPU):\r\n\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function rand(length, current) {\r\n      current = current ? current : &#39;&#39;;\r\n      return length ? rand(--length, &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;.charAt(Math.floor(Math.random() * 60)) + current) : current;\r\n    }\r\n\r\n    console.log(rand(5));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIt takes a bit of time to wrap your head around, but I think it really shows how awesome javascript&#39;s syntax is.\r\n"},{"score":2487,"body_markdown":"&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let r = Math.random().toString(36).substring(7);\r\n    console.log(&quot;random&quot;, r);\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nNote: The above algorithm has the following weaknesses:\r\n\r\n* It will generate anywhere between 0 and 6 characters due to the fact that trailing zeros get removed when stringifying floating points.\r\n* It depends deeply on the algorithm used to stringify floating point numbers, which is horrifically complex. (See the paper [&quot;How to Print Floating-Point Numbers Accurately&quot;](https://lists.nongnu.org/archive/html/gcl-devel/2012-10/pdfkieTlklRzN.pdf).)\r\n* `Math.random()` may produce predictable (&quot;random-looking&quot; but not really random) output depending on the implementation. The resulting string is not suitable when you need to guarantee uniqueness or unpredictability.\r\n* Even if it produced 6 uniformly random, unpredictable characters, you can expect to see a duplicate after generating only about 50,000 strings, due to the [birthday paradox](https://en.wikipedia.org/wiki/Birthday_problem). (sqrt(36^6) = 46656)"},{"score":9,"body_markdown":"You can loop through an array of items and recursively add them to a string variable, for instance if you wanted a random DNA sequence:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function randomDNA(len) {\r\n      len = len || 100\r\n      var nuc = new Array(&quot;A&quot;, &quot;T&quot;, &quot;C&quot;, &quot;G&quot;)\r\n      var i = 0\r\n      var n = 0\r\n      s = &#39;&#39;\r\n      while (i &lt;= len - 1) {\r\n        n = Math.floor(Math.random() * 4)\r\n        s += nuc[n]\r\n        i++\r\n      }\r\n      return s\r\n    }\r\n\r\n    console.log(randomDNA(5));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":7,"body_markdown":"    function randomString (strLength, charSet) {\r\n    \tvar result = [];\r\n    \t\r\n    \tstrLength = strLength || 5;\r\n    \tcharSet = charSet || &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;;\r\n    \t\r\n    \twhile (--strLength) {\r\n    \t\tresult.push(charSet.charAt(Math.floor(Math.random() * charSet.length)));\r\n    \t}\r\n    \t\r\n    \treturn result.join(&#39;&#39;);\r\n    }\r\n\r\nThis is as clean as it will get. It is fast too, http://jsperf.com/ay-random-string."},{"score":5,"body_markdown":"Generate 10 characters long string. Length is set by parameter (default 10).\r\n\r\n    function random_string_generator(len) {\r\n    var len = len || 10;\r\n    var str = &#39;&#39;;\r\n    var i = 0;\r\n\r\n    for(i=0; i&lt;len; i++) {\r\n        switch(Math.floor(Math.random()*3+1)) {\r\n            case 1: // digit\r\n                str += (Math.floor(Math.random()*9)).toString();\r\n            break;\r\n\r\n            case 2: // small letter\r\n                str += String.fromCharCode(Math.floor(Math.random()*26) + 97); //&#39;a&#39;.charCodeAt(0));\r\n            break;\r\n\r\n            case 3: // big letter\r\n                str += String.fromCharCode(Math.floor(Math.random()*26) + 65); //&#39;A&#39;.charCodeAt(0));\r\n            break;\r\n\r\n            default:\r\n            break;\r\n        }\r\n    }\r\n    return str;\r\n    }\r\n\r\n"},{"score":17,"body_markdown":"In case anyone is interested in a one-liner (although not formatted as such for your convenience) that allocates the memory at once (but note that for small strings it really does not matter) here is how to do it:\r\n\r\n    Array.apply(0, Array(5)).map(function() {\r\n        return (function(charset){\r\n            return charset.charAt(Math.floor(Math.random() * charset.length))\r\n        }(&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;));\r\n    }).join(&#39;&#39;)\r\n\r\nYou can replace `5` by the length of the string you want. Thanks to @AriyaHidayat in [this post](https://stackoverflow.com/questions/3751520/how-to-generate-sequence-of-numbers-chars-in-javascript) for the solution to the `map` function not working on the sparse array created by `Array(5)`.\r\n\r\n"},{"score":3,"body_markdown":"Expanding on Doubletap&#39;s elegant example by answering the issues Gertas and Dragon brought up. Simply add in a while loop to test for those rare null circumstances, and limit the characters to five.  \r\n\r\n \r\n\r\n    function rndStr() {\r\n        x=Math.random().toString(36).substring(7).substr(0,5);\r\n        while (x.length!=5){\r\n            x=Math.random().toString(36).substring(7).substr(0,5);\r\n        }\r\n        return x;\r\n    }\r\n\r\nHere&#39;s a jsfiddle alerting you with a result: \r\nhttp://jsfiddle.net/pLJJ7/"},{"score":2,"body_markdown":"    &quot;12345&quot;.split(&#39;&#39;).map(function(){return &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;.charAt(Math.floor(62*Math.random()));}).join(&#39;&#39;);\r\n    \r\n    //or\r\n    \r\n    String.prototype.rand = function() {return this.split(&#39;&#39;).map(function(){return &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;.charAt(Math.floor(62*Math.random()));}).join(&#39;&#39;);};\r\n\r\nwill generate a random alpha-numeric string with the length of the first/calling string\r\n\r\n"},{"score":2,"body_markdown":"Also based upon doubletap&#39;s answer, this one handles any length of random required characters (lower only), and keeps generating random numbers until enough characters have been collected.\r\n\r\n    function randomChars(len) {\r\n        var chars = &#39;&#39;;\r\n\r\n        while (chars.length &lt; len) {\r\n            chars += Math.random().toString(36).substring(2);\r\n        }\r\n\r\n        // Remove unnecessary additional characters.\r\n        return chars.substring(0, len);\r\n    }\r\n"},{"score":8,"body_markdown":"How about this compact little trick?\r\n\r\n    var possible = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;;\r\n    var stringLength = 5;\r\n\r\n    function pickRandom() {\r\n        return possible[Math.floor(Math.random() * possible.length)];\r\n    }\r\n\r\n    var randomString = Array.apply(null, Array(stringLength)).map(pickRandom).join(&#39;&#39;);\r\n\r\nYou need the `Array.apply` there to trick the empty array into being an array of undefineds.\r\n\r\nIf you&#39;re coding for ES2015, then building the array is a little simpler:\r\n\r\n    var randomString = Array.from({ length: stringLength }, pickRandom).join(&#39;&#39;);"},{"score":14,"body_markdown":"Here&#39;s the method I created.&lt;br /&gt;\r\nIt will create a string containing both uppercase and lowercase characters.&lt;br /&gt;\r\nIn addition I&#39;ve included the function that will created an alphanumeric string too.\r\n\r\n\r\n**Working examples:**&lt;br /&gt;\r\nhttp://jsfiddle.net/greatbigmassive/vhsxs/  (alpha only)&lt;br /&gt;\r\nhttp://jsfiddle.net/greatbigmassive/PJwg8/ (alphanumeric)\r\n\r\n    function randString(x){\r\n        var s = &quot;&quot;;\r\n        while(s.length&lt;x&amp;&amp;x&gt;0){\r\n            var r = Math.random();\r\n            s+= String.fromCharCode(Math.floor(r*26) + (r&gt;0.5?97:65));\r\n        }\r\n        return s;\r\n    }\r\n\r\n**Upgrade July 2015**&lt;br /&gt;\r\nThis does the same thing but makes more sense and includes all letters.\r\n\r\n    var s = &quot;&quot;;\r\n    while(s.length&lt;x&amp;&amp;x&gt;0){\r\n        v = Math.random()&lt;0.5?32:0;\r\n        s += String.fromCharCode(Math.round(Math.random()*((122-v)-(97-v))+(97-v)));\r\n    }\r\n"},{"score":1,"body_markdown":"    &quot;,,,,,&quot;.replace(/,/g,function (){return &quot;AzByC0xDwEv9FuGt8HsIrJ7qKpLo6MnNmO5lPkQj4RiShT3gUfVe2WdXcY1bZa&quot;.charAt(Math.floor(Math.random()*62))});"},{"score":3,"body_markdown":"This is what I used. A combination of a couple here. I use it in a loop, and each ID it produces is unique. It might not be 5 characters, but it&#39;s guaranteed unique.\r\n\r\n    var newId =\r\n        &quot;randomid_&quot; +\r\n        (Math.random() / +new Date()).toString(36).replace(/[^a-z]+/g, &#39;&#39;);\r\n\r\n\r\n"},{"score":0,"body_markdown":"Another nice way to randomize a string from the characters `A-Za-z0-9`:\r\n\r\n    function randomString(length) {\r\n        if ( length &lt;= 0 ) return &quot;&quot;;\r\n        var getChunk = function(){\r\n            var i, //index iterator\r\n                rand = Math.random()*10e16, //execute random once\r\n                bin = rand.toString(2).substr(2,10), //random binary sequence\r\n                lcase = (rand.toString(36)+&quot;0000000000&quot;).substr(0,10), //lower case random string\r\n                ucase = lcase.toUpperCase(), //upper case random string\r\n                a = [lcase,ucase], //position them in an array in index 0 and 1\r\n                str = &quot;&quot;; //the chunk string\r\n            b = rand.toString(2).substr(2,10);\r\n            for ( i=0; i&lt;10; i++ )\r\n                str += a[bin[i]][i]; //gets the next character, depends on the bit in the same position as the character - that way it will decide what case to put next\r\n            return str;\r\n        },\r\n        str = &quot;&quot;; //the result string\r\n        while ( str.length &lt; length  )\r\n            str += getChunk();\r\n        str = str.substr(0,length);\r\n        return str;\r\n    }"},{"score":162,"body_markdown":"Here&#39;s an improvement on [doubletap&#39;s excellent answer][1]. The original has two drawbacks which are addressed here:\r\n\r\nFirst, as others have mentioned, it has a small probability of producing short strings or even an empty string (if the random number is 0), which may break your application. Here is a solution:\r\n\r\n    (Math.random().toString(36)+&#39;00000000000000000&#39;).slice(2, N+2)\r\n\r\nSecond, both the original and the solution above limit the string size N to 16 characters. The following will return a string of size N for any N (but note that using N &gt; 16 will not increase the randomness or decrease the probability of collisions):\r\n\r\n    Array(N+1).join((Math.random().toString(36)+&#39;00000000000000000&#39;).slice(2, 18)).slice(0, N)\r\n\r\nExplanation:\r\n\r\n 1. Pick a random number in the range [0,1), i.e. between 0 (inclusive) and 1 (exclusive).\r\n 2. Convert the number to a base-36 string, i.e. using characters 0-9 and a-z.\r\n 3. Pad with zeros (solves the first issue).\r\n 4. Slice off the leading &#39;0.&#39; prefix and extra padding zeros.\r\n 6. Repeat the string enough times to have at least N characters in it (by Joining empty strings with the shorter random string used as the delimiter).\r\n 7. Slice exactly N characters from the string.\r\n\r\nFurther thoughts:\r\n\r\n - This solution does not use uppercase letters, but in almost all cases (no pun intended) it does not matter.\r\n - The maximum string length at N = 16 in the original answer is measured in Chrome. In Firefox it&#39;s N = 11. But as explained, the second solution is about supporting any requested string length, not about adding randomness, so it doesn&#39;t make much of a difference.\r\n - All returned strings have an equal probability of being returned, at least as far as the results returned by Math.random() are evenly distributed (this is not cryptographic-strength randomness, in any case).\r\n - Not all possible strings of size N may be returned. In the second solution this is obvious (since the smaller string is simply being duplicated), but also in the original answer this is true since in the conversion to base-36 the last few bits may not be part of the original random bits. Specifically, if you look at the result of Math.random().toString(36), you&#39;ll notice the last character is not evenly distributed. Again, in almost all cases it does not matter, but we slice the final string from the beginning rather than the end of the random string so that short strings (e.g. N=1) aren&#39;t affected.\r\n\r\n\r\n**Update:**\r\n\r\nHere are a couple other functional-style one-liners I came up with. They differ from the solution above in that:\r\n\r\n - They use an explicit arbitrary alphabet (more generic, and suitable to the original question which asked for both uppercase and lowercase letters).\r\n - All strings of length N have an equal probability of being returned (i.e. strings contain no repetitions).\r\n - They are based on a map function, rather than the toString(36) trick, which makes them more straightforward and easy to understand.\r\n\r\nSo, say your alphabet of choice is\r\n\r\n    var s = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;;\r\n\r\nThen these two are equivalent to each other, so you can pick whichever is more intuitive to you:\r\n\r\n    Array(N).join().split(&#39;,&#39;).map(function() { return s.charAt(Math.floor(Math.random() * s.length)); }).join(&#39;&#39;);\r\n\r\nand\r\n\r\n    Array.apply(null, Array(N)).map(function() { return s.charAt(Math.floor(Math.random() * s.length)); }).join(&#39;&#39;);\r\n\r\n**Edit:**\r\n\r\nI seems like [qubyte][2] and [Martijn de Milliano][3] came up with solutions similar to the latter (kudos!), which I somehow missed. Since they don&#39;t look as short at a glance, I&#39;ll leave it here anyway in case someone really wants a one-liner :-)\r\n\r\nAlso, replaced &#39;new Array&#39; with &#39;Array&#39; in all solutions to shave off a few more bytes.\r\n\r\n  [1]: https://stackoverflow.com/a/8084248/1985033\r\n  [2]: https://stackoverflow.com/a/18120932/1985033\r\n  [3]: https://stackoverflow.com/a/14944262/1985033"},{"score":2,"body_markdown":"If a library is a possibility, Chance.js might be of help: http://chancejs.com/#string"},{"score":1,"body_markdown":"This stores 5 alphanumeric characters in variable c.\r\n\r\n    for(var c = &#39;&#39;; c.length &lt; 5;) c += Math.random().toString(36).substr(2, 1)"},{"score":23,"body_markdown":"Here are some easy one liners. Change `new Array(5)` to set the length.\r\n\r\n###Including `0-9a-z`\r\n\r\n    new Array(5).join().replace(/(.|$)/g, function(){return ((Math.random()*36)|0).toString(36);})\r\n\r\n###Including `0-9a-zA-Z`\r\n\r\n    new Array(5).join().replace(/(.|$)/g, function(){return ((Math.random()*36)|0).toString(36)[Math.random()&lt;.5?&quot;toString&quot;:&quot;toUpperCase&quot;]();});\r\n\r\n"},{"score":4,"body_markdown":"Here is a test script for the #1 answer (thank you @csharptest.net)\r\n\r\nthe script runs ```makeid()``` ```1 million``` times and as you can see 5 isnt a very unique. running it with a char length of 10 is quite reliable. I&#39;ve ran it about 50 times and haven&#39;t seen a duplicate yet ```:-)``` \r\n\r\nnote: node stack size limit exceeds around 4 million so you cant run this 5 million times it wont ever finish.\r\n\r\n\r\n    function makeid()\r\n    {\r\n        var text = &quot;&quot;;\r\n        var possible = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;\r\n    \r\n        for( var i=0; i &lt; 5; i++ )\r\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    \r\n        return text;\r\n    }\r\n    \r\n    ids ={}\r\n    count = 0\r\n    for (var i = 0; i &lt; 1000000; i++) {\r\n    \ttempId = makeid();\r\n    \tif (typeof ids[tempId] !== &#39;undefined&#39;) {\r\n    \t\tids[tempId]++;\r\n    \t\tif (ids[tempId] === 2) {\r\n    \t\t\tcount ++;\r\n    \t\t}\r\n    \t\tcount++;\r\n    \t}else{\r\n    \t\tids[tempId] = 1;\r\n    \t}\r\n    }\r\n    console.log(&quot;there are &quot;+count+ &#39; duplicate ids&#39;);\r\n"},{"score":-1,"body_markdown":"Here is an example in CoffeeScript:\r\n\r\n    String::add_Random_Letters   = (size )-&gt;\r\n                                             charSet = &#39;abcdefghijklmnopqrstuvwxyz&#39;\r\n                                             @ + (charSet[Math.floor(Math.random() * charSet.length)]  for i in [1..size]).join(&#39;&#39;)\r\n\r\nwhich can be used\r\n\r\n    value = &quot;abc_&quot;\r\n    value_with_exta_5_random_letters = value.add_Random_Letters(5)"},{"score":1,"body_markdown":"I loved the brievety of doubletap&#39;s Math.random().toString(36).substring(7) answer, but not that it had so many collisions as hacklikecrack correctly pointed out.  It generated 11-chacter strings but has a duplicate rate of 11% in a sample size of 1 million.\r\n\r\nHere&#39;s a longer (but still short) and slower alternative that had only 133 duplicates in a sample space of 1 million.  In rare cases the string will still be shorter than 11 chars:\r\n\r\n    Math.abs(Math.random().toString().split(&#39;&#39;)\r\n        .reduce(function(p,c){return (p&lt;&lt;5)-p+c})).toString(36).substr(0,11);"},{"score":544,"body_markdown":"[**Math.random** is bad for this kind of thing](https://stackoverflow.com/a/14869745/633183)\r\n\r\n**Option 1**\r\n\r\nIf you&#39;re able to do this *server*-side, just use the [crypto](http://nodejs.org/api/crypto.html) module -\r\n\r\n    var crypto = require(&quot;crypto&quot;);\r\n    var id = crypto.randomBytes(20).toString(&#39;hex&#39;);\r\n\r\n    // &quot;bb5dc8842ca31d4603d6aa11448d1654&quot;\r\n\r\nThe resulting string will be twice as long as the random bytes you generate; each byte encoded to hex is 2 characters. 20 bytes will be 40 characters of hex.\r\n\r\n-----\r\n\r\n**Option 2**\r\n\r\nIf you have to do this *client*-side, perhaps try the uuid module -\r\n\r\n    var uuid = require(&quot;uuid&quot;);\r\n    var id = uuid.v4();\r\n    \r\n    // &quot;110ec58a-a0f2-4ac4-8393-c866d813b8d1&quot;\r\n\r\n-----\r\n\r\n**Option 3**\r\n\r\nIf you have to do this *client*-side and you don&#39;t have to support old browsers, you can do it without dependencies -\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // dec2hex :: Integer -&gt; String\r\n    // i.e. 0-255 -&gt; &#39;00&#39;-&#39;ff&#39;\r\n    function dec2hex (dec) {\r\n      return dec.toString(16).padStart(2, &quot;0&quot;)\r\n    }\r\n\r\n    // generateId :: Integer -&gt; String\r\n    function generateId (len) {\r\n      var arr = new Uint8Array((len || 40) / 2)\r\n      window.crypto.getRandomValues(arr)\r\n      return Array.from(arr, dec2hex).join(&#39;&#39;)\r\n    }\r\n\r\n    console.log(generateId())\r\n    // &quot;82defcf324571e70b0521d79cce2bf3fffccd69&quot;\r\n\r\n    console.log(generateId(20))\r\n    // &quot;c1a050a4cd1556948d41&quot;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n---\r\n\r\nFor more information on [`crypto.getRandomValues`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) -\r\n\r\n&gt; The `crypto.getRandomValues()` method lets you get cryptographically strong random values. The array given as the parameter is filled with random numbers (random in its cryptographic meaning). \r\n\r\n\r\nHere&#39;s a little console example -\r\n\r\n    &gt; var arr = new Uint8Array(4) # make array of 4 bytes (values 0-255)\r\n    &gt; arr\r\n    Uint8Array(4) [ 0, 0, 0, 0 ]\r\n    \r\n    &gt; window.crypto\r\n    Crypto { subtle: SubtleCrypto }\r\n    \r\n    &gt; window.crypto.getRandomValues()\r\n    TypeError: Crypto.getRandomValues requires at least 1 argument, but only 0 were passed\r\n    \r\n    &gt; window.crypto.getRandomValues(arr)\r\n    Uint8Array(4) [ 235, 229, 94, 228 ]\r\n\r\nFor IE11 support you can use -\r\n\r\n    (window.crypto || window.msCrypto).getRandomValues(arr)\r\n\r\nFor browser coverage see https://caniuse.com/#feat=getrandomvalues\r\n\r\n"},{"score":1,"body_markdown":"**This is for firefox chrome code (addons and the like)**\r\n\r\nIt can save you a few hours of research.\r\n\r\n    function randomBytes( amount )\r\n    {\r\n    \tlet bytes = Cc[ &#39;@mozilla.org/security/random-generator;1&#39; ]\r\n    \r\n    \t\t.getService         ( Ci.nsIRandomGenerator )\r\n    \t\t.generateRandomBytes( amount, &#39;&#39;            )\r\n    \r\n    \treturn bytes.reduce( bytes2Number )\r\n    \r\n    \r\n    \tfunction bytes2Number( previousValue, currentValue, index, array )\r\n    \t{\r\n    \t  return Math.pow( 256, index ) * currentValue + previousValue\r\n    \t}\r\n    }\r\n\r\nUse it as:\r\n\r\n    let   strlen   = 5\r\n        , radix    = 36\r\n        , filename = randomBytes( strlen ).toString( radix ).splice( - strlen )"},{"score":66,"body_markdown":"# Random String Generator (Alpha-Numeric | Alpha | Numeric)\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    /**\r\n     * Pseudo-random string generator\r\n     * http://stackoverflow.com/a/27872144/383904\r\n     * Default: return a random alpha-numeric string\r\n     * \r\n     * @param {Integer} len Desired length\r\n     * @param {String} an Optional (alphanumeric), &quot;a&quot; (alpha), &quot;n&quot; (numeric)\r\n     * @return {String}\r\n     */\r\n    function randomString(len, an) {\r\n      an = an &amp;&amp; an.toLowerCase();\r\n      var str = &quot;&quot;,\r\n        i = 0,\r\n        min = an == &quot;a&quot; ? 10 : 0,\r\n        max = an == &quot;n&quot; ? 10 : 62;\r\n      for (; i++ &lt; len;) {\r\n        var r = Math.random() * (max - min) + min &lt;&lt; 0;\r\n        str += String.fromCharCode(r += r &gt; 9 ? r &lt; 36 ? 55 : 61 : 48);\r\n      }\r\n      return str;\r\n    }\r\n\r\n    console.log(randomString(10));      // i.e: &quot;4Z8iNQag9v&quot;\r\n    console.log(randomString(10, &quot;a&quot;)); // i.e: &quot;aUkZuHNcWw&quot;\r\n    console.log(randomString(10, &quot;n&quot;)); // i.e: &quot;9055739230&quot;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n\r\n&lt;hr&gt;\r\n\r\nWhile the above uses additional checks for the desired *A/N, A, N* output,\r\nlet&#39;s break it down the to the essentials (Alpha-Numeric only) for a better understanding:\r\n\r\n - Create a function that accepts an argument (desired length of the random String result)\r\n - Create an empty string like `var str = &quot;&quot;;` to concatenate random characters\r\n - Inside a loop **create a `rand` index number** from **0 to 61** (0..9+A..Z+a..z = 62)\r\n - Create a **conditional logic** to **Adjust/fix `rand`** (since it&#39;s 0..61) incrementing it by some number (see examples below) to get back the right `CharCode` number and the related Character.\r\n - Inside the loop concatenate to `str` a `String.fromCharCode( incremented rand )`\r\n\r\n\r\nLet&#39;s picture the **ASCII Character table** ranges:\r\n\r\n    _____0....9______A..........Z______a..........z___________  Character\r\n         | 10 |      |    26    |      |    26    |             Tot = 62 characters\r\n        48....57    65..........90    97..........122           CharCode ranges\r\n\r\n\r\n\r\n`Math.floor( Math.random * 62 )` gives a range from `0..61` (what we need).   \r\nLet&#39;s fix the random to get the correct **charCode ranges**:\r\n\r\n          |   rand   | charCode |  (0..61)rand += fix            = charCode ranges |\r\n    ------+----------+----------+--------------------------------+-----------------+\r\n    0..9  |   0..9   |  48..57  |  rand += 48                    =     48..57      |\r\n    A..Z  |  10..35  |  65..90  |  rand += 55 /*  90-35 = 55 */  =     65..90      |\r\n    a..z  |  36..61  |  97..122 |  rand += 61 /* 122-61 = 61 */  =     97..122     |\r\n    \r\n\r\n**The [conditional operation][1] logic** from the table above:\r\n\r\n       rand += rand&gt;9 ? ( rand&lt;36 ? 55 : 61 ) : 48 ;\r\n    // rand +=  true  ? (  true   ? 55 else 61 ) else 48 ;\r\n\r\nFrom the explanation above, here&#39;s the resulting **alpha-numeric snippet**:\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function randomString(len) {\r\n      var str = &quot;&quot;;                                // String result\r\n      for (var i = 0; i &lt; len; i++) {              // Loop `len` times\r\n        var rand = Math.floor(Math.random() * 62); // random: 0..61\r\n        var charCode = rand += rand &gt; 9 ? (rand &lt; 36 ? 55 : 61) : 48; // Get correct charCode\r\n        str += String.fromCharCode(charCode);      // add Character to str\r\n      }\r\n      return str; // After all loops are done, return the concatenated string\r\n    }\r\n\r\n    console.log(randomString(10)); // i.e: &quot;7GL9F0ne6t&quot;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n\r\nOr if you will:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const randomString = (n, r=&#39;&#39;) =&gt; {\r\n      while (n--) r += String.fromCharCode((r=Math.random()*62|0, r+=r&gt;9?(r&lt;36?55:61):48));\r\n      return r;\r\n    };\r\n\r\n    console.log(randomString(10))\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\r\n"},{"score":38,"body_markdown":"The simplest way is: \r\n\r\n    (new Date%9e6).toString(36)\r\n\r\nThis generate random strings of 5 characters based on the current time. Example output is `4mtxj` or `4mv90` or `4mwp1`\r\n\r\nThe problem with this is that if you call it two times on the same second, it will generate the same string. \r\n\r\nThe safer way is: \r\n\r\n    (0|Math.random()*9e6).toString(36)\r\n\r\nThis will generate a random string of 4 or 5 characters, always diferent. Example output is like `30jzm` or `1r591` or `4su1a`\r\n\r\nIn both ways the first part generate a random number. The `.toString(36)` part cast the number to a base36 (alphadecimal) representation of it. \r\n"},{"score":13,"body_markdown":"Assuming you use [underscorejs][1] it&#39;s possible to elegantly generate random string in just two lines:\r\n\r\n    var possible = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;;\r\n    var random = _.sample(possible, 5).join(&#39;&#39;);\r\n\r\n  [1]: http://underscorejs.org/"},{"score":144,"body_markdown":"The most compact solution, because [`slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) is shorter than [`substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring).  Subtracting from the end of the string allows to avoid floating point symbol generated by the [`random`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random) function:\r\n\r\n    Math.random().toString(36).slice(-5);\r\n\r\nor even\r\n\r\n    (+new Date).toString(36).slice(-5);\r\n\r\n**Update:** Added one more approach using [`btoa`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa) method:\r\n\r\n    btoa(Math.random()).slice(0, 5);\r\n    btoa(+new Date).slice(-7, -2);\r\n    btoa(+new Date).substr(-7, 5);\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // Using Math.random and Base 36:\r\n    console.log(Math.random().toString(36).slice(-5));\r\n\r\n    // Using new Date and Base 36:\r\n    console.log((+new Date).toString(36).slice(-5));\r\n\r\n    // Using Math.random and Base 64 (btoa):\r\n    console.log(btoa(Math.random()).slice(0, 5));\r\n\r\n    // Using new Date and Base 64 (btoa):\r\n    console.log(btoa(+new Date).slice(-7, -2));\r\n    console.log(btoa(+new Date).substr(-7, 5));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":0,"body_markdown":"Put the characters as the `thisArg` in the map function will create a &quot;one-liner&quot;:\r\n\r\n    Array.apply(null, Array(5))\r\n    .map(function(){ \r\n        return this[Math.floor(Math.random()*this.length)];\r\n    }, &quot;abcdefghijklmnopqrstuvwxyz&quot;)\r\n    .join(&#39;&#39;);\r\n"},{"score":18,"body_markdown":"If you are using [Lodash][1] or [Underscore][2], then it so simple:\r\n\r\n    var randomVal = _.sample(&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;, 5).join(&#39;&#39;);\r\n\r\n\r\n  [1]: https://lodash.com/\r\n  [2]: http://underscorejs.org/"},{"score":-3,"body_markdown":"Here&#39;s Coffeescript version one line of code\r\n\r\n    genRandomString = (length,set) -&gt; [0...length].map( -&gt; set.charAt Math.floor(Math.random() * set.length)).join(&#39;&#39;)\r\n\r\nUsage: \r\n    \r\n    genRandomString 5, &#39;ABCDEFTGHIJKLMNOPQRSTUVWXYZ&#39;\r\n\r\nOutput:\r\n\r\n    &#39;FHOOV&#39; # random string of length 5 in possible set A~Z"},{"score":1,"body_markdown":"A functional approach. This answer is only practical *if* the functional prerequisites can be leveraged in other parts of your app. The performance is probably junk, but it was super fun to write.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // functional prerequisites\r\n    const U = f=&gt; f (f)\r\n    const Y = U (h=&gt; f=&gt; f (x=&gt; h (h) (f) (x)))\r\n    const comp = f=&gt; g=&gt; x=&gt; f (g (x))\r\n    const foldk = Y (h=&gt; f=&gt; y=&gt; ([x, ...xs])=&gt;\r\n      x === undefined ? y : f (y) (x) (y=&gt; h (f) (y) (xs)))\r\n    const fold = f=&gt; foldk (y=&gt; x=&gt; k=&gt; k (f (y) (x)))\r\n    const map = f=&gt; fold (y=&gt; x=&gt; [...y, f (x)]) ([])\r\n    const char = x=&gt; String.fromCharCode(x)\r\n    const concat = x=&gt; y=&gt; y.concat(x)\r\n    const concatMap = f=&gt; comp (fold (concat) ([])) (map (f))\r\n    const irand = x=&gt; Math.floor(Math.random() * x)\r\n    const sample = xs=&gt; xs [irand (xs.length)]\r\n\r\n    // range : make a range from x to y; [x...y]\r\n    // Number -&gt; Number -&gt; [Number]\r\n    const range = Y (f=&gt; r=&gt; x=&gt; y=&gt;\r\n      x &gt; y ? r : f ([...r, x]) (x+1) (y)\r\n    ) ([])\r\n\r\n    // srand : make random string from list or ascii code ranges\r\n    // [(Range a)] -&gt; Number -&gt; [a]\r\n    const srand = comp (Y (f=&gt; z=&gt; rs=&gt; x=&gt;\r\n      x === 0 ? z : f (z + sample (rs)) (rs) (x-1)\r\n    ) ([])) (concatMap (map (char)))\r\n\r\n    // idGenerator : make an identifier of specified length\r\n    // Number -&gt; String\r\n    const idGenerator = srand ([\r\n      range (48) (57),  // include 0-9\r\n      range (65) (90),  // include A-Z\r\n      range (97) (122)  // include a-z\r\n    ])\r\n\r\n    console.log (idGenerator (6))  //=&gt; TT688X\r\n    console.log (idGenerator (10)) //=&gt; SzaaUBlpI1\r\n    console.log (idGenerator (20)) //=&gt; eYAaWhsfvLDhIBID1xRh\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIn my opinion, it&#39;s hard to beat the clarity of `idGenerator` without adding magical, do-too-many-things functions.\r\n\r\nA slight improvement could be\r\n\r\n    // ord : convert char to ascii code\r\n    // Char -&gt; Number\r\n    const ord = x =&gt; x.charCodeAt(0)\r\n \r\n    // idGenerator : make an identifier of specified length\r\n    // Number -&gt; String\r\n    const idGenerator = srand ([\r\n      range (ord(&#39;0&#39;)) (ord(&#39;9&#39;)),\r\n      range (ord(&#39;A&#39;)) (ord(&#39;Z&#39;)),\r\n      range (ord(&#39;a&#39;)) (ord(&#39;z&#39;))\r\n    ])\r\n\r\nHave fun with it. Let me know what you like/learn ^_^"},{"score":192,"body_markdown":"Short, easy and reliable\r\n---\r\nReturns exactly 5 random characters, as opposed to some of the top rated answers found here.\r\n\r\n    Math.random().toString(36).substr(2, 5);"},{"score":0,"body_markdown":"The npm module [anyid](https://www.npmjs.com/package/anyid) provides flexible API to generate various kinds of string ID / code.\r\n\r\n    const id = anyid().encode(&#39;Aa0&#39;).length(5).random().id();\r\n\r\n"},{"score":10,"body_markdown":"Fast and improved algorithm. Does not guarantee uniform (see comments).\r\n\r\n    function getRandomId(length) {\r\n        if (!length) {\r\n            return &#39;&#39;;\r\n        }\r\n    \r\n        const possible =\r\n            &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;;\r\n        let array;\r\n    \r\n        if (&#39;Uint8Array&#39; in self &amp;&amp; &#39;crypto&#39; in self &amp;&amp; length &lt;= 65536) {\r\n            array = new Uint8Array(length);\r\n            self.crypto.getRandomValues(array);\r\n        } else {\r\n            array = new Array(length);\r\n    \r\n            for (let i = 0; i &lt; length; i++) {\r\n                array[i] = Math.floor(Math.random() * 62);\r\n            }\r\n        }\r\n    \r\n        let result = &#39;&#39;;\r\n\r\n        for (let i = 0; i &lt; length; i++) {\r\n            result += possible.charAt(array[i] % 62);\r\n        }\r\n    \r\n        return result;\r\n    }\r\n\r\n"},{"score":4,"body_markdown":"You can use [coderain](https://github.com/toolity/coderain). It&#39;s a library to generate random codes according to given pattern. Use `#` as a placeholder for upper and lowercase characters as well as digits:\r\n\r\n    var cr = new CodeRain(&quot;#####&quot;);\r\n    console.log(cr.next());\r\n\r\nThere are other placeholders like `A` for uppercase letters or `9` for digits.\r\n\r\nWhat may be useful is that calling `.next()` will always give you a unique result so you don&#39;t have to worry about duplicates.\r\n\r\nHere is a demo application that [generates a list of unique random codes](https://toolity.org/random-codes/).\r\n\r\n\r\n*Full disclosure: I&#39;m the author of coderain.*"},{"score":-1,"body_markdown":"I use `var randId = &#39;rand&#39; + new Date().getTime();`"},{"score":0,"body_markdown":"in below code i am generating random code for 8 characters\r\n    \r\n    function RandomUnique(){\r\n                        var charBank = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012346789&quot;;\r\n                        var random= &#39;&#39;;\r\n                        var howmanycharacters = 8;\r\n                        for (var i = 0; i &lt; howmanycharacters ; i++) {\r\n                            random+= charBank[parseInt(Math.random() * charBank.lenght)];\r\n                        }\r\n                        return random;\r\n                    }\r\n            var random = RandomUnique();\r\n            console.log(random);"},{"score":0,"body_markdown":"Try this, what i use every time :\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function myFunction() {\r\n            var hash = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012346789&quot;;\r\n            var random8 = &#39;&#39;;\r\n            for(var i = 0; i &lt; 5; i++){\r\n                random8 += hash[parseInt(Math.random()*hash.length)];\r\n            }\r\n            console.log(random8);\r\n        document.getElementById(&quot;demo&quot;).innerHTML = &quot;Your 5 character string ===&gt; &quot;+random8;\r\n    }        \r\n            \r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;!DOCTYPE html&gt;\r\n    &lt;html&gt;\r\n    &lt;body&gt;\r\n\r\n    &lt;p&gt;Click the button to genarate 5 character random string .&lt;/p&gt;\r\n\r\n    &lt;button onclick=&quot;myFunction()&quot;&gt;Click me&lt;/button&gt;\r\n\r\n    &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;\r\n\r\n\r\n\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":0,"body_markdown":"very simple\r\n\r\n    function getRandomColor(){\r\n      var color=&#39;&#39;;\r\n      while(color.length&lt;6){\r\n        color=Math.floor(Math.random()*16777215).toString(16);\r\n      }\r\n      return &#39;#&#39;+color;\r\n    }"},{"score":1,"body_markdown":"Random numeric value (up to 16 digits)\r\n\r\n    /**\r\n     * Random numeric value (up to 16 digits)\r\n     * @returns {String}\r\n     */\r\n    function randomUid () {\r\n      return String(Math.floor(Math.random() * 9e15))\r\n    }\r\n\r\n    // randomUid() -&gt; &quot;3676724552601324&quot;"},{"score":8,"body_markdown":"The problem with responses to _&quot;I need random strings&quot;_ questions (in whatever language) is practically every solution uses a flawed primary specification of _string length_. The questions themselves rarely reveal why the random strings are needed, but I would challenge you rarely need random strings of length, say 8. What you invariably need is some number of _unique strings_, for example, to use as identifiers for some purpose.\r\n\r\nThere are two leading ways to get _strictly unique_ strings: deterministically (which is not random) and store/compare (which is onerous). What do we do? We give up the ghost. We go with _probabilistic uniqueness_ instead. That is, we accept that there is some (however small) risk that our strings won&#39;t be unique. This is where understanding [*collision probability*](https://en.wikipedia.org/wiki/Birthday_problem#Cast_as_a_collision_problem) and [*entropy*](https://en.wikipedia.org/wiki/Entropy_(information_theory)) are helpful.\r\n\r\nSo I&#39;ll rephrase the invariable need as needing some number of strings with a small risk of repeat. As a concrete example, let&#39;s say you want to generate a potential of 5 million IDs. You don&#39;t want to store and compare each new string, and you want them to be random, so you accept some risk of repeat. As example, let&#39;s say a risk of less than 1 in a trillion chance of repeat. So what length of string do you need?  Well, that question is underspecified as it depends on the characters used. But more importantly, it&#39;s misguided. What you need is a specification of the entropy of the strings, not their length. Entropy can be directly related to the probability of a repeat in some number of strings. String length can&#39;t.\r\n\r\nAnd this is where a library like [EntropyString](https://github.com/EntropyString/JavaScript) can help. To generate random IDs that have less than 1 in a trillion chance of repeat in 5 million strings using `entropy-string`:\r\n\r\n    import {Random, Entropy} from &#39;entropy-string&#39;\r\n   \r\n    const random = new Random()\r\n    const bits = Entropy.bits(5e6, 1e12)\r\n\r\n    const string = random.string(bits)\r\n\r\n  &gt; &quot;44hTNghjNHGGRHqH9&quot;\r\n\r\n`entropy-string` uses a character set with 32 characters by default. There are other predefined characters sets, and you can specify your own characters as well. For example, generating IDs with the same entropy as above but using hex characters:\r\n\r\n    import {Random, Entropy, charSet16} from &#39;./entropy-string&#39;\r\n   \r\n    const random = new Random(charSet16)\r\n    const bits = Entropy.bits(5e6, 1e12)\r\n\r\n    const string = random.string(bits)\r\n\r\n  &gt; &quot;27b33372ade513715481f&quot;\r\n\r\nNote the difference in string length due to the difference in total number of characters in the character set used. The risk of repeat in the specified number of potential strings is the same. The string lengths are not. And best of all, the risk of repeat and the potential number of strings is explicit. No more guessing with string length.\r\n\r\n"},{"score":1,"body_markdown":"Here is a different approach with fixed length by base, without RegExp replace lack (based on @bendytree&#39;s answer);\r\n\r\n    function rand(base) {\r\n        // default base 10\r\n        base = (base &gt;= 2 &amp;&amp; base &lt;= 36) ? base : 10;\r\n        for (var i = 0, ret = []; i &lt; base; i++) {\r\n            ret[i] = ((Math.random() * base) | 0).toString(base)\r\n                // include 0-9a-zA-Z?\r\n                // [Math.random() &lt; .5 ? &#39;toString&#39; : &#39;toUpperCase&#39;]();\r\n        }\r\n        return ret.join(&#39;&#39;);\r\n    }\r\n"},{"score":4,"body_markdown":"This one combines many of the answers give.\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var randNo = Math.floor(Math.random() * 100) + 2 + &quot;&quot; + new Date().getTime() +  Math.floor(Math.random() * 100) + 2 + (Math.random().toString(36).replace(/[^a-zA-Z]+/g, &#39;&#39;).substr(0, 5));\r\n\r\n    console.log(randNo);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\nI have been using it for 1 month with great results."},{"score":1,"body_markdown":"Teach a man to fish:\r\n----------------\r\nProgrammers cut paper with lasers, not chainsaws. Using fringe, language specific methods to produce the smallest, most obfuscated code is cute and all, but will never offer a complete solution. You have to use the right tool for the job. \r\n\r\nWhat you want is a string of characters, and characters are represented by bytes. And, we can represent a byte in JavaScript using a number. So then, we should generate a list of these numbers, and cast them as strings. You don&#39;t need Date, or base64; Math.random() will get you a number, and String.fromCharCode() will turn it into a string. Easy.\r\n\r\nBut, which number equals which character? UTF-8 is the primary standard used on the web to interpret bytes as characters (although JavaScript uses UTF-16 internally, they overlap). The programmer&#39;s way of solving this problem is to look into the documentation. \r\n\r\nUTF-8 lists all the keys on the keyboard in the numbers between 0 and 128. Some are non-printing. Simply pick out the characters you want in your random strings, and search for them, using randomly generated numbers.\r\n\r\nBellow is a function that takes a virtually infinite length, generates a random number in a loop, and searches for all the printing characters in the lower 128 UTF-8 codes. Entropy is inherent, since not all random numbers will hit every time (non-printing characters, white space, etc). It will also perform faster as you add more characters.\r\n\r\nI&#39;ve included most of the optimizations discussed in the thread:\r\n\r\n - The double tilde is faster than Math.floor\r\n - &quot;if&quot; statements are faster than regular expressions\r\n - pushing to an array is faster than string concatenation\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function randomID(len) {\r\n      var char;\r\n      var arr = [];\r\n      var len = len || 5;\r\n\r\n      do {\r\n        char = ~~(Math.random() * 128);\r\n\r\n        if ((\r\n            (char &gt; 47 &amp;&amp; char &lt; 58) || // 0-9\r\n            (char &gt; 64 &amp;&amp; char &lt; 91) || // A-Z\r\n            (char &gt; 96 &amp;&amp; char &lt; 123) // a-z\r\n\r\n            // || (char &gt; 32 &amp;&amp; char &lt; 48) // !&quot;#$%&amp;,()*+&#39;-./\r\n            // || (char &gt; 59 &amp;&amp; char &lt; 65) // &lt;=&gt;?@\r\n            // || (char &gt; 90 &amp;&amp; char &lt; 97) // [\\]^_`\r\n            // || (char &gt; 123 &amp;&amp; char &lt; 127) // {|}~\r\n          )\r\n          //security conscious removals: &quot; &#39; \\ ` \r\n          //&amp;&amp; (char != 34 &amp;&amp; char != 39 &amp;&amp; char != 92 &amp;&amp; char != 96) \r\n\r\n        ) { arr.push(String.fromCharCode(char)) }\r\n\r\n      } while (arr.length &lt; len);\r\n\r\n      return arr.join(&#39;&#39;)\r\n    }\r\n\r\n    var input = document.getElementById(&#39;length&#39;);\r\n\r\n    input.onfocus = function() { input.value = &#39;&#39;; }\r\n\r\n    document.getElementById(&#39;button&#39;).onclick = function() {\r\n      var view = document.getElementById(&#39;string&#39;);\r\n      var is_number = str =&gt; ! Number.isNaN( parseInt(str));\r\n        \r\n      if ( is_number(input.value))\r\n        view.innerText = randomID(input.value);\r\n      else\r\n        view.innerText = &#39;Enter a number&#39;;\r\n    }\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    #length {\r\n      width: 3em;\r\n      color: #484848;\r\n    }\r\n\r\n    #string {\r\n      color: #E83838;\r\n      font-family: &#39;sans-serif&#39;;\r\n      word-wrap: break-word;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;input id=&quot;length&quot; type=&quot;text&quot; value=&#39;#&#39;/&gt;\r\n    &lt;input id=&quot;button&quot; type=&quot;button&quot; value=&quot;Generate&quot; /&gt;\r\n    &lt;p id=&quot;string&quot;&gt;&lt;/p&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nWhy do it in this tedious way? Because you can. You&#39;re a programmer. You can make a computer do anything! Besides, what if you want a string of Hebrew characters? It&#39;s not hard. Find those characters in the UTF-8 standard and search for them. Free yourself from these McDonald methods like toString(36).\r\n\r\nSometimes, dropping down to a lower level of abstraction is what&#39;s needed to create a real solution. Understanding the fundamental principals at hand can allow you to customize your code how you&#39;d like. Maybe you want an infinitely generated string to fill a circular buffer? Maybe you want all of your generated strings to be palindromes? Why hold yourself back?"},{"score":6,"body_markdown":"How about something like this: `Date.now().toString(36)`\r\nNot very random, but short and quite unique every time you call it."},{"score":1,"body_markdown":"I have made a String prototype which can generate a random String with a given length.\r\n\r\nYou also can secify if you want special chars and you can avoid some.\r\n\r\n    /**\r\n     * STRING PROTOTYPE RANDOM GENERATOR\r\n     * Used to generate a random string\r\n     * @param {Boolean} specialChars\r\n     * @param {Number} length\r\n     * @param {String} avoidChars\r\n     */\r\n    String.prototype.randomGenerator = function (specialChars = false, length = 1, avoidChars = &#39;&#39;) {\r\n        let _pattern = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;;\r\n        _pattern += specialChars === true ? &#39;(){}[]+-*/=&#39; : &#39;&#39;;\r\n        if (avoidChars &amp;&amp; avoidChars.length) {\r\n            for (let char of avoidChars) {\r\n                _pattern = _pattern.replace(char, &#39;&#39;);\r\n            }\r\n        }\r\n        let _random = &#39;&#39;;\r\n        for (let element of new Array(parseInt(length))) {\r\n            _random += _pattern.charAt(Math.floor(Math.random() * _pattern.length));\r\n        }\r\n        return _random;\r\n    };\r\n\r\nYou can use like this :\r\n\r\n    // Generate password with specialChars which contains 10 chars and avoid iIlL chars\r\n    var password = String().randomGenerator(true, 10, &#39;iIlL&#39;);\r\n\r\nHope it helps.\r\n"},{"score":89,"body_markdown":"A newer version with **es6** [spread operator][1]:\r\n\r\n`[...Array(30)].map(() =&gt; Math.random().toString(36)[2]).join(&#39;&#39;)` \r\n\r\n- The `30` is an arbitrary number, you can pick any token length you want\r\n- The `36` is the maximum radix number you can pass to [numeric.toString()][2], which means [all numbers and a-z lowercase letters][3]\r\n- The `2` is used to pick the 3rd index from the random string which looks like this: `&quot;0.mfbiohx64i&quot;`, we could take any index after `0.`\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\r\n  [3]: https://en.wikipedia.org/wiki/Base36"},{"score":6,"body_markdown":"I did not find a clean solution for supporting both lowercase and uppercase characters.\r\n\r\nLowercase only support:\r\n\r\n`Math.random().toString(36).substr(2, 5)`\r\n\r\nBuilding on that solution to support lowercase and uppercase:\r\n\r\n`Math.random().toString(36).substr(2, 5).split(&#39;&#39;).map(c =&gt; Math.random() &lt; 0.5 ? c.toUpperCase() : c).join(&#39;&#39;);`\r\n\r\nChange the `5` in `substr(2, 5)` to adjust to the length you need."},{"score":0,"body_markdown":"You could use base64:\r\n\r\n    function randomString(length)\r\n    {\r\n        var rtn = &quot;&quot;;\r\n            \r\n        do {\r\n            rtn += btoa(&quot;&quot; + Math.floor(Math.random() * 100000)).substring(0, length);\r\n        }\r\n        while(rtn.length &lt; length);\r\n    \r\n        return rtn;\r\n    }\r\n"},{"score":1,"body_markdown":"### Random unicode string\r\nThis method will return a random string with any of the supported unicode characters, which is not 100% what OP asks for, but what I was looking for:\r\n\r\n    function randomUnicodeString(length){\r\n        return Array.from({length: length}, ()=&gt;{\r\n            return String.fromCharCode(Math.floor(Math.random() * (65536)))\r\n        }).join(&#39;&#39;)\r\n    }\r\n\r\n\r\n### Rationale\r\n\r\nThis is the top result of google when searching for &quot;random string javascript&quot;, but OP asks for a-zA-Z0-9 only. "},{"score":19,"body_markdown":"To meet requirement [a-zA-Z0-9] and length=5 use\r\n\r\n    btoa(Math.random()).substr(10, 5);\r\n\r\nLowercase letters, uppercase letters, and numbers will occur."},{"score":0,"body_markdown":"recursive solution:\r\n\r\n    function generateRamdomId (seedStr) {\r\n    const len = seedStr.length\r\n    console.log(&#39;possibleStr&#39;, seedStr , &#39; len &#39;, len)\r\n    if(len &lt;= 1){\r\n        return seedStr\r\n    }\r\n    const randomValidIndex  = Math.floor(Math.random() * len)\r\n    const randomChar = seedStr[randomValidIndex]\r\n    const chunk1 = seedStr.slice(0, randomValidIndex)\r\n    const chunk2 = seedStr.slice(randomValidIndex +1)\r\n    const possibleStrWithoutRandomChar = chunk1.concat(chunk2)\r\n\r\n    return randomChar + generateRamdomId(possibleStrWithoutRandomChar)\r\n}\r\n\r\nyou can use with the seed you want , dont repeat chars if you dont rea.  Example \r\n\r\n    generateRandomId(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;) \r\n\r\n"},{"score":1,"body_markdown":"For a string with upper- and lowercase letters and digits (0-9a-zA-Z), this may be the version that minifies best:\r\n\r\n    function makeId(length) {\r\n      var id = &#39;&#39;;\r\n      var rdm62;\r\n      while (length--) {\r\n       // Generate random integer between 0 and 61, 0|x works for Math.floor(x) in this case \r\n       rdm62 = 0 | Math.random() * 62; \r\n       // Map to ascii codes: 0-9 to 48-57 (0-9), 10-35 to 65-90 (A-Z), 36-61 to 97-122 (a-z)\r\n       id += String.fromCharCode(rdm62 + (rdm62 &lt; 10 ? 48 : rdm62 &lt; 36 ? 55 : 61)) \r\n      }\r\n      return id;\r\n    }\r\n\r\nThe content of this function minifies to 97 bytes, while the top answer needs 149 bytes (because of the characters list)."},{"score":6,"body_markdown":"Case Insensitive Alphanumeric Chars:\r\n-------------\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function randStr(len) {\r\n      let s = &#39;&#39;;\r\n      while (s.length &lt; len) s += Math.random().toString(36).substr(2, len - s.length);\r\n      return s;\r\n    }\r\n    \r\n    // usage\r\n    console.log(randStr(50));\r\n&lt;!-- end snippet --&gt;\r\n\r\nThe benefit of this function is that you can get different length random string and it ensures the length of the string.\r\n\r\nCase Sensitive All Chars:\r\n-------------------------\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n    function randStr(len) {\r\n      let s = &#39;&#39;;\r\n      while (len--) s += String.fromCodePoint(Math.floor(Math.random() * (126 - 33) + 33));\r\n      return s;\r\n    }\r\n\r\n    // usage\r\n    console.log(randStr(50));\r\n&lt;!-- end snippet --&gt;\r\n\r\nCustom Chars\r\n-----------------\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function randStr(len, chars=&#39;abc123&#39;) {\r\n      let s = &#39;&#39;;\r\n      while (len--) s += chars[Math.floor(Math.random() * chars.length)];\r\n      return s;\r\n    }\r\n\r\n    // usage\r\n    console.log(randStr(50));\r\n    console.log(randStr(50, &#39;abc&#39;));\r\n    console.log(randStr(50, &#39;aab&#39;)); // more a than b\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":1,"body_markdown":"This is a slightly improved version of [doubletap][1]&#39;s [answer][2]. It considers [gertas][3]&#39;s comment about the case, when `Math.random()` returns 0, 0.5, 0.25, 0.125, etc.\r\n\r\n    ((Math.random()+3*Number.MIN_VALUE)/Math.PI).toString(36).slice(-5)\r\n\r\n1. It prevents that zero gets passed to `toString` my adding the smallest float to `Math.random()`.\r\n2. It ensures that the number passed to `toString` has enough digits by dividing through an almost irrational number.\r\n\r\n\r\n  [1]: https://stackoverflow.com/users/1040319/doubletap\r\n  [2]: https://stackoverflow.com/a/8084248/402322\r\n  [3]: https://stackoverflow.com/users/446210/gertas"},{"score":1,"body_markdown":"As several people here have pointed out, passing the result of `Math.random()` directly to `.string(36)` has several problems.\r\n\r\nIt has poor randomness. The number of characters generated varies, and on average depends on the tricky details of how floating-point numbers work in Javascript. It seems to work if I am trying to generate 11 characters or fewer, but not with more than 11. And it is not flexible. There is no easy way to allow or prohibit certain characters.\r\n\r\nI have a compact solution, which doesn&#39;t have these problems, for anyone using lodash:\r\n\r\n```javascript\r\n_.range(11).map(i =&gt; _.sample(&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;)).join(&#39;&#39;)\r\n```\r\n\r\nIf you want to allow certain characters (such as uppercase letters) or prohibit certain characters (like ambiguous characters such as `l` and `1`), modify the string above."},{"score":2,"body_markdown":"How about this below... this will produce the really random values:\r\n\r\n    function getRandomStrings(length) {\r\n      const value = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;;\r\n      const randoms = [];\r\n      for(let i=0; i &lt; length; i++) {\r\n         randoms.push(value[Math.floor(Math.random()*value.length)]);\r\n      }\r\n      return randoms.join(&#39;&#39;);\r\n    }\r\n\r\nBut if you looking for a shorter syntax one in **ES6**:\r\n\r\n    const getRandomStrings = length =&gt; Math.random().toString(36).substr(-length);\r\n\r\n"},{"score":0,"body_markdown":"Above All answers are perfect. but I am adding which is very good and rapid to generate any random string value\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function randomStringGenerator(stringLength) {\r\n      var randomString = &quot;&quot;; // Empty value of the selective variable\r\n      const allCharacters = &quot;&#39;`~!@#$%^&amp;*()_+-={}[]:;\\&#39;&lt;&gt;?,./|\\\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;&quot;; // listing of all alpha-numeric letters\r\n      while (stringLength--) {\r\n        randomString += allCharacters.substr(Math.floor((Math.random() * allCharacters.length) + 1), 1); // selecting any value from allCharacters varible by using Math.random()\r\n      }\r\n      return randomString; // returns the generated alpha-numeric string\r\n    }\r\n\r\n    console.log(randomStringGenerator(10));//call function by entering the random string you want\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nor\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log(Date.now())// it will produce random thirteen numeric character value every time.\r\n    console.log(Date.now().toString().length)// print length of the generated string\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":5,"body_markdown":"Here is my approach (with TypeScript).\r\n\r\nI&#39;ve decided to write yet another response because I didn&#39;t see any simple solution using modern js and clean code.\r\n\r\n```ts\r\nconst DEFAULT_ALPHABET = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;;\r\n\r\nfunction getRandomCharFromAlphabet(alphabet: string): string {\r\n  return alphabet.charAt(Math.floor(Math.random() * alphabet.length));\r\n}\r\n\r\nfunction generateId(idDesiredLength: number, alphabet = DEFAULT_ALPHABET): string {\r\n  /**\r\n   * Create n-long array and map it to random chars from given alphabet.\r\n   * Then join individual chars as string\r\n   */\r\n  return Array.from({length: idDesiredLength}).map(() =&gt; {\r\n    return getRandomCharFromAlphabet(alphabet);\r\n  }).join(&#39;&#39;);\r\n}\r\n\r\ngenerateId(5); // jNVv7\r\n```"},{"score":1,"body_markdown":"I just write a simple package to generate a random token with given size, seed and mask. FYI.\r\n\r\n`@sibevin/random-token` - https://www.npmjs.com/package/@sibevin/random-token\r\n\r\n    import { RandomToken } from &#39;@sibevin/random-token&#39;\r\n\r\n    RandomToken.gen({ length: 32 })\r\n    // JxpwdIA37LlHan4otl55PZYyyZrEdsQT\r\n\r\n    RandomToken.gen({ length: 32, seed: &#39;alphabet&#39; })\r\n    // NbbtqjmHWJGdibjoesgomGHulEJKnwcI\r\n\r\n    RandomToken.gen({ length: 32, seed: &#39;number&#39; })\r\n    // 33541506785847193366752025692500\r\n\r\n    RandomToken.gen({ length: 32, seed: &#39;oct&#39; })\r\n    // 76032641643460774414624667410327\r\n\r\n    RandomToken.gen({ length: 32, seed: &#39;hex&#39; })\r\n    // 07dc6320bf1c03811df7339dbf2c82c3\r\n\r\n    RandomToken.gen({ length: 32, seed: &#39;abc&#39; })\r\n    // bcabcbbcaaabcccabaabcacbcbbabbac\r\n\r\n    RandomToken.gen({ length: 32, mask: &#39;123abcABC&#39; })\r\n    // vhZp88dKzRZGxfQHqfx7DOL8jKTkWUuO"},{"score":14,"body_markdown":"```javascript\r\nconst c = &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;\r\nconst s = [...Array(5)].map(_ =&gt; c[~~(Math.random()*c.length)]).join(&#39;&#39;)\r\n```"},{"score":0,"body_markdown":"Simple method:\r\n\r\n    function randomString(length) {\r\n        let chars = [], output = &#39;&#39;;\r\n        for (let i = 32; i &lt; 127; i ++) {\r\n            chars.push(String.fromCharCode(i));\r\n        }\r\n        for (let i = 0; i &lt; length; i ++) {\r\n            output += chars[Math.floor(Math.random() * chars.length )];\r\n        }\r\n        return output;\r\n    }\r\nIf you want more or less characters change the &quot;127&quot; to something else."},{"score":12,"body_markdown":"One liner:\r\n```\r\nArray(15).fill(null).map(() =&gt; Math.random().toString(36).substr(2)).join(&#39;&#39;)\r\n// Outputs: 0h61cbpw96y83qtnunwme5lxk1i70a6o5r5lckfcyh1dl9fffydcfxddd69ada9tu9jvqdx864xj1ul3wtfztmh2oz2vs3mv6ej0fe58ho1cftkjcuyl2lfkmxlwua83ibotxqc4guyuvrvtf60naob26t6swzpil\r\n```"},{"score":-1,"body_markdown":"\r\n//creates a random code which is 10 in lenght,you can change it to yours at your will\r\n\r\n    function createRandomCode(length) {\r\n        let randomCodes = &#39;&#39;;\r\n        let characters = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;;\r\n        let charactersLength = characters.length;\r\n        for (let i = 0; i &lt; length; i++ ) {\r\n            randomCodes += characters.charAt(Math.floor(Math.random() * charactersLength))\r\n        }\r\n        console.log(&quot;your reference code is: &quot;.toLocaleUpperCase() + randomCodes);\r\n     };\r\n     createRandomCode(10)\r\n"},{"score":1,"body_markdown":"Generate any number of hexadecimal character (e.g. 32):\r\n\r\n```\r\n(function(max){let r=&#39;&#39;;for(let i=0;i&lt;max/13;i++)r+=(Math.random()+1).toString(16).substring(2);return r.substring(0,max).toUpperCase()})(32);\r\n```"},{"score":0,"body_markdown":"# Crypto-Strong\r\n\r\nIf you want to get [crypto-strong](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) string which meets your requirements (I see answer which use this but gives non valid answers) use\r\n\r\n    let pass = [...crypto.getRandomValues(new Uint8Array(5))]\r\n       .map((x,i)=&gt;(i=x/255*61|0,String.fromCharCode(i+(i&gt;9?i&gt;35?61:55:48)))).join``\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let pass = [...crypto.getRandomValues(new Uint8Array(5))]\r\n       .map((x,i)=&gt;(i=x/255*61|0,String.fromCharCode(i+(i&gt;9?i&gt;35?61:55:48)))).join``\r\n\r\n    console.log(pass);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":0,"body_markdown":"# Review\r\n\r\nMany answers base on trick `Math.random().toString(36)` but the problem of this approach is that Math.random not always produce number which has at least 5 characters in base 36 e.g.\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let testRnd = n =&gt; console.log(`num dec: ${n}, num base36: ${n.toString(36)}, string: ${n.toString(36).substr(2, 5)}`);\r\n\r\n\r\n    [\r\n      Math.random(),\r\n      // and much more less than 0.5...\r\n      0.5,\r\n      0.50077160493827161,\r\n      0.5015432098765432,\r\n      0.5023148148148148,\r\n      0.5030864197530864,\r\n      // and much more....\r\n      0.9799597050754459\r\n    ].map(n=&gt;testRnd(n));\r\n\r\n    console.log(&#39;... and so on&#39;);\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    Each of below example (except first) numbers result with less than 5 characters (which not meet OP question requirements)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nHere is &quot;generator&quot; which allows manually find such numbers\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function base36Todec(hex) {\r\n      hex = hex.split(/\\./);\r\n      return (parseInt(hex[1],36))*(36**-hex[1].length)+ +(parseInt(hex[0],36));\r\n    }\r\n\r\n    function calc(hex) {\r\n      let dec = base36Todec(hex);\r\n      msg.innerHTML = `dec: &lt;b&gt;${dec}&lt;/b&gt;&lt;br&gt;hex test: &lt;b&gt;${dec.toString(36)}&lt;/b&gt;`\r\n    } \r\n\r\n    function calc2(dec) {\r\n      msg2.innerHTML = `dec: &lt;b&gt;${dec}&lt;/b&gt;&lt;br&gt;hex test: &lt;b&gt;${(+dec).toString(36)}&lt;/b&gt;`\r\n    } \r\n\r\n    let init=&quot;0.za1&quot;;\r\n    inp.value=init;\r\n    calc(init);\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    Type number in range 0-1 using base 36 (0-9,a-z) with less than 5 digits after dot&lt;br&gt;\r\n    &lt;input oninput=&quot;calc(this.value)&quot; id=&quot;inp&quot; /&gt;&lt;div id=&quot;msg&quot;&gt;&lt;/div&gt;\r\n    &lt;br&gt;\r\n    If above &lt;i&gt;hex test&lt;/i&gt; give more digits than 5 after dot - then you can try to copy dec number to below field and join some digit to dec num right side and/or change last digit - it sometimes also produce hex with less digits&lt;br&gt;\r\n    &lt;input oninput=&quot;calc2(this.value)&quot; /&gt;&lt;br&gt;&lt;div id=&quot;msg2&quot;&gt;&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nI already give answer [here](https://stackoverflow.com/a/62504318/860099) so I will not put here another solution"},{"score":1,"body_markdown":"The following code will produce a cryptographically secured random string of size containing `[a-zA-Z0-9]`, using an npm package `crypto-random-string`. Install it using:\r\n\r\n    npm install crypto-random-string\r\n\r\nTo get a random string of 30 characters in the set [a-zA-Z0-9]:\r\n\r\n    const cryptoRandomString = require(&#39;crypto-random-string&#39;);\r\n    cryptoRandomString({length: 100, type: &#39;base64&#39;}).replace(/[/+=]/g,&#39;&#39;).substr(-30);\r\n\r\nSummary: We are replacing /, +, = in a large random base64 string and getting the last N characters. \r\n\r\n**PS:** Use -N in `substr`"},{"score":0,"body_markdown":"\r\nIn case you cannot type out a charset, using `String.fromCharCode` and a ranged `Math.random` allows you to create random strings in any Unicode codepoint range. For example, if you want `17` random Tibetan characters, you can input `ranstr(17,0xf00,0xfff)`, where `(0xf00,0xfff)` corresponds to the Tibetan Unicode block. In my implementation, the generator will spit out `ASCII` text if you do not specify a codepoint range.\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n        function ranchar(a,b) {\r\n           a = (a === undefined ? 0 : a);\r\n           b = (b === undefined ? 127 : b);\r\n           return String.fromCharCode(Math.floor(Math.random() * (b - a) + a)); \r\n        }\r\n        \r\n        function ranstr(len,a,b) {\r\n          a = a || 32;\r\n          var result = &#39;&#39;;\r\n          for(var i = 0; i &lt; len; i++) {\r\n           result += ranchar(a,b)\r\n          }\r\n          return result;\r\n        }\r\n\r\n\r\n    //Here are some examples from random Unicode blocks\r\n    console.log(&#39;In Latin Basic block: &#39;+ ranstr(10,0x0000,0x007f))\r\n    console.log(&#39;In Latin-1 Supplement block: &#39;+ ranstr(10,0x0080,0x0ff))\r\n    console.log(&#39;In Currency Symbols block: &#39; + ranstr(10,0x20a0,0x20cf))\r\n    console.log(&#39;In Letterlike Symbols block: &#39; + ranstr(10,0x2100,0x214f))\r\n    console.log(&#39;In Dingbats block:&#39; + ranstr(10,0x2700,0x27bf))\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n\r\n"},{"score":1,"body_markdown":"How about extending the String object like so.\r\n\r\n```\r\nString.prototype.random = function(length) {\r\n   var result = &#39;&#39;;\r\n   for (var i = 0; i &lt; length; i++) {\r\n      result += this.charAt(Math.floor(Math.random() * this.length));\r\n   }\r\n\r\n   return result;\r\n};\r\n\r\n```\r\n\r\nusing it:\r\n\r\n```\r\nconsole.log(&quot;ABCDEFG&quot;.random(5));\r\n```"},{"score":7,"body_markdown":"Improved @Andrew&#39;s answer above : \r\n\r\n```\r\nArray.from({ length : 1 }, () =&gt; Math.random().toString(36)[2]).join(&#39;&#39;);\r\n```\r\n\r\nBase 36 conversion of the random number is inconsistent, so selecting a single indice fixes that. You can change the length for a string with the exact length desired."},{"score":1,"body_markdown":"```\r\nfunction generate(length) {\r\n  var letters = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;j&quot;,&quot;k&quot;,&quot;l&quot;,&quot;m&quot;,&quot;n&quot;,&quot;o&quot;,&quot;p&quot;,&quot;q&quot;,&quot;r&quot;,&quot;s&quot;,&quot;t&quot;,&quot;u&quot;,&quot;v&quot;,&quot;w&quot;,&quot;x&quot;,&quot;y&quot;,&quot;z&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;,&quot;H&quot;,&quot;I&quot;,&quot;J&quot;,&quot;K&quot;,&quot;L&quot;,&quot;M&quot;,&quot;N&quot;,&quot;O&quot;,&quot;P&quot;,&quot;Q&quot;,&quot;R&quot;,&quot;S&quot;,&quot;T&quot;,&quot;U&quot;,&quot;V&quot;,&quot;W&quot;,&quot;X&quot;,&quot;Y&quot;,&quot;Z&quot;,&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;];\r\n  var IDtext = &quot;&quot;;\r\n  var i = 0;\r\n  while (i &lt; length) {\r\n    var letterIndex = Math.floor(Math.random() * letters.length);\r\n    var letter = letters[letterIndex];\r\n    IDtext = IDtext + letter;\r\n    i++;\r\n  }\r\n  console.log(IDtext)\r\n}\r\n```"},{"score":10,"body_markdown":"Generate a secure random alphanumeric `Base-62` string:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function generateUID(length)\r\n    {\r\n        return window.btoa(Array.from(window.crypto.getRandomValues(new Uint8Array(length * 2))).map((b) =&gt; String.fromCharCode(b)).join(&quot;&quot;)).replace(/[+/]/g, &quot;&quot;).substring(0, length);\r\n    }\r\n\r\n    console.log(generateUID(22)); // &quot;yFg3Upv2cE9cKOXd7hHwWp&quot;\r\n    console.log(generateUID(5)); // &quot;YQGzP&quot;\r\n\r\n&lt;!-- end snippet --&gt;\r\n"}],"score":1976}