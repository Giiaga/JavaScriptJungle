{"body":"I would like to format a price in JavaScript. I&#39;d like a function which takes a `float` as an argument and returns a `string` formatted like this:\r\n \r\n    &quot;$ 2,500.00&quot;\r\n\r\nWhat&#39;s the best way to do this?","title":"How to format numbers as currency string?","answers":[{"score":19,"body_markdown":"The main part is inserting the thousand-separators, that could be done like this:\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n    function ins1000Sep(val){\r\n      val = val.split(&quot;.&quot;);\r\n      val[0] = val[0].split(&quot;&quot;).reverse().join(&quot;&quot;);\r\n      val[0] = val[0].replace(/(\\d{3})/g,&quot;$1,&quot;);\r\n      val[0] = val[0].split(&quot;&quot;).reverse().join(&quot;&quot;);\r\n      val[0] = val[0].indexOf(&quot;,&quot;)==0?val[0].substring(1):val[0];\r\n      return val.join(&quot;.&quot;);\r\n    }\r\n    function rem1000Sep(val){\r\n      return val.replace(/,/g,&quot;&quot;);\r\n    }\r\n    function formatNum(val){\r\n      val = Math.round(val*100)/100;\r\n      val = (&quot;&quot;+val).indexOf(&quot;.&quot;)&gt;-1 ? val + &quot;00&quot; : val + &quot;.00&quot;;\r\n      var dec = val.indexOf(&quot;.&quot;);\r\n      return dec == val.length-3 || dec == 0 ? val : val.substring(0,dec+3);\r\n    }\r\n    &lt;/script&gt;\r\n    \r\n    &lt;button onclick=&quot;alert(ins1000Sep(formatNum(12313231)));&quot;&gt;"},{"score":1852,"body_markdown":"## [Number.prototype.toFixed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed)\r\n\r\nThis solution is compatible with every single major browser:\r\n\r\n      const profits = 2489.8237;\r\n      \r\n      profits.toFixed(3) //returns 2489.824 (rounds up)\r\n      profits.toFixed(2) //returns 2489.82\r\n      profits.toFixed(7) //returns 2489.8237000 (pads the decimals)\r\n\r\nAll you need is to add the currency symbol (e.g. `&quot;$&quot; + profits.toFixed(2)`) and you will have your amount in dollars.\r\n\r\n## Custom function\r\n\r\nIf you require the use of `,` between each digit, you can use this function:\r\n\r\n&lt;!-- begin snippet: js hide: false console: false babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\nfunction formatMoney(number, decPlaces, decSep, thouSep) {\r\n\tdecPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces,\r\n\tdecSep = typeof decSep === &quot;undefined&quot; ? &quot;.&quot; : decSep;\r\n\tthouSep = typeof thouSep === &quot;undefined&quot; ? &quot;,&quot; : thouSep;\r\n\tvar sign = number &lt; 0 ? &quot;-&quot; : &quot;&quot;;\r\n\tvar i = String(parseInt(number = Math.abs(Number(number) || 0).toFixed(decPlaces)));\r\n\tvar j = (j = i.length) &gt; 3 ? j % 3 : 0;\r\n\r\n\treturn sign +\r\n\t\t(j ? i.substr(0, j) + thouSep : &quot;&quot;) +\r\n\t\ti.substr(j).replace(/(\\decSep{3})(?=\\decSep)/g, &quot;$1&quot; + thouSep) +\r\n\t\t(decPlaces ? decSep + Math.abs(number - i).toFixed(decPlaces).slice(2) : &quot;&quot;);\r\n}\r\n\r\n    document.getElementById(&quot;b&quot;).addEventListener(&quot;click&quot;, event =&gt; {\r\n      document.getElementById(&quot;x&quot;).innerText = &quot;Result was: &quot; + formatMoney(document.getElementById(&quot;d&quot;).value);\r\n    });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;label&gt;Insert your amount: &lt;input id=&quot;d&quot; type=&quot;text&quot; placeholder=&quot;Cash amount&quot; /&gt;&lt;/label&gt;\r\n    &lt;br /&gt;\r\n    &lt;button id=&quot;b&quot;&gt;Get Output&lt;/button&gt;\r\n    &lt;p id=&quot;x&quot;&gt;(press button to get output)&lt;/p&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nUse it like so:\r\n\r\n    (123456789.12345).formatMoney(2, &quot;.&quot;, &quot;,&quot;);\r\n\r\nIf you&#39;re always going to use &#39;.&#39; and &#39;,&#39;, you can leave them off your method call, and the method will default them for you.\r\n\r\n    (123456789.12345).formatMoney(2);\r\n\r\nIf your culture has the two symbols flipped (i.e. Europeans) and you would like to use the defaults, just paste over the following two lines in the `formatMoney` method:\r\n\r\n        d = d == undefined ? &quot;,&quot; : d, \r\n        t = t == undefined ? &quot;.&quot; : t, \r\n\r\n## Custom function (ES6)\r\n\r\nIf you can use modern ECMAScript syntax (i.e. through Babel), you can use this simpler function instead:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function formatMoney(amount, decimalCount = 2, decimal = &quot;.&quot;, thousands = &quot;,&quot;) {\r\n      try {\r\n        decimalCount = Math.abs(decimalCount);\r\n        decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\r\n\r\n        const negativeSign = amount &lt; 0 ? &quot;-&quot; : &quot;&quot;;\r\n\r\n        let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\r\n        let j = (i.length &gt; 3) ? i.length % 3 : 0;\r\n\r\n        return negativeSign + (j ? i.substr(0, j) + thousands : &#39;&#39;) + i.substr(j).replace(/(\\d{3})(?=\\d)/g, &quot;$1&quot; + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : &quot;&quot;);\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    };\r\n    document.getElementById(&quot;b&quot;).addEventListener(&quot;click&quot;, event =&gt; {\r\n      document.getElementById(&quot;x&quot;).innerText = &quot;Result was: &quot; + formatMoney(document.getElementById(&quot;d&quot;).value);\r\n    });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;label&gt;Insert your amount: &lt;input id=&quot;d&quot; type=&quot;text&quot; placeholder=&quot;Cash amount&quot; /&gt;&lt;/label&gt;\r\n    &lt;br /&gt;\r\n    &lt;button id=&quot;b&quot;&gt;Get Output&lt;/button&gt;\r\n    &lt;p id=&quot;x&quot;&gt;(press button to get output)&lt;/p&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":276,"body_markdown":"Take a look at the JavaScript [Number][1] object and see if it can help you.\r\n\r\n- `toLocaleString()` will format a number using location specific thousands separator.  \r\n- `toFixed()` will round the number to a specific number of decimal places.\r\n\r\nTo use these at the same time the value must have its type changed back to a number because they both output a string. \r\n\r\nExample:\r\n\r\n    Number((someNumber).toFixed(1)).toLocaleString()\r\n\r\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"},{"score":16,"body_markdown":"    function CurrencyFormatted(amount)\r\n    {\r\n        var i = parseFloat(amount);\r\n        if(isNaN(i)) { i = 0.00; }\r\n        var minus = &#39;&#39;;\r\n        if(i &lt; 0) { minus = &#39;-&#39;; }\r\n        i = Math.abs(i);\r\n        i = parseInt((i + .005) * 100);\r\n        i = i / 100;\r\n        s = new String(i);\r\n        if(s.indexOf(&#39;.&#39;) &lt; 0) { s += &#39;.00&#39;; }\r\n        if(s.indexOf(&#39;.&#39;) == (s.length - 2)) { s += &#39;0&#39;; }\r\n        s = minus + s;\r\n        return s;\r\n    }\r\n\r\nFrom [WillMaster][1].\r\n\r\n\r\n  [1]: http://www.willmaster.com/library/tutorials/currency-formatting-and-putting-commas-in-numbers-with-javascript-and-perl.php"},{"score":9,"body_markdown":"The YUI codebase uses the following formmating:\r\n\r\n    format: function(nData, oConfig) {\r\n        oConfig = oConfig || {};\r\n        \r\n        if(!YAHOO.lang.isNumber(nData)) {\r\n            nData *= 1;\r\n        }\r\n    \r\n        if(YAHOO.lang.isNumber(nData)) {\r\n            var sOutput = nData + &quot;&quot;;\r\n            var sDecimalSeparator = (oConfig.decimalSeparator) ? oConfig.decimalSeparator : &quot;.&quot;;\r\n            var nDotIndex;\r\n    \r\n            // Manage decimals\r\n            if(YAHOO.lang.isNumber(oConfig.decimalPlaces)) {\r\n                // Round to the correct decimal place\r\n                var nDecimalPlaces = oConfig.decimalPlaces;\r\n                var nDecimal = Math.pow(10, nDecimalPlaces);\r\n                sOutput = Math.round(nData*nDecimal)/nDecimal + &quot;&quot;;\r\n                nDotIndex = sOutput.lastIndexOf(&quot;.&quot;);\r\n    \r\n                if(nDecimalPlaces &gt; 0) {\r\n                    // Add the decimal separator\r\n                    if(nDotIndex &lt; 0) {\r\n                        sOutput += sDecimalSeparator;\r\n                        nDotIndex = sOutput.length-1;\r\n                    }\r\n                    // Replace the &quot;.&quot;\r\n                    else if(sDecimalSeparator !== &quot;.&quot;){\r\n                        sOutput = sOutput.replace(&quot;.&quot;,sDecimalSeparator);\r\n                    }\r\n                    // Add missing zeros\r\n                    while((sOutput.length - 1 - nDotIndex) &lt; nDecimalPlaces) {\r\n                        sOutput += &quot;0&quot;;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Add the thousands separator\r\n            if(oConfig.thousandsSeparator) {\r\n                var sThousandsSeparator = oConfig.thousandsSeparator;\r\n                nDotIndex = sOutput.lastIndexOf(sDecimalSeparator);\r\n                nDotIndex = (nDotIndex &gt; -1) ? nDotIndex : sOutput.length;\r\n                var sNewOutput = sOutput.substring(nDotIndex);\r\n                var nCount = -1;\r\n                for (var i=nDotIndex; i&gt;0; i--) {\r\n                    nCount++;\r\n                    if ((nCount%3 === 0) &amp;&amp; (i !== nDotIndex)) {\r\n                        sNewOutput = sThousandsSeparator + sNewOutput;\r\n                    }\r\n                    sNewOutput = sOutput.charAt(i-1) + sNewOutput;\r\n                }\r\n                sOutput = sNewOutput;\r\n            }\r\n    \r\n            // Prepend prefix\r\n            sOutput = (oConfig.prefix) ? oConfig.prefix + sOutput : sOutput;\r\n    \r\n            // Append suffix\r\n            sOutput = (oConfig.suffix) ? sOutput + oConfig.suffix : sOutput;\r\n    \r\n            return sOutput;\r\n        }\r\n        // Still not a Number, just return unaltered\r\n        else {\r\n            return nData;\r\n        }\r\n    }\r\n\r\nit would need editing as the YUI library is configurable, like replacing oConfig.decimalSeparator with &quot;.&quot;"},{"score":30,"body_markdown":"Ok, based on what you said, i&#39;m using this:\r\n\r\n\tvar DecimalSeparator = Number(&quot;1.2&quot;).toLocaleString().substr(1,1);\r\n\t\r\n\tvar AmountWithCommas = Amount.toLocaleString();\r\n\tvar arParts = String(AmountWithCommas).split(DecimalSeparator);\r\n\tvar intPart = arParts[0];\r\n\tvar decPart = (arParts.length &gt; 1 ? arParts[1] : &#39;&#39;);\r\n\tdecPart = (decPart + &#39;00&#39;).substr(0,2);\r\n\t\r\n\treturn &#39;&#163; &#39; + intPart + DecimalSeparator + decPart;\r\n\r\nI&#39;m open to improvement suggestions (i&#39;d prefer not to include YUI just to do this :-) )\r\nI already know I should be detecting the &quot;.&quot; instead of just using it as the decimal separator..."},{"score":7,"body_markdown":"Minimalistic approach that just meets the original requirements:\r\n\r\n    function formatMoney(n) {\r\n        return &quot;$ &quot; + (Math.round(n * 100) / 100).toLocaleString();\r\n    }\r\n\r\n@Daniel Magliola: You&#39;re right, the above was a hasty, incomplete implementation. Here&#39;s the corrected implementation:\r\n\r\n    function formatMoney(n) {\r\n        return &quot;$ &quot; + n.toLocaleString().split(&quot;.&quot;)[0] + &quot;.&quot;\r\n            + n.toFixed(2).split(&quot;.&quot;)[1];\r\n    }"},{"score":23,"body_markdown":"There is a javascript port of the PHP function &quot;number_format&quot;.\r\n\r\nI find it very usefull as it is easy to use and recognisable for PHP developers.\r\n\r\n    function number_format (number, decimals, dec_point, thousands_sep) {\r\n        var n = number, prec = decimals;\r\n \r\n        var toFixedFix = function (n,prec) {\r\n            var k = Math.pow(10,prec);\r\n            return (Math.round(n*k)/k).toString();\r\n        };\r\n \r\n        n = !isFinite(+n) ? 0 : +n;\r\n        prec = !isFinite(+prec) ? 0 : Math.abs(prec);\r\n        var sep = (typeof thousands_sep === &#39;undefined&#39;) ? &#39;,&#39; : thousands_sep;\r\n        var dec = (typeof dec_point === &#39;undefined&#39;) ? &#39;.&#39; : dec_point;\r\n \r\n        var s = (prec &gt; 0) ? toFixedFix(n, prec) : toFixedFix(Math.round(n), prec); \r\n        //fix for IE parseFloat(0.55).toFixed(0) = 0;\r\n \r\n        var abs = toFixedFix(Math.abs(n), prec);\r\n        var _, i;\r\n \r\n        if (abs &gt;= 1000) {\r\n            _ = abs.split(/\\D/);\r\n            i = _[0].length % 3 || 3;\r\n \r\n            _[0] = s.slice(0,i + (n &lt; 0)) +\r\n                   _[0].slice(i).replace(/(\\d{3})/g, sep+&#39;$1&#39;);\r\n            s = _.join(dec);\r\n        } else {\r\n            s = s.replace(&#39;.&#39;, dec);\r\n        }\r\n \r\n        var decPos = s.indexOf(dec);\r\n        if (prec &gt;= 1 &amp;&amp; decPos !== -1 &amp;&amp; (s.length-decPos-1) &lt; prec) {\r\n            s += new Array(prec-(s.length-decPos-1)).join(0)+&#39;0&#39;;\r\n        }\r\n        else if (prec &gt;= 1 &amp;&amp; decPos === -1) {\r\n            s += dec+new Array(prec).join(0)+&#39;0&#39;;\r\n        }\r\n        return s; \r\n    }\r\n\r\n(Comment block from [the original][1], included below for examples &amp; credit where due)\r\n\r\n    // Formats a number with grouped thousands\r\n    //\r\n    // version: 906.1806\r\n    // discuss at: http://phpjs.org/functions/number_format\r\n    // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\r\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n    // +     bugfix by: Michael White (http://getsprink.com)\r\n    // +     bugfix by: Benjamin Lupton\r\n    // +     bugfix by: Allan Jensen (http://www.winternet.no)\r\n    // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\r\n    // +     bugfix by: Howard Yeend\r\n    // +    revised by: Luke Smith (http://lucassmith.name)\r\n    // +     bugfix by: Diogo Resende\r\n    // +     bugfix by: Rival\r\n    // +     input by: Kheang Hok Chin (http://www.distantia.ca/)\r\n    // +     improved by: davook\r\n    // +     improved by: Brett Zamir (http://brett-zamir.me)\r\n    // +     input by: Jay Klehr\r\n    // +     improved by: Brett Zamir (http://brett-zamir.me)\r\n    // +     input by: Amir Habibi (http://www.residence-mixte.com/)\r\n    // +     bugfix by: Brett Zamir (http://brett-zamir.me)\r\n    // *     example 1: number_format(1234.56);\r\n    // *     returns 1: &#39;1,235&#39;\r\n    // *     example 2: number_format(1234.56, 2, &#39;,&#39;, &#39; &#39;);\r\n    // *     returns 2: &#39;1 234,56&#39;\r\n    // *     example 3: number_format(1234.5678, 2, &#39;.&#39;, &#39;&#39;);\r\n    // *     returns 3: &#39;1234.57&#39;\r\n    // *     example 4: number_format(67, 2, &#39;,&#39;, &#39;.&#39;);\r\n    // *     returns 4: &#39;67,00&#39;\r\n    // *     example 5: number_format(1000);\r\n    // *     returns 5: &#39;1,000&#39;\r\n    // *     example 6: number_format(67.311, 2);\r\n    // *     returns 6: &#39;67.31&#39;\r\n    // *     example 7: number_format(1000.55, 1);\r\n    // *     returns 7: &#39;1,000.6&#39;\r\n    // *     example 8: number_format(67000, 5, &#39;,&#39;, &#39;.&#39;);\r\n    // *     returns 8: &#39;67.000,00000&#39;\r\n    // *     example 9: number_format(0.9, 0);\r\n    // *     returns 9: &#39;1&#39;\r\n    // *     example 10: number_format(&#39;1.20&#39;, 2);\r\n    // *     returns 10: &#39;1.20&#39;\r\n    // *     example 11: number_format(&#39;1.20&#39;, 4);\r\n    // *     returns 11: &#39;1.2000&#39;\r\n    // *     example 12: number_format(&#39;1.2000&#39;, 3);\r\n    // *     returns 12: &#39;1.200&#39;\r\n\r\n  [1]: http://kevin.vanzonneveld.net/techblog/article/javascript_equivalent_for_phps_number_format/"},{"score":165,"body_markdown":"Below is the [Patrick Desjardins (alias Daok)][1] code with a bit of comments added and some minor changes:\r\n\r\n    /* \r\n    decimal_sep: character used as deciaml separtor, it defaults to &#39;.&#39; when omitted\r\n    thousands_sep: char used as thousands separator, it defaults to &#39;,&#39; when omitted\r\n    */\r\n    Number.prototype.toMoney = function(decimals, decimal_sep, thousands_sep)\r\n    { \r\n       var n = this,\r\n       c = isNaN(decimals) ? 2 : Math.abs(decimals), //if decimal is zero we must take it, it means user does not want to show any decimal\r\n       d = decimal_sep || &#39;.&#39;, //if no decimal separator is passed we use the dot as default decimal separator (we MUST use a decimal separator)\r\n       \r\n       /*\r\n       according to [https://stackoverflow.com/questions/411352/how-best-to-determine-if-an-argument-is-not-sent-to-the-javascript-function]\r\n       the fastest way to check for not defined parameter is to use typeof value === &#39;undefined&#39; \r\n       rather than doing value === undefined.\r\n       */   \r\n       t = (typeof thousands_sep === &#39;undefined&#39;) ? &#39;,&#39; : thousands_sep, //if you don&#39;t want to use a thousands separator you can pass empty string as thousands_sep value\r\n          \r\n       sign = (n &lt; 0) ? &#39;-&#39; : &#39;&#39;,\r\n       \r\n       //extracting the absolute value of the integer part of the number and converting to string\r\n       i = parseInt(n = Math.abs(n).toFixed(c)) + &#39;&#39;, \r\n       \r\n       j = ((j = i.length) &gt; 3) ? j % 3 : 0; \r\n       return sign + (j ? i.substr(0, j) + t : &#39;&#39;) + i.substr(j).replace(/(\\d{3})(?=\\d)/g, &quot;$1&quot; + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : &#39;&#39;); \r\n    }\r\n    \r\n\r\nand here some tests:\r\n\r\n    //some tests (do not forget parenthesis when using negative numbers and number with no decimals)\r\n    alert(123456789.67392.toMoney() + &#39;\\n&#39; + 123456789.67392.toMoney(3) + &#39;\\n&#39; + 123456789.67392.toMoney(0) + &#39;\\n&#39; + (123456).toMoney() + &#39;\\n&#39; + (123456).toMoney(0) + &#39;\\n&#39; + 89.67392.toMoney() + &#39;\\n&#39; + (89).toMoney());\r\n    \r\n    //some tests (do not forget parenthesis when using negative numbers and number with no decimals)\r\n    alert((-123456789.67392).toMoney() + &#39;\\n&#39; + (-123456789.67392).toMoney(-3));\r\n\r\nThe minor changes are:\r\n\r\n1. moved a bit the `Math.abs(decimals)` to be done only when is not `NaN`.\r\n\r\n2. `decimal_sep` can not be empty string anymore (a some sort of decimal separator is a MUST)\r\n\r\n3. we use `typeof thousands_sep === &#39;undefined&#39;` as suggested in https://stackoverflow.com/questions/411352/how-best-to-determine-if-an-argument-is-not-sent-to-the-javascript-function\r\n\r\n4. `(+n || 0)` is not needed because `this` is a `Number` object\r\n\r\n[JS Fiddle][2]\r\n\r\n  [1]: https://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript/149099#149099\r\n  [2]: https://jsfiddle.net/9kvrndfu/\r\n\r\n"},{"score":2,"body_markdown":"    function getMoney(A){\r\n        var a = new Number(A);\r\n        var b = a.toFixed(2); //get 12345678.90\r\n        a = parseInt(a); // get 12345678\r\n        b = (b-a).toPrecision(2); //get 0.90\r\n        b = parseFloat(b).toFixed(2); //in case we get 0.0, we pad it out to 0.00\r\n        a = a.toLocaleString();//put in commas - IE also puts in .00, so we&#39;ll get 12,345,678.00\r\n        //if IE (our number ends in .00)\r\n        if(a &lt; 1 &amp;&amp; a.lastIndexOf(&#39;.00&#39;) == (a.length - 3))\r\n        {\r\n            a=a.substr(0, a.length-3); //delete the .00\r\n        }\r\n        return a+b.substr(1);//remove the 0 from b, then return a + b = 12,345,678.90\r\n    }\r\n    alert(getMoney(12345678.9));\r\n\r\nThis works in FF and IE"},{"score":13,"body_markdown":"As usually, there are multiple ways of doing the same thing but I would avoid using `Number.prototype.toLocaleString` since it can return different values based on the user settings.\r\n\r\nI also don&#39;t recommend extending the `Number.prototype` - extending native objects prototypes is a bad practice since it can cause conflicts with other people code (e.g. libraries/frameworks/plugins) and may not be compatible with future JavaScript implementations/versions.\r\n\r\nI believe that Regular Expressions are the best approach for the problem, here is my implementation:\r\n\r\n    /**\r\n     * Converts number into currency format\r\n     * @param {number} number\tNumber that should be converted.\r\n     * @param {string} [decimalSeparator]    Decimal separator, defaults to &#39;.&#39;.\r\n     * @param {string} [thousandsSeparator]    Thousands separator, defaults to &#39;,&#39;.\r\n     * @param {int} [nDecimalDigits]\tNumber of decimal digits, defaults to `2`.\r\n     * @return {string} Formatted string (e.g. numberToCurrency(12345.67) returns &#39;12,345.67&#39;)\r\n     */\r\n    function numberToCurrency(number, decimalSeparator, thousandsSeparator, nDecimalDigits){\r\n        //default values\r\n        decimalSeparator = decimalSeparator || &#39;.&#39;;\r\n        thousandsSeparator = thousandsSeparator || &#39;,&#39;;\r\n        nDecimalDigits = nDecimalDigits == null? 2 : nDecimalDigits;\r\n\r\n        var fixed = number.toFixed(nDecimalDigits), //limit/add decimal digits\r\n            parts = new RegExp(&#39;^(-?\\\\d{1,3})((?:\\\\d{3})+)(\\\\.(\\\\d{&#39;+ nDecimalDigits +&#39;}))?$&#39;).exec( fixed ); //separate begin [$1], middle [$2] and decimal digits [$4]\r\n\r\n        if(parts){ //number &gt;= 1000 || number &lt;= -1000\r\n            return parts[1] + parts[2].replace(/\\d{3}/g, thousandsSeparator + &#39;$&amp;&#39;) + (parts[4] ? decimalSeparator + parts[4] : &#39;&#39;);\r\n        }else{\r\n            return fixed.replace(&#39;.&#39;, decimalSeparator);\r\n        }\r\n    }\r\n\r\n*edited on 2010/08/30: added option to set number of decimal digits.*\r\n*edited on 2011/08/23: added option to set number of decimal digits to zero.*"},{"score":80,"body_markdown":"There are already some great answers here. Here&#39;s another attempt, just for fun:\r\n\r\n    function formatDollar(num) {\r\n        var p = num.toFixed(2).split(&quot;.&quot;);\r\n        return &quot;$&quot; + p[0].split(&quot;&quot;).reverse().reduce(function(acc, num, i, orig) {\r\n            return  num==&quot;-&quot; ? acc : num + (i &amp;&amp; !(i % 3) ? &quot;,&quot; : &quot;&quot;) + acc;\r\n        }, &quot;&quot;) + &quot;.&quot; + p[1];\r\n    }\r\n\r\nAnd some tests:\r\n\r\n    formatDollar(45664544.23423) // &quot;$45,664,544.23&quot;\r\n    formatDollar(45) // &quot;$45.00&quot;\r\n    formatDollar(123) // &quot;$123.00&quot;\r\n    formatDollar(7824) // &quot;$7,824.00&quot;\r\n    formatDollar(1) // &quot;$1.00&quot;\r\n\r\nEdited: now it will handle negative numbers as well"},{"score":9,"body_markdown":"Patrick Desjardins (ex Daok)&#39;s example worked well for me. I ported over to coffeescript if anyone is interested.\r\n\r\n    Number.prototype.toMoney = (decimals = 2, decimal_separator = &quot;.&quot;, thousands_separator = &quot;,&quot;) -&gt;\r\n        n = this\r\n        c = if isNaN(decimals) then 2 else Math.abs decimals\r\n        sign = if n &lt; 0 then &quot;-&quot; else &quot;&quot;\r\n        i = parseInt(n = Math.abs(n).toFixed(c)) + &#39;&#39;\r\n        j = if (j = i.length) &gt; 3 then j % 3 else 0\r\n        x = if j then i.substr(0, j) + thousands_separator else &#39;&#39;\r\n        y = i.substr(j).replace(/(\\d{3})(?=\\d)/g, &quot;$1&quot; + thousands_separator)\r\n        z = if c then decimal_separator + Math.abs(n - i).toFixed(c).slice(2) else &#39;&#39;\r\n        sign + x + y + z"},{"score":3,"body_markdown":"This might work:\r\n\r\n    function format_currency(v, number_of_decimals, decimal_separator, currency_sign){\r\n      return (isNaN(v)? v : currency_sign + parseInt(v||0).toLocaleString() + decimal_separator + (v*1).toFixed(number_of_decimals).slice(-number_of_decimals));\r\n    }\r\n\r\n\r\nNo loops, no regexes, no arrays, no exotic conditionals."},{"score":26,"body_markdown":"[javascript-number-formatter](https://github.com/Mottie/javascript-number-formatter) (formerly at [Google Code](https://code.google.com/archive/p/javascript-number-formatter/))\r\n\r\n* Short, fast, flexible yet standalone. &lt;del&gt;Only 75 lines including MIT license info, blank lines &amp; comments.&lt;/del&gt;\r\n* Accept standard number formatting like `#,##0.00` or with negation `-000.####`.\r\n* Accept any country format like `# ##0,00`, `#,###.##`, `#&#39;###.##` or any type of non-numbering symbol.\r\n* Accept any numbers of digit grouping. `#,##,#0.000` or `#,###0.##` are all valid.\r\n* Accept any redundant/fool-proof formatting. `##,###,##.#` or `0#,#00#.###0#` are all OK.\r\n* Auto number rounding.\r\n* Simple interface, just supply mask &amp; value like this: `format( &quot;0.0000&quot;, 3.141592)`.\r\n* Include a prefix &amp;amp; suffix with the mask\r\n\r\n(excerpt from its README)"},{"score":-1,"body_markdown":"here is a quick way by using regexp and replace.\r\n\r\n    function formatCurrency( number, dp, ts ) {\r\n      var num = parseFloat( number ); //convert to float\r\n      var pw; //for IE\r\n      dp = parseInt( dp, 10 ); //decimal point\r\n      dp = isNaN( dp ) ? 2 : dp; //default 2 decimal point\r\n      ts = ts || &#39;,&#39;; //thousands separator\r\n\r\n      return num != number ? \r\n        false : //return false for NaN\r\n        ( ( 0.9 ).toFixed( 0 ) == &#39;1&#39; ? //for cater IE toFixed bug\r\n            num.toFixed( dp ) : //format to fix n decimal point with round up\r\n            ( Math.round( num * ( pw = Math.pow( 10, dp ) || 1 ) ) / pw ).toFixed( dp ) //for fix ie toFixed bug on round up value like 0.9 in toFixed\r\n        ).replace( /^(-?\\d{1,3})((\\d{3})*)(\\.\\d+)?$/, function( all, first, subsequence, dmp, dec ) { //separate string into different parts\r\n          return ( first || &#39;&#39; ) + subsequence.replace( /(\\d{3})/g, ts + &#39;$1&#39; ) + ( dec || &#39;&#39; ); //add thousands seperator and re-join all parts\r\n        } );\r\n    }"},{"score":27,"body_markdown":"I use the library [Globalize][1] (from Microsoft): \r\n\r\nIt&#39;s a great project to localize numbers, currencies and dates and to have them automatically formatted the right way according to the user locale! ...and despite it should be a jQuery extension, it&#39;s currently a 100% independent library. I suggest you all to try it out! :)\r\n\r\n\r\n  [1]: https://github.com/jquery/globalize"},{"score":127,"body_markdown":"[accounting.js][1] is a tiny JavaScript library for number, money and currency formatting.\r\n\r\n\r\n  [1]: http://openexchangerates.github.io/accounting.js/"},{"score":3,"body_markdown":"A quiker way with regexp ?\r\n\r\n    Number.prototype.toMonetaryString=function(){var n=this.toFixed(2),m;\r\n    // var=this.toFixed(2).replace(/\\./,&#39;,&#39;); for comma separator\r\n    // with a space for thousands separator\r\n      while ((m=n.replace(/(\\d)(\\d\\d\\d)\\b/g,&#39;$1 $2&#39;))!=n) n=m; \r\n      return m;\r\n    }\r\n    String.prototype.fromMonetaryToNumber=function(s){\r\n      return this.replace(/[^\\d-]+/g,&#39;&#39;)/100;\r\n    }   "},{"score":10,"body_markdown":"A simple option for proper comma placement by reversing the string first and basic regexp.\r\n\r\n    String.prototype.reverse = function() {\r\n    \treturn this.split(&#39;&#39;).reverse().join(&#39;&#39;);\r\n    };\r\n\r\n    Number.prototype.toCurrency = function( round_decimal /*boolean*/ ) {       \r\n         // format decimal or round to nearest integer\r\n         var n = this.toFixed( round_decimal ? 0 : 2 );\r\n         \r\n         // convert to a string, add commas every 3 digits from left to right \r\n         // by reversing string\r\n         return (n + &#39;&#39;).reverse().replace( /(\\d{3})(?=\\d)/g, &#39;$1,&#39; ).reverse();\r\n    };\r\n"},{"score":22,"body_markdown":"A shorter method (for inserting space, comma or point) with regular expression ?\r\n    \r\n        Number.prototype.toCurrencyString=function(){\r\n            return this.toFixed(2).replace(/(\\d)(?=(\\d{3})+\\b)/g,&#39;$1 &#39;);\r\n        }\r\n\r\n        n=12345678.9;\r\n        alert(n.toCurrencyString());"},{"score":3,"body_markdown":"There is no equivalent of &quot;formatNumber&quot; in JavaScript. You can write it yourself or find a library that already does this."},{"score":70,"body_markdown":"I think what you want is `f.nettotal.value = &quot;$&quot; + showValue.toFixed(2);`"},{"score":109,"body_markdown":"Here&#39;s the best JavaScript money formatter I&#39;ve seen:\r\n\r\n\r\n    Number.prototype.formatMoney = function(decPlaces, thouSeparator, decSeparator) {\r\n        var n = this,\r\n            decPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces,\r\n            decSeparator = decSeparator == undefined ? &quot;.&quot; : decSeparator,\r\n            thouSeparator = thouSeparator == undefined ? &quot;,&quot; : thouSeparator,\r\n            sign = n &lt; 0 ? &quot;-&quot; : &quot;&quot;,\r\n            i = parseInt(n = Math.abs(+n || 0).toFixed(decPlaces)) + &quot;&quot;,\r\n            j = (j = i.length) &gt; 3 ? j % 3 : 0;\r\n        return sign + (j ? i.substr(0, j) + thouSeparator : &quot;&quot;) + i.substr(j).replace(/(\\d{3})(?=\\d)/g, &quot;$1&quot; + thouSeparator) + (decPlaces ? decSeparator + Math.abs(n - i).toFixed(decPlaces).slice(2) : &quot;&quot;);\r\n    };\r\n\r\nIt was re-formatted and borrowed from here: https://stackoverflow.com/a/149099/751484\r\n\r\nYou&#39;ll have to supply your own currency designator (you used $ above).\r\n\r\nCall it like this (although note that the args default to 2, comma, &amp; period, so you don&#39;t need to supply any args if that&#39;s your preference):\r\n\r\n    var myMoney=3543.75873;\r\n    var formattedMoney = &#39;$&#39; + myMoney.formatMoney(2,&#39;,&#39;,&#39;.&#39;); // &quot;$3,543.76&quot;\r\n"},{"score":17,"body_markdown":"There is a built-in `function` [toFixed][1] in `javascript` \r\n\r\n    var num = new Number(349);\r\n    document.write(&quot;$&quot; + num.toFixed(2));\r\n\r\n\r\n  [1]: http://www.w3schools.com/jsref/jsref_tofixed.asp"},{"score":18,"body_markdown":"[Patrick Desjardins][1]&#39; answer looks good, but I prefer my javascript simple.  Here&#39;s a function I just wrote to take a number in and return it in currency format (minus the dollar sign)\r\n\r\n    // Format numbers to two decimals with commas\r\n    function formatDollar(num) {\r\n        var p = num.toFixed(2).split(&quot;.&quot;);\r\n        var chars = p[0].split(&quot;&quot;).reverse();\r\n        var newstr = &#39;&#39;;\r\n        var count = 0;\r\n        for (x in chars) {\r\n            count++;\r\n            if(count%3 == 1 &amp;&amp; count != 1) {\r\n                newstr = chars[x] + &#39;,&#39; + newstr;\r\n            } else {\r\n                newstr = chars[x] + newstr;\r\n            }\r\n        }\r\n        return newstr + &quot;.&quot; + p[1];\r\n    }\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/149099/155987"},{"score":2,"body_markdown":"    String.prototype.toPrice = function () {\r\n        var v;\r\n        if (/^\\d+(,\\d+)$/.test(this))\r\n            v = this.replace(/,/, &#39;.&#39;);\r\n        else if (/^\\d+((,\\d{3})*(\\.\\d+)?)?$/.test(this))\r\n            v = this.replace(/,/g, &quot;&quot;);\r\n        else if (/^\\d+((.\\d{3})*(,\\d+)?)?$/.test(this))\r\n            v = this.replace(/\\./g, &quot;&quot;).replace(/,/, &quot;.&quot;);\r\n        var x = parseFloat(v).toFixed(2).toString().split(&quot;.&quot;),\r\n        x1 = x[0],\r\n        x2 = ((x.length == 2) ? &quot;.&quot; + x[1] : &quot;.00&quot;),\r\n        exp = /^([0-9]+)(\\d{3})/;\r\n        while (exp.test(x1))\r\n            x1 = x1.replace(exp, &quot;$1&quot; + &quot;,&quot; + &quot;$2&quot;);\r\n        return x1 + x2;\r\n    }\r\n\r\n    alert(&quot;123123&quot;.toPrice()); //123,123.00\r\n    alert(&quot;123123,316&quot;.toPrice()); //123,123.32\r\n    alert(&quot;12,312,313.33213&quot;.toPrice()); //12,312,313.33\r\n    alert(&quot;123.312.321,32132&quot;.toPrice()); //123,312,321.32"},{"score":24,"body_markdown":"+1 to Jonathan M for providing the original method. Since this is explicitly a currency formatter, I went ahead and added the currency symbol (defaults to &#39;$&#39;) to the output, and added a default comma as the thousands separator. If you don&#39;t actually want a currency symbol (or thousands separator), just use &quot;&quot; (empty string) as your argument for it.\r\n\r\n    Number.prototype.formatMoney = function(decPlaces, thouSeparator, decSeparator, currencySymbol) {\r\n        // check the args and supply defaults:\r\n        decPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces;\r\n        decSeparator = decSeparator == undefined ? &quot;.&quot; : decSeparator;\r\n        thouSeparator = thouSeparator == undefined ? &quot;,&quot; : thouSeparator;\r\n        currencySymbol = currencySymbol == undefined ? &quot;$&quot; : currencySymbol;\r\n\r\n        var n = this,\r\n            sign = n &lt; 0 ? &quot;-&quot; : &quot;&quot;,\r\n            i = parseInt(n = Math.abs(+n || 0).toFixed(decPlaces)) + &quot;&quot;,\r\n            j = (j = i.length) &gt; 3 ? j % 3 : 0;\r\n\r\n        return sign + currencySymbol + (j ? i.substr(0, j) + thouSeparator : &quot;&quot;) + i.substr(j).replace(/(\\d{3})(?=\\d)/g, &quot;$1&quot; + thouSeparator) + (decPlaces ? decSeparator + Math.abs(n - i).toFixed(decPlaces).slice(2) : &quot;&quot;);\r\n    };"},{"score":2,"body_markdown":"Coffeescript for Patrick&#39;s popular answer above:\r\n\r\n    Number::formatMoney = (decimalPlaces, decimalChar, thousandsChar) -&gt;  \r\n      n = this  \r\n      c = decimalPlaces  \r\n      d = decimalChar  \r\n      t = thousandsChar  \r\n      c = (if isNaN(c = Math.abs(c)) then 2 else c)  \r\n      d = (if d is undefined then &quot;.&quot; else d)  \r\n      t = (if t is undefined then &quot;,&quot; else t)  \r\n      s = (if n &lt; 0 then &quot;-&quot; else &quot;&quot;)  \r\n      i = parseInt(n = Math.abs(+n or 0).toFixed(c)) + &quot;&quot;  \r\n      j = (if (j = i.length) &gt; 3 then j % 3 else 0)  \r\n      s + (if j then i.substr(0, j) + t else &quot;&quot;) + i.substr(j).replace(/(\\d{3})(?=\\d)/g, &quot;$1&quot; + t) + (if c then d + Math.abs(n - i).toFixed(c).slice(2) else &quot;&quot;)  \r\n    \r\n      "},{"score":29,"body_markdown":"[Numeral.js](http://numeraljs.com/) - a js library for easy number formatting by @adamwdraper\r\n\r\n    numeral(23456.789).format(&#39;$0,0.00&#39;); // = &quot;$23,456.79&quot;"},{"score":15,"body_markdown":"I suggest the NumberFormat class from [Google Visualization API][1].\r\n\r\n\r\n  [1]: https://developers.google.com/chart/interactive/docs/reference#numberformatter\r\n\r\nYou can do something like this:\r\n\r\n    var formatter = new google.visualization.NumberFormat({\r\n        prefix: &#39;$&#39;,\r\n        pattern: &#39;#,###,###.##&#39;\r\n    });\r\n\r\n    formatter.formatValue(1000000); // $ 1,000,000\r\n\r\nI hope it helps."},{"score":1,"body_markdown":"Here&#39;s mine...\r\n\r\n    function thousandCommas(num) {\r\n      num = num.toString().split(&#39;.&#39;);\r\n      var ints = num[0].split(&#39;&#39;).reverse();\r\n      for (var out=[],len=ints.length,i=0; i &lt; len; i++) {\r\n        if (i &gt; 0 &amp;&amp; (i % 3) === 0) out.push(&#39;,&#39;);\r\n        out.push(ints[i]);\r\n      }\r\n      out = out.reverse() &amp;&amp; out.join(&#39;&#39;);\r\n      if (num.length === 2) out += &#39;.&#39; + num[1];\r\n      return out;\r\n    }"},{"score":5,"body_markdown":"http://code.google.com/p/javascript-number-formatter/ :\r\n\r\n*    Short, fast, flexible yet standalone. Only 75 lines including MIT license info, blank lines &amp; comments.\r\n*    Accept standard number formatting like #,##0.00 or with negation -000.####.\r\n*    Accept any country format like # ##0,00, #,###.##, #&#39;###.## or any type of non-numbering symbol.\r\n*    Accept any numbers of digit grouping. #,##,#0.000 or #,###0.## are all valid.\r\n*    Accept any redundant/fool-proof formatting. ##,###,##.# or 0#,#00#.###0# are all OK.\r\n*    Auto number rounding.\r\n*    Simple interface, just supply mask &amp; value like this: format( &quot;0.0000&quot;, 3.141592)\r\n\r\n**UPDATE** This is my home grown ``pp`` utilities for most common tasks:\r\n\r\n    var NumUtil = {};\r\n\r\n    /**\r\n      Petty print &#39;num&#39; wth exactly &#39;signif&#39; digits.\r\n      pp(123.45, 2) == &quot;120&quot;\r\n      pp(0.012343, 3) == &quot;0.0123&quot;\r\n      pp(1.2, 3) == &quot;1.20&quot;\r\n    */\r\n    NumUtil.pp = function(num, signif) {\r\n        if (typeof(num) !== &quot;number&quot;)\r\n            throw &#39;NumUtil.pp: num is not a number!&#39;;\r\n        if (isNaN(num))\r\n            throw &#39;NumUtil.pp: num is NaN!&#39;;\r\n        if (num &lt; 1e-15 || num &gt; 1e15)\r\n            return num;\r\n        var r = Math.log(num)/Math.LN10;\r\n        var dot = Math.floor(r) - (signif-1);\r\n        r = r - Math.floor(r) + (signif-1);\r\n        r = Math.round(Math.exp(r * Math.LN10)).toString();\r\n        if (dot &gt;= 0) {\r\n            for (; dot &gt; 0; dot -= 1)\r\n                r += &quot;0&quot;;\r\n            return r;\r\n        } else if (-dot &gt;= r.length) {\r\n            var p = &quot;0.&quot;;\r\n            for (; -dot &gt; r.length; dot += 1) {\r\n                p += &quot;0&quot;;\r\n            }\r\n            return p+r;\r\n        } else {\r\n            return r.substring(0, r.length + dot) + &quot;.&quot; + r.substring(r.length + dot);\r\n        }\r\n    }\r\n\r\n    /** Append leading zeros up to 2 digits. */\r\n    NumUtil.align2 = function(v) {\r\n        if (v &lt; 10)\r\n            return &quot;0&quot;+v;\r\n        return &quot;&quot;+v;\r\n    }\r\n    /** Append leading zeros up to 3 digits. */\r\n    NumUtil.align3 = function(v) {\r\n        if (v &lt; 10)\r\n            return &quot;00&quot;+v;\r\n        else if (v &lt; 100)\r\n            return &quot;0&quot;+v;\r\n        return &quot;&quot;+v;\r\n    }\r\n\r\n    NumUtil.integer = {};\r\n\r\n    /** Round to integer and group by 3 digits. */\r\n    NumUtil.integer.pp = function(num) {\r\n        if (typeof(num) !== &quot;number&quot;) {\r\n            console.log(&quot;%s&quot;, new Error().stack);\r\n            throw &#39;NumUtil.integer.pp: num is not a number!&#39;;\r\n        }\r\n        if (isNaN(num))\r\n            throw &#39;NumUtil.integer.pp: num is NaN!&#39;;\r\n        if (num &gt; 1e15)\r\n            return num;\r\n        if (num &lt; 0)\r\n            throw &#39;Negative num!&#39;;\r\n        num = Math.round(num);\r\n        var group = num % 1000;\r\n        var integ = Math.floor(num / 1000);\r\n        if (integ === 0) {\r\n            return group;\r\n        }\r\n        num = NumUtil.align3(group);\r\n        while (true) {\r\n            group = integ % 1000;\r\n            integ = Math.floor(integ / 1000);\r\n            if (integ === 0)\r\n                return group + &quot; &quot; + num;\r\n            num = NumUtil.align3(group) + &quot; &quot; + num;\r\n        }\r\n        return num;\r\n    }\r\n\r\n    NumUtil.currency = {};\r\n\r\n    /** Round to coins and group by 3 digits. */\r\n    NumUtil.currency.pp = function(amount) {\r\n        if (typeof(amount) !== &quot;number&quot;)\r\n            throw &#39;NumUtil.currency.pp: amount is not a number!&#39;;\r\n        if (isNaN(amount))\r\n            throw &#39;NumUtil.currency.pp: amount is NaN!&#39;;\r\n        if (amount &gt; 1e15)\r\n            return amount;\r\n        if (amount &lt; 0)\r\n            throw &#39;Negative amount!&#39;;\r\n        if (amount &lt; 1e-2)\r\n            return 0;\r\n        var v = Math.round(amount*100);\r\n        var integ = Math.floor(v / 100);\r\n        var frac = NumUtil.align2(v % 100);\r\n        var group = integ % 1000;\r\n        integ = Math.floor(integ / 1000);\r\n        if (integ === 0) {\r\n            return group + &quot;.&quot; + frac;\r\n        }\r\n        amount = NumUtil.align3(group);\r\n        while (true) {\r\n            group = integ % 1000;\r\n            integ = Math.floor(integ / 1000);\r\n            if (integ === 0)\r\n                return group + &quot; &quot; + amount + &quot;.&quot; + frac;\r\n            amount = NumUtil.align3(group) + &quot; &quot; + amount;\r\n        }\r\n        return amount;\r\n    }\r\n"},{"score":1373,"body_markdown":"## Short and fast solution (works everywhere!)\r\n\r\n    (12345.67).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, &#39;$&amp;,&#39;);  // 12,345.67\r\n\r\nThe idea behind this solution is replacing matched sections with first match and comma, i.e. `&#39;$&amp;,&#39;`. The matching is done using [lookahead approach][1]. You may read the expression as *&quot;match a number if it is followed by a sequence of three number sets (one or more) and a dot&quot;*.\r\n\r\n**TESTS:**\r\n\r\n    1        --&gt; &quot;1.00&quot;\r\n    12       --&gt; &quot;12.00&quot;\r\n    123      --&gt; &quot;123.00&quot;\r\n    1234     --&gt; &quot;1,234.00&quot;\r\n    12345    --&gt; &quot;12,345.00&quot;\r\n    123456   --&gt; &quot;123,456.00&quot;\r\n    1234567  --&gt; &quot;1,234,567.00&quot;\r\n    12345.67 --&gt; &quot;12,345.67&quot;\r\n\r\n**DEMO:** http://jsfiddle.net/hAfMM/9571/\r\n\r\n---\r\n## Extended short solution\r\n\r\nYou can also extend the prototype of [`Number`][2] object to add additional support of any number of decimals `[0 .. n]` and the size of number groups `[0 .. x]`:\r\n\r\n    /**\r\n     * Number.prototype.format(n, x)\r\n     * \r\n     * @param integer n: length of decimal\r\n     * @param integer x: length of sections\r\n     */\r\n    Number.prototype.format = function(n, x) {\r\n        var re = &#39;\\\\d(?=(\\\\d{&#39; + (x || 3) + &#39;})+&#39; + (n &gt; 0 ? &#39;\\\\.&#39; : &#39;$&#39;) + &#39;)&#39;;\r\n        return this.toFixed(Math.max(0, ~~n)).replace(new RegExp(re, &#39;g&#39;), &#39;$&amp;,&#39;);\r\n    };\r\n\r\n    1234..format();           // &quot;1,234&quot;\r\n    12345..format(2);         // &quot;12,345.00&quot;\r\n    123456.7.format(3, 2);    // &quot;12,34,56.700&quot;\r\n    123456.789.format(2, 4);  // &quot;12,3456.79&quot;\r\n\r\n**DEMO / TESTS:** http://jsfiddle.net/hAfMM/435/\r\n\r\n---\r\n## Super extended short solution\r\n\r\nIn this [super extended version][3] you may set different delimiter types:\r\n\r\n    /**\r\n     * Number.prototype.format(n, x, s, c)\r\n     * \r\n     * @param integer n: length of decimal\r\n     * @param integer x: length of whole part\r\n     * @param mixed   s: sections delimiter\r\n     * @param mixed   c: decimal delimiter\r\n     */\r\n    Number.prototype.format = function(n, x, s, c) {\r\n        var re = &#39;\\\\d(?=(\\\\d{&#39; + (x || 3) + &#39;})+&#39; + (n &gt; 0 ? &#39;\\\\D&#39; : &#39;$&#39;) + &#39;)&#39;,\r\n            num = this.toFixed(Math.max(0, ~~n));\r\n        \r\n        return (c ? num.replace(&#39;.&#39;, c) : num).replace(new RegExp(re, &#39;g&#39;), &#39;$&amp;&#39; + (s || &#39;,&#39;));\r\n    };\r\n    \r\n    12345678.9.format(2, 3, &#39;.&#39;, &#39;,&#39;);  // &quot;12.345.678,90&quot;\r\n    123456.789.format(4, 4, &#39; &#39;, &#39;:&#39;);  // &quot;12 3456:7890&quot;\r\n    12345678.9.format(0, 3, &#39;-&#39;);       // &quot;12-345-679&quot;\r\n\r\n**DEMO / TESTS:** http://jsfiddle.net/hAfMM/612/\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#special-lookahead\r\n  [2]: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number\r\n  [3]: https://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript/14428340#comment34151293_14428340"},{"score":3,"body_markdown":"Here is a mootools 1.2 implementation from the code provided by XMLilley...\r\n\r\n    Number.implement(&#39;format&#39;, function(decPlaces, thouSeparator, decSeparator){\r\n\tdecPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces;\r\n\tdecSeparator = decSeparator === undefined ? &#39;.&#39; : decSeparator;\r\n\tthouSeparator = thouSeparator === undefined ? &#39;,&#39; : thouSeparator;\r\n\r\n\tvar num = this,\r\n\t\tsign = num &lt; 0 ? &#39;-&#39; : &#39;&#39;,\r\n\t\ti = parseInt(num = Math.abs(+num || 0).toFixed(decPlaces)) + &#39;&#39;,\r\n\t\tj = (j = i.length) &gt; 3 ? j % 3 : 0;\r\n\r\n\treturn sign + (j ? i.substr(0, j) + thouSeparator : &#39;&#39;) + i.substr(j).replace(/(\\d{3})(?=\\d)/g, &#39;$1&#39; + thouSeparator) + (decPlaces ? decSeparator + Math.abs(num - i).toFixed(decPlaces).slice(2) : &#39;&#39;);\r\n    });"},{"score":14,"body_markdown":"This might be a little late, but here&#39;s a method I just worked up for a coworker to add a locale-aware `.toCurrencyString()` function to all numbers.  The internalization is for number grouping only, NOT the currency sign - if you&#39;re outputting dollars, use `&quot;$&quot;` as supplied, because `$123 4567` in Japan or China is the same number of USD as `$1,234,567` is here in the US.  If you&#39;re outputting euro/etc., then change the currency sign from `&quot;$&quot;`.\r\n\r\nDeclare this anywhere in your HEAD or wherever necessary, just before you need to use it:\r\n\r\n      Number.prototype.toCurrencyString = function(prefix, suffix) {\r\n        if (typeof prefix === &#39;undefined&#39;) { prefix = &#39;$&#39;; }\r\n        if (typeof suffix === &#39;undefined&#39;) { suffix = &#39;&#39;; }\r\n        var _localeBug = new RegExp((1).toLocaleString().replace(/^1/, &#39;&#39;).replace(/\\./, &#39;\\\\.&#39;) + &quot;$&quot;);\r\n        return prefix + (~~this).toLocaleString().replace(_localeBug, &#39;&#39;) + (this % 1).toFixed(2).toLocaleString().replace(/^[+-]?0+/,&#39;&#39;) + suffix;\r\n      }\r\n\r\nThen you&#39;re done!  Use `(number).toCurrencyString()` anywhere you need to output the number as currency.\r\n\r\n    var MyNumber = 123456789.125;\r\n    alert(MyNumber.toCurrencyString()); // alerts &quot;$123,456,789.13&quot;\r\n    MyNumber = -123.567;\r\n    alert(MyNumber.toCurrencyString()); // alerts &quot;$-123.57&quot;"},{"score":2,"body_markdown":"Because why not add another answer. I based this heavily on the answer from VisioN.\r\n\r\n    function format (val) {\r\n      val = (+val).toLocaleString();\r\n      val = (+val).toFixed(2);\r\n      val += &quot;&quot;;\r\n      return val.replace(/(\\d)(?=(\\d{3})+(?:\\.\\d+)?$)/g, &quot;$1&quot; + format.thousands);\r\n    }\r\n    (function (isUS) {\r\n      format.decimal =   isUS ? &quot;.&quot; : &quot;,&quot;;\r\n      format.thousands = isUS ? &quot;,&quot; : &quot;.&quot;;\r\n    }((&quot;&quot; + (+(0.00).toLocaleString()).toFixed(2)).indexOf(&quot;.&quot;) &gt; 0));\r\n\r\nI tested with inputs:\r\n\r\n    [   &quot;&quot;\r\n      , &quot;1&quot;\r\n      , &quot;12&quot;\r\n      , &quot;123&quot;\r\n      , &quot;1234&quot;\r\n      , &quot;12345&quot;\r\n      , &quot;123456&quot;\r\n      , &quot;1234567&quot;\r\n      , &quot;12345678&quot;\r\n      , &quot;123456789&quot;\r\n      , &quot;1234567890&quot;\r\n      , &quot;.12&quot;\r\n      , &quot;1.12&quot;\r\n      , &quot;12.12&quot;\r\n      , &quot;123.12&quot;\r\n      , &quot;1234.12&quot;\r\n      , &quot;12345.12&quot;\r\n      , &quot;123456.12&quot;\r\n      , &quot;1234567.12&quot;\r\n      , &quot;12345678.12&quot;\r\n      , &quot;123456789.12&quot;\r\n      , &quot;1234567890.12&quot;\r\n      , &quot;1234567890.123&quot;\r\n      , &quot;1234567890.125&quot;\r\n    ].forEach(function (item) {\r\n      console.log(format(item));\r\n    });\r\n\r\nAnd got these results:\r\n\r\n    0.00\r\n    1.00\r\n    12.00\r\n    123.00\r\n    1,234.00\r\n    12,345.00\r\n    123,456.00\r\n    1,234,567.00\r\n    12,345,678.00\r\n    123,456,789.00\r\n    1,234,567,890.00\r\n    0.12\r\n    1.12\r\n    12.12\r\n    123.12\r\n    1,234.12\r\n    12,345.12\r\n    123,456.12\r\n    1,234,567.12\r\n    12,345,678.12\r\n    123,456,789.12\r\n    1,234,567,890.12\r\n    1,234,567,890.12\r\n    1,234,567,890.13\r\n\r\nJust for fun."},{"score":1757,"body_markdown":"# [Intl.numberformat](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/NumberFormat)\r\n\r\nJavascript has a number formatter (part of the Internationalization API). \r\n\r\n    // Create our number formatter.\r\n    var formatter = new Intl.NumberFormat(&#39;en-US&#39;, {\r\n      style: &#39;currency&#39;,\r\n      currency: &#39;USD&#39;,\r\n    \r\n      // These options are needed to round to whole numbers if that&#39;s what you want.\r\n      //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\r\n      //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\r\n    });\r\n\r\n    formatter.format(2500); /* $2,500.00 */\r\n\r\n[JS fiddle](https://jsfiddle.net/r8gu6qv7/)\r\n\r\nUse `undefined` in place of the first argument (`&#39;en-US&#39;` in the example) to use the system locale (the user locale in case the code is running in a browser). [Further explanation of the locale code](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\r\n\r\nHere&#39;s a [list of the currency codes](https://www.iban.com/currency-codes).\r\n\r\n## Intl.NumberFormat vs Number.prototype.toLocaleString\r\n\r\nA final note comparing this to the older .`toLocaleString`. They both offer essentially the same functionality. However, toLocaleString in its older incarnations (pre-Intl) [does not actually support locales](http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.3): it uses the system locale. Therefore, be sure that you&#39;re using the correct version ([MDN suggests to check for the existence of `Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString#Checking_for_support_for_locales_and_options_arguments)). Also, the performance of both is the same for a *single* item, but if you have a lot of numbers to format, using `Intl.NumberFormat` is ~70 times faster. Here&#39;s how to use `toLocaleString`:\r\n\r\n    (2500).toLocaleString(&#39;en-US&#39;, {\r\n      style: &#39;currency&#39;,\r\n      currency: &#39;USD&#39;,\r\n    }); /* $2,500.00 */\r\n\r\n### Some notes on browser support and Node\r\n\r\n* Browser support is no longer an issue nowadays with 97.5% support globally, 98% in the US and 99% in the EU\r\n* There is a [shim](https://github.com/andyearnshaw/Intl.js) to support it on fossilized browsers (like IE8), should you really need to\r\n* If you&#39;re using Node, you *might* need to install [full-icu](https://github.com/icu-project/full-icu-npm), see [here](https://stackoverflow.com/a/39626602/1000608) for more info\r\n* Have a look at [CanIUse](https://caniuse.com/#feat=internationalization) for more info\r\n"},{"score":4,"body_markdown":"This answer meets the following criteria:\r\n\r\n - Does not depend on an external dependency.\r\n - Does support localization.\r\n - Does have tests/proofs.\r\n - Does use simple and best coding practices (no complicated regex&#39;s, uses standard coding patterns).\r\n\r\nThis code is built on concepts from other answers. It&#39;s execution speed should be among the better posted here if that&#39;s a concern.\r\n\r\n    var decimalCharacter = Number(&quot;1.1&quot;).toLocaleString().substr(1,1);\r\n    var defaultCurrencyMarker = &quot;$&quot;;\r\n    function formatCurrency(number, currencyMarker) {\r\n    \tif (typeof number != &quot;number&quot;)\r\n    \t\tnumber = parseFloat(number, 10);\r\n    \t\r\n    \t// if NaN is passed in or comes from the parseFloat, set it to 0.\r\n    \tif (isNaN(number))\r\n    \t\tnumber = 0;\r\n    \t\r\n    \tvar sign = number &lt; 0 ? &quot;-&quot; : &quot;&quot;;\r\n    \tnumber = Math.abs(number);\t// so our signage goes before the $ symbol.\r\n    \t\r\n    \tvar integral = Math.floor(number);\r\n    \tvar formattedIntegral = integral.toLocaleString();\r\n    \t\r\n    \t// IE returns &quot;##.00&quot; while others return &quot;##&quot;\r\n    \tformattedIntegral = formattedIntegral.split(decimalCharacter)[0];\r\n    \t\r\n    \tvar decimal = Math.round((number - integral) * 100);\r\n    \treturn sign + (currencyMarker || defaultCurrencyMarker) +\r\n    \t\tformattedIntegral  +\r\n    \t\tdecimalCharacter +\r\n    \t\tdecimal.toString() + (decimal &lt; 10 ? &quot;0&quot; : &quot;&quot;);\r\n    }\r\n\r\nThese tests only work on a US locale machine. This decision was made for simplicity and because this could cause of crappy input (bad auto-localization) allowing for crappy output issues.\r\n\r\n    var tests = [\r\n    \t// [ input, expected result ]\r\n    \t[123123, &quot;$123,123.00&quot;],\t// no decimal\r\n    \t[123123.123, &quot;$123,123.12&quot;],\t// decimal rounded down\r\n    \t[123123.126, &quot;$123,123.13&quot;],\t// decimal rounded up\r\n    \t[123123.4, &quot;$123,123.40&quot;],\t// single decimal\r\n    \t[&quot;123123&quot;, &quot;$123,123.00&quot;],\t// repeat subset of the above using string input.\r\n    \t[&quot;123123.123&quot;, &quot;$123,123.12&quot;],\r\n    \t[&quot;123123.126&quot;, &quot;$123,123.13&quot;],\r\n    \t[-123, &quot;-$123.00&quot;]\t// negatives\r\n    ];\r\n    \r\n    for (var testIndex=0; testIndex &lt; tests.length; testIndex++) {\r\n    \tvar test = tests[testIndex];\r\n    \tvar formatted = formatCurrency(test[0]);\r\n    \tif (formatted == test[1]) {\r\n    \t\tconsole.log(&quot;Test passed, \\&quot;&quot; + test[0] + &quot;\\&quot; resulted in \\&quot;&quot; + formatted + &quot;\\&quot;&quot;);\r\n    \t} else {\r\n    \t\tconsole.error(&quot;Test failed. Expected \\&quot;&quot; + test[1] + &quot;\\&quot;, got \\&quot;&quot; + formatted + &quot;\\&quot;&quot;);\r\n    \t}\r\n    }\r\n"},{"score":79,"body_markdown":"**[Works for all current browsers][1]**\r\n\r\nUse `toLocaleString` to format a currency in it&#39;s language-sensitive representation (using [ISO 4217][2] currency codes).\r\n\r\n    (2500).toLocaleString(&quot;en-GB&quot;, {style: &quot;currency&quot;, currency: &quot;GBP&quot;, minimumFractionDigits: 2}) \r\n\r\n\r\n***Example South African Rand code snippets for @avenmore***\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log((2500).toLocaleString(&quot;en-ZA&quot;, {style: &quot;currency&quot;, currency: &quot;ZAR&quot;, minimumFractionDigits: 2}))\r\n    // -&gt; R 2 500,00\r\n    console.log((2500).toLocaleString(&quot;en-GB&quot;, {style: &quot;currency&quot;, currency: &quot;ZAR&quot;, minimumFractionDigits: 2}))\r\n    // -&gt; ZAR 2,500.00\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString#Browser_Compatibility\r\n  [2]: https://www.currency-iso.org/en/home/tables/table-a1.html"},{"score":4,"body_markdown":"Here is the short and best one to convert numbers into currency format: \r\n\r\n    function toCurrency(amount){\r\n        return amount.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, &quot;$1,&quot;);\r\n    }\r\n\r\n    // usage: toCurrency(3939920.3030);\r\n\r\nCheers!\r\nAnunay"},{"score":11,"body_markdown":"Here are some solutions, all pass the test suite, test suite and benchmark included, if you want copy and paste to test, try [This Gist](https://gist.github.com/steelywing/85fdcbe084c332596179).\r\n\r\n# Method 0 (RegExp) #\r\nBase on https://stackoverflow.com/a/14428340/1877620, but fix if there is no decimal point.\r\n\r\n    if (typeof Number.prototype.format === &#39;undefined&#39;) {\r\n        Number.prototype.format = function (precision) {\r\n            if (!isFinite(this)) {\r\n                return this.toString();\r\n            }\r\n            \r\n            var a = this.toFixed(precision).split(&#39;.&#39;);\r\n            a[0] = a[0].replace(/\\d(?=(\\d{3})+$)/g, &#39;$&amp;,&#39;);\r\n            return a.join(&#39;.&#39;);\r\n        }\r\n    }\r\n\r\n# Method 1 #\r\n\r\n    if (typeof Number.prototype.format === &#39;undefined&#39;) {\r\n        Number.prototype.format = function (precision) {\r\n            if (!isFinite(this)) {\r\n                return this.toString();\r\n            }\r\n            \r\n            var a = this.toFixed(precision).split(&#39;.&#39;),\r\n                // skip the &#39;-&#39; sign\r\n                head = Number(this &lt; 0);\r\n            \r\n            // skip the digits that&#39;s before the first thousands separator \r\n            head += (a[0].length - head) % 3 || 3;\r\n            \r\n            a[0] = a[0].slice(0, head) + a[0].slice(head).replace(/\\d{3}/g, &#39;,$&amp;&#39;);\r\n            return a.join(&#39;.&#39;);\r\n        };\r\n    }\r\n\r\n# Method 2 (Split to Array) #\r\n\r\n    if (typeof Number.prototype.format === &#39;undefined&#39;) {\r\n        Number.prototype.format = function (precision) {\r\n            if (!isFinite(this)) {\r\n                return this.toString();\r\n            }\r\n            \r\n            var a = this.toFixed(precision).split(&#39;.&#39;);\r\n            \r\n            a[0] = a[0]\r\n                .split(&#39;&#39;).reverse().join(&#39;&#39;)\r\n                .replace(/\\d{3}(?=\\d)/g, &#39;$&amp;,&#39;)\r\n                .split(&#39;&#39;).reverse().join(&#39;&#39;);\r\n                \r\n            return a.join(&#39;.&#39;);\r\n        };\r\n    }\r\n\r\n# Method 3 (Loop) #\r\n\r\n    if (typeof Number.prototype.format === &#39;undefined&#39;) {\r\n        Number.prototype.format = function (precision) {\r\n            if (!isFinite(this)) {\r\n                return this.toString();\r\n            }\r\n            \r\n            var a = this.toFixed(precision).split(&#39;&#39;);\r\n            a.push(&#39;.&#39;);\r\n            \r\n            var i = a.indexOf(&#39;.&#39;) - 3;\r\n            while (i &gt; 0 &amp;&amp; a[i-1] !== &#39;-&#39;) {\r\n                a.splice(i, 0, &#39;,&#39;);\r\n                i -= 3;\r\n            }\r\n            \r\n            a.pop();\r\n            return a.join(&#39;&#39;);\r\n        };\r\n    }\r\n\r\n# Usage Example #\r\n\r\n    console.log(&#39;======== Demo ========&#39;)\r\n    console.log(\r\n        (1234567).format(0),\r\n        (1234.56).format(2),\r\n        (-1234.56).format(0)\r\n    );\r\n    var n = 0;\r\n    for (var i=1; i&lt;20; i++) {\r\n        n = (n * 10) + (i % 10)/100;\r\n        console.log(n.format(2), (-n).format(2));\r\n    }\r\n\r\n# Separator #\r\n\r\nIf we want custom thousands separator or decimal separator, use `replace()`:\r\n\r\n    123456.78.format(2).replace(&#39;,&#39;, &#39; &#39;).replace(&#39;.&#39;, &#39; &#39;);\r\n\r\n# Test suite #\r\n\r\n    function assertEqual(a, b) {\r\n        if (a !== b) {\r\n            throw a + &#39; !== &#39; + b;\r\n        }\r\n    }\r\n    \r\n    function test(format_function) {\r\n        console.log(format_function);\r\n        assertEqual(&#39;NaN&#39;, format_function.call(NaN, 0))\r\n        assertEqual(&#39;Infinity&#39;, format_function.call(Infinity, 0))\r\n        assertEqual(&#39;-Infinity&#39;, format_function.call(-Infinity, 0))\r\n        \r\n        assertEqual(&#39;0&#39;, format_function.call(0, 0))\r\n        assertEqual(&#39;0.00&#39;, format_function.call(0, 2))\r\n        assertEqual(&#39;1&#39;, format_function.call(1, 0))\r\n        assertEqual(&#39;-1&#39;, format_function.call(-1, 0))\r\n        // decimal padding\r\n        assertEqual(&#39;1.00&#39;, format_function.call(1, 2))\r\n        assertEqual(&#39;-1.00&#39;, format_function.call(-1, 2))\r\n        // decimal rounding\r\n        assertEqual(&#39;0.12&#39;, format_function.call(0.123456, 2))\r\n        assertEqual(&#39;0.1235&#39;, format_function.call(0.123456, 4))\r\n        assertEqual(&#39;-0.12&#39;, format_function.call(-0.123456, 2))\r\n        assertEqual(&#39;-0.1235&#39;, format_function.call(-0.123456, 4))\r\n        // thousands separator\r\n        assertEqual(&#39;1,234&#39;, format_function.call(1234.123456, 0))\r\n        assertEqual(&#39;12,345&#39;, format_function.call(12345.123456, 0))\r\n        assertEqual(&#39;123,456&#39;, format_function.call(123456.123456, 0))\r\n        assertEqual(&#39;1,234,567&#39;, format_function.call(1234567.123456, 0))\r\n        assertEqual(&#39;12,345,678&#39;, format_function.call(12345678.123456, 0))\r\n        assertEqual(&#39;123,456,789&#39;, format_function.call(123456789.123456, 0))\r\n        assertEqual(&#39;-1,234&#39;, format_function.call(-1234.123456, 0))\r\n        assertEqual(&#39;-12,345&#39;, format_function.call(-12345.123456, 0))\r\n        assertEqual(&#39;-123,456&#39;, format_function.call(-123456.123456, 0))\r\n        assertEqual(&#39;-1,234,567&#39;, format_function.call(-1234567.123456, 0))\r\n        assertEqual(&#39;-12,345,678&#39;, format_function.call(-12345678.123456, 0))\r\n        assertEqual(&#39;-123,456,789&#39;, format_function.call(-123456789.123456, 0))\r\n        // thousands separator and decimal\r\n        assertEqual(&#39;1,234.12&#39;, format_function.call(1234.123456, 2))\r\n        assertEqual(&#39;12,345.12&#39;, format_function.call(12345.123456, 2))\r\n        assertEqual(&#39;123,456.12&#39;, format_function.call(123456.123456, 2))\r\n        assertEqual(&#39;1,234,567.12&#39;, format_function.call(1234567.123456, 2))\r\n        assertEqual(&#39;12,345,678.12&#39;, format_function.call(12345678.123456, 2))\r\n        assertEqual(&#39;123,456,789.12&#39;, format_function.call(123456789.123456, 2))\r\n        assertEqual(&#39;-1,234.12&#39;, format_function.call(-1234.123456, 2))\r\n        assertEqual(&#39;-12,345.12&#39;, format_function.call(-12345.123456, 2))\r\n        assertEqual(&#39;-123,456.12&#39;, format_function.call(-123456.123456, 2))\r\n        assertEqual(&#39;-1,234,567.12&#39;, format_function.call(-1234567.123456, 2))\r\n        assertEqual(&#39;-12,345,678.12&#39;, format_function.call(-12345678.123456, 2))\r\n        assertEqual(&#39;-123,456,789.12&#39;, format_function.call(-123456789.123456, 2))\r\n    }\r\n    \r\n    console.log(&#39;======== Testing ========&#39;);\r\n    test(Number.prototype.format);\r\n    test(Number.prototype.format1);\r\n    test(Number.prototype.format2);\r\n    test(Number.prototype.format3);\r\n\r\n# Benchmark #\r\n\r\n    function benchmark(f) {\r\n        var start = new Date().getTime();\r\n        f();\r\n        return new Date().getTime() - start;\r\n    }\r\n    \r\n    function benchmark_format(f) {\r\n        console.log(f);\r\n        time = benchmark(function () {\r\n            for (var i = 0; i &lt; 100000; i++) {\r\n                f.call(123456789, 0);\r\n                f.call(123456789, 2);\r\n            }\r\n        });\r\n        console.log(time.format(0) + &#39;ms&#39;);\r\n    }\r\n    \r\n    // if not using async, browser will stop responding while running.\r\n    // this will create a new thread to benchmark\r\n    async = [];\r\n    function next() {\r\n        setTimeout(function () {\r\n            f = async.shift();\r\n            f &amp;&amp; f();\r\n            next();\r\n        }, 10);\r\n    }\r\n    \r\n    console.log(&#39;======== Benchmark ========&#39;);\r\n    async.push(function () { benchmark_format(Number.prototype.format); });\r\n    next();\r\n"},{"score":6,"body_markdown":"A function to handle currency output, including negatives.\r\n&lt;br /&gt;&lt;br /&gt;Sample Output:&lt;br /&gt;\r\n$5.23&lt;br /&gt;\r\n-$5.23\r\n\r\n\r\n    function formatCurrency(total) {\r\n        var neg = false;\r\n        if(total &lt; 0) {\r\n            neg = true;\r\n            total = Math.abs(total);\r\n        }\r\n        return (neg ? &quot;-$&quot; : &#39;$&#39;) + parseFloat(total, 10).toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, &quot;$1,&quot;).toString();\r\n    }"},{"score":4,"body_markdown":"Code from Jonathan M looks to complicated for me so I rewrote it and got about 30% on FF v30 and 60% on Chrome v35 speed boost (http://jsperf.com/number-formating2):\r\n\r\n    Number.prototype.formatNumber = function(decPlaces, thouSeparator, decSeparator) {\r\n        decPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces;\r\n        decSeparator = decSeparator == undefined ? &quot;.&quot; : decSeparator;\r\n        thouSeparator = thouSeparator == undefined ? &quot;,&quot; : thouSeparator;\r\n\r\n        var n = this.toFixed(decPlaces);\r\n        if (decPlaces) {\r\n            var i = n.substr(0, n.length - (decPlaces + 1));\r\n            var j = decSeparator + n.substr(-decPlaces);\r\n        } else {\r\n            i = n;\r\n            j = &#39;&#39;;\r\n        }\r\n\r\n        function reverse(str) {\r\n            var sr = &#39;&#39;;\r\n            for (var l = str.length - 1; l &gt;= 0; l--) {\r\n                sr += str.charAt(l);\r\n            }\r\n            return sr;\r\n        }\r\n\r\n        if (parseInt(i)) {\r\n            i = reverse(reverse(i).replace(/(\\d{3})(?=\\d)/g, &quot;$1&quot; + thouSeparator));\r\n        }\r\n        return i+j;\r\n    };\r\n\r\nUsage:\r\n\r\n    var sum = 123456789.5698;\r\n    var formatted = &#39;$&#39; + sum.formatNumber(2,&#39;,&#39;,&#39;.&#39;); // &quot;$123,456,789.57&quot;"},{"score":1,"body_markdown":"I like it simple:\r\n\r\n    function formatPriceUSD(price) {\r\n        var strPrice = price.toFixed(2).toString();\r\n        var a = strPrice.split(&#39;&#39;);\r\n    \r\n        if (price &gt; 1000000000)\r\n            a.splice(a.length - 12, 0, &#39;,&#39;);\r\n    \r\n        if (price &gt; 1000000)\r\n            a.splice(a.length - 9, 0, &#39;,&#39;);\r\n    \r\n        if (price &gt; 1000)\r\n            a.splice(a.length - 6, 0, &#39;,&#39;);\r\n    \r\n        return &#39;$&#39; + a.join(&quot;&quot;);\r\n    }"},{"score":5,"body_markdown":"[Intl.NumberFormat][1]\r\n\r\n    var number = 3500;\r\n    alert(new Intl.NumberFormat().format(number));\r\n    // → &quot;3,500&quot; if in US English locale\r\n\r\nor [phpjs.com/functions/number_format][2]\r\n\r\n  [1]: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\r\n  [2]: http://phpjs.org/functions/number_format/"},{"score":4,"body_markdown":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\r\nExample: Using locales\r\n\r\nThis example shows some of the variations in localized number formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the locales argument:\r\n\r\n&gt; var number = 123456.789;\r\n&gt; \r\n&gt; // German uses comma as decimal separator and period for thousands\r\n&gt; console.log(new Intl.NumberFormat(&#39;de-DE&#39;).format(number)); // →\r\n&gt; 123.456,789\r\n&gt; \r\n&gt; // Arabic in most Arabic speaking countries uses real Arabic digits\r\n&gt; console.log(new Intl.NumberFormat(&#39;ar-EG&#39;).format(number)); // →\r\n&gt; ١٢٣٤٥٦٫٧٨٩\r\n&gt; \r\n&gt; // India uses thousands/lakh/crore separators console.log(new\r\n&gt; Intl.NumberFormat(&#39;en-IN&#39;).format(number));"},{"score":130,"body_markdown":"If amount is a number, say `-123`, then\n\n    amount.toLocaleString(&#39;en-US&#39;, { style: &#39;currency&#39;, currency: &#39;USD&#39; });\n\nwill produce the string `&quot;-$123.00&quot;`.\n\nHere&#39;s a complete working [example][1].\n\n  [1]: http://jsfiddle.net/1h29dguy/\n"},{"score":3,"body_markdown":"I like the shortest answer by VisionN except when I need to modify it for a number without decimal point ($123 instead of $123.00) it does not work, so instead of quick copy/paste I need to decipher arcane syntax of the JavaScript regex.\r\n\r\nHere is the original solution\r\n\r\n    n.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, &#39;$&amp;,&#39;);\r\n\r\nI&#39;ll make it a bit longer:\r\n\r\n    var re = /\\d(?=(\\d{3})+\\.)/g;\r\n    var subst = &#39;$&amp;,&#39;;\r\n    n.toFixed(2).replace(re, subst);\r\n\r\n`Re` part here (search part in string replace) means\r\n\r\n1. Find all digits (`\\d`)\r\n2. Followed by (`?=` ...) (lookahead)\r\n3. One or more groups `(`...`)+`\r\n4. Of exactly 3 digits (`\\d{3}`)\r\n5. Ending with a dot (`\\.`)\r\n6. Do it for all occurrences (`g`)\r\n\r\n`Subst` part here means\r\n\r\n1. Every time there is a match replace it with itself (`$&amp;`) followed by a comma.\r\n\r\nAs we use `string.replace` all other text in the string remains the same and only found digits (those that are followed by 3,6,9,etc other digits) get an additional comma.\r\n\r\nSo in a number 1234567.89 digits **1** and **4** meet the condition (**1**23**4**567.89) and are replaced with &quot;**1,**&quot; and &quot;**4,**&quot; resulting in 1,234,567.89.\r\n\r\nIf we don&#39;t need the decimal point in dollar amount at all (i.e. $123 instead of $123.00), we may change the regex like this:\r\n\r\n    var re2 = /\\d(?=(\\d{3})+$)/g;\r\n\r\nIt relies on the end of line (`$`) instead of a dot (`\\.`) and the final expression will be (notice also `toFixed(0)`):\r\n\r\n    n.toFixed(0).replace(/\\d(?=(\\d{3})+$)/g, &#39;$&amp;,&#39;);\r\n\r\nThis expression will give\r\n\r\n    1234567.89 -&gt; 1,234,567\r\n\r\nAlso instead of end of line (`$`) in the regex above you may opt for a word boundary as well (`\\b`).\r\n\r\n*My apology in advance if I misinterpreted any part of regex handling.*"},{"score":2,"body_markdown":"many of the answers had helpful ideas, but none of them could fit my needs.\r\nSo I used all the ideas and build this example:\r\n\r\n    function Format_Numb( fmt){\r\n        var decimals = isNaN(decimals) ? 2 : Math.abs(decimals);\r\n        if(typeof decSgn===&quot;undefined&quot;) decSgn = &quot;.&quot;;\r\n        if(typeof kommaSgn===&quot;undefined&quot;) kommaSgn= &quot;,&quot;;\r\n    \r\n        var s3digits=/(\\d{1,3}(?=(\\d{3})+(?=[.]|$))|(?:[.]\\d*))/g;\r\n        var dflt_nk=&quot;00000000&quot;.substring(0,decimals);\r\n    \r\n        //--------------------------------\r\n        // handler for pattern: &quot;%m&quot;\r\n        var _f_money= function( v_in){\r\n                    var v=v_in.toFixed(decimals);\r\n                    var add_nk=&quot;,00&quot;;\r\n                    var arr=    v.split(&quot;.&quot;);\r\n                    return     arr[0].toString().replace(s3digits, function ($0) {\r\n                                        return ($0.charAt(0)==&quot;.&quot;)\r\n                                            ? ((add_nk=&quot;&quot;),(kommaSgn + $0.substring(1)))\r\n                                            : ($0 + decSgn);\r\n                            })\r\n                            + (    (decimals &gt; 0)\r\n                                    ?    (    kommaSgn\r\n                                            + (\r\n                                                (arr.length &gt; 1)\r\n                                                ? arr[1]\r\n                                                : dflt_nk\r\n                                            )\r\n                                        )\r\n                                    :    &quot;&quot;                    \r\n                            );\r\n        }\r\n    \r\n        // handler for pattern: &quot;%&lt;len&gt;[.&lt;prec&gt;]f&quot;\r\n        var _f_flt= function( v_in,l,prec){\r\n            var v=(typeof prec !== &quot;undefined&quot;) ? v_in.toFixed(prec):v_in;\r\n            return ((typeof l !== &quot;undefined&quot;)&amp;&amp;( (l=l-v.length) &gt; 0))\r\n                    ?(Array(l+1).join(&quot; &quot;) + v)\r\n                    :v;\r\n        }\r\n    \r\n        // handler for pattern: &quot;%&lt;len&gt;x&quot;\r\n        var _f_hex= function( v_in,l,flUpper){\r\n            var v=    Math.round(v_in).toString(16);\r\n            if(flUpper)    v=v.toUpperCase();\r\n            return ((typeof l !== &quot;undefined&quot;)&amp;&amp;( (l=l-v.length) &gt; 0))\r\n                    ?(Array(l+1).join(&quot;0&quot;) + v)\r\n                    :v;        \r\n        }\r\n    \r\n        //...can be extended..., just add the function, f.e.:    var _f_octal= function( v_in,...){\r\n        //--------------------------------\r\n    \r\n        if( typeof(fmt)!==&quot;undefined&quot;){\r\n            //...can be extended..., just add the char,f.e.&quot;O&quot;:    MFX -&gt; MFXO\r\n            var rpatt=/(?:%([^%&quot;MFX]*)([MFX]))|(?:&quot;([^&quot;]*)&quot;)|(&quot;|%%)/gi;\r\n            var _qu=    &quot;\\&quot;&quot;;\r\n            var _mask_qu=    &quot;\\\\\\&quot;&quot;;\r\n            var str=    fmt.toString().replace( rpatt,function($0,$1,$2,$3,$4){\r\n                                    var f;\r\n                                    if(typeof $1 !== &quot;undefined&quot;){\r\n                                        switch($2.toUpperCase()){\r\n                                            case &quot;M&quot;:    f= &quot;_f_money(v)&quot;;    break;\r\n                                            case &quot;F&quot;:    var    n_dig0,n_dig1;\r\n                                                    var    re_flt=/^(?:(\\d))*(?:[.](\\d))*$/;\r\n                                                    $1.replace(re_flt,function($0,$1,$2){\r\n                                                        n_dig0=$1;\r\n                                                        n_dig1=$2;\r\n                                                    });\r\n                                                    f= &quot;_f_flt(v,&quot; + n_dig0 + &quot;,&quot; + n_dig1 + &quot;)&quot;;    break;\r\n                                            case &quot;X&quot;:    var    n_dig=&quot;undefined&quot;;\r\n                                                    var    re_flt=/^(\\d*)$/;\r\n                                                    $1.replace(re_flt,function($0){\r\n                                                        if($0!=&quot;&quot;)n_dig=$0;\r\n                                                    });\r\n                                                    f= &quot;_f_hex(v,&quot; + n_dig + &quot;,&quot; + ($2==&quot;X&quot;) + &quot;)&quot;;    break;\r\n                                            //...can be extended..., f.e.:    case &quot;O&quot;:\r\n                                        }\r\n                                        return &quot;\\&quot;+&quot;+f+&quot;+\\&quot;&quot;;\r\n                                    } else if(typeof $3 !== &quot;undefined&quot;){\r\n                                        return _mask_qu + $3 + _mask_qu;\r\n                                    } else {\r\n                                        return ($4==_qu)?_mask_qu:$4.charAt(0);\r\n                                    }\r\n                                });\r\n            var cmd=        &quot;return function(v){&quot;\r\n                    +        &quot;if(typeof v === \\&quot;undefined\\&quot;)return \\&quot;\\&quot;;&quot;    //null returned as empty string\r\n                    +        &quot;if(!v.toFixed)return v.toString();&quot;        //not numb returned as string\r\n                    +        &quot;return \\&quot;&quot; + str + &quot;\\&quot;;&quot;\r\n                    +    &quot;}&quot;;\r\n    \r\n            //...can be extended..., just add the function name in the 2 places:\r\n            return new Function( &quot;_f_money,_f_flt,_f_hex&quot;, cmd)(_f_money,_f_flt,_f_hex);\r\n        }\r\n    }\r\n\r\nFirst, I needed a **C-style** format-string-definition that should be **flexible, but very easy to use** and I defined it in following way; patterns:\r\n\r\n    %[&lt;len&gt;][.&lt;prec&gt;]f        float, example &quot;%f&quot;, &quot;%8.2d&quot;, &quot;%.3f&quot;\r\n    %m                        money\r\n    %[&lt;len&gt;]x                 hexadecimal lower case, example &quot;%x&quot;, &quot;%8x&quot;\r\n    %[&lt;len&gt;]X                 hexadecimal upper case, example &quot;%X&quot;, &quot;%8X&quot;\r\n\r\nbecause there is no need to format others then to Euro for me, I implemented only &quot;%m&quot;.\r\nBut it&#39;s easy to extend this...\r\nLike in C the format string is a string containing the patterns, \r\nf.e. **for Euro**:  **&quot;%m €&quot;**  (returns strings like &quot;8.129,33 €&quot;)\r\n\r\nBeside the flexibility I needed a **very fast solution for processing tables**. That means, that when processing thousands of cells the processing of format string **must not be done more than once**. A call like &quot;format( value, fmt)&quot; is not acceptable for me, but this must be splitted in two steps:\r\n\r\n    // var formatter = Format_Numb( &quot;%m €&quot;);  \r\n    //simple example for Euro...\r\n    \r\n    //   but we use a complex example: \r\n    \r\n    var formatter = Format_Numb(&quot;a%%%3mxx \\&quot;zz\\&quot;%8.2f&#176;\\&quot;  &gt;0x%8X&lt;&quot;);\r\n    \r\n    // formatter is now a function, which can be used more than once (this is an example, that can be tested:) \r\n    \r\n    var v1= formatter( 1897654.8198344); \r\n    \r\n    var v2= formatter( 4.2); \r\n    \r\n    ... (and thousands of rows)\r\n\r\nAlso for performance, _f_money enclosures the regexp;\r\n\r\nThird, a call like &quot;format( value, fmt)&quot; is not acceptable because:\r\nAlthough it should be possible to format different collections of objects (f.e. cells of a column) with different masks, I don&#39;t want to have something to handle format strings at the point of processing. At this point I only want TO USE formatting, like in\r\n\r\n&gt; for( var cell in cells){ do_something( cell.col.formatter(\r\n&gt; cell.value)); }\r\n\r\nWhat format - maybe it&#39;s defined in an ini, in a xml for each column or somewhere else ..., but **analyzing and setting formats** or dealing with internationalizaton **is processed in totally another place**, and there I want to assign the formatter to the collection without thinking about performance issues:\r\n\r\n&gt; col.formatter = Format_Numb( _getFormatForColumn(...) );\r\n\r\nFourth, I wanted an **&quot;tolerant&quot; solution**, so passing f.e. a string instead of a number should return simply the string, but &quot;null&quot; should return en empty string.\r\n\r\n(Also formatting &quot;%4.2f&quot; must not cut something if the value is too big.)\r\n\r\nAnd last but not least - it should be **readable and easy extendable**, WITHOUT having any effects in performance...\r\nFor example, if somebody needs &quot;octal values&quot;, please refer to lines with &quot;...can be extended...&quot; - I think that should be a very easy task.\r\n\r\nMy overall focus lay on performance. Each &quot;processing routine&quot; (f.e. _f_money) can be encapsulated optimized or exchanged with other ideas in this or other threads without change of the &quot;prepare routines&quot; (analyze format strings and creation of the functions), which must only processed once and in that sense are not so performance critical like the conversion calls of thousands of numbers.\r\n\r\nFor all, who prefer methods of numbers:\r\n\r\n\r\n    Number.prototype.format_euro=( function(formatter){\r\n        return function(){ return formatter(this); }})\r\n        (Format_Numb( &quot;%m €&quot;));\r\n    \r\n    var v_euro= (8192.3282).format_euro(); //results: 8.192,33 €\r\n    \r\n    Number.prototype.format_hex= (function(formatter){\r\n        return function(){ return formatter(this); }})\r\n        (Format_Numb( &quot;%4x&quot;));\r\n    \r\n    var v_hex= (4.3282).format_hex();\r\n\r\nAlthough I tested something there may be a lot of bugs in the code. So it&#39;s not a ready module, but just an idea and a starting point for non-js-experts like me.\r\nThe code contains many and little modified ideas from a lot of stackoverflow-posts; sorry I can&#39;t reference all of them, but thanks to all the experts.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"score":1,"body_markdown":"There are already good answers. Here&#39;s simple attempt for fun:\r\n\r\n    function currencyFormat(no) {\r\n      var ar = (+no).toFixed(2).split(&#39;.&#39;);\r\n      return [\r\n          numberFormat(ar[0]|0),\r\n          &#39;.&#39;, \r\n          ar[1]\r\n      ].join(&#39;&#39;);\r\n    }\r\n    \r\n    \r\n    function numberFormat(no) {\r\n      var str = no + &#39;&#39;;\r\n      var ar = [];\r\n      var i  = str.length -1;\r\n    \r\n      while( i &gt;= 0 ) {\r\n        ar.push( (str[i-2]||&#39;&#39;) + (str[i-1]|| &#39;&#39;)+ (str[i]|| &#39;&#39;));\r\n        i= i-3;\r\n      }\r\n      return ar.reverse().join(&#39;,&#39;);  \r\n    }\r\n\r\nThe run some examples\r\n\r\n    console.log(\r\n      currencyFormat(1),\r\n      currencyFormat(1200),\r\n      currencyFormat(123),\r\n      currencyFormat(9870000),\r\n      currencyFormat(12345),\r\n      currencyFormat(123456.232)\r\n    )"},{"score":6,"body_markdown":"@tggagne is correct. My solution below is not good due to float rounding. And the toLocaleString function lacks some browser support. I&#39;ll leave the below comments for archival purposes of what NOT to do. :)\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString#Browser_Compatibility\r\n\r\n**(Old Solution) Use Patrick Desjardins solution instead.**\r\n\r\n*This is a terse solution that uses toLocaleString(), which has been supported since Javascript version 1.0. This example designates the currency to U.S. Dollars, but could be switched to pounds by using &#39;GBP&#39; instead of &#39;USD&#39;.*\r\n\r\n    var formatMoney = function (value) {\r\n        // Convert the value to a floating point number in case it arrives as a string.\r\n        var numeric = parseFloat(value);\r\n        // Specify the local currency.\r\n        return numeric.toLocaleString(&#39;USD&#39;, { style: &#39;currency&#39;, currency: &quot;USD&quot;, minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n    }\r\n\r\n*See https://marcoscaceres.github.io/jsi18n/#localize_currency for additional details.*"},{"score":6,"body_markdown":"55 answers clearly begs for another one\r\n\r\n            function centsToDollaString(x){\r\n              var cents = x + &quot;&quot;\r\n              while(cents.length &lt; 4){\r\n                cents = &quot;0&quot; + cents;\r\n              }\r\n              var dollars = cents.substr(0,cents.length - 2)\r\n              var decimal = cents.substr(cents.length - 2, 2)\r\n              while(dollars.length % 3 != 0){\r\n                dollars = &quot;0&quot; + dollars;\r\n              }\r\n              str = dollars.replace(/(\\d{3})(?=\\d)/g, &quot;$1&quot; + &quot;,&quot;).replace(/^0*(?=.)/,&quot;&quot;);\r\n              return &quot;$&quot; + str + &quot;.&quot; + decimal;\r\n            }\r\n"},{"score":1,"body_markdown":"I want to contribute with this:\r\n\r\n    function toMoney(amount) {\r\n    \tneg = amount.charAt(0);\r\n    \tamount= amount.replace(/\\D/g, &#39;&#39;);\r\n    \tamount= amount.replace(/\\./g  , &#39;&#39;);\r\n    \tamount= amount.replace(/\\-/g, &#39;&#39;);\r\n    \t\r\n    \tvar numAmount = new Number(amount);\t\r\n    \tamount= numAmount .toFixed(0).replace(/./g, function(c, i, a) {\r\n            return i &gt; 0 &amp;&amp; c !== &quot;,&quot; &amp;&amp; (a.length - i) % 3 === 0 ? &quot;.&quot; + c : c;\r\n        });\r\n    \t\r\n    \tif(neg == &#39;-&#39;)\r\n    \t\treturn neg+amount;\r\n    \telse\r\n    \t\treturn amount;\r\n    }\r\n\r\nThis allows you to convert numbers in a text box where you only supose to put numbers (consider this scenario)\r\n\r\n**This is going to clean a textbox where only supose to be numbers even if you paste a string with numbers and letters or any character**\r\n\r\n    &lt;html&gt;\r\n    &lt;head&gt;\r\n    &lt;script language==&quot;Javascript&quot;&gt;\r\n    function isNumber(evt) {    \r\n        var theEvent = evt || window.event;\r\n        var key = theEvent.keyCode || theEvent.which;\r\n        key = String.fromCharCode(key);\r\n        if (key.length == 0) return;\r\n        var regex = /^[0-9\\-\\b]+$/;\r\n        if (!regex.test(key)) {\r\n            theEvent.returnValue = false;\r\n            if (theEvent.preventDefault) theEvent.preventDefault();\r\n        }\r\n    }\r\n    function toMoney(amount) {\r\n        neg = amount.charAt(0);\r\n        amount= amount.replace(/\\D/g, &#39;&#39;);\r\n        amount= amount.replace(/\\./g  , &#39;&#39;);\r\n        amount= amount.replace(/\\-/g, &#39;&#39;);\r\n    \r\n        var numAmount = new Number(amount); \r\n        amount= numAmount .toFixed(0).replace(/./g, function(c, i, a) {\r\n            return i &gt; 0 &amp;&amp; c !== &quot;,&quot; &amp;&amp; (a.length - i) % 3 === 0 ? &quot;.&quot; + c : c;\r\n        });\r\n    \r\n        if(neg == &#39;-&#39;)\r\n            return neg+amount;\r\n        else\r\n            return amount;\r\n    }\r\n    function clearText(inTxt, newTxt, outTxt) {\r\n        inTxt = inTxt.trim();\r\n        newTxt = newTxt.trim();\r\n        if(inTxt == &#39;&#39; || inTxt == newTxt) \r\n            return outTxt;\r\n    \r\n        return inTxt;   \r\n    }\r\n    \r\n    function fillText(inTxt, outTxt) {\r\n        inTxt = inTxt.trim();\r\n        if(inTxt != &#39;&#39;) \r\n            outTxt = inTxt;\r\n    \r\n        return outTxt;\r\n    }\r\n    &lt;/script&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n    $ &lt;input name=reca2 id=reca2 type=text value=&quot;0&quot; onFocus=&quot;this.value = clearText(this.value, &#39;0&#39;, &#39;&#39;);&quot; onblur=&quot;this.value = fillText(this.value, &#39;0&#39;); this.value = toMoney(this.value);&quot; onKeyPress=&quot;isNumber(event);&quot; style=&quot;width:80px;&quot; /&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\n"},{"score":10,"body_markdown":"I found this from: [accounting.js][1] . Its very easy and perfectly fits my need.\r\n\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // Default usage:\r\n    accounting.formatMoney(12345678); // $12,345,678.00\r\n\r\n    // European formatting (custom symbol and separators), can also use options object as second parameter:\r\n    accounting.formatMoney(4999.99, &quot;€&quot;, 2, &quot;.&quot;, &quot;,&quot;); // €4.999,99\r\n\r\n    // Negative values can be formatted nicely:\r\n    accounting.formatMoney(-500000, &quot;&#163; &quot;, 0); // &#163; -500,000\r\n\r\n    // Simple `format` string allows control of symbol position (%v = value, %s = symbol):\r\n    accounting.formatMoney(5318008, { symbol: &quot;GBP&quot;,  format: &quot;%v %s&quot; }); // 5,318,008.00 GBP\r\n\r\n// Euro currency symbol to the right\r\naccounting.formatMoney(5318008, {symbol: &quot;€&quot;, precision: 2, thousand: &quot;.&quot;, decimal : &quot;,&quot;, format: &quot;%v%s&quot;}); // 1.008,00€ \r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: http://openexchangerates.github.io/accounting.js/"},{"score":3,"body_markdown":"toLocaleString is good, but doesn&#39;t work on all browsers. I usually use currencyFormatter.js (https://osrec.github.io/currencyFormatter.js/). It&#39;s pretty lightweight, and contains all the currency and locale definitions right out of the box. It&#39;s also good at formatting unusually formatted currencies, such as the INR (which groups numbers in lakhs and crores etc). Also no dependencies!\n\n`OSREC.CurrencyFormatter.format(2534234, { currency: &#39;INR&#39; }); \n// Returns ₹ 25,34,234.00`\n\n`OSREC.CurrencyFormatter.format(2534234, { currency: &#39;EUR&#39; }); \n// Returns 2.534.234,00 €`\n\n`OSREC.CurrencyFormatter.format(2534234, { currency: &#39;EUR&#39;, locale: &#39;fr&#39; }); \n// Returns 2 534 234,00 €`\n"},{"score":21,"body_markdown":"Haven&#39;t seen anything like this. It&#39;s pretty concise and easy to understand.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function moneyFormat(price, sign = &#39;$&#39;) {\r\n      const pieces = parseFloat(price).toFixed(2).split(&#39;&#39;)\r\n      let ii = pieces.length - 3\r\n      while ((ii-=3) &gt; 0) {\r\n        pieces.splice(ii, 0, &#39;,&#39;)\r\n      }\r\n      return sign + pieces.join(&#39;&#39;)\r\n    }\r\n\r\n    console.log(\r\n      moneyFormat(100),\r\n      moneyFormat(1000),\r\n      moneyFormat(10000.00),\r\n      moneyFormat(1000000000000000000)\r\n    )\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nHere is a version with more options in the final output to allow formatting different currencies in different locality formats.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // higher order function that takes options then a price and will return the formatted price\r\n    const makeMoneyFormatter = ({\r\n      sign = &#39;$&#39;,\r\n      delimiter = &#39;,&#39;,\r\n      decimal = &#39;.&#39;,\r\n      append = false,\r\n      precision = 2,\r\n      round = true,\r\n      custom\r\n    } = {}) =&gt; value =&gt; {\r\n      \r\n      const e = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000]\r\n      \r\n      value = round\r\n        ? (Math.round(value * e[precision]) / e[precision])\r\n        : parseFloat(value)\r\n      \r\n      const pieces = value\r\n        .toFixed(precision)\r\n        .replace(&#39;.&#39;, decimal)\r\n        .split(&#39;&#39;)\r\n      \r\n      let ii = pieces.length - (precision ? precision + 1 : 0)\r\n      \r\n      while ((ii-=3) &gt; 0) {\r\n        pieces.splice(ii, 0, delimiter)\r\n      }\r\n      \r\n      if (typeof custom === &#39;function&#39;) {\r\n        return custom({\r\n          sign,\r\n          float: value, \r\n          value: pieces.join(&#39;&#39;) \r\n        })\r\n      }\r\n      \r\n      return append\r\n        ? pieces.join(&#39;&#39;) + sign\r\n        : sign + pieces.join(&#39;&#39;)\r\n    }\r\n\r\n    // create currency converters with the correct formatting options\r\n    const formatDollar = makeMoneyFormatter()\r\n    const formatPound = makeMoneyFormatter({ \r\n      sign: &#39;&#163;&#39;,\r\n      precision: 0\r\n    })\r\n    const formatEuro = makeMoneyFormatter({\r\n      sign: &#39;€&#39;,\r\n      delimiter: &#39;.&#39;,\r\n      decimal: &#39;,&#39;,\r\n      append: true\r\n    })\r\n\r\n    const customFormat = makeMoneyFormatter({\r\n      round: false,\r\n      custom: ({ value, float, sign }) =&gt; `SALE:$${value}USD`\r\n    })\r\n\r\n    console.log(\r\n      formatPound(1000),\r\n      formatDollar(10000.0066),\r\n      formatEuro(100000.001),\r\n      customFormat(999999.555)\r\n    )\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":2,"body_markdown":"I had a hard time finding a simple library to work with date and currency, so I created mine: https://github.com/dericeira/slimFormatter.js\r\n\r\nSimple as that:\r\n\r\n    var number = slimFormatter.currency(2000.54);"},{"score":1,"body_markdown":"Here&#39;s a straightforward formatter in vanilla JS:\r\n\r\n    function numberFormatter (num) {\r\n    \t\tconsole.log(num)\r\n        var wholeAndDecimal = String(num.toFixed(2)).split(&quot;.&quot;);\r\n        console.log(wholeAndDecimal)\r\n        var reversedWholeNumber = Array.from(wholeAndDecimal[0]).reverse();\r\n        var formattedOutput = [];\r\n    \r\n        reversedWholeNumber.forEach( (digit, index) =&gt; {\r\n            formattedOutput.push(digit);\r\n            if ((index + 1) % 3 === 0 &amp;&amp; index &lt; reversedWholeNumber.length - 1) {\r\n                formattedOutput.push(&quot;,&quot;);\r\n            }\r\n        })\r\n    \r\n        formattedOutput = formattedOutput.reverse().join(&#39;&#39;) + &quot;.&quot; + wholeAndDecimal[1];\r\n    \r\n        return formattedOutput;\r\n    \r\n    }"},{"score":1,"body_markdown":"Because every problem deserves a one line solution:\r\n\r\n    Number.prototype.formatCurrency = function() { return this.toFixed(2).toString().split(/[-.]/).reverse().reduceRight(function (t, c, i) { return (i == 2) ? &#39;-&#39; + t : (i == 1) ? t + c.replace(/(\\d)(?=(\\d{3})+$)/g, &#39;$1,&#39;) : t + &#39;.&#39; + c; }, &#39;$&#39;); }\r\n\r\nThis is easy enough to change for different locales, just change the &#39;$1,&#39; to &#39;$1.&#39; and &#39;.&#39; to &#39;,&#39; to swap , and . in numbers, and the currency symbol can be changed by changing the &#39;$&#39; at the end.\r\n\r\nOr, if you have ES6, you can just declare the function with default values:\r\n\r\n    Number.prototype.formatCurrency = function(thou = &#39;,&#39;, dec = &#39;.&#39;, sym = &#39;$&#39;) { return this.toFixed(2).toString().split(/[-.]/).reverse().reduceRight(function (t, c, i) { return (i == 2) ? &#39;-&#39; + t : (i == 1) ? t + c.replace(/(\\d)(?=(\\d{3})+$)/g, &#39;$1&#39; + thou) : t + dec + c; }, sym); }\r\n\r\n    console.log((4215.57).formatCurrency())\r\n    $4,215.57\r\n    console.log((4216635.57).formatCurrency(&#39;.&#39;, &#39;,&#39;))\r\n    $4.216.635,57\r\n    console.log((4216635.57).formatCurrency(&#39;.&#39;, &#39;,&#39;, &quot;\\u20AC&quot;))\r\n    €4.216.635,57\r\n\r\nOh and it works for negative numbers too:\r\n\r\n    console.log((-6635.574).formatCurrency(&#39;.&#39;, &#39;,&#39;, &quot;\\u20AC&quot;))\r\n    -€6.635,57\r\n    console.log((-1066.507).formatCurrency())\r\n    -$1,066.51\r\n\r\nAnd of course you don&#39;t have to have a currency symbol\r\n\r\n    console.log((1234.586).formatCurrency(&#39;,&#39;,&#39;.&#39;,&#39;&#39;))\r\n    1,234.59\r\n    console.log((-7890123.456).formatCurrency(&#39;,&#39;,&#39;.&#39;,&#39;&#39;))\r\n    -7,890,123.46\r\n    console.log((1237890.456).formatCurrency(&#39;.&#39;,&#39;,&#39;,&#39;&#39;))\r\n    1.237.890,46"},{"score":2,"body_markdown":"I wanted a vanilla javascript solution that automatically returned the decimal portion.\r\n\r\n    function formatDollar(amount) {\r\n\t\tvar dollar = Number(amount).toLocaleString(&quot;us&quot;, &quot;currency&quot;);\r\n\t\t//decimals\r\n\t\tvar arrAmount = dollar.split(&quot;.&quot;);\r\n\t\tif (arrAmount.length==2) {\r\n\t\t\tvar decimal = arrAmount[1];\r\n\t\t\tif (decimal.length==1) {\r\n\t\t\t\tarrAmount[1] += &quot;0&quot;;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (arrAmount.length==1) {\r\n\t\t\tarrAmount.push(&quot;00&quot;);\r\n\t\t}\r\n\t\t\r\n\t\treturn &quot;$&quot; + arrAmount.join(&quot;.&quot;);\r\n\t}\r\n\r\n\r\n\tconsole.log(formatDollar(&quot;1812.2&quot;);"},{"score":11,"body_markdown":"\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    Number(value)\r\n            .toFixed(2)\r\n            .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, &quot;$1,&quot;)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":0,"body_markdown":"Please find in the below code what I have developed to support internationalization. May help someone. It formats the given numeric value to language specific format. In the given example I have used **‘en’** while have tested for **‘es’**, **‘fr’** and other countries where in the format varies. It not only stops user from keying characters but formats the value on tab out. Have created components for **Number** as well as for **Decimal** format. Apart from this have created **parseNumber(value, locale)** and **parseDecimal(value, locale)** functions which will parse the formatted data for any other business purposes. The said function will accept the formatted data and will return the non-formatted value. I have used JQuery validator plugin in the below shared code.\r\n\r\n**HTML:**\r\n\r\n    &lt;tr&gt;\r\n                            &lt;td&gt;\r\n                                &lt;label class=&quot;control-label&quot;&gt;\r\n                                    Number Field:\r\n                                &lt;/label&gt;\r\n                                &lt;div class=&quot;inner-addon right-addon&quot;&gt;                                        \r\n                                    &lt;input type=&quot;text&quot; id=&quot;numberField&quot; \r\n                                           name=&quot;numberField&quot;\r\n                                           class=&quot;form-control&quot;\r\n                                           autocomplete=&quot;off&quot;\r\n                                           maxlength=&quot;17&quot;\r\n                                           data-rule-required=&quot;true&quot;\r\n                                           data-msg-required=&quot;Cannot be blank.&quot;\r\n                                           data-msg-maxlength=&quot;Exceeding the maximum limit of 13 digits. Example: 1234567890123&quot;\r\n                                           data-rule-numberExceedsMaxLimit=&quot;en&quot;\r\n                                           data-msg-numberExceedsMaxLimit=&quot;Exceeding the maximum limit of 13 digits. Example: 1234567890123&quot;\r\n                                           onkeydown=&quot;return isNumber(event, &#39;en&#39;)&quot;\r\n                                           onkeyup=&quot;return updateField(this)&quot;\r\n                                           onblur=&quot;numberFormatter(this,                                                           \r\n                                                       &#39;en&#39;, \r\n                                                       &#39;Invalid character(s) found. Please enter valid characters.&#39;)&quot;&gt;\r\n                                &lt;/div&gt;\r\n                            &lt;/td&gt;\r\n                        &lt;/tr&gt;\r\n                        &lt;tr&gt;\r\n                            &lt;td&gt;\r\n                                &lt;label class=&quot;control-label&quot;&gt;\r\n                                    Decimal Field:\r\n                                &lt;/label&gt;\r\n                                &lt;div class=&quot;inner-addon right-addon&quot;&gt;                                        \r\n                                    &lt;input type=&quot;text&quot; id=&quot;decimalField&quot; \r\n                                           name=&quot;decimalField&quot;\r\n                                           class=&quot;form-control&quot;\r\n                                           autocomplete=&quot;off&quot;\r\n                                           maxlength=&quot;20&quot;\r\n                                           data-rule-required=&quot;true&quot;\r\n                                           data-msg-required=&quot;Cannot be blank.&quot;\r\n                                           data-msg-maxlength=&quot;Exceeding the maximum limit of 16 digits. Example: 1234567890123.00&quot;\r\n                                           data-rule-decimalExceedsMaxLimit=&quot;en&quot;\r\n                                           data-msg-decimalExceedsMaxLimit=&quot;Exceeding the maximum limit of 16 digits. Example: 1234567890123.00&quot;\r\n                                           onkeydown=&quot;return isDecimal(event, &#39;en&#39;)&quot;\r\n                                           onkeyup=&quot;return updateField(this)&quot;\r\n                                           onblur=&quot;decimalFormatter(this,\r\n                                               &#39;en&#39;, \r\n                                               &#39;Invalid character(s) found. Please enter valid characters.&#39;)&quot;&gt;\r\n                                &lt;/div&gt;\r\n                            &lt;/td&gt;\r\n                        &lt;/tr&gt;\r\n\r\n**JavaScript:**\r\n\r\n    /* \r\n     * @author: dinesh.lomte\r\n     */\r\n    /* Holds the maximum limit of digits to be entered in number field. */\r\n    var numericMaxLimit = 13;\r\n    /* Holds the maximum limit of digits to be entered in decimal field. */\r\n    var decimalMaxLimit = 16;\r\n\r\n    /**\r\n     * \r\n     * @param {type} value\r\n     * @param {type} locale\r\n     * @returns {Boolean}\r\n     */\r\n    parseDecimal = function(value, locale) {\r\n\r\n        value = value.trim();\r\n        if (isNull(value)) {\r\n            return 0.00;\r\n        }\r\n        if (isNull(locale)) {\r\n            return value;\r\n        }\r\n        if (getNumberFormat(locale)[0] === &#39;.&#39;) {\r\n            value = value.replace(/\\./g, &#39;&#39;);\r\n        } else {\r\n            value = value.replace(\r\n                    new RegExp(getNumberFormat(locale)[0], &#39;g&#39;), &#39;&#39;);\r\n        }\r\n        if (getNumberFormat(locale)[1] === &#39;,&#39;) {\r\n            value = value.replace(\r\n                    new RegExp(getNumberFormat(locale)[1], &#39;g&#39;), &#39;.&#39;);\r\n        }\r\n        return value;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} element\r\n     * @param {type} locale\r\n     * @param {type} nanMessage\r\n     * @returns {Boolean}\r\n     */\r\n    decimalFormatter = function (element, locale, nanMessage) {\r\n\r\n        showErrorMessage(element.id, false, null);\r\n        if (isNull(element.id) || isNull(element.value) || isNull(locale)) {\r\n            return true;\r\n        }\r\n        var value = element.value.trim();\r\n        value = value.replace(/\\s/g, &#39;&#39;);\r\n        value = parseDecimal(value, locale);\r\n        var numberFormatObj = new Intl.NumberFormat(locale,\r\n                {   minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2\r\n                }\r\n        );\r\n        if (numberFormatObj.format(value) === &#39;NaN&#39;) {\r\n            showErrorMessage(element.id, true, nanMessage);\r\n            setFocus(element.id);\r\n            return false;\r\n        }\r\n        element.value =\r\n                numberFormatObj.format(value);\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} element\r\n     * @param {type} locale\r\n     * @param {type} nanMessage\r\n     * @returns {Boolean}\r\n     */\r\n    numberFormatter = function (element, locale, nanMessage) {\r\n\r\n        showErrorMessage(element.id, false, null);\r\n        if (isNull(element.id) || isNull(element.value) || isNull(locale)) {\r\n            return true;\r\n        }\r\n        var value = element.value.trim();    \r\n        var format = getNumberFormat(locale);\r\n        if (hasDecimal(value, format[1])) {\r\n            showErrorMessage(element.id, true, nanMessage);\r\n            setFocus(element.id);\r\n            return false;\r\n        }\r\n        value = value.replace(/\\s/g, &#39;&#39;);\r\n        value = parseNumber(value, locale);\r\n        var numberFormatObj = new Intl.NumberFormat(locale,\r\n                {   minimumFractionDigits: 0,\r\n                    maximumFractionDigits: 0\r\n                }\r\n        );\r\n        if (numberFormatObj.format(value) === &#39;NaN&#39;) {\r\n            showErrorMessage(element.id, true, nanMessage);\r\n            setFocus(element.id);\r\n            return false;\r\n        }\r\n        element.value =\r\n                numberFormatObj.format(value);\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} id\r\n     * @param {type} flag\r\n     * @param {type} message\r\n     * @returns {undefined}\r\n     */\r\n    showErrorMessage = function(id, flag, message) {\r\n\r\n        if (flag) {\r\n            // only add if not added\r\n            if ($(&#39;#&#39;+id).parent().next(&#39;.app-error-message&#39;).length === 0) {\r\n                var errorTag = &#39;&lt;div class=\\&#39;app-error-message\\&#39;&gt;&#39; + message + &#39;&lt;/div&gt;&#39;;\r\n                $(&#39;#&#39;+id).parent().after(errorTag);\r\n            }\r\n        } else {\r\n            // remove it\r\n            $(&#39;#&#39;+id).parent().next(&quot;.app-error-message&quot;).remove(); \r\n        }\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} id             \r\n     * @returns\r\n     */\r\n    setFocus = function(id) {\r\n\r\n        id = id.trim();\r\n        if (isNull(id)) {\r\n            return;\r\n        }\r\n        setTimeout(function() {\r\n            document.getElementById(id).focus();\r\n        }, 10);\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} value\r\n     * @param {type} locale\r\n     * @returns {Array}\r\n     */\r\n    parseNumber = function(value, locale) {\r\n\r\n        value = value.trim();\r\n        if (isNull(value)) {\r\n            return 0;\r\n        }    \r\n        if (isNull(locale)) {\r\n            return value;\r\n        }\r\n        if (getNumberFormat(locale)[0] === &#39;.&#39;) {\r\n            return value.replace(/\\./g, &#39;&#39;);\r\n        }\r\n        return value.replace(\r\n                new RegExp(getNumberFormat(locale)[0], &#39;g&#39;), &#39;&#39;);\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} locale\r\n     * @returns {Array}\r\n     */\r\n    getNumberFormat = function(locale) {\r\n\r\n        var format = [];\r\n        var numberFormatObj = new Intl.NumberFormat(locale,\r\n                {   minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2\r\n                }\r\n        );\r\n        var value = numberFormatObj.format(&#39;132617.07&#39;);\r\n        format[0] = value.charAt(3);\r\n        format[1] = value.charAt(7);\r\n        return format;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} value\r\n     * @param {type} fractionFormat\r\n     * @returns {Boolean}\r\n     */\r\n    hasDecimal = function(value, fractionFormat) {\r\n\r\n        value = value.trim();\r\n        if (isNull(value) || isNull(fractionFormat)) {\r\n            return false;\r\n        }\r\n        if (value.indexOf(fractionFormat) &gt;= 1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} event\r\n     * @param {type} locale\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber = function(event, locale) {\r\n\r\n        var keyCode = event.which ? event.which : event.keyCode;\r\n        // Validating if user has pressed shift character\r\n        if (keyCode === 16) {\r\n            return false;\r\n        }\r\n        if (isNumberKey(keyCode)) {        \r\n            return true;\r\n        }\r\n        var numberFormatter = [32, 110, 188, 190];\r\n        if (keyCode === 32\r\n                &amp;&amp; isNull(getNumberFormat(locale)[0]) === isNull(getFormat(keyCode))) {\r\n            return true;\r\n        }\r\n        if (numberFormatter.indexOf(keyCode) &gt;= 0\r\n                &amp;&amp; getNumberFormat(locale)[0] === getFormat(keyCode)) {        \r\n            return true;\r\n        }    \r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} event\r\n     * @param {type} locale\r\n     * @returns {Boolean}\r\n     */\r\n    isDecimal = function(event, locale) {\r\n\r\n        var keyCode = event.which ? event.which : event.keyCode;\r\n        // Validating if user has pressed shift character\r\n        if (keyCode === 16) {\r\n            return false;\r\n        }\r\n        if (isNumberKey(keyCode)) {\r\n            return true;\r\n        }\r\n        var numberFormatter = [32, 110, 188, 190];\r\n        if (keyCode === 32\r\n                &amp;&amp; isNull(getNumberFormat(locale)[0]) === isNull(getFormat(keyCode))) {\r\n            return true;\r\n        }\r\n        if (numberFormatter.indexOf(keyCode) &gt;= 0\r\n                &amp;&amp; (getNumberFormat(locale)[0] === getFormat(keyCode)\r\n                    || getNumberFormat(locale)[1] === getFormat(keyCode))) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} keyCode\r\n     * @returns {Boolean}\r\n     */\r\n    isNumberKey = function(keyCode) {\r\n\r\n        if ((keyCode &gt;= 48 &amp;&amp; keyCode &lt;= 57)\r\n                || (keyCode &gt;= 96 &amp;&amp; keyCode &lt;= 105)) {        \r\n            return true;\r\n        }\r\n        var keys = [8, 9, 13, 35, 36, 37, 39, 45, 46, 109, 144, 173, 189];\r\n        if (keys.indexOf(keyCode) !== -1) {        \r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} keyCode\r\n     * @returns {JSON@call;parse.numberFormatter.value|String}\r\n     */\r\n    getFormat = function(keyCode) {\r\n\r\n        var jsonString = &#39;{&quot;numberFormatter&quot; : [{&quot;key&quot;:&quot;32&quot;, &quot;value&quot;:&quot; &quot;, &quot;description&quot;:&quot;space&quot;}, {&quot;key&quot;:&quot;188&quot;, &quot;value&quot;:&quot;,&quot;, &quot;description&quot;:&quot;comma&quot;}, {&quot;key&quot;:&quot;190&quot;, &quot;value&quot;:&quot;.&quot;, &quot;description&quot;:&quot;dot&quot;}, {&quot;key&quot;:&quot;110&quot;, &quot;value&quot;:&quot;.&quot;, &quot;description&quot;:&quot;dot&quot;}]}&#39;;\r\n        var jsonObject = JSON.parse(jsonString);\r\n        for (var key in jsonObject.numberFormatter) {\r\n            if (jsonObject.numberFormatter.hasOwnProperty(key)\r\n                    &amp;&amp; keyCode === parseInt(jsonObject.numberFormatter[key].key)) {\r\n                return jsonObject.numberFormatter[key].value;\r\n            }\r\n        }\r\n        return &#39;&#39;;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @type String\r\n     */\r\n    var jsonString = &#39;{&quot;shiftCharacterNumberMap&quot; : [{&quot;char&quot;:&quot;)&quot;, &quot;number&quot;:&quot;0&quot;}, {&quot;char&quot;:&quot;!&quot;, &quot;number&quot;:&quot;1&quot;}, {&quot;char&quot;:&quot;@&quot;, &quot;number&quot;:&quot;2&quot;}, {&quot;char&quot;:&quot;#&quot;, &quot;number&quot;:&quot;3&quot;}, {&quot;char&quot;:&quot;$&quot;, &quot;number&quot;:&quot;4&quot;}, {&quot;char&quot;:&quot;%&quot;, &quot;number&quot;:&quot;5&quot;}, {&quot;char&quot;:&quot;^&quot;, &quot;number&quot;:&quot;6&quot;}, {&quot;char&quot;:&quot;&amp;&quot;, &quot;number&quot;:&quot;7&quot;}, {&quot;char&quot;:&quot;*&quot;, &quot;number&quot;:&quot;8&quot;}, {&quot;char&quot;:&quot;(&quot;, &quot;number&quot;:&quot;9&quot;}]}&#39;;\r\n\r\n    /**\r\n     * \r\n     * @param {type} value\r\n     * @returns {JSON@call;parse.shiftCharacterNumberMap.number|String}\r\n     */\r\n    getShiftCharSpecificNumber = function(value) {\r\n\r\n        var jsonObject = JSON.parse(jsonString);\r\n        for (var key in jsonObject.shiftCharacterNumberMap) {\r\n            if (jsonObject.shiftCharacterNumberMap.hasOwnProperty(key)\r\n                    &amp;&amp; value === jsonObject.shiftCharacterNumberMap[key].char) {\r\n                return jsonObject.shiftCharacterNumberMap[key].number;\r\n            }\r\n        }\r\n        return &#39;&#39;;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} value\r\n     * @returns {Boolean}\r\n     */\r\n    isShiftSpecificChar = function(value) {\r\n\r\n        var jsonObject = JSON.parse(jsonString);\r\n        for (var key in jsonObject.shiftCharacterNumberMap) {\r\n            if (jsonObject.shiftCharacterNumberMap.hasOwnProperty(key)\r\n                    &amp;&amp; value === jsonObject.shiftCharacterNumberMap[key].char) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} element\r\n     * @returns {undefined}\r\n     */\r\n    updateField = function(element) {\r\n\r\n        var value = element.value;\r\n\r\n        for (var index = 0; index &lt; value.length; index++) {\r\n            if (!isShiftSpecificChar(value.charAt(index))) {\r\n                continue;\r\n            }\r\n            element.value = value.replace(\r\n                    value.charAt(index),\r\n                    getShiftCharSpecificNumber(value.charAt(index)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {type} value\r\n     * @param {type} element\r\n     * @param {type} params\r\n     */\r\n    jQuery.validator.addMethod(&#39;numberExceedsMaxLimit&#39;, function(value, element, params) {\r\n\r\n        value = parseInt(parseNumber(value, params));\r\n        if (value.toString().length &gt; numericMaxLimit) {\r\n            showErrorMessage(element.id, false, null);\r\n            setFocus(element.id);\r\n            return false;\r\n        }    \r\n        return true;\r\n    }, &#39;Exceeding the maximum limit of 13 digits. Example: 1234567890123.&#39;);\r\n\r\n    /**\r\n     * \r\n     * @param {type} value\r\n     * @param {type} element\r\n     * @param {type} params\r\n     */\r\n    jQuery.validator.addMethod(&#39;decimalExceedsMaxLimit&#39;, function(value, element, params) {\r\n\r\n        value = parseFloat(parseDecimal(value, params)).toFixed(2);    \r\n        if (value.toString().substring(\r\n                0, value.toString().lastIndexOf(&#39;.&#39;)).length &gt; numericMaxLimit\r\n                || value.toString().length &gt; decimalMaxLimit) {\r\n            showErrorMessage(element.id, false, null);\r\n            setFocus(element.id);\r\n            return false;\r\n        }    \r\n        return true;\r\n    }, &#39;Exceeding the maximum limit of 16 digits. Example: 1234567890123.00.&#39;);\r\n\r\n    /**\r\n     * @param {type} id\r\n     * @param {type} locale\r\n     * @returns {boolean}\r\n     */\r\n    isNumberExceedMaxLimit = function(id, locale) {\r\n\r\n        var value = parseInt(parseNumber(\r\n                document.getElementById(id).value, locale));\r\n        if (value.toString().length &gt; numericMaxLimit) {\r\n            setFocus(id);\r\n            return true;\r\n        }    \r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * @param {type} id\r\n     * @param {type} locale\r\n     * @returns {boolean}\r\n     */\r\n    isDecimalExceedsMaxLimit = function(id, locale) {\r\n\r\n        var value = parseFloat(parseDecimal(\r\n                document.getElementById(id).value, locale)).toFixed(2);\r\n        if (value.toString().substring(\r\n                0, value.toString().lastIndexOf(&#39;.&#39;)).length &gt; numericMaxLimit\r\n                || value.toString().length &gt; decimalMaxLimit) {\r\n            setFocus(id);\r\n            return true;\r\n        }\r\n        return false;\r\n    };"},{"score":5,"body_markdown":"We can also use [**numeraljs**][1]\r\n\r\n&gt; Numbers can be formatted to look like currency, percentages, times, or even plain old numbers with decimal places, thousands, and abbreviations. And you can always create a custom format.\r\n\r\n    var string = numeral(1000).format(&#39;0,0&#39;);\r\n    // &#39;1,000&#39;\r\n\r\n\r\n  [1]: http://numeraljs.com/"},{"score":5,"body_markdown":"***Please try the below codes**\r\n\r\n&gt; `&quot;250000&quot;.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, &#39;$1,&#39;);`\r\n&gt; &gt;Ans: 250,000\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/nkmZ3.png"},{"score":13,"body_markdown":"You can use `Intl` natively like this:\r\n\r\n```js\r\n// value: 11.07\r\n\r\nIntl.NumberFormat(&#39;pt-BR&#39;, { style: &#39;currency&#39;, currency: &#39;BRL&#39; }).format(value)\r\n\r\n// result: R$ 11,07\r\n```\r\n\r\ndocumentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\r\n\r\nhope this helps! ;)"},{"score":1,"body_markdown":"Taking a few of the best rated answers, I combined and made an ES6 function that passes eslinter.\r\n\r\n\r\n````\r\nexport const formatMoney = (\r\n  amount,\r\n  decimalCount = 2,\r\n  decimal = &#39;.&#39;,\r\n  thousands = &#39;,&#39;,\r\n  currencySymbol = &#39;$&#39;,\r\n) =&gt; {\r\n  if (typeof Intl === &#39;object&#39;) {\r\n    return new Intl.NumberFormat(&#39;en-AU&#39;, {\r\n      style: &#39;currency&#39;,\r\n      currency: &#39;AUD&#39;,\r\n    }).format(amount);\r\n  }\r\n  // fallback if Intl is not present.\r\n  try {\r\n    const negativeSign = amount &lt; 0 ? &#39;-&#39; : &#39;&#39;;\r\n    const amountNumber = Math.abs(Number(amount) || 0).toFixed(decimalCount);\r\n    const i = parseInt(amountNumber, 10).toString();\r\n    const j = i.length &gt; 3 ? i.length % 3 : 0;\r\n    return (\r\n      currencySymbol +\r\n      negativeSign +\r\n      (j ? i.substr(0, j) + thousands : &#39;&#39;) +\r\n      i.substr(j).replace(/(\\d{3})(?=\\d)/g, `$1${thousands}`) +\r\n      (decimalCount\r\n        ? decimal +\r\n          Math.abs(amountNumber - i)\r\n            .toFixed(decimalCount)\r\n            .slice(2)\r\n        : &#39;&#39;)\r\n    );\r\n  } catch (e) {\r\n    // eslint-disable-next-line no-console\r\n    console.error(e);\r\n  }\r\n  return amount;\r\n};\r\n````"}],"score":1964}