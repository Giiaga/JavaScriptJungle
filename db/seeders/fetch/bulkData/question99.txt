{"body":"How do I get the selected value from a dropdown list using JavaScript?\r\n\r\nI tried the methods below, but they all return the selected index instead of the value:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\nvar as = document.form1.ddlViewBy.value;\r\nvar e = document.getElementById(&quot;ddlViewBy&quot;);\r\nvar strUser = e.options[e.selectedIndex].value;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n","title":"Get selected value in dropdown list using JavaScript","answers":[{"score":3101,"body_markdown":"If you have a select element that looks like this:\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;select id=&quot;ddlViewBy&quot;&gt;\r\n      &lt;option value=&quot;1&quot;&gt;test1&lt;/option&gt;\r\n      &lt;option value=&quot;2&quot; selected=&quot;selected&quot;&gt;test2&lt;/option&gt;\r\n      &lt;option value=&quot;3&quot;&gt;test3&lt;/option&gt;\r\n    &lt;/select&gt;\r\n\r\nRunning this code:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var e = document.getElementById(&quot;ddlViewBy&quot;);\r\n    var strUser = e.value;\r\n\r\nWould make `strUser` be `2`. If what you actually want is `test2`, then do this:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var e = document.getElementById(&quot;ddlViewBy&quot;);\r\n    var strUser = e.options[e.selectedIndex].text;\r\n\r\nWhich would make `strUser` be `test2`"},{"score":177,"body_markdown":"    var strUser = e.options[e.selectedIndex].value;\r\n\r\nThis is correct and should give you the value.\r\nIs it the text you&#39;re after?\r\n\r\n    var strUser = e.options[e.selectedIndex].text;\r\n\r\nSo you&#39;re clear on the terminology:\r\n\r\n    &lt;select&gt;\r\n        &lt;option value=&quot;hello&quot;&gt;Hello World&lt;/option&gt;\r\n    &lt;/select&gt;\r\n\r\nThis option has:\r\n\r\n - Index = 0\r\n - Value = hello\r\n - Text = Hello World"},{"score":14,"body_markdown":"Beginners are likely to want to access values from a select with the NAME attribute rather than ID attribute. We know all form elements need names, even before they get ids.\r\n\r\nSo, I&#39;m adding the `getElementByName()` solution just for new developers to see too.\r\n\r\nNB. names for form elements will need to be unique for your form to be usable once posted, but the DOM can allow a name be shared by more than one element. For that reason consider adding IDs to forms if you can, or be explicit with form element names `my_nth_select_named_x` and `my_nth_text_input_named_y`.\r\n\r\nExample using `getElementByName`:\r\n\r\n    var e = document.getElementByName(&quot;my_select_with_name_ddlViewBy&quot;);\r\n    var strUser = e.options[e.selectedIndex].value;"},{"score":394,"body_markdown":"Plain JavaScript:\r\n\r\n    var e = document.getElementById(&quot;elementId&quot;);\r\n    var value = e.options[e.selectedIndex].value;\r\n    var text = e.options[e.selectedIndex].text;\r\n\r\njQuery:\r\n\r\n    $(&quot;#elementId :selected&quot;).text(); // The text content of the selected option\r\n    $(&quot;#elementId :selected&quot;).val(); // The value of the selected option\r\n\r\n[AngularJS][1]: (http://jsfiddle.net/qk5wwyct):\r\n\r\n    // HTML\r\n    &lt;select ng-model=&quot;selectItem&quot; ng-options=&quot;item as item.text for item in items&quot;&gt;\r\n    &lt;/select&gt;\r\n    &lt;p&gt;Text: {{selectItem.text}}&lt;/p&gt;\r\n    &lt;p&gt;Value: {{selectItem.value}}&lt;/p&gt;\r\n\r\n    // JavaScript\r\n    $scope.items = [{\r\n      value: &#39;item_1_id&#39;,\r\n      text: &#39;Item 1&#39;\r\n    }, {\r\n      value: &#39;item_2_id&#39;,\r\n      text: &#39;Item 2&#39;\r\n    }];\r\n\r\n  [1]: http://en.wikipedia.org/wiki/AngularJS\r\n"},{"score":22,"body_markdown":"If you ever run across code written purely for Internet&amp;nbsp;Explorer you might see this:\r\n\r\n    var e = document.getElementById(&quot;ddlViewBy&quot;);\r\n    var strUser = e.options(e.selectedIndex).value;\r\n\r\nRunning the above in Firefox et al will give you an &#39;is not a function&#39; error, because Internet&amp;nbsp;Explorer  allows you to get away with using () instead of []:\r\n\r\n    var e = document.getElementById(&quot;ddlViewBy&quot;);\r\n    var strUser = e.options[e.selectedIndex].value;\r\n\r\nThe correct way is to use square brackets.\r\n"},{"score":63,"body_markdown":"The following code exhibits various examples related to getting/putting of values from input/select fields using JavaScript.\r\n\r\n**[Source Link][1]**\r\n\r\nWorking [**Javascript &amp; jQuery Demo**][2]\r\n\r\n[![enter image description here][3]][3]\r\n\r\n[![enter image description here][4]][4]\r\n\r\n\r\n\r\n     &lt;select id=&quot;Ultra&quot; onchange=&quot;run()&quot;&gt;  &lt;!--Call run() function--&gt;\r\n         &lt;option value=&quot;0&quot;&gt;Select&lt;/option&gt;\r\n         &lt;option value=&quot;8&quot;&gt;text1&lt;/option&gt;\r\n         &lt;option value=&quot;5&quot;&gt;text2&lt;/option&gt;\r\n         &lt;option value=&quot;4&quot;&gt;text3&lt;/option&gt;\r\n    &lt;/select&gt;&lt;br&gt;&lt;br&gt;\r\n    TextBox1&lt;br&gt;\r\n    &lt;input type=&quot;text&quot; id=&quot;srt&quot; placeholder=&quot;get value on option select&quot;&gt;&lt;br&gt;\r\n    TextBox2&lt;br&gt;\r\n    &lt;input type=&quot;text&quot; id=&quot;rtt&quot;  placeholder=&quot;Write Something !&quot; onkeyup=&quot;up()&quot;&gt;\r\n\r\n**The following script is getting the value of the selected option and putting it in text box 1**\r\n\r\n    &lt;script&gt;\r\n        function run() {\r\n            document.getElementById(&quot;srt&quot;).value = document.getElementById(&quot;Ultra&quot;).value;\r\n        }\r\n    &lt;/script&gt;\r\n\r\n**The following script is getting a value from a text box 2 and alerting with its value**\r\n\r\n    &lt;script&gt;\r\n        function up() {\r\n            //if (document.getElementById(&quot;srt&quot;).value != &quot;&quot;) {\r\n                var dop = document.getElementById(&quot;srt&quot;).value;\r\n            //}\r\n            alert(dop);\r\n        }\r\n    &lt;/script&gt;\r\n\r\n**The following script is calling a function from a function**\r\n\r\n    &lt;script&gt;\r\n        function up() {\r\n            var dop = document.getElementById(&quot;srt&quot;).value;\r\n            pop(dop); // Calling function pop\r\n        }\r\n\r\n        function pop(val) {\r\n            alert(val);\r\n        }?\r\n    &lt;/script&gt;\r\n\r\n\r\n  [1]: http://www.freakyjolly.com/how-to-get-selected-value-in-dropdown-list-using-jquery-javascript/\r\n  [2]: https://freakyjolly.com/demo/getDropDownValue_JavaScript_jQuery.html\r\n  [3]: https://i.stack.imgur.com/8LJas.jpg\r\n  [4]: https://i.stack.imgur.com/GnfKD.jpg"},{"score":45,"body_markdown":"    var selectedValue = document.getElementById(&quot;ddlViewBy&quot;).value;"},{"score":12,"body_markdown":"Just use\r\n\r\n * `$(&#39;#SelectBoxId option:selected&#39;).text();` for getting the text as listed\r\n\r\n * `$(&#39;#SelectBoxId&#39;).val();` for getting the selected index value\r\n"},{"score":0,"body_markdown":"Here&#39;s an easy way to do it in an onchange function:\r\n\r\n`event.target.options[event.target.selectedIndex].dataset.name`"},{"score":19,"body_markdown":"    &lt;select id=&quot;Ultra&quot; onchange=&quot;alert(this.value)&quot;&gt; \r\n     &lt;option value=&quot;0&quot;&gt;Select&lt;/option&gt;\r\n     &lt;option value=&quot;8&quot;&gt;text1&lt;/option&gt;\r\n     &lt;option value=&quot;5&quot;&gt;text2&lt;/option&gt;\r\n     &lt;option value=&quot;4&quot;&gt;text3&lt;/option&gt;\r\n    &lt;/select&gt;\n\nAny input/form field can use a “this” keyword when you are  accessing it from inside the element. This eliminates the need for locating a form in the dom tree and then locating this element inside the form."},{"score":9,"body_markdown":"The previous answers still leave room for improvement because of the possibilities, the intuitiveness of the code, and the use of `id` versus `name`. One can get a read-out of three data of a selected option -- its index number, its value and its text. This simple, cross-browser code does all three:\r\n\r\n    &lt;!DOCTYPE html&gt;\r\n    &lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;meta charset=&quot;utf-8&quot;&gt;\r\n        &lt;title&gt;Demo GetSelectOptionData&lt;/title&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n        &lt;form name=&quot;demoForm&quot;&gt;\r\n            &lt;select name=&quot;demoSelect&quot; onchange=&quot;showData()&quot;&gt;\r\n                &lt;option value=&quot;zilch&quot;&gt;Select:&lt;/option&gt;\r\n                &lt;option value=&quot;A&quot;&gt;Option 1&lt;/option&gt;\r\n                &lt;option value=&quot;B&quot;&gt;Option 2&lt;/option&gt;\r\n                &lt;option value=&quot;C&quot;&gt;Option 3&lt;/option&gt;\r\n            &lt;/select&gt;\r\n        &lt;/form&gt;\r\n\r\n        &lt;p id=&quot;firstP&quot;&gt;&amp;nbsp;&lt;/p&gt;\r\n        &lt;p id=&quot;secondP&quot;&gt;&amp;nbsp;&lt;/p&gt;\r\n        &lt;p id=&quot;thirdP&quot;&gt;&amp;nbsp;&lt;/p&gt;\r\n\r\n        &lt;script&gt;\r\n        function showData() {\r\n            var theSelect = demoForm.demoSelect;\r\n            var firstP = document.getElementById(&#39;firstP&#39;);\r\n            var secondP = document.getElementById(&#39;secondP&#39;);\r\n            var thirdP = document.getElementById(&#39;thirdP&#39;);\r\n            firstP.innerHTML = (&#39;This option\\&#39;s index number is: &#39; + theSelect.selectedIndex + &#39; (Javascript index numbers start at 0)&#39;);\r\n            secondP.innerHTML = (&#39;Its value is: &#39; + theSelect[theSelect.selectedIndex].value);\r\n            thirdP.innerHTML = (&#39;Its text is: &#39; + theSelect[theSelect.selectedIndex].text);\r\n        }\r\n         &lt;/script&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\nLive demo: http://jsbin.com/jiwena/1/edit?html,output .\r\n\r\n`id` should be used for make-up purposes. For functional form purposes, `name` is still valid, also in HTML5, and should still be used. Lastly, mind the use of square versus round brackets in certain places. As was explained before, only (older versions of) Internet&amp;nbsp;Explorer will accept round ones in all places.\r\n"},{"score":4,"body_markdown":"In 2015, in [Firefox][1], the following also works.\r\n\r\n&gt; e.**options**.selectedIndex\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Mozilla_Firefox\r\n"},{"score":8,"body_markdown":"Using jQuery:\r\n\r\n    $(&#39;select&#39;).val();\r\n\r\n"},{"score":3,"body_markdown":"Here is a JavaScript code line:\r\n\r\n    var x = document.form1.list.value;\r\n\r\nAssuming that the dropdown menu named list `name=&quot;list&quot;` and included in a form with name attribute `name=&quot;form1&quot;`.\r\n"},{"score":5,"body_markdown":"To go along with the previous answers, this is how I do it as a one-liner. This is for getting the actual text of the selected option. There are good examples for getting the index number already. (And for the text, I just wanted to show this way)\r\n\r\n    let selText = document.getElementById(&#39;elementId&#39;).options[document.getElementById(&#39;elementId&#39;).selectedIndex].text\r\n\r\nIn some rare instances you may need to use parentheses, but this would be very rare.\r\n\r\n    let selText = (document.getElementById(&#39;elementId&#39;)).options[(document.getElementById(&#39;elementId&#39;)).selectedIndex].text;\r\n\r\nI doubt this processes any faster than the two line version. I simply like to consolidate my code as much as possible.\r\n\r\nUnfortunately this still fetches the element twice, which is not ideal. A method that only grabs the element once would be more useful, but I have not figured that out yet, in regards to doing this with one line of code.\r\n"},{"score":6,"body_markdown":" Running example of how it works:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var e = document.getElementById(&quot;ddlViewBy&quot;);\r\n    var val1 = e.options[e.selectedIndex].value;\r\n    var txt = e.options[e.selectedIndex].text;\r\n\r\n    document.write(&quot;&lt;br /&gt;Selected option Value: &quot;+ val1);\r\n    document.write(&quot;&lt;br /&gt;Selected option Text: &quot;+ txt);\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;select id=&quot;ddlViewBy&quot;&gt;\r\n      &lt;option value=&quot;1&quot;&gt;test1&lt;/option&gt;\r\n      &lt;option value=&quot;2&quot;&gt;test2&lt;/option&gt;\r\n      &lt;option value=&quot;3&quot;  selected=&quot;selected&quot;&gt;test3&lt;/option&gt;\r\n    &lt;/select&gt;\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nNote: The values don&#39;t change as the dropdown is changed, if you require that functionality then an onClick change is to be implemented.\r\n"},{"score":5,"body_markdown":"You can use `querySelector`.\r\n\r\n**E.g.**\r\n\r\n    var myElement = document.getElementById(&#39;ddlViewBy&#39;);\r\n    \r\n    var myValue = myElement.querySelector(&#39;[selected]&#39;).value;"},{"score":7,"body_markdown":"Another solution is:\r\n\r\n    document.getElementById(&#39;elementId&#39;).selectedOptions[0].value\r\n"},{"score":16,"body_markdown":"There are two ways to get this done either using JavaScript or jQuery.\r\n\r\n**JavaScript:**\r\n\r\n    var getValue = document.getElementById(&#39;ddlViewBy&#39;).selectedOptions[0].value;\r\n\r\n    alert (getValue); // This will output the value selected.\r\n\r\n**OR**\r\n\r\n    var ddlViewBy = document.getElementById(&#39;ddlViewBy&#39;);\r\n\r\n    var value = ddlViewBy.options[ddlViewBy.selectedIndex].value;\r\n\r\n    var text = ddlViewBy.options[ddlViewBy.selectedIndex].text;\r\n\r\n    alert (value); // This will output the value selected\r\n\r\n    alert (text); // This will output the text of the value selected\r\n\r\n**jQuery:**\r\n\r\n    $(&quot;#ddlViewBy:selected&quot;).text(); // Text of the selected value\r\n\r\n    $(&quot;#ddlViewBy&quot;).val(); // Outputs the value of the ID in &#39;ddlViewBy&#39;\r\n"},{"score":5,"body_markdown":"I have a bit different view of how to achieve this. I&#39;m usually doing this with the following approach (it is an easier way and works with every browser as far as I know):\r\n\r\n    &lt;select onChange=&quot;functionToCall(this.value);&quot; id=&quot;ddlViewBy&quot;&gt;\r\n      &lt;option value=&quot;value1&quot;&gt;Text one&lt;/option&gt;\r\n      &lt;option value=&quot;value2&quot;&gt;Text two&lt;/option&gt;\r\n      &lt;option value=&quot;value3&quot;&gt;Text three&lt;/option&gt;\r\n      &lt;option value=&quot;valueN&quot;&gt;Text N&lt;/option&gt;\r\n    &lt;/select&gt;\r\n"},{"score":0,"body_markdown":"Just do: `document.getElementById(&#39;idselect&#39;).options.selectedIndex`\r\n\r\nThen you i&#39;ll get select index value, starting in 0."},{"score":0,"body_markdown":"Try\r\n\r\n    ddlViewBy.value                      // value\r\n\r\n    ddlViewBy.selectedOptions[0].text    // label\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log( ddlViewBy.value );\r\n\r\n    console.log( ddlViewBy.selectedOptions[0].text );\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;select id=&quot;ddlViewBy&quot;&gt;\r\n      &lt;option value=&quot;1&quot;&gt;Happy&lt;/option&gt;\r\n      &lt;option value=&quot;2&quot;&gt;Tree&lt;/option&gt;\r\n      &lt;option value=&quot;3&quot;  selected=&quot;selected&quot;&gt;Friends&lt;/option&gt;\r\n    &lt;/select&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":2,"body_markdown":"You should be using `querySelector` to achieve this. This also standardize the way of getting value from form elements.\r\n\r\n`var dropDownValue = document.querySelector(&#39;#ddlViewBy&#39;).value;`\r\n\r\nFiddle: [https://jsfiddle.net/3t80pubr/][1]\r\n\r\n\r\n  [1]: https://jsfiddle.net/3t80pubr/"},{"score":1,"body_markdown":"I don&#39;t know if I&#39;m the one that doesn&#39;t get the question right, but this just worked for me:\r\nUsing an onchange() event in your html, eg.\r\n\r\n    &lt;select id=&quot;numberToSelect&quot; onchange=&quot;selectNum&quot;&gt;\r\n        &lt;option value=&quot;1&quot;&gt;One&lt;/option&gt;\r\n        &lt;option value=&quot;2&quot;&gt;Two&lt;/option&gt;\r\n        &lt;option value=&quot;3&quot;&gt;Three&lt;/option&gt;\r\n    &lt;/select&gt;\r\n\r\n//javascript\r\n\r\n    function sele(){\r\n\t    var strUser = numberToSelect.value;\r\n    }\r\n\r\nThis will give you whatever value is on the select dropdown per click"},{"score":5,"body_markdown":"The simplest way to do this is:\r\n\r\n    var value = document.getElementById(&quot;selectId&quot;).value;"},{"score":0,"body_markdown":"Make a drop-down menu with several options (As many as you want!)\r\n```\r\n&lt;select&gt;\r\n  &lt;option value=&quot;giveItAName&quot;&gt;Give it a name\r\n  &lt;option value=&quot;bananaShark&quot;&gt;Ridiculous animal\r\n  &lt;ooption value=&quot;Unknown&quot;&gt;Give more options!\r\n&lt;/select&gt;\r\n```\r\nI made a bit hilarious.\r\nHere&#39;s the code snippet:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;select&gt;\r\n      &lt;option value=&quot;RidiculousObject&quot;&gt;Banana Shark\r\n      &lt;option value=&quot;SuperDuperCoding&quot;&gt;select tag and option tag!\r\n      &lt;option value=&quot;Unknown&quot;&gt;Add more tags to add more options!\r\n    &lt;/select&gt;\r\n    &lt;h1&gt;Only 1 option (Useless)&lt;/h1&gt;\r\n    &lt;select&gt;\r\n      &lt;option value=&quot;Single&quot;&gt;Single Option\r\n    &lt;/select&gt;  \r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nyay the snippet worked"},{"score":1,"body_markdown":"In more modern browsers, `querySelector` allows us to retrieve the selected option in one statement, using the [`:checked` pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:checked). From the selected option, we can gather whatever information we need:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const opt = document.querySelector(&#39;#ddlViewBy option:checked&#39;);\r\n    // opt is now the selected option, so\r\n    console.log(opt.value, &#39;is the selected value&#39;);\r\n    console.log(opt.text, &quot;is the selected option&#39;s text&quot;);\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;select id=&quot;ddlViewBy&quot;&gt;\r\n      &lt;option value=&quot;1&quot;&gt;test1&lt;/option&gt;\r\n      &lt;option value=&quot;2&quot; selected=&quot;selected&quot;&gt;test2&lt;/option&gt;\r\n      &lt;option value=&quot;3&quot;&gt;test3&lt;/option&gt;\r\n    &lt;/select&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":0,"body_markdown":"I think you can attach an event listener to the select tag itself e.g:\r\n\r\n```html\r\n&lt;script&gt;\r\n  document.addEventListener(&quot;DOMContentLoaded&quot;, (_) =&gt; {\r\n    document.querySelector(&quot;select&quot;).addEventListener(&quot;change&quot;, (e) =&gt; {\r\n      console.log(e.target.value);\r\n    });\r\n  });\r\n&lt;/script&gt;\r\n```\r\n\r\nIn this scenario, you should make sure you have a value attribute for all of your options, and they are not null."}],"score":1904}