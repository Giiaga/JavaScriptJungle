{"body":"I have this `input` element:\r\n\r\n    &lt;input type=&quot;text&quot; class=&quot;textfield&quot; value=&quot;&quot; id=&quot;subject&quot; name=&quot;subject&quot;&gt;\r\n\r\nThen I have some other elements, like other text inputs, textareas, etc.\r\n\r\nWhen the user clicks on that `input` with `#subject`, the page should scroll to the last element of the page with a nice animation. It should be a scroll to bottom and not to top.\r\n\r\nThe last item of the page is a `submit` button with `#submit`:\r\n\r\n    &lt;input type=&quot;submit&quot; class=&quot;submit&quot; id=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Ok, Done.&quot;&gt;\r\n\r\nThe animation should not be too fast and should be fluid.\r\n\r\nI am running the latest jQuery version. I prefer to not install any plugin but to use the default jQuery features to achieve this.","title":"jQuery scroll to element","answers":[{"score":4140,"body_markdown":"Assuming you have a button with the id `button`, try this example:\r\n\r\n    $(&quot;#button&quot;).click(function() {\r\n        $([document.documentElement, document.body]).animate({\r\n            scrollTop: $(&quot;#elementtoScrollToID&quot;).offset().top\r\n        }, 2000);\r\n    });\r\n\r\nI got the code from the article *[Smoothly scroll to an element without a jQuery plugin][1]*. And I have tested it on the example below.\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;html&gt;\r\n        &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n        &lt;script&gt;\r\n            $(document).ready(function (){\r\n                $(&quot;#click&quot;).click(function (){\r\n                    $(&#39;html, body&#39;).animate({\r\n                        scrollTop: $(&quot;#div1&quot;).offset().top\r\n                    }, 2000);\r\n                });\r\n            });\r\n        &lt;/script&gt;\r\n        &lt;div id=&quot;div1&quot; style=&quot;height: 1000px; width 100px&quot;&gt;\r\n            Test\r\n        &lt;/div&gt;\r\n        &lt;br/&gt;\r\n        &lt;div id=&quot;div2&quot; style=&quot;height: 1000px; width 100px&quot;&gt;\r\n            Test 2\r\n        &lt;/div&gt;\r\n        &lt;button id=&quot;click&quot;&gt;Click me&lt;/button&gt;\r\n    &lt;/html&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n[1]: http://www.abeautifulsite.net/smoothly-scroll-to-an-element-without-a-jquery-plugin-2/"},{"score":540,"body_markdown":"[ ![jQuery .scrollTo() Method][1] ][2]\r\n\r\n**jQuery .scrollTo(): [ View - Demo, API, Source ][2]**\r\n\r\nI wrote this lightweight plugin to make page/element scrolling much easier. It&#39;s flexible where you could pass in a target element or specified value. Perhaps this could be part of jQuery&#39;s next official release, what do you think?\r\n\r\n----------\r\n**Examples Usage:**\r\n\r\n    $(&#39;body&#39;).scrollTo(&#39;#target&#39;); // Scroll screen to target element\r\n\r\n    $(&#39;body&#39;).scrollTo(500); // Scroll screen 500 pixels down\r\n\r\n    $(&#39;#scrollable&#39;).scrollTo(100); // Scroll individual element 100 pixels down\r\n\r\n----------\r\n\r\n**Options:**\r\n\r\n*scrollTarget*: A element, string, or number which indicates desired scroll position.\r\n\r\n*offsetTop*: A number that defines additional spacing above scroll target.\r\n\r\n*duration*: A string or number determining how long the animation will run.\r\n\r\n*easing*: A string indicating which easing function to use for the transition.\r\n\r\n*complete*: A function to call once the animation is complete.\r\n\r\n  [1]: http://i.stack.imgur.com/g55iQ.png\r\n  [2]: http://demos.flesler.com/jquery/scrollTo/\r\n"},{"score":55,"body_markdown":"Using this simple script\r\n\r\n    if($(window.location.hash).length &gt; 0){\r\n    \t\t$(&#39;html, body&#39;).animate({ scrollTop: $(window.location.hash).offset().top}, 1000);\r\n    }\r\n\r\nWould make in sort that if a hash tag is found in the url, the scrollTo animate to the ID. If not hash tag found, then ignore the script."},{"score":395,"body_markdown":"If you are not much interested in the smooth scroll effect and just interested in scrolling to a particular element, you don&#39;t require some jQuery function for this. Javascript has got your case covered:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/element.scrollIntoView\r\n\r\nSo all you need to do is: `$(&quot;selector&quot;).get(0).scrollIntoView();`  \r\n\r\n`.get(0)` is used because we want to retrieve the JavaScript&#39;s DOM element and not the JQuery&#39;s DOM element.\r\n\r\n"},{"score":33,"body_markdown":"The solution by Steve and Peter works very well.\r\n\r\nBut in some cases, you may have to convert the value to an integer. Strangely, the returned value from `$(&quot;...&quot;).offset().top` is sometimes in `float`.  \r\nUse: `parseInt($(&quot;....&quot;).offset().top)`\r\n\r\nFor example:\r\n\r\n    $(&quot;#button&quot;).click(function() {\r\n        $(&#39;html, body&#39;).animate({\r\n            scrollTop: parseInt($(&quot;#elementtoScrollToID&quot;).offset().top)\r\n        }, 2000);\r\n    });\r\n"},{"score":3,"body_markdown":"    $(&#39;html, body&#39;).animate({scrollTop: \r\n      Math.min(\t\r\n        $(to).offset().top-margintop, //margintop is the margin above the target\r\n        $(&#39;body&#39;)[0].scrollHeight-$(&#39;body&#39;).height()) //if the target is at the bottom\r\n    }, 2000);\r\n\r\n"},{"score":2,"body_markdown":"To show the full element (if it&#39;s possible with the current window size):\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var element       = $(&quot;#some_element&quot;);\r\n    var elementHeight = element.height();\r\n    var windowHeight  = $(window).height();\r\n\r\n    var offset = Math.min(elementHeight, windowHeight) + element.offset().top;\r\n    $(&#39;html, body&#39;).animate({ scrollTop: offset }, 500);\r\n"},{"score":38,"body_markdown":"\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    jQuery(document).ready(function($) {\r\n      $(&#39;a[href^=&quot;#&quot;]&#39;).bind(&#39;click.smoothscroll&#39;,function (e) {\r\n        e.preventDefault();\r\n        var target = this.hash,\r\n            $target = $(target);\r\n\r\n        $(&#39;html, body&#39;).stop().animate( {\r\n          &#39;scrollTop&#39;: $target.offset().top-40\r\n        }, 900, &#39;swing&#39;, function () {\r\n          window.location.hash = target;\r\n        } );\r\n      } );\r\n    } );\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n\r\n    &lt;ul role=&quot;tablist&quot;&gt;\r\n      &lt;li class=&quot;active&quot; id=&quot;p1&quot;&gt;&lt;a href=&quot;#pane1&quot; role=&quot;tab&quot;&gt;Section 1&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li id=&quot;p2&quot;&gt;&lt;a href=&quot;#pane2&quot; role=&quot;tab&quot;&gt;Section 2&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li id=&quot;p3&quot;&gt;&lt;a href=&quot;#pane3&quot; role=&quot;tab&quot;&gt;Section 3&lt;/a&gt;&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n\r\n    &lt;div id=&quot;pane1&quot;&gt;&lt;/div&gt;\r\n    &lt;div id=&quot;pane2&quot;&gt;&lt;/div&gt;\r\n    &lt;div id=&quot;pane3&quot;&gt;&lt;/div&gt;\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":22,"body_markdown":"A compact version of &quot;animate&quot; solution.\r\n\r\n    $.fn.scrollTo = function (speed) {\r\n        if (typeof(speed) === &#39;undefined&#39;)\r\n            speed = 1000;\r\n        \r\n        $(&#39;html, body&#39;).animate({\r\n            scrollTop: parseInt($(this).offset().top)\r\n        }, speed);\r\n    };\r\n\r\nBasic usage: `$(&#39;#your_element&#39;).scrollTo();`\r\n\r\n"},{"score":18,"body_markdown":"If you are only handling scrolling to an input element, you can use `focus()`.  For example, if you wanted to scroll to the first visible input:\r\n\r\n    $(&#39;:input:visible&#39;).first().focus();\r\n\r\nOr the first visible input in an container with class `.error`:\r\n\r\n    $(&#39;.error :input:visible&#39;).first().focus();\r\n\r\nThanks to [Tricia Ball](https://stackoverflow.com/users/832777) for pointing this out!"},{"score":6,"body_markdown":"This is my approach abstracting the ID&#39;s and href&#39;s, using a generic class selector\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $(function() {\r\n      // Generic selector to be used anywhere\r\n      $(&quot;.js-scroll-to&quot;).click(function(e) {\r\n\r\n        // Get the href dynamically\r\n        var destination = $(this).attr(&#39;href&#39;);\r\n\r\n        // Prevent href=“#” link from changing the URL hash (optional)\r\n        e.preventDefault();\r\n\r\n        // Animate scroll to destination\r\n        $(&#39;html, body&#39;).animate({\r\n          scrollTop: $(destination).offset().top\r\n        }, 500);\r\n      });\r\n    });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;!-- example of a fixed nav menu --&gt;\r\n    &lt;ul class=&quot;nav&quot;&gt;\r\n      &lt;li&gt;\r\n        &lt;a href=&quot;#section-1&quot; class=&quot;nav-item js-scroll-to&quot;&gt;Item 1&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li&gt;\r\n        &lt;a href=&quot;#section-2&quot; class=&quot;nav-item js-scroll-to&quot;&gt;Item 2&lt;/a&gt;\r\n      &lt;/li&gt;\r\n      &lt;li&gt;\r\n        &lt;a href=&quot;#section-3&quot; class=&quot;nav-item js-scroll-to&quot;&gt;Item 3&lt;/a&gt;\r\n      &lt;/li&gt;\r\n    &lt;/ul&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":4,"body_markdown":"    var scrollTo = function($parent, $element) {\r\n\t\tvar topDiff = $element.position().top - $parent.position().top;\r\n\r\n\t\t$parent.animate({\r\n\t\t\tscrollTop : topDiff\r\n\t\t}, 100);\r\n\t};"},{"score":8,"body_markdown":"In most cases, it would be best to use a plugin. Seriously. I&#39;m going to [tout mine here][1]. Of course there are others, too. But please check if they really avoid the pitfalls for which you&#39;d want a plugin in the first place - not all of them do.\r\n\r\nI have written about the reasons for using a plugin [elsewhere][2]. In a nutshell, the one liner underpinning most answers here \r\n\r\n    $(&#39;html, body&#39;).animate( { scrollTop: $target.offset().top }, duration );\r\n\r\nis bad UX.\r\n\r\n- The animation doesn&#39;t respond to user actions. It carries on even if the user clicks, taps, or tries to scroll.\r\n\r\n- If the starting point of the animation is close to the target element, the animation is painfully slow. \r\n\r\n- If the target element is placed near the bottom of the page, it can&#39;t be scrolled to the top of the window. The scroll animation stops abruptly then, in mid motion.\r\n\r\nTo handle these issues (and a [bunch of others][2]), you can use a plugin of mine, [jQuery.scrollable][1]. The call then becomes\r\n\r\n    $( window ).scrollTo( targetPosition );\r\n\r\nand that&#39;s it. Of course, there are [more options][3].\r\n\r\nWith regard to the target position, `$target.offset().top` does the job in most cases. But please be aware that the returned value doesn&#39;t take a border on the `html` element into account ([see this demo][4]). If you need the target position to be accurate under any circumstances, it is better to use\r\n\r\n    targetPosition = $( window ).scrollTop() + $target[0].getBoundingClientRect().top;\r\n\r\nThat works even if a border on the `html` element is set.\r\n\r\n[1]: https://github.com/hashchange/jquery.scrollable &quot;jQuery.scrollable&quot;\r\n[2]: https://github.com/hashchange/jquery.scrollable#why &quot;jQuery.scrollable: Why even use it?&quot;\r\n[3]: https://github.com/hashchange/jquery.scrollable#animation-options &quot;jQuery.scrollable: Animation options&quot;\r\n[4]: http://jsbin.com/vifugo/3 &quot;$elem.offset() does not account for html border - JS Bin&quot;\r\n"},{"score":2,"body_markdown":"I wrote a general purpose function that scrolls to either a jQuery object, a CSS selector, or a numeric value.\r\n\r\nExample usage:\r\n\r\n    // scroll to &quot;#target-element&quot;:\r\n    $.scrollTo(&quot;#target-element&quot;);\r\n\r\n    // scroll to 80 pixels above first element with class &quot;.invalid&quot;:\r\n    $.scrollTo(&quot;.invalid&quot;, -80);\r\n\r\n    // scroll a container with id &quot;#my-container&quot; to 300 pixels from its top:\r\n    $.scrollTo(300, 0, &quot;slow&quot;, &quot;#my-container&quot;);\r\n\r\nThe function&#39;s code:\r\n\r\n    /**\r\n    * Scrolls the container to the target position minus the offset\r\n    *\r\n    * @param target    - the destination to scroll to, can be a jQuery object\r\n    *                    jQuery selector, or numeric position\r\n    * @param offset    - the offset in pixels from the target position, e.g.\r\n    *                    pass -80 to scroll to 80 pixels above the target\r\n    * @param speed     - the scroll speed in milliseconds, or one of the\r\n    *                    strings &quot;fast&quot; or &quot;slow&quot;. default: 500\r\n    * @param container - a jQuery object or selector for the container to\r\n    *                    be scrolled. default: &quot;html, body&quot;\r\n    */\r\n    jQuery.scrollTo = function (target, offset, speed, container) {\r\n    \r\n    \tif (isNaN(target)) {\r\n    \r\n    \t\tif (!(target instanceof jQuery))\r\n    \t\t\ttarget = $(target);\r\n    \r\n    \t\ttarget = parseInt(target.offset().top);\r\n    \t}\r\n    \r\n        container = container || &quot;html, body&quot;;\r\n    \tif (!(container instanceof jQuery))\r\n    \t\tcontainer = $(container);\r\n    \r\n        speed = speed || 500;\r\n        offset = offset || 0;\r\n    \r\n        container.animate({\r\n            scrollTop: target + offset\r\n        }, speed);\r\n    };"},{"score":3,"body_markdown":"\r\n\r\n&gt; When the user clicks on that input with #subject, the page should\r\n&gt; scroll to the last element of the page with a nice animation. It\r\n&gt; should be a scroll to bottom and not to top.\r\n&gt;\r\n&gt; The last item of the page is a submit button with #submit\r\n\r\n    $(&#39;#subject&#39;).click(function()\r\n    {\r\n        $(&#39;#submit&#39;).focus();\r\n        $(&#39;#subject&#39;).focus();\r\n    });\r\n\r\nThis will first scroll down to `#submit` then restore the cursor back to the input that was clicked, which mimics a scroll down, and works on most browsers. It also doesn&#39;t require jQuery as it can be written in pure JavaScript.\r\n\r\nCan this fashion of using `focus` function mimic animation in a better way, through chaining `focus` calls. I haven&#39;t tested this theory, but it would look something like this:\r\n\r\n    &lt;style&gt;\r\n      #F &gt; *\r\n      {\r\n        width: 100%;\r\n      }\r\n    &lt;/style&gt;\r\n\r\n    &lt;form id=&quot;F&quot; &gt;\r\n      &lt;div id=&quot;child_1&quot;&gt; .. &lt;/div&gt;\r\n      &lt;div id=&quot;child_2&quot;&gt; .. &lt;/div&gt;\r\n      ..\r\n      &lt;div id=&quot;child_K&quot;&gt; .. &lt;/div&gt;\r\n    &lt;/form&gt;\r\n\r\n    &lt;script&gt;\r\n      $(&#39;#child_N&#39;).click(function()\r\n      {\r\n        $(&#39;#child_N&#39;).focus();\r\n        $(&#39;#child_N+1&#39;).focus();\r\n        ..\r\n        $(&#39;#child_K&#39;).focus();\r\n\r\n        $(&#39;#child_N&#39;).focus();\r\n      });\r\n    &lt;/script&gt;"},{"score":6,"body_markdown":"Very simple and easy to use custom jQuery plugin. Just add the attribute `scroll=` to your clickable element and set its value to the selector you want to scroll to. \r\n\r\nLike so: `&lt;a scroll=&quot;#product&quot;&gt;Click me&lt;/a&gt;`. It can be used on any element. \r\n\r\n    (function($){\r\n        $.fn.animateScroll = function(){\r\n            console.log($(&#39;[scroll]&#39;));\r\n            $(&#39;[scroll]&#39;).click(function(){\r\n                selector = $($(this).attr(&#39;scroll&#39;));\r\n                console.log(selector);\r\n                console.log(selector.offset().top);\r\n                $(&#39;html body&#39;).animate(\r\n                    {scrollTop: (selector.offset().top)}, //- $(window).scrollTop()\r\n                    1000\r\n                );\r\n            });\r\n        }\r\n    })(jQuery);\r\n    \r\n    // RUN\r\n    jQuery(document).ready(function($) {\r\n        $().animateScroll();\r\n    });\r\n    \r\n    // IN HTML EXAMPLE\r\n    // RUN ONCLICK ON OBJECT WITH ATTRIBUTE SCROLL=&quot;.SELECTOR&quot;\r\n    // &lt;a scroll=&quot;#product&quot;&gt;Click To Scroll&lt;/a&gt;"},{"score":2,"body_markdown":"For what it&#39;s worth, this is how I managed to achieve such behavior for a general element which can be inside a DIV with scrolling. In our case we don&#39;t scroll the full body, but just particular elements with overflow: auto; within a larger layout.\r\n\r\nIt creates a fake input of the height of the target element, and then puts a focus to it, and the browser will take care about the rest no matter how deep within the scrollable hierarchy you are. Works like a charm.\r\n\r\n    var $scrollTo = $(&#39;#someId&#39;),\r\n    inputElem = $(&#39;&lt;input type=&quot;text&quot;&gt;&lt;/input&gt;&#39;);\r\n            \r\n    $scrollTo.prepend(inputElem);\r\n    inputElem.css({\r\n      position: &#39;absolute&#39;,\r\n      width: &#39;1px&#39;,\r\n      height: $scrollTo.height()\r\n    });\r\n    inputElem.focus();\r\n    inputElem.remove();"},{"score":19,"body_markdown":"With [this solution](https://jsfiddle.net/k148ccg9/) you do not need any plugin and there&#39;s ***no setup required*** besides placing the script before your closing `&lt;/body&gt;` tag.\r\n\r\n\r\n    $(&quot;a[href^=&#39;#&#39;]&quot;).on(&quot;click&quot;, function(e) {\r\n      $(&quot;html, body&quot;).animate({\r\n        scrollTop: $($(this).attr(&quot;href&quot;)).offset().top\r\n      }, 1000);\r\n      return false;\r\n    });\r\n    \r\n    if ($(window.location.hash).length &gt; 1) {\r\n      $(&quot;html, body&quot;).animate({\r\n        scrollTop: $(window.location.hash).offset().top\r\n      }, 1000);\r\n    }\r\n\r\nOn load, if there is a hash in the address, we scroll to it.\r\n\r\nAnd - whenever you click an `a` link with an `href` hash e.g. `#top`, we scroll to it.\r\n\r\n\r\n\r\n##Edit 2020\r\n\r\nIf you want a pure JavaScript solution: you could perhaps instead use something like:\r\n\r\n\r\n    var _scrollToElement = function (selector) {\r\n      try {\r\n        document.querySelector(selector).scrollIntoView({ behavior: &#39;smooth&#39; });\r\n      } catch (e) {\r\n        console.warn(e);\r\n      }\r\n    }\r\n    \r\n    var _scrollToHashesInHrefs = function () {\r\n      document.querySelectorAll(&quot;a[href^=&#39;#&#39;]&quot;).forEach(function (el) {\r\n        el.addEventListener(&#39;click&#39;, function (e) {\r\n          _scrollToElement(el.getAttribute(&#39;href&#39;));\r\n          return false;\r\n        })\r\n      })\r\n      if (window.location.hash) {\r\n        _scrollToElement(window.location.hash);\r\n      }\r\n    }\r\n    \r\n    _scrollToHashesInHrefs();\r\n\r\n"},{"score":3,"body_markdown":"I set up a module [scroll-element](https://github.com/StevenIseki/scroll-element) `npm install scroll-element`. It works like this:\r\n\r\n    import { scrollToElement, scrollWindowToElement } from &#39;scroll-element&#39;\r\n\r\n    /* scroll the window to your target element, duration and offset optional */\r\n    let targetElement = document.getElementById(&#39;my-item&#39;)\r\n    scrollWindowToElement(targetElement)\r\n\r\n    /* scroll the overflow container element to your target element, duration and offset optional */\r\n    let containerElement = document.getElementById(&#39;my-container&#39;)\r\n    let targetElement = document.getElementById(&#39;my-item&#39;)\r\n    scrollToElement(containerElement, targetElement)\r\n\r\nWritten with help from the following SO posts:\r\n\r\n - [offset-top-of-an-element-without-jquery](https://stackoverflow.com/questions/18953144/how-do-i-get-the-offset-top-value-of-an-element-without-using-jquery)\r\n\r\n - [scrolltop-animation-without-jquery](https://stackoverflow.com/questions/21474678/scrolltop-animation-without-jquery)\r\n\r\nHere is the code:\r\n\r\n    export const scrollToElement = function(containerElement, targetElement, duration, offset) {\r\n      if (duration == null) { duration = 1000 }\r\n      if (offset == null) { offset = 0 }\r\n    \r\n      let targetOffsetTop = getElementOffset(targetElement).top\r\n      let containerOffsetTop = getElementOffset(containerElement).top\r\n      let scrollTarget = targetOffsetTop + ( containerElement.scrollTop - containerOffsetTop)\r\n      scrollTarget += offset\r\n      scroll(containerElement, scrollTarget, duration)\r\n    }\r\n    \r\n    export const scrollWindowToElement = function(targetElement, duration, offset) {\r\n      if (duration == null) { duration = 1000 }\r\n      if (offset == null) { offset = 0 }\r\n    \r\n      let scrollTarget = getElementOffset(targetElement).top\r\n      scrollTarget += offset\r\n      scrollWindow(scrollTarget, duration)\r\n    }\r\n    \r\n    function scroll(containerElement, scrollTarget, duration) {\r\n      let scrollStep = scrollTarget / (duration / 15)\r\n      let interval = setInterval(() =&gt; {\r\n        if ( containerElement.scrollTop &lt; scrollTarget ) {\r\n          containerElement.scrollTop += scrollStep\r\n        } else {\r\n          clearInterval(interval)\r\n        }\r\n      },15)\r\n    }\r\n    \r\n    function scrollWindow(scrollTarget, duration) {\r\n      let scrollStep = scrollTarget / (duration / 15)\r\n      let interval = setInterval(() =&gt; {\r\n        if ( window.scrollY &lt; scrollTarget ) {\r\n          window.scrollBy( 0, scrollStep )\r\n        } else {\r\n          clearInterval(interval)\r\n        }\r\n      },15)\r\n    }\r\n    \r\n    function getElementOffset(element) {\r\n      let de = document.documentElement\r\n      let box = element.getBoundingClientRect()\r\n      let top = box.top + window.pageYOffset - de.clientTop\r\n      let left = box.left + window.pageXOffset - de.clientLeft\r\n      return { top: top, left: left }\r\n    }"},{"score":4,"body_markdown":"`$(&#39;html, body&#39;).animate(...)` does not for me on iphone, android chrome safari browser.  \r\n\r\nI had to target root content element of the page.\r\n\r\n&gt;  $(&#39;#cotnent&#39;).animate(...)\r\n\r\nHere is what I have ended up with\r\n\r\n    if (navigator.userAgent.match(/(iPod|iPhone|iPad|Android)/)) {           \r\n    \t$(&#39;#content&#39;).animate({\r\n    \tscrollTop: $(&quot;#elementtoScrollToID&quot;).offset().top\r\n       }, &#39;slow&#39;);\r\n    }\r\n    else{\r\n    \t$(&#39;html, body&#39;).animate({\r\n    \tscrollTop: $(&quot;#elementtoScrollToID&quot;).offset().top\r\n    \t}, &#39;slow&#39;);\r\n    }\r\n\r\nAll body content wired up with a #content div\r\n\r\n    &lt;html&gt;\r\n    ....\r\n    &lt;body&gt;\r\n    &lt;div id=&quot;content&quot;&gt;\r\n    ....\r\n    &lt;/div&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;"},{"score":9,"body_markdown":"Animations:\r\n\r\n    // slide to top of the page\r\n\t$(&#39;.up&#39;).click(function () {\r\n\t    $(&quot;html, body&quot;).animate({\r\n\t        scrollTop: 0\r\n\t    }, 600);\r\n\t    return false;\r\n\t});\r\n\r\n\t// slide page to anchor\r\n\t$(&#39;.menutop b&#39;).click(function(){\r\n\t    //event.preventDefault();\r\n\t    $(&#39;html, body&#39;).animate({\r\n\t        scrollTop: $( $(this).attr(&#39;href&#39;) ).offset().top\r\n\t    }, 600);\r\n\t    return false;\r\n\t});\r\n\r\n\t// Scroll to class, div\r\n\t$(&quot;#button&quot;).click(function() {\r\n\t\t$(&#39;html, body&#39;).animate({\r\n\t\t    scrollTop: $(&quot;#target-element&quot;).offset().top\r\n\t\t}, 1000);\r\n\t});\r\n\r\n\t// div background animate\r\n\t$(window).scroll(function () {\r\n\t     \r\n\t    var x = $(this).scrollTop();\r\n\r\n\t    // freezze div background\r\n\t    $(&#39;.banner0&#39;).css(&#39;background-position&#39;, &#39;0px &#39; + x +&#39;px&#39;);\r\n\r\n\t    // from left to right\r\n\t    $(&#39;.banner0&#39;).css(&#39;background-position&#39;, x+&#39;px &#39; +&#39;0px&#39;);\r\n\r\n\t    // from right to left\r\n\t    $(&#39;.banner0&#39;).css(&#39;background-position&#39;, -x+&#39;px &#39; +&#39;0px&#39;);\r\n\r\n\t    // from bottom to top\r\n\t    $(&#39;#skills&#39;).css(&#39;background-position&#39;, &#39;0px &#39; + -x + &#39;px&#39;);\r\n\r\n\t    // move background from top to bottom\r\n\t    $(&#39;.skills1&#39;).css(&#39;background-position&#39;, &#39;0% &#39; + parseInt(-x / 1) + &#39;px&#39; + &#39;, 0% &#39; + parseInt(-x / 1) + &#39;px, center top&#39;);\r\n\r\n\t\t// Show hide mtop menu  \r\n\t\tif ( x &gt; 100 ) {\r\n\t\t$( &quot;.menu&quot; ).addClass( &#39;menushow&#39; );\r\n\t\t$( &quot;.menu&quot; ).fadeIn(&quot;slow&quot;);\r\n\t\t$( &quot;.menu&quot; ).animate({opacity: 0.75}, 500);\r\n\t\t} else {\r\n\t\t$( &quot;.menu&quot; ).removeClass( &#39;menushow&#39; );\r\n\t\t$( &quot;.menu&quot; ).animate({opacity: 1}, 500);\r\n\t\t}\r\n\r\n\t});\r\n\r\n\t// progres bar animation simple\r\n\t$(&#39;.bar1&#39;).each(function(i) {\r\n\t  var width = $(this).data(&#39;width&#39;);  \r\n\t  $(this).animate({&#39;width&#39; : width + &#39;%&#39; }, 900, function(){\r\n\t    // Animation complete\r\n\t  });  \r\n\t});"},{"score":10,"body_markdown":"If you want to scroll within an overflow container (instead of `$(&#39;html, body&#39;)` answered above), working also with absolute positioning, this is the way to do :\r\n\r\n    var elem = $(&#39;#myElement&#39;),\r\n        container = $(&#39;#myScrollableContainer&#39;),\r\n        pos = elem.position().top + container.scrollTop() - container.position().top;\r\n\r\n    container.animate({\r\n      scrollTop: pos\r\n    }\r\n\r\n "},{"score":9,"body_markdown":"Easy way to achieve the scroll of page to target div id\r\n\r\n    var targetOffset = $(&#39;#divID&#39;).offset().top;\r\n    $(&#39;html, body&#39;).animate({scrollTop: targetOffset}, 1000);"},{"score":4,"body_markdown":"This is Atharva&#39;s answer from: https://developer.mozilla.org/en-US/docs/Web/API/element.scrollIntoView.\r\nJust wanted to add if your document is in an iframe, you can choose an element in the parent frame to scroll into view:\r\n\r\n     $(&#39;#element-in-parent-frame&#39;, window.parent.document).get(0).scrollIntoView();"},{"score":2,"body_markdown":"This worked for me:\r\n\r\n    var targetOffset = $(&#39;#elementToScrollTo&#39;).offset().top;\r\n    $(&#39;#DivParent&#39;).animate({scrollTop: targetOffset}, 2500);"},{"score":46,"body_markdown":"I know a way without jQuery:\r\n\r\n    document.getElementById(&quot;element-id&quot;).scrollIntoView();\r\n\r\nEdit: It&#39;s been two years and I&#39;m still randomly getting reputation from this post lmao\r\n\r\nEdit 2: Please don&#39;t edit *my* comment without asking me."},{"score":3,"body_markdown":"Updated answer as of 2019:\r\n\r\n    $(&#39;body&#39;).animate({\r\n        scrollTop: $(&#39;#subject&#39;).offset().top - $(&#39;body&#39;).offset().top + $(&#39;body&#39;).scrollTop()\r\n    }, &#39;fast&#39;);"},{"score":2,"body_markdown":"\r\n\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    jQuery(document).ready(function($) {\r\n      $(&#39;a[href^=&quot;#&quot;]&#39;).bind(&#39;click.smoothscroll&#39;,function (e) {\r\n        e.preventDefault();\r\n        var target = this.hash,\r\n            $target = $(target);\r\n\r\n        $(&#39;html, body&#39;).stop().animate( {\r\n          &#39;scrollTop&#39;: $target.offset().top-40\r\n        }, 900, &#39;swing&#39;, function () {\r\n          window.location.hash = target;\r\n        } );\r\n      } );\r\n    } );\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n\r\n    &lt;ul role=&quot;tablist&quot;&gt;\r\n      &lt;li class=&quot;active&quot; id=&quot;p1&quot;&gt;&lt;a href=&quot;#pane1&quot; role=&quot;tab&quot;&gt;Section 1&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li id=&quot;p2&quot;&gt;&lt;a href=&quot;#pane2&quot; role=&quot;tab&quot;&gt;Section 2&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li id=&quot;p3&quot;&gt;&lt;a href=&quot;#pane3&quot; role=&quot;tab&quot;&gt;Section 3&lt;/a&gt;&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n\r\n    &lt;div id=&quot;pane1&quot;&gt;&lt;/div&gt;\r\n    &lt;div id=&quot;pane2&quot;&gt;&lt;/div&gt;\r\n    &lt;div id=&quot;pane3&quot;&gt;&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":30,"body_markdown":"This is the way I do it.\r\n\r\n    document.querySelector(&#39;scrollHere&#39;).scrollIntoView({ behavior: &#39;smooth&#39; })\r\n\r\nWorks in any browser.\r\n\r\nIt can easily be wrapped into a function\r\n\r\n    function scrollTo(selector) {\r\n        document.querySelector(selector).scrollIntoView({ behavior: &#39;smooth&#39; })\r\n    }\r\n\r\n\r\nHere is a working example\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $(&quot;.btn&quot;).click(function() {\r\n      document.getElementById(&quot;scrollHere&quot;).scrollIntoView( {behavior: &quot;smooth&quot; })\r\n    })\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .btn {margin-bottom: 500px;}\r\n    .middle {display: block; margin-bottom: 500px; color: red;}\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n    &lt;button class=&quot;btn&quot;&gt;Scroll down&lt;/button&gt;\r\n\r\n    &lt;h1 class=&quot;middle&quot;&gt;You see?&lt;/h1&gt;\r\n\r\n    &lt;div id=&quot;scrollHere&quot;&gt;Arrived at your destination&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n[Docs][1]\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView"},{"score":3,"body_markdown":"**ONELINER**\r\n\r\n    subject.onclick = e=&gt; window.scroll({ top: submit.offsetTop, behavior: &#39;smooth&#39;});\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    subject.onclick = e=&gt; window.scroll({top: submit.offsetTop, behavior: &#39;smooth&#39;});\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .box,.foot{display: flex;background:#fdf;padding:500px 0} .foot{padding:250px}\r\n\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;input type=&quot;text&quot; class=&quot;textfield&quot; value=&quot;click here&quot; id=&quot;subject&quot; name=&quot;subject&quot;&gt;\r\n\r\n    &lt;div class=&quot;box&quot;&gt;\r\n      Some content\r\n      &lt;textarea&gt;&lt;/textarea&gt;\r\n    &lt;/div&gt;\r\n\r\n    &lt;input type=&quot;submit&quot; class=&quot;submit&quot; id=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Ok, Done.&quot;&gt;\r\n\r\n    &lt;div class=&quot;foot&quot;&gt;Some footer&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":1,"body_markdown":"You just need:\r\n\r\n    $(&quot;selector&quot;).get(0).scrollTo(0, 0)"},{"score":0,"body_markdown":"After finding the way to get my code work, I think I should make thing a bit clear:\r\nFor using:\r\n```\r\n$(&#39;html, body&#39;).animate({\r\n   scrollTop: $(&quot;#div1&quot;).offset().top\r\n}, 2000);\r\n```\r\nyou need to be on top of the page since `$(&quot;#div1&quot;).offset().top` will return different numbers for different positions you scroll to. If you already scrolled out of the top, you need to specify the exact `pageY` value (see `pageY` definition here: https://javascript.info/coordinates).\r\n\r\nSo now, the problem is to calculate the `pageY` value of one element. Below is an example in case the scroll container is the body:\r\n```\r\nfunction getPageY(id) {\r\n    let elem = document.getElementById(id);\r\n    let box = elem.getBoundingClientRect();\r\n    var body = document.getElementsByTagName(&quot;BODY&quot;)[0];\r\n    return box.top + body.scrollTop; // for window scroll: box.top + window.scrollY;\r\n}\r\n```\r\nThe above function returns the same number even if you scrolled somewhere. Now, to scroll back to that element:\r\n```\r\n$(&quot;html, body&quot;).animate({ scrollTop: getPageY(&#39;div1&#39;) }, &quot;slow&quot;);\r\n```"}],"score":2424}