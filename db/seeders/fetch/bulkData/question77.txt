{"body":"I&#39;m trying to open a [URL][1] in a new tab, as opposed to a popup window.\r\n\r\nI&#39;ve seen related questions where the responses would look something like:\r\n\r\n    window.open(url,&#39;_blank&#39;);\r\n    window.open(url);\r\n\r\nBut none of them worked for me, the browser still tried to open a popup window.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/URL","title":"Open a URL in a new tab (and not a new window)","answers":[{"score":993,"body_markdown":"Nothing an author can do can choose to open in a new tab instead of a new window; it is a *user preference*. (Note that the default user preference in most browsers is for new tabs, so a trivial test on a browser where that preference hasn&#39;t been changed will not demonstrate this.)\r\n\r\nCSS3 proposed [target-new][1], but [the specification was abandoned][2].\r\n\r\n[The **reverse** is not true][3]; by specifying certain window features for the window in the third argument of `window.open()`, you can trigger a new window when the preference is for tabs.\r\n\r\n\r\n  [1]: https://www.w3.org/TR/2004/WD-css3-hyperlinks-20040224/#target-new\r\n  [2]: https://www.w3.org/TR/2014/NOTE-css3-hyperlinks-20141014/\r\n  [3]: https://stackoverflow.com/a/64718494/19068"},{"score":20,"body_markdown":"I think that you can&#39;t control this. If the user had setup their browser to open links in a new window, you can&#39;t force this to open links in a new tab.\r\n\r\nhttps://stackoverflow.com/questions/726761/javascript-open-in-a-new-window-not-tab"},{"score":70,"body_markdown":"To elaborate Steven Spielberg&#39;s answer, I did this in such a case:\r\n\r\n    $(&#39;a&#39;).click(function() {\r\n      $(this).attr(&#39;target&#39;, &#39;_blank&#39;);\r\n    });\r\n\r\nThis way, just before the browser will follow the link I&#39;m setting the target attribute, so it will make the link open in a new tab or window (**depends on user&#39;s settings**).\r\n\r\nOne line example in jQuery:\r\n\r\n    $(&#39;a&#39;).attr(&#39;target&#39;, &#39;_blank&#39;).get(0).click();\r\n    // The `.get(0)` must be there to return the actual DOM element.\r\n    // Doing `.click()` on the jQuery object for it did not work.\r\n\r\nThis can also be accomplished just using native browser DOM APIs as well:\r\n\r\n    document.querySelector(&#39;a&#39;).setAttribute(&#39;target&#39;, &#39;_blank&#39;);\r\n    document.querySelector(&#39;a&#39;).click();"},{"score":1825,"body_markdown":"This is a trick,  \r\n\r\n    function openInNewTab(url) {\r\n      var win = window.open(url, &#39;_blank&#39;);\r\n      win.focus();\r\n    }\r\n\r\nIn most cases, this should happen directly in the `onclick` handler for the link to prevent pop-up blockers, and the default &quot;new window&quot; behavior. You could do it this way, or by adding an event listener to your `DOM` object.  \r\n\r\n    &lt;div onclick=&quot;openInNewTab(&#39;www.test.com&#39;);&quot;&gt;Something To Click On&lt;/div&gt;\r\n\r\n\r\nhttp://www.tutsplanet.com/open-url-new-tab-using-javascript/"},{"score":390,"body_markdown":"`window.open()` will not open in a new tab if it is not happening on the actual click event. In the example given the URL is being opened on the actual click event. **This will work provided the user has appropriate settings in the browser**.\r\n\r\n    &lt;a class=&quot;link&quot;&gt;Link&lt;/a&gt;\r\n    &lt;script  type=&quot;text/javascript&quot;&gt;\r\n         $(&quot;a.link&quot;).on(&quot;click&quot;,function(){\r\n             window.open(&#39;www.yourdomain.com&#39;,&#39;_blank&#39;);\r\n         });\r\n    &lt;/script&gt;\r\n\r\nSimilarly, if you are trying to do an Ajax call within the click function and want to open a window on success, ensure you are doing the Ajax call with the `async : false` option set.\r\n"},{"score":-9,"body_markdown":"The browser will always open the link in a new tab if the link is on the same domain (on the same website). If the link is on some other domain it will open it in a new tab/window, depending on browser settings.\r\n\r\nSo, according to this, we can use:\r\n\r\n    &lt;a class=&quot;my-link&quot; href=&quot;http://www.mywebsite.com&quot; rel=&quot;http://www.otherwebsite.com&quot;&gt;new tab&lt;/a&gt;\r\n\r\nAnd add some jQuery code:\r\n\r\n    jQuery(document).ready(function () {\r\n        jQuery(&quot;.my-link&quot;).on(&quot;click&quot;,function(){\r\n            var w = window.open(&#39;http://www.mywebsite.com&#39;,&#39;_blank&#39;);\r\n            w.focus();\r\n            w.location.href = jQuery(this).attr(&#39;rel&#39;);\r\n            return false;\r\n        });\r\n    });\r\n\r\nSo, first open new window on same website with _blank target (it will open it in new tab), and then open your desired website inside that new window.\r\n\r\n"},{"score":-7,"body_markdown":"If you only want to open the external links (links that go to other sites) then this bit of JavaScript/jQuery works well:\r\n\r\n    $(function(){\r\n        var hostname = window.location.hostname.replace(&#39;www.&#39;, &#39;&#39;);\r\n        $(&#39;a&#39;).each(function(){\r\n            var link_host = $(this).attr(&#39;hostname&#39;).replace(&#39;www.&#39;, &#39;&#39;);\r\n            if (link_host !== hostname) {\r\n                $(this).attr(&#39;target&#39;, &#39;_blank&#39;);\r\n            }\r\n        });\r\n    });\r\n"},{"score":19,"body_markdown":"An interesting fact is that the new tab can not be opened if the action is not invoked by the user (clicking a button or something) or if it is asynchronous, for example, this will NOT open in new tab:\r\n\r\n    $.ajax({\r\n        url: &quot;url&quot;,\r\n        type: &quot;POST&quot;,\r\n        success: function() {\r\n            window.open(&#39;url&#39;, &#39;_blank&#39;);              \r\n        }\r\n    });\r\n\r\nBut this may open in a new tab, depending on browser settings:\r\n\r\n    $.ajax({\r\n        url: &quot;url&quot;,\r\n        type: &quot;POST&quot;,\r\n        async: false,\r\n        success: function() {\r\n            window.open(&#39;url&#39;, &#39;_blank&#39;);              \r\n        }\r\n    });\r\n"},{"score":12,"body_markdown":"    (function(a){\r\n    document.body.appendChild(a);\r\n    a.setAttribute(&#39;href&#39;, location.href);\r\n    a.dispatchEvent((function(e){\r\n        e.initMouseEvent(&quot;click&quot;, true, true, window, 0, 0, 0, 0, 0, true, false, false, false, 0, null);\r\n        return e\r\n    }(document.createEvent(&#39;MouseEvents&#39;))))}(document.createElement(&#39;a&#39;)))"},{"score":3,"body_markdown":"Or you could just create a link element and click it...\r\n\r\n    var evLink = document.createElement(&#39;a&#39;);\r\n    evLink.href = &#39;http://&#39; + strUrl;\r\n    evLink.target = &#39;_blank&#39;;\r\n    document.body.appendChild(evLink);\r\n    evLink.click();\r\n    // Now delete it\r\n    evLink.parentNode.removeChild(evLink);\r\n\r\nThis shouldn&#39;t be blocked by any popup blockers... Hopefully."},{"score":11,"body_markdown":"**This has nothing to do with browser settings** if you are trying to open a new tab from a custom function.\r\n\r\nIn this page, open a JavaScript console and type:\r\n\r\n&lt;!-- language: js --&gt;\r\n\r\n    document.getElementById(&quot;nav-questions&quot;).setAttribute(&quot;target&quot;, &quot;_blank&quot;);\r\n    document.getElementById(&quot;nav-questions&quot;).click();\r\n\r\n\r\nAnd it will try to open a popup regardless of your settings, because the &#39;click&#39; comes from a custom action.\r\n\r\nIn order to behave like an actual &#39;mouse click&#39; on a link, you need to follow [@spirinvladimir&#39;s advice](https://stackoverflow.com/a/19464494/676002) and *really* create it:\r\n\r\n&lt;!-- language: js --&gt;\r\n\r\n    document.getElementById(&quot;nav-questions&quot;).setAttribute(&quot;target&quot;, &quot;_blank&quot;);\r\n    document.getElementById(&quot;nav-questions&quot;).dispatchEvent((function(e){\r\n      e.initMouseEvent(&quot;click&quot;, true, true, window, 0, 0, 0, 0, 0,\r\n                        false, false, false, false, 0, null);\r\n      return e\r\n    }(document.createEvent(&#39;MouseEvents&#39;))));\r\n\r\nHere is a complete example (do not try it on [jsFiddle][1] or similar online editors, as it will not let you redirect to external pages from there):\r\n\r\n    &lt;!DOCTYPE html&gt;\r\n    &lt;html&gt;\r\n    &lt;head&gt;\r\n      &lt;style&gt;\r\n        #firing_div {\r\n          margin-top: 15px;\r\n          width: 250px;\r\n          border: 1px solid blue;\r\n          text-align: center;\r\n        }\r\n      &lt;/style&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n      &lt;a id=&quot;my_link&quot; href=&quot;http://www.google.com&quot;&gt; Go to Google &lt;/a&gt;\r\n      &lt;div id=&quot;firing_div&quot;&gt; Click me to trigger custom click &lt;/div&gt;\r\n    &lt;/body&gt;\r\n    &lt;script&gt;\r\n      function fire_custom_click() {\r\n        alert(&quot;firing click!&quot;);\r\n        document.getElementById(&quot;my_link&quot;).dispatchEvent((function(e){\r\n          e.initMouseEvent(&quot;click&quot;, true, true, window, /* type, canBubble, cancelable, view */\r\n    \t\t\t0, 0, 0, 0, 0,              /* detail, screenX, screenY, clientX, clientY */\r\n    \t\t\tfalse, false, false, false, /* ctrlKey, altKey, shiftKey, metaKey */\r\n    \t\t\t0, null);                   /* button, relatedTarget */\r\n          return e\r\n        }(document.createEvent(&#39;MouseEvents&#39;))));\r\n      }\r\n      document.getElementById(&quot;firing_div&quot;).onclick = fire_custom_click;\r\n    &lt;/script&gt;\r\n    &lt;/html&gt;\r\n\r\n  [1]: http://jsfiddle.net/\r\n"},{"score":0,"body_markdown":"How about creating an `&lt;a&gt;` with `_blank` as `target` attribute value and the `url` as `href`, with style display:hidden with a a children element? Then add to the DOM and then trigger the click event on a children element.\r\n\r\n## UPDATE ##\r\n\r\nThat doesn&#39;t work. The browser prevents the default behaviour. It could be triggered programmatically, but it doesn&#39;t follow the default behaviour.\r\n\r\nCheck and see for yourself: http://jsfiddle.net/4S4ET/\r\n"},{"score":254,"body_markdown":"# `window.open` Cannot Reliably Open Popups in a New Tab in All Browsers\r\n\r\n**Different browsers implement the behavior of** `window.open` **in different ways, especially with regard to a user&#39;s browser preferences.** You cannot expect the same behavior for `window.open` to be true across all of Internet Explorer, Firefox, and Chrome, because of the different ways in which they handle a user&#39;s browser preferences.\r\n\r\nFor example, Internet&amp;nbsp;Explorer (11) users can choose to open popups in a new window or a new tab, **you cannot force Internet&amp;nbsp;Explorer&amp;nbsp;11 users to open popups in a certain way through** `window.open`, as alluded to in [Quentin&#39;s answer][quentin].\r\n\r\nAs for Firefox (29) users, using `window.open(url, &#39;_blank&#39;)` **depends on their browser&#39;s tab preferences,** though you can still force them to open popups in a new window by specifying a width and height (see &quot;What About Chrome?&quot; section below).\r\n\r\n# Demonstration\r\n\r\nGo to your browser&#39;s settings and configure it to open popups in a new window.\r\n\r\n## Internet Explorer (11)\r\n\r\n![Internet&amp;nbsp;Explorer settings dialog 1][2]\r\n\r\n![Internet&amp;nbsp;Explorer tab settings dialog][3]\r\n\r\n## Test Page\r\n\r\nAfter setting up Internet Explorer (11) to open popups in a new window as demonstrated above, use the following test page to test `window.open`:\r\n\r\n    &lt;!DOCTYPE html&gt;\r\n    &lt;html&gt;\r\n      &lt;head&gt;\r\n        &lt;title&gt;Test&lt;/title&gt;\r\n      &lt;/head&gt;\r\n\r\n      &lt;body&gt;\r\n        &lt;button onclick=&quot;window.open(&#39;https://stackoverflow.com/q/4907843/456814&#39;);&quot;&gt;\r\n          &lt;code&gt;window.open(url)&lt;/code&gt;\r\n        &lt;/button&gt;\r\n        &lt;button onclick=&quot;window.open(&#39;https://stackoverflow.com/q/4907843/456814&#39;, &#39;_blank&#39;);&quot;&gt;\r\n          &lt;code&gt;window.open(url, &#39;_blank&#39;)&lt;/code&gt;\r\n        &lt;/button&gt;\r\n      &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\nObserve that the popups are opened ***in a new window, not a new tab.***\r\n\r\nYou can also test those snippets above in Firefox (29) with its tab preference set to new windows, and see the same results.\r\n\r\n# What About Chrome? It Implements `window.open` Differently from Internet&amp;nbsp;Explorer (11) and Firefox (29).\r\n\r\nI&#39;m not 100% sure, but it looks like Chrome (version `34.0.1847.131 m`) does not appear to have any settings that the user can use to choose whether or not to open popups in a new window or a new tab (like Firefox and Internet&amp;nbsp;Explorer have). I checked [the Chrome documentation for managing pop-ups][chrome], but it didn&#39;t mention anything about that sort of thing.\r\n\r\nAlso, **once again, different browsers seem to implement the behavior of** `window.open` **differently.** In Chrome and Firefox, ***specifying a width and height will force a popup,*** even when a user has set Firefox (29) to open new windows in a new tab (as mentioned in the answers to [JavaScript open in a new window, not tab][other]):\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;!DOCTYPE html&gt;\r\n    &lt;html&gt;\r\n      &lt;head&gt;\r\n        &lt;title&gt;Test&lt;/title&gt;\r\n      &lt;/head&gt;\r\n\r\n      &lt;body&gt;\r\n        &lt;button onclick=&quot;window.open(&#39;https://stackoverflow.com/q/4907843/456814&#39;, &#39;test&#39;, &#39;width=400, height=400&#39;);&quot;&gt;\r\n          &lt;code&gt;window.open(url)&lt;/code&gt;\r\n        &lt;/button&gt;\r\n      &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\nHowever, the same code snippet above **will always open a new tab in Internet&amp;nbsp;Explorer&amp;nbsp;11 if users set tabs as their browser preferences,** not even specifying a width and height will force a new window popup for them.\r\n\r\nSo the behavior of `window.open` in Chrome seems to be to open popups in a new tab when used in an `onclick` event, to open them in new windows when used from the browser console ([as noted by other people][note]), and to open them in new windows when specified with a width and a height.\r\n\r\n# Summary\r\n\r\n**Different browsers implement the behavior of** `window.open` **differently with regard to users&#39; browser preferences.** You cannot expect the same behavior for `window.open` to be true across all of Internet Explorer, Firefox, and Chrome, because of the different ways in which they handle a user&#39;s browser preferences.\r\n\r\n# Additional Reading\r\n\r\n* [`window.open` documentation][doc].\r\n\r\n [quentin]: https://stackoverflow.com/a/4907854/456814\r\n [1]: http://i.stack.imgur.com/JSlDW.png\r\n [2]: http://i.stack.imgur.com/IYWRU.png\r\n [3]: http://i.stack.imgur.com/8j8Yu.png\r\n [note]: https://stackoverflow.com/questions/4907843/open-a-url-in-a-new-tab-using-javascript#comment22514382_13158856\r\n [chrome]: https://support.google.com/chrome/answer/95472?hl=en\r\n [doc]: https://developer.mozilla.org/en-US/docs/Web/API/Window.open\r\n [other]: https://stackoverflow.com/q/726761/456814\r\n"},{"score":-4,"body_markdown":"I&#39;m going to agree somewhat with the person who wrote (paraphrased here): &quot;For a link in an existing web page, the browser will always open the link in a new tab if the new page is part of the same web site as the existing web page.&quot;  For me, at least, this &quot;general rule&quot; works in Chrome, Firefox, Opera, IE, Safari, SeaMonkey, and Konqueror.\r\n\r\nAnyway, there is a less complicated way to take advantage of what the other person presented.  Assuming we are talking about your own web site (&quot;thissite.com&quot; below), where you want to control what the browser does, then, below, you want &quot;specialpage.htm&quot; to be EMPTY, no HTML at all in it (saves time sending data from the server!).\r\n\r\n     var wnd, URL;  //global variables\r\n\r\n     //specifying &quot;_blank&quot; in window.open() is SUPPOSED to keep the new page from replacing the existing page\r\n     wnd = window.open(&quot;http://www.thissite.com/specialpage.htm&quot;, &quot;_blank&quot;); //get reference to just-opened page\r\n     //if the &quot;general rule&quot; above is true, a new tab should have been opened.\r\n     URL = &quot;http://www.someothersite.com/desiredpage.htm&quot;;  //ultimate destination\r\n     setTimeout(gotoURL(),200);  //wait 1/5 of a second; give browser time to create tab/window for empty page\r\n    \r\n\r\n     function gotoURL()\r\n     { wnd.open(URL, &quot;_self&quot;);  //replace the blank page, in the tab, with the desired page\r\n       wnd.focus();             //when browser not set to automatically show newly-opened page, this MAY work\r\n     }"},{"score":-9,"body_markdown":"Somehow a [website][1] can do it. (I don&#39;t have the time to extract it from this mess, but this is the code)\r\n\r\n    if (!Array.prototype.indexOf)\r\n        Array.prototype.indexOf = function(searchElement, fromIndex) {\r\n            if (this === undefined || this === null)\r\n                throw new TypeError(&#39;&quot;this&quot; is null or not defined&#39;);\r\n            var length = this.length &gt;&gt;&gt; 0;\r\n            fromIndex = +fromIndex || 0;\r\n            if (Math.abs(fromIndex) === Infinity)\r\n                fromIndex = 0;\r\n            if (fromIndex &lt; 0) {\r\n                fromIndex += length;\r\n                if (fromIndex &lt; 0)\r\n                    fromIndex = 0\r\n            }\r\n            for (; fromIndex &lt; length; fromIndex++)\r\n                if (this[fromIndex] === searchElement)\r\n                    return fromIndex;\r\n            return -1\r\n        };\r\n    (function Popunder(options) {\r\n        var _parent, popunder, posX, posY, cookieName, cookie, browser, numberOfTimes, expires = -1,\r\n            wrapping, url = &quot;&quot;,\r\n            size, frequency, mobilePopupDisabled = options.mobilePopupDisabled;\r\n        if (this instanceof Popunder === false)\r\n            return new Popunder(options);\r\n        try {\r\n            _parent = top != self &amp;&amp; typeof top.document.location.toString() === &quot;string&quot; ? top : self\r\n        } catch (e) {\r\n            _parent = self\r\n        }\r\n        cookieName = &quot;adk2_popunder&quot;;\r\n        popunder = null;\r\n        browser = function() {\r\n            var n = navigator.userAgent.toLowerCase(),\r\n                b = {\r\n                    webkit: /webkit/.test(n),\r\n                    mozilla: /mozilla/.test(n) &amp;&amp; !/(compatible|webkit)/.test(n),\r\n                    chrome: /chrome/.test(n),\r\n                    msie: /msie/.test(n) &amp;&amp; !/opera/.test(n),\r\n                    firefox: /firefox/.test(n),\r\n                    safari: /safari/.test(n) &amp;&amp; !/chrome/.test(n),\r\n                    opera: /opera/.test(n)\r\n                };\r\n            b.version = b.safari ? (n.match(/.+(?:ri)[\\/: ]([\\d.]+)/) || [])[1] : (n.match(/.+(?:ox|me|ra|ie)[\\/:]([\\d.]+)/) || [])[1];\r\n            return b\r\n        }();\r\n        initOptions(options);\r\n    \r\n        function initOptions(options) {\r\n            options = options || {};\r\n            if (options.wrapping)\r\n                wrapping = options.wrapping;\r\n            else {\r\n                options.serverdomain = options.serverdomain || &quot;ads.adk2.com&quot;;\r\n                options.size = options.size || &quot;800x600&quot;;\r\n                options.ci = &quot;3&quot;;\r\n                var arr = [],\r\n                    excluded = [&quot;serverdomain&quot;, &quot;numOfTimes&quot;, &quot;duration&quot;, &quot;period&quot;];\r\n                for (var p in options)\r\n                    options.hasOwnProperty(p) &amp;&amp; options[p].toString() &amp;&amp; excluded.indexOf(p) === -1 &amp;&amp; arr.push(p + &quot;=&quot; + encodeURIComponent(options[p]));\r\n                url = &quot;http://&quot; + options.serverdomain + &quot;/player.html?rt=popunder&amp;&quot; + arr.join(&quot;&amp;&quot;)\r\n            }\r\n            if (options.size) {\r\n                size = options.size.split(&quot;x&quot;);\r\n                options.width = size[0];\r\n                options.height = size[1]\r\n            }\r\n            if (options.frequency) {\r\n                frequency = /([0-9]+)\\/([0-9]+)(\\w)/.exec(options.frequency);\r\n                options.numOfTimes = +frequency[1];\r\n                options.duration = +frequency[2];\r\n                options.period = ({\r\n                    m: &quot;minute&quot;,\r\n                    h: &quot;hour&quot;,\r\n                    d: &quot;day&quot;\r\n                })[frequency[3].toLowerCase()]\r\n            }\r\n            if (options.period)\r\n                switch (options.period.toLowerCase()) {\r\n                    case &quot;minute&quot;:\r\n                        expires = options.duration * 60 * 1e3;\r\n                        break;\r\n                    case &quot;hour&quot;:\r\n                        expires = options.duration * 60 * 60 * 1e3;\r\n                        break;\r\n                    case &quot;day&quot;:\r\n                        expires = options.duration * 24 * 60 * 60 * 1e3\r\n                }\r\n            posX = typeof options.left != &quot;undefined&quot; ? options.left.toString() : window.screenX;\r\n            posY = typeof options.top != &quot;undefined&quot; ? options.top.toString() : window.screenY;\r\n            numberOfTimes = options.numOfTimes\r\n        }\r\n    \r\n        function getCookie(name) {\r\n            try {\r\n                var parts = document.cookie.split(name + &quot;=&quot;);\r\n                if (parts.length == 2)\r\n                    return unescape(parts.pop().split(&quot;;&quot;).shift()).split(&quot;|&quot;)\r\n            } catch (err) {}\r\n        }\r\n    \r\n        function setCookie(value, expiresDate) {\r\n            expiresDate = cookie[1] || expiresDate.toGMTString();\r\n            document.cookie = cookieName + &quot;=&quot; + escape(value + &quot;|&quot; + expiresDate) + &quot;;expires=&quot; + expiresDate + &quot;;path=/&quot;\r\n        }\r\n    \r\n        function addEvent(listenerEvent) {\r\n            if (document.addEventListener)\r\n                document.addEventListener(&quot;click&quot;, listenerEvent, false);\r\n            else\r\n                document.attachEvent(&quot;onclick&quot;, listenerEvent)\r\n        }\r\n    \r\n        function removeEvent(listenerEvent) {\r\n            if (document.removeEventListener)\r\n                document.removeEventListener(&quot;click&quot;, listenerEvent, false);\r\n            else\r\n                document.detachEvent(&quot;onclick&quot;, listenerEvent)\r\n        }\r\n    \r\n        function isCapped() {\r\n            cookie = getCookie(cookieName) || [];\r\n            return !!numberOfTimes &amp;&amp; +numberOfTimes &lt;= +cookie[0]\r\n        }\r\n    \r\n        function pop() {\r\n            var features = &quot;type=fullWindow, fullscreen, scrollbars=yes&quot;,\r\n                listenerEvent = function() {\r\n                    var now, next;\r\n                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))\r\n                        if (mobilePopupDisabled)\r\n                            return;\r\n                    if (isCapped())\r\n                        return;\r\n                    if (browser.chrome &amp;&amp; parseInt(browser.version.split(&quot;.&quot;)[0], 10) &gt; 30 &amp;&amp; adParams.openNewTab) {\r\n                        now = new Date;\r\n                        next = new Date(now.setTime(now.getTime() + expires));\r\n                        setCookie((+cookie[0] || 0) + 1, next);\r\n                        removeEvent(listenerEvent);\r\n                        window.open(&quot;javascript:window.focus()&quot;, &quot;_self&quot;, &quot;&quot;);\r\n                        simulateClick(url);\r\n                        popunder = null\r\n                    } else\r\n                        popunder = _parent.window.open(url, Math.random().toString(36).substring(7), features);\r\n                    if (wrapping) {\r\n                        popunder.document.write(&quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&quot; + unescape(wrapping || &quot;&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;);\r\n                        popunder.document.body.style.margin = 0\r\n                    }\r\n                    if (popunder) {\r\n                        now = new Date;\r\n                        next = new Date(now.setTime(now.getTime() + expires));\r\n                        setCookie((+cookie[0] || 0) + 1, next);\r\n                        moveUnder();\r\n                        removeEvent(listenerEvent)\r\n                    }\r\n                };\r\n            addEvent(listenerEvent)\r\n        }\r\n        var simulateClick = function(url) {\r\n            var a = document.createElement(&quot;a&quot;),\r\n                u = !url ? &quot;data:text/html,&lt;script&gt;window.close();&lt;\\/script&gt;;&quot; : url,\r\n                evt = document.createEvent(&quot;MouseEvents&quot;);\r\n            a.href = u;\r\n            document.body.appendChild(a);\r\n            evt.initMouseEvent(&quot;click&quot;, true, true, window, 0, 0, 0, 0, 0, true, false, false, true, 0, null);\r\n            a.dispatchEvent(evt);\r\n            a.parentNode.removeChild(a)\r\n        };\r\n    \r\n        function moveUnder() {\r\n            try {\r\n                popunder.blur();\r\n                popunder.opener.window.focus();\r\n                window.self.window.focus();\r\n                window.focus();\r\n                if (browser.firefox)\r\n                    openCloseWindow();\r\n                else if (browser.webkit)\r\n                    openCloseTab();\r\n                else\r\n                    browser.msie &amp;&amp; setTimeout(function() {\r\n                        popunder.blur();\r\n                        popunder.opener.window.focus();\r\n                        window.self.window.focus();\r\n                        window.focus()\r\n                    }, 1e3)\r\n            } catch (e) {}\r\n        }\r\n    \r\n        function openCloseWindow() {\r\n            var tmp = popunder.window.open(&quot;about:blank&quot;);\r\n            tmp.focus();\r\n            tmp.close();\r\n            setTimeout(function() {\r\n                try {\r\n                    tmp = popunder.window.open(&quot;about:blank&quot;);\r\n                    tmp.focus();\r\n                    tmp.close()\r\n                } catch (e) {}\r\n            }, 1)\r\n        }\r\n    \r\n        function openCloseTab() {\r\n            var ghost = document.createElement(&quot;a&quot;),\r\n                clk;\r\n            document.getElementsByTagName(&quot;body&quot;)[0].appendChild(ghost);\r\n            clk = document.createEvent(&quot;MouseEvents&quot;);\r\n            clk.initMouseEvent(&quot;click&quot;, false, true, window, 0, 0, 0, 0, 0, true, false, false, true, 0, null);\r\n            ghost.dispatchEvent(clk);\r\n            ghost.parentNode.removeChild(ghost);\r\n            window.open(&quot;about:blank&quot;, &quot;PopHelper&quot;).close()\r\n        }\r\n        pop()\r\n    })(adParams)\r\n\r\n\r\n  [1]: http://www.wareztuga.tv/"},{"score":0,"body_markdown":"This might be a hack, but in Firefox if you specify a third parameter, &#39;fullscreen=yes&#39;, it opens a fresh new window.\r\n\r\nFor example,\r\n\r\n    &lt;a href=&quot;#&quot; onclick=&quot;window.open(&#39;MyPDF.pdf&#39;, &#39;_blank&#39;, &#39;fullscreen=yes&#39;); return false;&quot;&gt;MyPDF&lt;/a&gt;\r\n\r\nIt seems to actually override the browser settings.\r\n\r\n"},{"score":-1,"body_markdown":"Opening a new tab from within a Firefox (Mozilla) extension goes like this:\r\n\r\n    gBrowser.selectedTab = gBrowser.addTab(&quot;http://example.com&quot;);"},{"score":13,"body_markdown":"Just omitting [strWindowFeatures] parameters will open a new tab, UNLESS the browser setting overrides (browser setting trumps JavaScript).\r\n\r\n###New window\r\n\r\n    var myWin = window.open(strUrl, strWindowName, [strWindowFeatures]);\r\n\r\n###New tab\r\n\r\n\r\n    var myWin = window.open(strUrl, strWindowName);\r\n\r\n-- or --\r\n\r\n    var myWin = window.open(strUrl);\r\n"},{"score":254,"body_markdown":"One liner:\r\n\r\n    Object.assign(document.createElement(&#39;a&#39;), { target: &#39;_blank&#39;, href: &#39;URL_HERE&#39;}).click();\r\n\r\nIt creates a virtual `a` element, gives it `target=&quot;_blank&quot;` so it opens in a new tab, gives it proper `url` `href` and then clicks it.\r\n\r\nAnd if you want, based on that you can create some function:\r\n\r\n    function openInNewTab(href) {\r\n      Object.assign(document.createElement(&#39;a&#39;), {\r\n        target: &#39;_blank&#39;,\r\n        href: href,\r\n      }).click();\r\n    }\r\n\r\nand then you can use it like:\r\n\r\n    openInNewTab(&quot;https://google.com&quot;); \r\n\r\nImportant note:\r\n\r\n`openInNewTab` (as well as any other solution on this page) must be called during user action callback - eg. inside click event (not necessary in callback function directly, but during click action).\r\n\r\nIf you&#39;ll call it manually in some random moment (eg. inside an interval or after server response) - it might be blocked by the browser (which makes sense as it&#39;d be a security risk and might lead to very poor user experience)"},{"score":-1,"body_markdown":"This way is similar to the above solution but implemented differently  \r\n\r\n.social_icon -&gt; some class with CSS  \r\n\r\n     &lt;div class=&quot;social_icon&quot; id=&quot;SOME_ID&quot; data-url=&quot;SOME_URL&quot;&gt;&lt;/div&gt;\r\n\r\n\r\n     $(&#39;.social_icon&#39;).click(function(){\r\n            \r\n            var url = $(this).attr(&#39;data-url&#39;);\r\n            var win = window.open(url, &#39;_blank&#39;);  ///similar to above solution\r\n            win.focus();\r\n       });"},{"score":93,"body_markdown":"If you use `window.open(url, &#39;_blank&#39;)`, it will be blocked (popup blocker) on Chrome.\r\n\r\nTry this:\r\n    \r\n    //With JQuery\r\n\r\n    $(&#39;#myButton&#39;).click(function () {\r\n        var redirectWindow = window.open(&#39;http://google.com&#39;, &#39;_blank&#39;);\r\n        redirectWindow.location;\r\n    });\r\n \r\n\r\nWith pure JavaScript,\r\n\r\n    document.querySelector(&#39;#myButton&#39;).onclick = function() {\r\n        var redirectWindow = window.open(&#39;http://google.com&#39;, &#39;_blank&#39;);\r\n        redirectWindow.location;\r\n    };"},{"score":12,"body_markdown":"You can use a trick with `form`:\r\n\r\n    $(function () {\r\n        $(&#39;#btn&#39;).click(function () {\r\n            openNewTab(&quot;http://stackoverflow.com&quot;)\r\n            return false;\r\n        });\r\n    });\r\n\r\n    function openNewTab(link) {\r\n        var frm = $(&#39;&lt;form   method=&quot;get&quot; action=&quot;&#39; + link + &#39;&quot; target=&quot;_blank&quot;&gt;&lt;/form&gt;&#39;)\r\n        $(&quot;body&quot;).append(frm);\r\n        frm.submit().remove();\r\n    }\r\n\r\n[jsFiddle demo][1]\r\n\r\n  [1]: https://jsfiddle.net/b039wc1h/3/\r\n"},{"score":65,"body_markdown":"I use the following and it works very well!\r\n\r\n    window.open(url, &#39;_blank&#39;).focus();\r\n"},{"score":-1,"body_markdown":"this work for me, just prevent the event, add the url to an `&lt;a&gt;` `tag` then trigger the click event on that `tag`.\r\n\r\n\r\n    Js\r\n    $(&#39;.myBtn&#39;).on(&#39;click&#39;, function(event) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\t$(this).attr(&#39;href&#39;,&quot;http://someurl.com&quot;);\r\n\t\t\t$(this).trigger(&#39;click&#39;);\r\n\t});\r\n    HTML\r\n    &lt;a href=&quot;#&quot; class=&quot;myBtn&quot; target=&quot;_blank&quot;&gt;Go&lt;/a&gt;\r\n\r\n"},{"score":3,"body_markdown":"There is an answer to this question and it is not no.\r\n-----------------------------------------------------\r\n\r\n&gt; I found an easy work around:\r\n\r\nStep 1: Create an invisible link:\r\n\r\n`&lt;a id=&quot;yourId&quot; href=&quot;yourlink.html&quot; target=&quot;_blank&quot; style=&quot;display: none;&quot;&gt;&lt;/a&gt;`\r\n\r\nStep 2: Click on that link programmatically:\r\n\r\n`document.getElementById(&quot;yourId&quot;).click();`\r\n\r\nHere you go! Works a charm for me."},{"score":10,"body_markdown":"    function openTab(url) {\r\n      const link = document.createElement(&#39;a&#39;);\r\n      link.href = url;\r\n      link.target = &#39;_blank&#39;;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.remove();\r\n    }\r\n\r\n"},{"score":4,"body_markdown":"JQuery\r\n \r\n\r\n    $(&#39;&lt;a /&gt;&#39;,{&#39;href&#39;: url, &#39;target&#39;: &#39;_blank&#39;}).get(0).click();\r\n\r\nJS\r\n\r\n    Object.assign(document.createElement(&#39;a&#39;), { target: &#39;_blank&#39;, href: &#39;URL_HERE&#39;}).click();"},{"score":3,"body_markdown":"[![enter image description here][1]][1]\r\n\r\nI researched a lot of information about how to open new tab and stay on the same tab. I have found one small trick to do it.\r\nLets assume you have url which you need to open - **newUrl** and old url - **currentUrl**, which you need to stay on after new tab opened.\r\nJS code will look something like next:\r\n\r\n    // init urls\r\n    let newUrl = &#39;http://example.com&#39;;\r\n    let currentUrl = window.location.href;\r\n    // open window with url of current page, you will be automatically moved \r\n    // by browser to a new opened tab. It will look like your page is reloaded\r\n    // and you will stay on same page but with new page opened\r\n    window.open(currentUrl , &#39;_blank&#39;);\r\n    // on your current tab will be opened new url\r\n    location.href = newUrl;\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/RCgV9.gif"},{"score":-1,"body_markdown":"The `window.open(url)` will open url in new browser Tab. Belowe JS alternative to it\r\n\r\n    let a= document.createElement(&#39;a&#39;);\r\n    a.target= &#39;_blank&#39;;\r\n    a.href= &#39;https://support.wwf.org.uk/&#39;;\r\n    a.click(); // we don&#39;t need to remove &#39;a&#39; from DOM because we not add it\r\n\r\nhere is working [example](https://jsfiddle.net/Lamik/L4wax19t/) (stackoverflow snippets not allow to opening new tab)"},{"score":1,"body_markdown":"Whether to open the URL in a new tab or a new window, is actually controlled by the user&#39;s browser preferences. There is no way to override it in JavaScript.   \r\n\r\n`window.open()` behaves differently depending on how it is being used. If it is **called as a direct result of a user action**, let us say a button click, it should work fine and open a new tab (or window):\r\n\r\n```js\r\nconst button = document.querySelector(&#39;#openTab&#39;);\r\n\r\n// add click event listener\r\nbutton.addEventListener(&#39;click&#39;, () =&gt; {\r\n    // open a new tab\r\n    const tab = window.open(&#39;https://attacomsian.com&#39;, &#39;_blank&#39;);\r\n});\r\n```\r\n\r\nHowever, if you try to **open a new tab from an AJAX request callback**, the browser will block it as it was not a direct user action.\r\n\r\nTo **bypass the popup blocker** and open a new tab from a callback, here is a [little hack](https://attacomsian.com/blog/javascript-open-url-in-new-tab#asynchronous-http-request):\r\n\r\n```js\r\nconst button = document.querySelector(&#39;#openTab&#39;);\r\n\r\n// add click event listener\r\nbutton.addEventListener(&#39;click&#39;, () =&gt; {\r\n\r\n    // open an empty window\r\n    const tab = window.open(&#39;about:blank&#39;);\r\n\r\n    // make an API call\r\n    fetch(&#39;/api/validate&#39;)\r\n        .then(res =&gt; res.json())\r\n        .then(json =&gt; {\r\n\r\n            // TODO: do something with JSON response\r\n\r\n            // update the actual URL\r\n            tab.location = &#39;https://attacomsian.com&#39;;\r\n            tab.focus();\r\n        })\r\n        .catch(err =&gt; {\r\n            // close the empty window\r\n            tab.close();\r\n        });\r\n});\r\n```"},{"score":-2,"body_markdown":"I tried this way and it seems to work fine\r\n\r\n```javascript\r\nwindow.open(&#39;example.com&#39;, &#39;newWin&#39;);\r\n```\r\n\r\nI have found a lot of working examples here:\r\n\r\nhttp://www.gtalbot.org/FirefoxSection/Popup/PopupAndFirefox.html#TestPopupControl"},{"score":0,"body_markdown":"**Do not use target=&quot;_blank&quot;**\r\n\r\nAlways use specific name for that window  in my case `meaningfulName`, in this case you save processor resource:\r\n\r\n    button.addEventListener(&#39;click&#39;, () =&gt; {\r\n        window.open(&#39;https://google.com&#39;, &#39;meaningfulName&#39;)\r\n    })\r\n\r\nOn this way when you click for example 10 times on button, browser will always re-render it in one new tab, instead of opening it in 10 different tabs which will consume much more resources.\r\n\r\nYou can read more about this on `MDN`."},{"score":-1,"body_markdown":"There are lots of answer copies suggesting using &quot;_blank&quot; as the target, however I found this didn&#39;t work. As Prakash notes, it is up to the browser. However, you can make certain suggestions to the browser, such as to whether the window should have a location bar.\r\n\r\nIf you suggest enough ***&quot;tab-like things&quot;*** you ***might*** get a tab, [as per Nico&#39;s answer to this more specific question for chrome][1]:\r\n\r\n    window.open(&#39;http://www.stackoverflow.com&#39;, &#39;_blank&#39;, &#39;toolbar=yes, location=yes, status=yes, menubar=yes, scrollbars=yes&#39;);\r\n    \r\nDisclaimer: This is not a panacea. It is still up to the user and browser. Now at least you&#39;ve specified one more preference for what you&#39;d like your window to look like.\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/15818892/chrome-javascript-window-open-in-new-tab"}],"score":2259}