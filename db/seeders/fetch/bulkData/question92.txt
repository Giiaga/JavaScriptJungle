{"body":"`console.log(&quot;double&quot;);` vs. `console.log(&#39;single&#39;);`\r\n\r\nI see more and more JavaScript libraries out there using single quotes when handling strings. What are the reasons to use one over the other?\r\n\r\nI thought they&#39;re pretty much interchangeable.\r\n\r\n","title":"When should I use double or single quotes in JavaScript?","answers":[{"score":1263,"body_markdown":"The most likely reason for use of single vs. double in different libraries is programmer preference and/or API consistency. Other than being consistent, use whichever best suits the string.\r\n\r\nUsing the other type of quote as a literal:\r\n\r\n    alert(&#39;Say &quot;Hello&quot;&#39;);\r\n    alert(&quot;Say &#39;Hello&#39;&quot;);\r\n\r\nThis can get complicated:\r\n\r\n    alert(&quot;It&#39;s \\&quot;game\\&quot; time.&quot;);\r\n    alert(&#39;It\\&#39;s &quot;game&quot; time.&#39;);\r\n\r\nAnother option, new in ECMAScript&amp;nbsp;6, is [template literals][1] which use the *backtick* character:\r\n\r\n    alert(`Use &quot;double&quot; and &#39;single&#39; quotes in the same string`);\r\n    alert(`Escape the \\` back-tick character and the \\${ dollar-brace sequence in a string`);\r\n\r\nTemplate literals offer a clean syntax for: variable interpolation, multi-line strings, and more.\r\n\r\nNote that [JSON][2] is formally specified to use double quotes, which may be worth considering depending on system requirements.\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\r\n  [2]: https://jsonlint.com/\r\n\r\n\r\n\r\n\r\n"},{"score":6,"body_markdown":"There are people that claim to see performance differences: [old mailing list thread][1]. But I couldn&#39;t find any of them to be confirmed.\r\n\r\nThe main thing is to look at what kind of quotes (double or single) you are using inside your string. It helps to keep the number of escapes low. For instance, when you are working with HTML content inside your strings, it is easier to use single quotes so that you don&#39;t have to escape all double quotes around the attributes.\r\n\r\n  [1]: http://lists.evolt.org/pipermail/javascript/2003-November/006168.html\r\n\r\n\r\n\r\n"},{"score":4,"body_markdown":"There is strictly no difference, so it is mostly a matter of taste and of what is in the string (or if the JavaScript code itself is in a string), to keep number of escapes low.\r\n\r\nThe speed difference legend might come from PHP world, where the two quotes have different behavior.\r\n\r\n"},{"score":27,"body_markdown":"Strictly speaking, there is no difference in meaning; so the choice comes down to convenience.\r\n\r\nHere are several factors that could influence your choice:\r\n\r\n* House style: Some groups of developers already use one convention or the other.\r\n* Client-side requirements: Will you be using quotes within the strings? (See [Ady&#39;s answer][1].)\r\n* Server-side language: VB.NET people might choose to use single quotes for JavaScript so that the scripts can be built server-side (VB.NET uses double-quotes for strings, so the JavaScript strings are easy to distinguished if they use single quotes).\r\n* Library code: If you&#39;re using a library that uses a particular style, you might consider using the same style yourself.\r\n* Personal preference: You might think one or other style looks better.\r\n\r\n  [1]: https://stackoverflow.com/questions/242813/when-should-i-use-double-or-single-quotes-in-javascript/242833#242833\r\n"},{"score":2,"body_markdown":"The difference is purely stylistic. I used to be a double-quote Nazi. Now I use single quotes in nearly all cases. There&#39;s no practical difference beyond how your editor highlights the syntax."},{"score":120,"body_markdown":"Section 7.8.4 of the [specification][1] describes literal string notation. The only difference is that DoubleStringCharacter is &quot;SourceCharacter but not double-quote&quot; and SingleStringCharacter is &quot;SourceCharacter but not single-quote&quot;. So the **only** difference can be demonstrated thusly:\r\n\r\n    &#39;A string that\\&#39;s single quoted&#39;\r\n\r\n    &quot;A string that&#39;s double quoted&quot;\r\n\r\nSo it depends on how much quote escaping you want to do. Obviously the same applies to double quotes in double quoted strings.\r\n\r\n\r\n  [1]: https://www.ecma-international.org/publications/standards/Ecma-262.htm"},{"score":58,"body_markdown":"I&#39;d like to say the difference is purely stylistic, but I&#39;m really having my doubts. Consider the following example:\r\n\r\n    /*\r\n        Add trim() functionality to JavaScript...\r\n          1. By extending the String prototype\r\n          2. By creating a &#39;stand-alone&#39; function\r\n        This is just to demonstrate results are the same in both cases.\r\n    */\r\n\r\n    // Extend the String prototype with a trim() method\r\n    String.prototype.trim = function() {\r\n        return this.replace(/^\\s+|\\s+$/g, &#39;&#39;);\r\n    };\r\n\r\n    // &#39;Stand-alone&#39; trim() function\r\n    function trim(str) {\r\n        return str.replace(/^\\s+|\\s+$/g, &#39;&#39;);\r\n    };\r\n\r\n    document.writeln(String.prototype.trim);\r\n    document.writeln(trim);\r\n\r\nIn Safari, Chrome, Opera, and Internet Explorer (tested in [Internet&amp;nbsp;Explorer&amp;nbsp;7][1] and [Internet&amp;nbsp;Explorer&amp;nbsp;8][2]), this will return the following:\r\n\r\n    function () {\r\n        return this.replace(/^\\s+|\\s+$/g, &#39;&#39;);\r\n    }\r\n    function trim(str) {\r\n        return str.replace(/^\\s+|\\s+$/g, &#39;&#39;);\r\n    }\r\n\r\nHowever, Firefox will yield a slightly different result:\r\n\r\n    function () {\r\n        return this.replace(/^\\s+|\\s+$/g, &quot;&quot;);\r\n    }\r\n    function trim(str) {\r\n        return str.replace(/^\\s+|\\s+$/g, &quot;&quot;);\r\n    }\r\n\r\nThe single quotes have been replaced by double quotes. (Also note how the indenting space was replaced by four spaces.) This gives the impression that at least one browser parses JavaScript internally as if everything was written using double quotes. *One might think, it takes Firefox less time to parse JavaScript if everything is already written according to this &#39;standard&#39;.*\r\n\r\nWhich, by the way, makes me a very sad panda, since I think single quotes look much nicer in code. Plus, in other programming languages, they&#39;re usually faster to use than double quotes, so it would only make sense if the same applied to JavaScript.\r\n\r\n**Conclusion:** I think we need to do more research on this.\r\n\r\nThis might explain [Peter-Paul Koch&#39;s test results][3] from back in 2003.\r\n\r\n&gt; It seems that single quotes are *sometimes* faster in Explorer Windows (roughly 1/3 of my tests did show a faster response time), but if Mozilla shows a difference at all, it handles double quotes slightly faster. I found no difference at all in Opera.\r\n\r\n**2014:** Modern versions of Firefox/Spidermonkey donâ€™t do this anymore.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Internet_Explorer_7\r\n  [2]: https://en.wikipedia.org/wiki/Internet_Explorer_8\r\n  [3]: http://lists.evolt.org/pipermail/javascript/2003-November/006155.html\r\n\r\n"},{"score":1,"body_markdown":"I think it&#39;s important not to forget that while Internet&amp;nbsp;Explorer might have zero extensions/toolbars installed, Firefox might have some extensions installed (I&#39;m just thinking of [Firebug][1] for instance). Those extensions will have an influence on the benchmark result.\r\n\r\nNot that it really matters since browser X is faster in getting elementstyles, while browser Y might be faster in rendering a canvas element (hence why a browser &quot;manufacturer&quot; always has the fastest JavaScript engine).\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Firebug_%28software%29\r\n"},{"score":32,"body_markdown":"If you&#39;re doing inline JavaScript (arguably a &quot;bad&quot; thing, but avoiding that discussion) **single** quotes are your only option for string literals, I believe.\r\n\r\nE.g., this works fine:\r\n\r\n    &lt;a onclick=&quot;alert(&#39;hi&#39;);&quot;&gt;hi&lt;/a&gt;\r\n\r\nBut you can&#39;t wrap the &quot;hi&quot; in double quotes, via any escaping method I&#39;m aware of. Even &lt;b&gt;&lt;code&gt;&amp;amp;quot;&lt;/code&gt;&lt;/b&gt; which would have been my best guess (since you&#39;re escaping quotes in an attribute value of HTML) doesn&#39;t work for me in Firefox.  &lt;b&gt;&lt;code&gt;\\&quot;&lt;/code&gt;&lt;/b&gt; won&#39;t work either because at this point you&#39;re escaping for HTML, not JavaScript.\r\n\r\nSo, if the name of the game is consistency, and you&#39;re going to do some inline JavaScript in parts of your application, I think single quotes are the winner. Someone please correct me if I&#39;m wrong though.\r\n"},{"score":6,"body_markdown":"I would use double quotes when single quotes cannot be used and vice versa:\r\n\r\n    &quot;&#39;&quot; + singleQuotedValue + &quot;&#39;&quot;\r\n    &#39;&quot;&#39; + doubleQuotedValue + &#39;&quot;&#39;\r\n\r\nInstead of:\r\n\r\n    &#39;\\&#39;&#39; + singleQuotedValue + &#39;\\&#39;&#39;\r\n    &quot;\\&quot;&quot; + doubleQuotedValue + &quot;\\&quot;&quot;"},{"score":7,"body_markdown":"There isn&#39;t any difference between single and double quotes in JavaScript.\r\n\r\nThe specification is important:\r\n\r\nMaybe there are performance differences, but they are absolutely minimum and can change any day according to browsers&#39; implementation. Further discussion is futile unless your JavaScript application is hundreds of thousands lines long.\r\n\r\nIt&#39;s like a benchmark if\r\n\r\n    a=b;\r\n\r\nis faster than\r\n\r\n    a = b;\r\n\r\n(extra spaces)\r\n\r\ntoday, in a particular browser and platform, etc.\r\n\r\n\r\n"},{"score":6,"body_markdown":"I&#39;ve been running the following about 20 times. And it appears that double quotes are about 20% faster.\r\n\r\nThe fun part is, if you change part 2 and part 1 around, single quotes are about 20% faster.\r\n\r\n    //Part1\r\n    var r=&#39;&#39;;\r\n    var iTime3 = new Date().valueOf();\r\n    for(var j=0; j&lt;1000000; j++) {\r\n    \tr+=&#39;a&#39;;\r\n    }\r\n    var iTime4 = new Date().valueOf();\r\n    alert(&#39;With single quote : &#39; + (iTime4 - iTime3));\t\r\n    \r\n    //Part 2\t\t\t\t\r\n    var s=&quot;&quot;;\r\n    var iTime1 = new Date().valueOf();\r\n    for(var i=0; i&lt;1000000; i++) {\r\n    \ts += &quot;a&quot;;\r\n    }\r\n    var iTime2 = new Date().valueOf();\r\n    alert(&#39;With double quote: &#39; + (iTime2 - iTime1));\r\n"},{"score":632,"body_markdown":"If you&#39;re dealing with JSON, it should be noted that strictly speaking, JSON strings must be double quoted. Sure, many libraries support single quotes as well, but I had great problems in one of my projects before realizing that single quoting a string is in fact not according to JSON standards."},{"score":5,"body_markdown":"After reading all the answers that say it may be be faster or may be have advantages, I would say double quotes are better or may be faster too because the [Google Closure compiler][1] converts single quotes to double quotes. \r\n\r\n  [1]: http://closure-compiler.appspot.com/home\r\n"},{"score":8,"body_markdown":"One more thing that you might want to consider as a reason for the shift from double quotes to single quotes is the increase in popularity of server side scripts. When using PHP you can pass variables and parse JavaScript functions using strings and variables in PHP.\r\n\r\nIf you write a string and use double quotes for your PHP you won&#39;t have to escape any of the single quotes and PHP will automatically retrieve the value of the variables for you.\r\n\r\nExample:I need to run a JavaScript function using a variable from my server.\r\n\r\n    public static function redirectPage( $pageLocation )\r\n    {\r\n        echo &quot;&lt;script type=&#39;text/javascript&#39;&gt;window.location = &#39;$pageLocation&#39;;&lt;/script&gt;&quot;;\r\n    }\r\n\r\nThis saves me a lot of hassle in having to deal with joining strings, and I can effectively call a JavaScript from PHP. This is only one example, but this may be one of several reasons why programmers are defaulting to single quotes in JavaScript.\r\n\r\n[Quote from PHP documents][1]: \r\n\r\n&gt; The most important feature of double-quoted strings is the fact that variable names will be expanded. See string parsing for details.\r\n\r\n  [1]: http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double\r\n\r\n\r\n"},{"score":30,"body_markdown":"Technically there&#39;s no difference. It&#39;s only matter of style and convention.\r\n\r\n[Douglas Crockford][1] recommends using single quotes for internal strings and double quotes for external (by external we mean those to be displayed to user of application, like messages or alerts).  \r\n\r\nI personally follow that.\r\n\r\n*UPDATE: It appears that Mr. Crockford [changed his mind][2] and now recommends using double quotes throughout  :)*\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Douglas_Crockford\r\n  [2]: https://plus.google.com/+DouglasCrockfordEsq/posts/EBky2K9erKt\r\n\r\n"},{"score":-2,"body_markdown":"For use of JavaScript code across different languages, I&#39;ve found single quotes to consistently require less code tweaking.\r\n\r\nDouble quotes support multi-line strings.\r\n"},{"score":13,"body_markdown":"I hope I am not adding something obvious, but I have been struggling with [Django][1], [Ajax][2], and JSON on this.\r\n\r\nAssuming that in your HTML code you do use double quotes, as normally should be, I highly suggest to use single quotes for the rest in JavaScript.\r\n\r\nSo I agree [with ady][3], but with some care.\r\n\r\nMy bottom line is:\r\n\r\nIn JavaScript it probably doesn&#39;t matter, but as soon as you embed it inside HTML or the like you start to get troubles. You should know what is actually escaping, reading, passing your string.\r\n\r\nMy simple case was:\r\n\r\n    tbox.innerHTML = tbox.innerHTML + &#39;&lt;div class=&quot;thisbox_des&quot; style=&quot;width:210px;&quot; onmouseout=&quot;clear()&quot;&gt;&lt;a href=&quot;/this/thislist/&#39;\r\n                       + myThis[i].pk +&#39;&quot;&gt;&lt;img src=&quot;/site_media/&#39;\r\n                       + myThis[i].fields.thumbnail +&#39;&quot; height=&quot;80&quot; width=&quot;80&quot; style=&quot;float:left;&quot; onmouseover=&quot;showThis(&#39;\r\n                       + myThis[i].fields.left +&#39;,&#39;\r\n                       + myThis[i].fields.right +&#39;,\\&#39;&#39;\r\n                       + myThis[i].fields.title +&#39;\\&#39;)&quot;&gt;&lt;/a&gt;&lt;p style=&quot;float:left;width:130px;height:80px;&quot;&gt;&lt;b&gt;&#39;\r\n                       + myThis[i].fields.title +&#39;&lt;/b&gt; &#39;\r\n                       + myThis[i].fields.description +&#39;&lt;/p&gt;&lt;/div&gt;&#39;\r\n\r\nYou can spot the \\&#39; in the third field of showThis.\r\n\r\nThe double quote didn&#39;t work!\r\n\r\nIt is clear why, but it is also clear why we should stick to single quotes... I guess...\r\n\r\nThis case is a very simple HTML embedding, and the error was generated by a simple copy/paste from a &#39;double quoted&#39; JavaScript code.\r\n\r\nSo to answer the question:\r\n\r\nTry to use single quotes while within HTML. It might save a couple of debug issues...\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Django_%28web_framework%29\r\n  [2]: http://en.wikipedia.org/wiki/Ajax_%28programming%29\r\n  [3]: https://stackoverflow.com/questions/242813/when-should-i-use-double-or-single-quotes-in-javascript/242833#242833\r\n\r\n\r\n\r\n"},{"score":13,"body_markdown":"It&#39;s mostly a matter of style and preference. There are some rather interesting and useful technical explorations in the other answers, so perhaps the only thing I might add is to offer a little worldly advice.\r\n\r\n - *If* you&#39;re coding in a company or team, *then* it&#39;s probably a good idea to follow the &quot;house style&quot;.\r\n\r\n - *If* you&#39;re alone hacking a few side projects, *then* look at a few prominent leaders in the community. For example, let&#39;s say you getting into [Node.js][1]. Take a look at core modules, for example, [Underscore.js][2] or express and see what convention they use, and consider following that.\r\n\r\n - *If* both conventions are equally used, *then* defer to your personal preference.\r\n\r\n - *If* you don&#39;t have any personal preference, *then* flip a coin.\r\n\r\n - *If* you don&#39;t have a coin, *then* beer is on me ;)\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Node.js\r\n  [2]: https://en.wikipedia.org/wiki/Underscore.js\r\n\r\n\r\n\r\n"},{"score":19,"body_markdown":"Let&#39;s look what a reference does.\r\n\r\nInside jquery.js, every string is double-quoted. \r\n\r\nSo, beginning now, I&#39;ll use double-quoted strings. (I was using single!)\r\n"},{"score":2,"body_markdown":"For me, if I code in a [Vim][1] editor and if something is enclosed in single quotes, I can double-click to select *only* the text within the quotes. Double quotes, on the other hand, include the quote marks which I find annoying when I want to do some quick copy and pasting.\r\n\r\nE.g. &#39;myVar&#39; double-click in the Vim editor copies: &gt;myVar&lt;\r\n&quot;myVar&quot; literally copies: &gt;&quot;myVar&quot;&lt; and when I paste, I have to delete the quote marks on either side.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Vim_%28text_editor%29\r\n"},{"score":-1,"body_markdown":"As stated by other replies, they are almost the same. But I will try to add more.\r\n\r\n 1. Some efficient algorithms use character arrays to process strings. Those algorithms (browser compiler, etc.) would see `&quot;` (#34) first before `&#39;` (#39) therefore saving several CPU cycles depending on your data structure.\r\n 2. `&quot;` is escaped by anti-[XSS][1] engines\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Cross-site_scripting\r\n\r\n\r\n"},{"score":12,"body_markdown":"I am not sure if this is relevant in today&#39;s world, but double quotes used to be used for content that needed to have control characters processed and single quotes for strings that didn&#39;t.\r\n\r\nThe compiler will run string manipulation on a double quoted string while leaving a single quoted string literally untouched. This used to lead to &#39;good&#39; developers choosing to use single quotes for strings that didn&#39;t contain control characters like `\\n` or `\\0` (not processed within single quotes) and double quotes when they needed the string parsed (at a slight cost in CPU cycles for processing the string).\r\n\r\n\r\n\r\n"},{"score":5,"body_markdown":"If you&#39;re jumping back an forth between JavaScript and C#, it&#39;s best to train your fingers for the common convention which is double quotes. "},{"score":348,"body_markdown":"**There is no one better solution**; however, I would like to argue that double quotes may be more desirable at times:\r\n\r\n* **Newcomers will already be familiar with double quotes from their language**.  In English, we must use double quotes ``&quot;`` to identify a passage of quoted text.  If we were to use a single quote ``&#39;``, the reader may misinterpret it as a contraction.  The other meaning of a passage of text surrounded by the ``&#39;`` indicates the &#39;colloquial&#39; meaning.  It makes sense to stay consistent with pre-existing languages, and this may likely ease the learning and interpretation of code.\r\n* **Double quotes eliminate the need to escape apostrophes** (as in contractions).  Consider the string: ``&quot;I&#39;m going to the mall&quot;``, vs. the otherwise escaped version: ``&#39;I\\&#39;m going to the mall&#39;``.\r\n* **Double quotes mean a string in many other languages**.  When you learn a new language like Java or C, double quotes are always used. In Ruby, PHP and Perl, single-quoted strings imply no backslash escapes while double quotes support them.  \r\n\r\n* **JSON notation is written with double quotes.**\r\n\r\nNonetheless, as others have stated, it is most important to remain consistent."},{"score":-4,"body_markdown":"The best practice is to use double quotes (&quot;&quot;) first and single quotes (&#39;&#39;) if needed after. The reason being is that if you ever use server-side scripting you will not be able to pull content from a server (example SQL queries from a database) if you use singles quotes over double.\r\n\r\n\r\n\r\n"},{"score":0,"body_markdown":"I think this is all a matter of convenience/preference.\r\n\r\nI prefer double quote because it matches what C# has and this is my environment that I normally work in: C# + JavaScript.\r\n\r\nAlso one possible reason for double quotes over single quotes is this (which I have found in my projects code):\r\nFrench or some other languages use single quotes a lot (like English actually), so if by some reason you end up rendering strings from the server side (which I know is bad practice), then a single quote will render wrongly.\r\n\r\nThe probability of using double quotes in a regular language is low, and therefore I think it has a better chance of not breaking something.\r\n\r\n\r\n\r\n"},{"score":10,"body_markdown":"Talking about performance, quotes will never be your bottleneck. However, the performance is the same in both cases.\r\n\r\nTalking about coding speed, if you use `&#39;` for delimiting a string, you will need to escape `&quot;` quotes. You are more likely to need to use `&quot;` inside the string. Example:\r\n\r\n    // JSON Objects:\r\n    var jsonObject = &#39;{&quot;foo&quot;:&quot;bar&quot;}&#39;;\r\n\r\n    // HTML attributes:\r\n    document.getElementById(&quot;foobar&quot;).innerHTML = &#39;&lt;input type=&quot;text&quot;&gt;&#39;;\r\n \r\nThen, I prefer to use `&#39;` for delimiting the string, so I have to escape fewer characters.\r\n\r\n\r\n"},{"score":10,"body_markdown":"One (silly) reason to use single quotes would be that they don&#39;t require you to hit the shift key to type them, whereas a double quote do.  (I&#39;m assuming that the average string doesn&#39;t require escaping, which is a reasonable assumption.)  Now, let&#39;s suppose every day I code 200 lines of code.  Maybe in those 200 lines I have 30 quotes.  Maybe typing a double quote takes 0.1 seconds more time than typing a single quote (because I have to hit the shift key).  Then on any given day, I waste 3 seconds.  If I code in this manner for 200 days a year for 40 years, then I&#39;ve wasted 6.7 hours of my life.  Food for thought."},{"score":12,"body_markdown":"If you are using [JSHint][1], it will raise an error if you use a double quoted string.\r\n\r\nI used it through the Yeoman scafflholding of AngularJS, but maybe there is somehow a manner to configure this.\r\n\r\nBy the way, when you handle HTML into JavaScript, it&#39;s easier to use single quote:\r\n\r\n    var foo = &#39;&lt;div class=&quot;cool-stuff&quot;&gt;Cool content&lt;/div&gt;&#39;;\r\n\r\nAnd at least JSON is using double quotes to represent strings.\r\n\r\nThere isn&#39;t any trivial way to answer to your question.\r\n\r\n  [1]: http://www.jshint.com/\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"score":3,"body_markdown":"If your JavaScript source is\r\n\r\n    elem.innerHTML=&quot;&lt;img src=&#39;smily&#39; alt=&#39;It\\&#39;s a Smily&#39; style=&#39;width:50px&#39;&gt;&quot;;\r\n\r\nthe HTML source will be:\r\n\r\n    &lt;img src=&quot;smiley&quot; alt=&quot;It&#39;s a Smiley&quot; style=&quot;width:50px&quot;&gt;\r\n\r\nOr for HTML5\r\n\r\n    &lt;img src=smiley alt=&quot;It&#39;s a Smiley&quot; style=width:50px&gt;\r\n\r\nJavaScript allows arrays like that:\r\n\r\n    var arr=[&#39;this&#39;,&#39;that&#39;];\r\n\r\nBut if you stringify it, it will be for compatibility reasons:\r\n\r\n    JSON=[&quot;this&quot;,&quot;that&quot;]\r\n\r\nI&#39;m sure this takes some time.\r\n\r\n\r\n\r\n\r\n"},{"score":3,"body_markdown":"Just to add my [two cents][1]: In working with both JavaScript and PHP a few years back, I&#39;ve become accustomed to using single quotes so I can type the escape character (&#39;\\&#39;) without having to escape it as well. I usually used it when typing [raw strings][2] with file paths, etc.\r\n\r\nAnyhow, my convention ended up becoming the use of single quotes on identifier-type raw strings, such as `if (typeof s == &#39;string&#39;) ...` (in which escape characters would never be used - ever), and double quotes for *texts*, such as &quot;Hey, what&#39;s up?&quot;.  I also use single quotes in comments as a typographical convention to show identifier names. This is just a rule of thumb, and I break off only when needed, such as when typing HTML strings `&#39;&lt;a href=&quot;#&quot;&gt; like so &lt;a&gt;&#39;` (though you could reverse the quotes here also). I&#39;m also aware that, in the case of JSON, double quotes are used for the names - but outside that, personally, I prefer the single quotes when escaping is *never* required for the text between the quotes - like `document.createElement(&#39;div&#39;)`.\r\n\r\nThe bottom line is, and as some have mentioned/alluded to, to pick a convention, stick with it, and only deviate when necessary.\r\n\r\n  [1]: https://en.wiktionary.org/wiki/two_cents#Noun\r\n  [2]: http://en.wikipedia.org/wiki/String_literal#Raw_strings\r\n\r\n\r\n\r\n"},{"score":3,"body_markdown":"You can use single quotes or double quotes.\r\n\r\nThis enables you for example to easily nest JavaScript content inside HTML attributes, without the need to escape the quotes.\r\nThe same is when you create JavaScript with PHP.\r\n\r\nThe general idea is: if it is possible use such quotes that you won&#39;t need to escape.\r\n\r\nLess escaping = better code.\r\n\r\n\r\n\r\n"},{"score":7,"body_markdown":"When using [CoffeeScript][1] I use double quotes. I agree that you should pick either one and stick to it. CoffeeScript gives you interpolation when using the double quotes.\r\n\r\n    &quot;This is my #{name}&quot;\r\n\r\n[ECMAScript&amp;nbsp;6][2] is using back ticks (`) for template strings. Which probably has a good reason, but when coding, it can be cumbersome to change the string literals character from quotes or double quotes to backticks in order to get the interpolation feature. CoffeeScript might not be perfect, but using the same string literals character everywhere (double quotes) and always be able to interpolate is a nice feature.\r\n\r\n    `This is my ${name}`\r\n\r\n  [1]: https://en.wikipedia.org/wiki/CoffeeScript\r\n  [2]: https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\r\n\r\n\r\n\r\n"},{"score":101,"body_markdown":"Single Quotes\r\n=============\r\n\r\nI wish double quotes were the standard, because they [make a little bit more sense](https://stackoverflow.com/questions/242813/when-to-use-double-or-single-quotes-in-javascript#18041188), but I keep using single quotes because they dominate the scene.\r\n\r\nSingle quotes:\r\n\r\n* [Airbnb][1]\r\n* [Facebook][2]\r\n* [Google][3]\r\n* [Grunt][4]\r\n* [Gulp.js][5]\r\n* [Node.js][6]\r\n* [npm][7] (though not defined in [the author&#39;s guide][8])\r\n* [Wikimedia][9]\r\n* [WordPress][10]\r\n* [Yandex](https://github.com/jscs-dev/node-jscs/blob/master/presets/yandex.json)\r\n\r\nNo preference:\r\n\r\n* [Three.js][11]\r\n\r\nDouble quotes:\r\n\r\n* [TypeScript][12]\r\n* [Douglas Crockford][13]\r\n* [D3.js][14] (though not defined in [`.eslintrc`][15])\r\n* [jQuery][16]\r\n\r\n  [1]: https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json\r\n  [2]: https://github.com/facebook/fbjs/blob/8d447780c6f4df0ef92fa3d2987d9c4f96eb0100/packages/eslint-config-fbjs-opensource/index.js#L249\r\n  [3]: https://github.com/jscs-dev/node-jscs/blob/master/presets/google.json\r\n  [4]: https://github.com/jscs-dev/node-jscs/blob/master/presets/grunt.json\r\n  [5]: https://github.com/gulpjs/gulp/blob/master/.jscsrc\r\n  [6]: https://github.com/jscs-dev/node-jscs/blob/master/presets/node.json\r\n  [7]: https://github.com/npm/npm/blob/master/lib/npm.js\r\n  [8]: https://docs.npmjs.com/misc/coding-style\r\n  [9]: https://github.com/jscs-dev/node-jscs/blob/master/presets/wikimedia.json\r\n  [10]: https://github.com/jscs-dev/node-jscs/blob/master/presets/wordpress.json\r\n  [11]: https://github.com/jscs-dev/node-jscs/blob/master/presets/mdcs.json\r\n  [12]: https://github.com/microsoft/TypeScript/blob/master/.eslintrc.json\r\n  [13]: https://plus.google.com/+DouglasCrockfordEsq/posts/EBky2K9erKt\r\n  [14]: https://github.com/d3/d3-format/blob/master/src/locale.js\r\n  [15]: https://github.com/d3/d3-shape/blob/master/.eslintrc\r\n  [16]: https://github.com/jscs-dev/node-jscs/blob/master/presets/jquery.json\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"score":15,"body_markdown":"**Just keep consistency in what you use. But don&#39;t let down your comfort level.**\r\n\r\n    &quot;This is my string.&quot;; // :-|\r\n    &quot;I&#39;m invincible.&quot;; // Comfortable :)\r\n    &#39;You can\\&#39;t beat me.&#39;; // Uncomfortable :(\r\n    &#39;Oh! Yes. I can &quot;beat&quot; you.&#39;; // Comfortable :)\r\n    &quot;Do you really think, you can \\&quot;beat\\&quot; me?&quot;; // Uncomfortable :(\r\n    &quot;You&#39;re my guest. I can \\&quot;beat\\&quot; you.&quot;; // Sometimes, you&#39;ve to :P\r\n    &#39;You\\&#39;re my guest too. I can &quot;beat&quot; you too.&#39;; // Sometimes, you&#39;ve to :P\r\n\r\n**ECMAScript&amp;nbsp;6 update**\r\n\r\nUsing *template literal syntax*.\r\n\r\n```lang-none\r\n`Be &quot;my&quot; guest. You&#39;re in complete freedom.`; // Most comfort :D\r\n```\r\n\r\n"},{"score":9,"body_markdown":"&gt; Examining the pros and cons\r\n\r\n**In favor of single quotes**\r\n\r\n - Less visual clutter.\r\n - Generating HTML: HTML attributes are usually delimited by double quotes.\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    elem.innerHTML = &#39;&lt;a href=&quot;&#39; + url + &#39;&quot;&gt;Hello&lt;/a&gt;&#39;;\r\n\r\n&lt;!-- end snippet --&gt;\r\nHowever, single quotes are just as legal in HTML.\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    elem.innerHTML = &quot;&lt;a href=&#39;&quot; + url + &quot;&#39;&gt;Hello&lt;/a&gt;&quot;;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nFurthermore, inline HTML is normally an anti-pattern. Prefer templates.\r\n\r\n - Generating JSON: Only double quotes are allowed in JSON.\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    myJson = &#39;{ &quot;hello world&quot;: true }&#39;;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nAgain, you shouldnâ€™t have to construct JSON this way. JSON.stringify() is often enough. If not, use templates.\r\n\r\n**In favor of double quotes**\r\n\r\n - Doubles are easier to spot if you don&#39;t have color coding. Like in a console log or some kind of view-source setup.\r\n - Similarity to other languages: In shell programming (Bash etc.), single-quoted string literals exist, but escapes are not interpreted inside them. C and Java use double quotes for strings and single quotes for characters.\r\n - If you want code to be valid JSON, you need to use double quotes.\r\n\r\n**In favor of both**\r\n\r\nThere is no difference between the two in JavaScript. Therefore, you can use whatever is convenient at the moment. For example, the following string literals all produce the same string:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n        &quot;He said: \\&quot;Let&#39;s go!\\&quot;&quot;\r\n        &#39;He said: &quot;Let\\&#39;s go!&quot;&#39;\r\n        &quot;He said: \\&quot;Let\\&#39;s go!\\&quot;&quot;\r\n        &#39;He said: \\&quot;Let\\&#39;s go!\\&quot;&#39;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nSingle quotes for internal strings and double for external. That allows you to distinguish internal constants from strings that are to be displayed to the user (or written to disk etc.). Obviously, you should avoid putting the latter in your code, but that canâ€™t always be done."},{"score":3,"body_markdown":"It is just a matter *time* for me. A few milliseconds lost of my life every time I have to press the &lt;kbd&gt;Shift&lt;/kbd&gt; key before every time I&#39;m able to type `&quot;`.\r\n\r\nI prefer `&#39;` simply because you don&#39;t have to do it!\r\n\r\nOther than that, you can escape a `&#39;` inside single quotes with backslash `\\&#39;`.\r\n\r\n`console.log(&#39;Don\\&#39;t lose time&#39;); // &quot;Don&#39;t lose time&quot;`\r\n\r\n\r\n"},{"score":2,"body_markdown":"I use single quotes most of the time, because when developing in PHP, single quoted-string are in no way altered, which is what I want. When I use\r\n\r\n    echo &quot;$xyz&quot;;\r\n\r\nIn PHP, $xyz gets evaluated, which is *not* what I want. Therefore I always use `&#39;` instead of `&quot;` when it comes to web development. So I ensure at least string-consistency when it comes to PHP/JavaScript.\r\n\r\nUnfortunately this can&#39;t be done in Java or [Objective-C][1], where `&#39;&#39;` stands for character and `&quot;&quot;` stands for string. But this is another question.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Objective-C\r\n"},{"score":1,"body_markdown":"If you use PHP to generate JavaScript code you should use the following declaration.\r\n\r\n    let value = &quot;&lt;?php echo &#39;This is my message, &quot;double quoted&quot; - \\&#39;single quoted\\&#39; ?&gt;&quot;;\r\n\r\nThe output will be:\r\n\r\n    This is my message, &quot;double quoted&quot; - &#39;single quoted&#39;\r\n\r\nFor some reasons it is recommend to use single quotes rather than double quotes in PHP.\r\n\r\nFor the normal behaviour in JavaScript it is recommend to use single quotes.\r\n\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var value = &#39;This is my message&#39;;\r\n    document.getElementById(&#39;sample-text&#39;).innerHTML = value;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;span id=&quot;sample-text&quot;&gt;&lt;/span&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"score":0,"body_markdown":"Personally I prefer single quotes for the sake of readability. If I&#39;m staring at code all day it&#39;s easier to see the words with just single quotes as opposed to double quotes.\r\n\r\nEasier to read as demonstrated here:\r\n\r\n&#39;easy to read&#39;\r\n\r\n&quot;harder to read&quot;\r\n\r\n&quot;&quot;hardest to read&quot;&quot;\r\n\r\n"},{"score":4,"body_markdown":"Now that it&#39;s 2020, we should consider a third option for JavaScript: The single backtick for everything.\r\n\r\nThis can be used everywhere instead of single or double quotes.\r\n\r\nIt allows you to do all the things!\r\n\r\n1. **Embed single quotes inside of it:** \\`It&#39;s great!\\`\r\n2. **Embed double quotes inside of it:** \\`It&#39;s &quot;really&quot; great!\\`\r\n3. **Use string interpolation:** \\`It&#39;s &quot;${better}&quot; than great!\\`\r\n4. **It allows multiple lines:** \\`\r\n\r\n   This\r\n\r\n   Makes\r\n\r\n   JavaScript\r\n\r\n   Better!\r\n\r\n \\`\r\n\r\nIt also doesn&#39;t cause any performance loss when replacing the other two:\r\n*[Are backticks (``) slower than other strings in JavaScript?][1]*\r\n\r\n  [1]: https://medium.com/javascript-in-plain-english/are-backticks-slower-than-other-strings-in-javascript-ce4abf9b9fa\r\n\r\n\r\n\r\n\r\n"},{"score":0,"body_markdown":"I prefer to use the single quote, `&#39;`. It is easier to type and looks better.\r\n\r\nAlso, letâ€™s remember that straight quotes (single and double) are a mistake in good typography. Curly quotes are preferable, so instead of escaping straight quotes I prefer to use the correct characters.\r\n\r\n    const message = &#39;That\\&#39;s a \\&#39;magic\\&#39; shoe.&#39; // This is wrong\r\n    const message = &#39;Thatâ€™s a â€˜magicâ€™ shoe.&#39; // This is correct\r\n\r\nhttps://practicaltypography.com/straight-and-curly-quotes.html\r\n\r\nCan someone add a smart-quote feature to Visual Studio Code, please?\r\n\r\n\r\n\r\n\r\n"}],"score":2031}