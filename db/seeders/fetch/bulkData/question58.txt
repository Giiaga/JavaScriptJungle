{"body":"What is the most appropriate way to test if a variable is undefined in JavaScript?\r\n\r\nI&#39;ve seen several possible ways:\r\n\r\n    if (window.myVariable)\r\n\r\nOr\r\n\r\n    if (typeof(myVariable) != &quot;undefined&quot;)\r\n\r\nOr\r\n\r\n    if (myVariable) // This throws an error if undefined. Should this be in Try/Catch?\r\n\r\n","title":"How can I check for &quot;undefined&quot; in JavaScript?","answers":[{"score":75,"body_markdown":"You can use `typeof`, like this:\r\n\r\n    if (typeof something != &quot;undefined&quot;) {\r\n        // ...\r\n    }"},{"score":23,"body_markdown":"If it is undefined, it will not be equal to a string that contains the characters &quot;undefined&quot;, as the string is not undefined.\r\n\r\nYou can check the type of the variable:\r\n\r\n    if (typeof(something) != &quot;undefined&quot;) ...\r\n\r\nSometimes you don&#39;t even have to check the type. If the value of the variable can&#39;t evaluate to false when it&#39;s set (for example if it&#39;s a function), then you can just evalue the variable. Example:\r\n\r\n    if (something) {\r\n      something(param);\r\n    }"},{"score":18,"body_markdown":"    if (typeof foo == &#39;undefined&#39;) {\r\n     // Do something\r\n    };\r\n\r\nNote that strict comparison (`!==`) is not necessary in this case, since `typeof` will always return a string."},{"score":2792,"body_markdown":"If you are interested in finding out whether a variable has been declared regardless of its value, then using the `in` operator is the safest way to go. Consider this example:\r\n\r\n    // global scope\r\n    var theFu; // theFu has been declared, but its value is undefined\r\n    typeof theFu; // &quot;undefined&quot;\r\n\r\nBut this may not be the intended result for some cases, since the variable or property was declared but just not initialized. Use the `in` operator for a more robust check.\r\n\r\n    &quot;theFu&quot; in window; // true\r\n    &quot;theFoo&quot; in window; // false\r\n\r\nIf you are interested in knowing whether the variable hasn&#39;t been declared or has the value `undefined`, then use the `typeof` operator, which is guaranteed to return a string:\r\n\r\n    if (typeof myVar !== &#39;undefined&#39;)\r\n\r\nDirect comparisons against `undefined` are troublesome as `undefined` can be overwritten. \r\n\r\n    window.undefined = &quot;foo&quot;;\r\n    &quot;foo&quot; == undefined // true\r\n\r\nAs @CMS pointed out, this has been patched in ECMAScript 5th ed., and `undefined` is non-writable.\r\n\r\n`if (window.myVar)` will also include these falsy values, so it&#39;s not very robust:\r\n\r\n&lt;pre&gt;\r\nfalse\r\n0\r\n&quot;&quot;\r\nNaN\r\nnull\r\nundefined\r\n&lt;/pre&gt;\r\n\r\nThanks to @CMS for pointing out that your third case - `if (myVariable)` can also throw an error in two cases. The first is when the variable hasn&#39;t been defined which throws a `ReferenceError`. \r\n\r\n    // abc was never declared.\r\n    if (abc) {\r\n        // ReferenceError: abc is not defined\r\n    } \r\n\r\nThe other case is when the variable has been defined, but has a getter function which throws an error when invoked. For example,\r\n\r\n    // or it&#39;s a property that can throw an error\r\n    Object.defineProperty(window, &quot;myVariable&quot;, { \r\n        get: function() { throw new Error(&quot;W00t?&quot;); }, \r\n        set: undefined \r\n    });\r\n    if (myVariable) {\r\n        // Error: W00t?\r\n    }"},{"score":0,"body_markdown":"I use it as a function parameter and exclude it on function execution that way I get the &quot;real&quot; undefined. Although it does require you to put your code inside a function. I found this while reading the jQuery source.\r\n\r\n    undefined = 2;\r\n\r\n    (function (undefined) {\r\n       console.log(undefined); // prints out undefined\r\n       // and for comparison:\r\n       if (undeclaredvar === undefined) console.log(&quot;it works!&quot;)\r\n    })()\r\n\r\nOf course you could just use `typeof` though. But all my code is usually inside a containing function anyways, so using this method probably saves me a few bytes here and there."},{"score":225,"body_markdown":"**2020 Update**\r\n\r\nOne of my reasons for preferring a `typeof` check (namely, that `undefined` can be redefined) became irrelevant with the mass adoption of ECMAScript 5. The other, that you can use `typeof` to check the type of an undeclared variable, was always niche. Therefore, I&#39;d now recommend using a direct comparison in most situations:\r\n\r\n    myVariable === undefined\r\n\r\n\r\n\r\n**Original answer from 2010**\r\n\r\nUsing `typeof` is my preference. It will work when the variable has never been declared, unlike any comparison with the `==` or `===` operators or type coercion using `if`. (`undefined`, unlike `null`, may also be redefined in ECMAScript 3 environments, making it unreliable for comparison, although nearly all common environments now are compliant with ECMAScript 5 or above).\r\n\r\n    if (typeof someUndeclaredVariable == &quot;undefined&quot;) {\r\n        // Works\r\n    }\r\n    \r\n    if (someUndeclaredVariable === undefined) { \r\n        // Throws an error\r\n    }"},{"score":1229,"body_markdown":"I personally use \r\n\r\n    myVar === undefined\r\n\r\nWarning: Please note that `===` is used over `==` and that `myVar` has been previously _declared_ (not _defined_).\r\n\r\n\r\n----\r\n\r\nI do not like `typeof myVar === &quot;undefined&quot;`. I think it is long winded and unnecessary. (I can get the same done in less code.)\r\n\r\nNow some people will keel over in pain when they read this, screaming: &quot;Wait! WAAITTT!!! `undefined` can be redefined!&quot;\r\n\r\nCool. I know this. Then again, most variables in Javascript can be redefined. Should you never use any built-in identifier that can be redefined?\r\n\r\nIf you follow this rule, good for you: you aren&#39;t a hypocrite.\r\n\r\nThe thing is, in order to do lots of real work in JS, developers need to rely on redefinable identifiers to be what they are. I don&#39;t hear people telling me that I shouldn&#39;t use `setTimeout` because someone can\r\n\r\n    window.setTimeout = function () {\r\n        alert(&quot;Got you now!&quot;);\r\n    };\r\n\r\nBottom line, the &quot;it can be redefined&quot; argument to not use a raw `=== undefined` is bogus. \r\n\r\n(If you are still scared of `undefined` being redefined, why are you blindly integrating untested library code into your code base? Or even simpler: a linting tool.)\r\n\r\n----\r\n\r\nAlso, like the `typeof` approach, this technique can &quot;detect&quot; undeclared variables: \r\n\r\n    if (window.someVar === undefined) {\r\n        doSomething();\r\n    }\r\n\r\nBut both these techniques leak in their abstraction. I urge you not to use this or even \r\n\r\n    if (typeof myVar !== &quot;undefined&quot;) {\r\n        doSomething();\r\n    }\r\n\r\nConsider:\r\n\r\n    var iAmUndefined;\r\n\r\nTo catch whether or not that variable is declared or not, you may need to resort to the `in` operator. (In many cases, you can simply read the code O_o).\r\n\r\n    if (&quot;myVar&quot; in window) {\r\n        doSomething();\r\n    }\r\n\r\nBut wait! There&#39;s more! What if some prototype chain magic is happeningâ€¦? Now even the superior `in` operator does not suffice. (Okay, I&#39;m done here about this part except to say that for 99% of the time, `=== undefined` (and ****cough**** `typeof`) works just fine. If you really care, you can read about this subject on its own.)"},{"score":6,"body_markdown":"Since none of the other answers helped me, I suggest doing this. It worked for me in Internet&amp;nbsp;Explorer&amp;nbsp;8:\r\n\r\n    if (typeof variable_name.value === &#39;undefined&#39;) {\r\n        // variable_name is undefined\r\n    }\r\n"},{"score":17,"body_markdown":"Some scenarios illustrating the results of the various answers:\r\nhttp://jsfiddle.net/drzaus/UVjM4/\r\n\r\n*(Note that the use of `var` for `in` tests make a difference when in a scoped wrapper)*\r\n\r\n\r\nCode for reference:\r\n\r\n    (function(undefined) {\r\n    \tvar definedButNotInitialized;\r\n    \tdefinedAndInitialized = 3;\r\n    \tsomeObject = {\r\n    \t\tfirstProp: &quot;1&quot;\r\n    \t\t, secondProp: false\r\n    \t\t// , undefinedProp not defined\r\n    \t}\r\n    \t// var notDefined;\r\n    \t\r\n    \tvar tests = [\r\n    \t\t&#39;definedButNotInitialized in window&#39;,\r\n    \t\t&#39;definedAndInitialized in window&#39;,\r\n    \t\t&#39;someObject.firstProp in window&#39;,\r\n    \t\t&#39;someObject.secondProp in window&#39;,\r\n    \t\t&#39;someObject.undefinedProp in window&#39;,\r\n    \t\t&#39;notDefined in window&#39;,\r\n\r\n    \t\t&#39;&quot;definedButNotInitialized&quot; in window&#39;,\r\n    \t\t&#39;&quot;definedAndInitialized&quot; in window&#39;,\r\n    \t\t&#39;&quot;someObject.firstProp&quot; in window&#39;,\r\n    \t\t&#39;&quot;someObject.secondProp&quot; in window&#39;,\r\n    \t\t&#39;&quot;someObject.undefinedProp&quot; in window&#39;,\r\n    \t\t&#39;&quot;notDefined&quot; in window&#39;,\r\n\r\n    \t\t&#39;typeof definedButNotInitialized == &quot;undefined&quot;&#39;,\r\n    \t\t&#39;typeof definedButNotInitialized === typeof undefined&#39;,\r\n    \t\t&#39;definedButNotInitialized === undefined&#39;,\r\n    \t\t&#39;! definedButNotInitialized&#39;,\r\n    \t\t&#39;!! definedButNotInitialized&#39;,\r\n\r\n    \t\t&#39;typeof definedAndInitialized == &quot;undefined&quot;&#39;,\r\n    \t\t&#39;typeof definedAndInitialized === typeof undefined&#39;,\r\n    \t\t&#39;definedAndInitialized === undefined&#39;,\r\n    \t\t&#39;! definedAndInitialized&#39;,\r\n    \t\t&#39;!! definedAndInitialized&#39;,\r\n\r\n    \t\t&#39;typeof someObject.firstProp == &quot;undefined&quot;&#39;,\r\n    \t\t&#39;typeof someObject.firstProp === typeof undefined&#39;,\r\n    \t\t&#39;someObject.firstProp === undefined&#39;,\r\n    \t\t&#39;! someObject.firstProp&#39;,\r\n    \t\t&#39;!! someObject.firstProp&#39;,\r\n\r\n    \t\t&#39;typeof someObject.secondProp == &quot;undefined&quot;&#39;,\r\n    \t\t&#39;typeof someObject.secondProp === typeof undefined&#39;,\r\n    \t\t&#39;someObject.secondProp === undefined&#39;,\r\n    \t\t&#39;! someObject.secondProp&#39;,\r\n    \t\t&#39;!! someObject.secondProp&#39;,\r\n\r\n    \t\t&#39;typeof someObject.undefinedProp == &quot;undefined&quot;&#39;,\r\n    \t\t&#39;typeof someObject.undefinedProp === typeof undefined&#39;,\r\n    \t\t&#39;someObject.undefinedProp === undefined&#39;,\r\n    \t\t&#39;! someObject.undefinedProp&#39;,\r\n    \t\t&#39;!! someObject.undefinedProp&#39;,\r\n     \r\n    \t\t&#39;typeof notDefined == &quot;undefined&quot;&#39;,\r\n    \t\t&#39;typeof notDefined === typeof undefined&#39;,\r\n    \t\t&#39;notDefined === undefined&#39;,\r\n    \t\t&#39;! notDefined&#39;,\r\n    \t\t&#39;!! notDefined&#39;\r\n    \t];\r\n    \t\r\n    \tvar output = document.getElementById(&#39;results&#39;);\r\n    \tvar result = &#39;&#39;;\r\n    \tfor(var t in tests) {\r\n    \t\tif( !tests.hasOwnProperty(t) ) continue; // bleh\r\n    \t\t\r\n    \t\ttry {\r\n    \t\t\tresult = eval(tests[t]);\r\n    \t\t} catch(ex) {\r\n    \t\t\tresult = &#39;Exception--&#39; + ex;\r\n    \t\t}\r\n    \t\tconsole.log(tests[t], result);\r\n    \t\toutput.innerHTML += &quot;\\n&quot; + tests[t] + &quot;: &quot; + result;\r\n    \t}\r\n    })();\r\n\r\nAnd results:\r\n\r\n\r\n    definedButNotInitialized in window: true\r\n    definedAndInitialized in window: false\r\n    someObject.firstProp in window: false\r\n    someObject.secondProp in window: false\r\n    someObject.undefinedProp in window: true\r\n    notDefined in window: Exception--ReferenceError: notDefined is not defined\r\n    &quot;definedButNotInitialized&quot; in window: false\r\n    &quot;definedAndInitialized&quot; in window: true\r\n    &quot;someObject.firstProp&quot; in window: false\r\n    &quot;someObject.secondProp&quot; in window: false\r\n    &quot;someObject.undefinedProp&quot; in window: false\r\n    &quot;notDefined&quot; in window: false\r\n    typeof definedButNotInitialized == &quot;undefined&quot;: true\r\n    typeof definedButNotInitialized === typeof undefined: true\r\n    definedButNotInitialized === undefined: true\r\n    ! definedButNotInitialized: true\r\n    !! definedButNotInitialized: false\r\n    typeof definedAndInitialized == &quot;undefined&quot;: false\r\n    typeof definedAndInitialized === typeof undefined: false\r\n    definedAndInitialized === undefined: false\r\n    ! definedAndInitialized: false\r\n    !! definedAndInitialized: true\r\n    typeof someObject.firstProp == &quot;undefined&quot;: false\r\n    typeof someObject.firstProp === typeof undefined: false\r\n    someObject.firstProp === undefined: false\r\n    ! someObject.firstProp: false\r\n    !! someObject.firstProp: true\r\n    typeof someObject.secondProp == &quot;undefined&quot;: false\r\n    typeof someObject.secondProp === typeof undefined: false\r\n    someObject.secondProp === undefined: false\r\n    ! someObject.secondProp: true\r\n    !! someObject.secondProp: false\r\n    typeof someObject.undefinedProp == &quot;undefined&quot;: true\r\n    typeof someObject.undefinedProp === typeof undefined: true\r\n    someObject.undefinedProp === undefined: true\r\n    ! someObject.undefinedProp: true\r\n    !! someObject.undefinedProp: false\r\n    typeof notDefined == &quot;undefined&quot;: true\r\n    typeof notDefined === typeof undefined: true\r\n    notDefined === undefined: Exception--ReferenceError: notDefined is not defined\r\n    ! notDefined: Exception--ReferenceError: notDefined is not defined\r\n    !! notDefined: Exception--ReferenceError: notDefined is not defined"},{"score":3,"body_markdown":"On the contrary of @Thomas Eding answer:\r\n\r\nIf I forget to declare `myVar` in my code, then I&#39;ll get `myVar is not defined`.\r\n\r\nLet&#39;s take a real example:\r\n\r\nI&#39;ve a variable name, but I am not sure if it is declared somewhere or not.\r\n\r\nThen @Anurag&#39;s answer will help:\r\n\r\n    var myVariableToCheck = &#39;myVar&#39;;\r\n    if (window[myVariableToCheck] === undefined)\r\n        console.log(&quot;Not declared or declared, but undefined.&quot;);\r\n\r\n    // Or you can check it directly \r\n    if (window[&#39;myVar&#39;] === undefined) \r\n        console.log(&quot;Not declared or declared, but undefined.&quot;);\r\n"},{"score":61,"body_markdown":"# Update 2018-07-25 #\r\n\r\nIt&#39;s been nearly five years since this post was first made, and JavaScript has come a long way.  In repeating the tests in the original post, I found no consistent difference between the following test methods:\r\n\r\n* `abc === undefined`\r\n* `abc === void 0`\r\n* `typeof abc == &#39;undefined&#39;`\r\n* `typeof abc === &#39;undefined&#39;`\r\n\r\nEven when I modified the tests to prevent Chrome from optimizing them away, the differences were insignificant.  As such, I&#39;d now recommend `abc === undefined` for clarity.\r\n\r\nRelevant content from `chrome://version`:\r\n\r\n* Google Chrome: 67.0.3396.99 (Official Build) (64-bit) (cohort: Stable)\r\n* Revision: a337fbf3c2ab8ebc6b64b0bfdce73a20e2e2252b-refs/branch-heads/3396@{#790}\r\n* OS: Windows\r\n* JavaScript: V8 6.7.288.46\r\n* User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\r\n\r\n# Original post 2013-11-01 #\r\n\r\nIn Google Chrome, the following was ever so slightly faster than a `typeof` test:\r\n\r\n    if (abc === void 0) {\r\n        // Undefined\r\n    }\r\n\r\nThe difference was negligible.  However, this code is more concise, and clearer at a glance to someone who knows what `void 0` means. Note, however, that `abc` **must still be declared**.\r\n\r\nBoth `typeof` and `void` were significantly faster than comparing directly against `undefined`.  I used the following test format in the Chrome developer console:\r\n\r\n    var abc;\r\n    start = +new Date();\r\n    for (var i = 0; i &lt; 10000000; i++) {\r\n        if (TEST) {\r\n            void 1;\r\n        }\r\n    }\r\n    end = +new Date();\r\n    end - start;\r\n\r\nThe results were as follows:\r\n\r\n\tTest: | abc === undefined      abc === void 0      typeof abc == &#39;undefined&#39;\r\n\t------+---------------------------------------------------------------------\r\n\tx10M  |     13678 ms               9854 ms                 9888 ms\r\n\t  x1  |    1367.8 ns              985.4 ns                988.8 ns\r\n\r\nNote that the first row is in &lt;em&gt;milli&lt;/em&gt;seconds, while the second row is in &lt;em&gt;nano&lt;/em&gt;seconds.  A difference of 3.4 nanoseconds is nothing.  The times were pretty consistent in subsequent tests."},{"score":16,"body_markdown":"In [this article][1] I read that frameworks like [Underscore.js][2] use this function:\r\n\r\n    function isUndefined(obj){\r\n        return obj === void 0;\r\n    }\r\n\r\n  [1]: http://flippinawesome.org/2013/12/09/exploring-the-abyss-of-null-and-undefined-in-javascript/\r\n  [2]: https://en.wikipedia.org/wiki/Underscore.js\r\n"},{"score":13,"body_markdown":"Personally, I always use the following:\r\n    \r\n    var x;\r\n    if( x === undefined) {\r\n        //Do something here\r\n    }\r\n    else {\r\n       //Do something else here\r\n    }\r\n\r\nThe window.undefined property is non-writable in all modern browsers (JavaScript 1.8.5 or later). From Mozilla&#39;s documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined, I see this: One reason to use typeof() is that it does not throw an error if the variable has not been defined.\r\n\r\nI prefer to have the approach of using\r\n      \r\n    x === undefined \r\n\r\nbecause it fails and blows up in my face rather than silently passing/failing if x has not been declared before. This alerts me that x is not declared. I believe all variables used in JavaScript should be declared.\r\n"},{"score":10,"body_markdown":"The most reliable way I know of checking for `undefined` is to use `void 0`.\r\n\r\nThis is compatible with newer and older browsers, alike, and cannot be overwritten like `window.undefined` can in some cases.\r\n\r\n    if( myVar === void 0){\r\n        //yup it&#39;s undefined\r\n    }"},{"score":3,"body_markdown":"        var x;\r\n        if (x === undefined) {\r\n            alert (&quot;I am declared, but not defined.&quot;)\r\n        };\r\n        if (typeof y === &quot;undefined&quot;) {\r\n            alert (&quot;I am not even declared.&quot;)\r\n        };\r\n\r\n        /* One more thing to understand: typeof ===&#39;undefined&#39; also checks \r\n           for if a variable is declared, but no value is assigned. In other \r\n           words, the variable is declared, but not defined. */\r\n\r\n        // Will repeat above logic of x for typeof === &#39;undefined&#39;\r\n        if (x === undefined) {\r\n            alert (&quot;I am declared, but not defined.&quot;)\r\n        };\r\n        /* So typeof === &#39;undefined&#39; works for both, but x === undefined \r\n           only works for a variable which is at least declared. */\r\n\r\n        /* Say if I try using typeof === undefined (not in quotes) for \r\n           a variable which is not even declared, we will get run a \r\n           time error. */\r\n\r\n        if (z === undefined) {\r\n            alert (&quot;I am neither declared nor defined.&quot;)\r\n        };\r\n        // I got this error for z ReferenceError: z is not defined \r\n"},{"score":4,"body_markdown":"    // x has not been defined before\r\n    if (typeof x === &#39;undefined&#39;) { // Evaluates to true without errors.\r\n       // These statements execute.\r\n    }\r\n    \r\n    if (x === undefined) { // Throws a ReferenceError\r\n    \r\n    }\r\n"}],"score":2555}