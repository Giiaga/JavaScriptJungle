{"body":"In JavaScript, how can I format a date object to print as `10-Aug-2010`?\r\n","title":"How to format a JavaScript date","answers":[{"score":1444,"body_markdown":"For custom-delimited date formats, you have to pull out the date (or time)\r\ncomponents from a [`DateTimeFormat`][1] object (which is part of the\r\n[ECMAScript Internationalization API][2]), and then manually create a string\r\nwith the delimiters you want.\r\n\r\nTo do this, you can use [`DateTimeFormat#formatToParts`][3]. You could\r\ndestructure the array, but that is not ideal, as the array output depends on the\r\nlocale:\r\n\r\n&lt;!-- begin snippet: js console: true  --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n// example 1\r\nconst o_date_en = new Intl.DateTimeFormat(&#39;en&#39;);\r\nconst a_date_en = o_date_en.formatToParts();\r\n// example 2\r\nconst o_date_hi = new Intl.DateTimeFormat(&#39;hi&#39;);\r\nconst a_date_hi = o_date_hi.formatToParts();\r\n// print\r\nconsole.log(a_date_en, a_date_hi);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nBetter would be to reduce the array into an object:\r\n\r\n&lt;!-- begin snippet: js console: true  --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n\r\nconst o_date = new Intl.DateTimeFormat;\r\nconst f_date = (m_ca, m_it) =&gt; Object({...m_ca, [m_it.type]: m_it.value});\r\nconst m_date = o_date.formatToParts().reduce(f_date, {});\r\nconsole.log(m_date.day + &#39;-&#39; + m_date.month + &#39;-&#39; + m_date.year);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nYou can also pull out the parts of a `DateTimeFormat` one-by-one using\r\n[`DateTimeFormat#format`][4], but note that when using this method, as of March\r\n2020, there is [a bug][5] in the ECMAScript implementation when it comes to\r\nleading zeros on minutes and seconds (this bug is circumvented by the approach\r\nabove). \r\n\r\n&lt;!-- begin snippet: js console: true  --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n\r\nconst d = new Date(2010, 7, 5);\r\nconst ye = new Intl.DateTimeFormat(&#39;en&#39;, { year: &#39;numeric&#39; }).format(d);\r\nconst mo = new Intl.DateTimeFormat(&#39;en&#39;, { month: &#39;short&#39; }).format(d);\r\nconst da = new Intl.DateTimeFormat(&#39;en&#39;, { day: &#39;2-digit&#39; }).format(d);\r\nconsole.log(`${da}-${mo}-${ye}`);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nWhen working with dates and times, it is usually worth using a library (eg.\r\n[moment.js][6], [luxon][7]) because of the many hidden complexities of the\r\nfield.\r\n\r\nNote that the ECMAScript Internationalization API, used in the solutions above\r\nis not supported [in IE10][8] ([0.03%][9] global browser market share in Feb\r\n2020).\r\n\r\n[1]://developer.mozilla.org/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\r\n[2]://developer.mozilla.org/Web/JavaScript/Reference/Global_Objects/Intl\r\n[3]://developer.mozilla.org/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\r\n[4]://developer.mozilla.org/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/format\r\n[5]://stackoverflow.com/questions/60544534#60545316\r\n[6]://momentjs.com\r\n[7]://moment.github.io/luxon\r\n[8]://caniuse.com#search=datetimeformat\r\n[9]://gs.statcounter.com/browser-version-market-share"},{"score":619,"body_markdown":"Use the [date.format library](http://blog.stevenlevithan.com/archives/date-time-format):\r\n\r\n    var dateFormat = require(&#39;dateformat&#39;);\r\n    var now = new Date();\r\n    dateFormat(now, &quot;dddd, mmmm dS, yyyy, h:MM:ss TT&quot;);\r\n\r\nreturns:\r\n    \r\n    Saturday, June 9th, 2007, 5:46:21 PM \r\n    \r\n[dateformat on npm](https://www.npmjs.com/package/dateformat)\r\n\r\nhttp://jsfiddle.net/phZr7/1/\r\n"},{"score":139,"body_markdown":"I think you can just use the **non-standard** Date method `toLocaleFormat(formatString)`\r\n\r\n**formatString:** A format string in the same format expected by the [`strftime()`][2] function in C.\r\n\r\n    var today = new Date();\r\n    today.toLocaleFormat(&#39;%d-%b-%Y&#39;); // 30-Dec-2011\r\n\r\n**References:**\r\n\r\n - [tolocaleformat][1]\r\n - [strftime][2]\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat &quot;toLocaleFormat&quot;\r\n  [2]: http://www.cplusplus.com/reference/clibrary/ctime/strftime/ &quot;strftime&quot;\r\n"},{"score":51,"body_markdown":"You should have a look at [date.js][1]. It adds many convenient helpers for working with dates, for example, in your case:\r\n\r\n    var date = Date.parse(&#39;2010-08-10&#39;);\r\n    console.log(date.toString(&#39;dd-MMM-yyyy&#39;));\r\n\r\nGetting started: http://www.datejs.com/2007/11/27/getting-started-with-datejs/\r\n\r\n  [1]: http://www.datejs.com/\r\n"},{"score":-5,"body_markdown":"This library can format the date object and parse the formatted string back to Date object.\r\nIt uses Java format (SimpleDateFormat class). The name of months and days can be localized.\r\n\r\nhttp://www.javascriptsource.com/repository/javascripts/2009/03/880961/JS_Simple_Date_Format.zip\r\n\r\nExample:\r\n\r\n    var sdf = new JsSimpleDateFormat(&quot;dd-MMM-yyyy&quot;);\r\n    var formattedString = sdf.format(new Date());\r\n    var dateObject = sdf.parse(&quot;10-Aug-2010&quot;);"},{"score":440,"body_markdown":"Well, what I wanted was to convert today&#39;s date to a [MySQL][1] friendly date string like 2012-06-23, and to use that string as a parameter in one of my queries. The simple solution I&#39;ve found is this:\r\n\r\n    var today = new Date().toISOString().slice(0, 10);\r\n\r\nKeep in mind that the above solution does **not** take into account your timezone offset.\r\n\r\nYou might consider using this function instead:\r\n\r\n    function toJSONLocal (date) {\r\n        var local = new Date(date);\r\n        local.setMinutes(date.getMinutes() - date.getTimezoneOffset());\r\n        return local.toJSON().slice(0, 10);\r\n    }\r\n\r\nThis will give you the correct date in case you are executing this code around the start/end of the day.\r\n\r\n - Example: http://jsfiddle.net/simo/sapuhzmm/\r\n - [Date.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\r\n - [Date.toJSON](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON)\r\n - [String.slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice)\r\n\r\n  [1]: http://en.wikipedia.org/wiki/MySQL\r\n"},{"score":4,"body_markdown":"Add the [jQuery UI][1] plugin to your page:\r\n\r\n    function DateFormate(dateFormate, datetime) {\r\n        return $.datepicker.formatDate(dateFormate, datetime);\r\n    };\r\n\r\n  [1]: http://en.wikipedia.org/wiki/JQuery_UI\r\n"},{"score":8,"body_markdown":"Sugar.js has excellent extensions to the Date object, including a [Date.format][1] method.\r\n\r\nExamples from the documentation:\r\n\r\n    Date.create().format(&#39;{Weekday} {Month} {dd}, {yyyy}&#39;);\r\n\r\n    Date.create().format(&#39;{12hr}:{mm}{tt}&#39;)\r\n\r\n  [1]: http://sugarjs.com/api/Date/format\r\n"},{"score":20,"body_markdown":"Here&#39;s is some code I just wrote to handle the date formatting for a project I&#39;m working on. It mimics the PHP date formatting functionality to suit my needs. Feel free to use it, it&#39;s just extending the already existing Date() object. This may not be the most elegant solution but it&#39;s working for my needs.\r\n\r\n    var d = new Date(); \r\n    d_string = d.format(&quot;m/d/Y h:i:s&quot;);\r\n\r\n    /**************************************\r\n     * Date class extension\r\n     * \r\n     */\r\n    \t// Provide month names\r\n    \tDate.prototype.getMonthName = function(){\r\n    \t\tvar month_names = [\r\n    \t\t\t\t\t\t\t&#39;January&#39;,\r\n    \t\t\t\t\t\t\t&#39;February&#39;,\r\n    \t\t\t\t\t\t\t&#39;March&#39;,\r\n    \t\t\t\t\t\t\t&#39;April&#39;,\r\n    \t\t\t\t\t\t\t&#39;May&#39;,\r\n    \t\t\t\t\t\t\t&#39;June&#39;,\r\n    \t\t\t\t\t\t\t&#39;July&#39;,\r\n    \t\t\t\t\t\t\t&#39;August&#39;,\r\n    \t\t\t\t\t\t\t&#39;September&#39;,\r\n    \t\t\t\t\t\t\t&#39;October&#39;,\r\n    \t\t\t\t\t\t\t&#39;November&#39;,\r\n    \t\t\t\t\t\t\t&#39;December&#39;\r\n    \t\t\t\t\t\t];\r\n    \r\n    \t\treturn month_names[this.getMonth()];\r\n    \t}\r\n    \t\r\n    \t// Provide month abbreviation\r\n    \tDate.prototype.getMonthAbbr = function(){\r\n    \t\tvar month_abbrs = [\r\n    \t\t\t\t\t\t\t&#39;Jan&#39;,\r\n    \t\t\t\t\t\t\t&#39;Feb&#39;,\r\n    \t\t\t\t\t\t\t&#39;Mar&#39;,\r\n    \t\t\t\t\t\t\t&#39;Apr&#39;,\r\n    \t\t\t\t\t\t\t&#39;May&#39;,\r\n    \t\t\t\t\t\t\t&#39;Jun&#39;,\r\n    \t\t\t\t\t\t\t&#39;Jul&#39;,\r\n    \t\t\t\t\t\t\t&#39;Aug&#39;,\r\n    \t\t\t\t\t\t\t&#39;Sep&#39;,\r\n    \t\t\t\t\t\t\t&#39;Oct&#39;,\r\n    \t\t\t\t\t\t\t&#39;Nov&#39;,\r\n    \t\t\t\t\t\t\t&#39;Dec&#39;\r\n    \t\t\t\t\t\t];\r\n    \r\n    \t\treturn month_abbrs[this.getMonth()];\r\n    \t}\r\n    \t\r\n    \t// Provide full day of week name\r\n    \tDate.prototype.getDayFull = function(){\r\n    \t\tvar days_full = [\r\n    \t\t\t\t\t\t\t&#39;Sunday&#39;,\r\n    \t\t\t\t\t\t\t&#39;Monday&#39;,\r\n    \t\t\t\t\t\t\t&#39;Tuesday&#39;,\r\n    \t\t\t\t\t\t\t&#39;Wednesday&#39;,\r\n    \t\t\t\t\t\t\t&#39;Thursday&#39;,\r\n    \t\t\t\t\t\t\t&#39;Friday&#39;,\r\n    \t\t\t\t\t\t\t&#39;Saturday&#39;\r\n    \t\t\t\t\t\t];\r\n    \t\treturn days_full[this.getDay()];\r\n    \t};\r\n    \t\r\n    \t// Provide full day of week name\r\n    \tDate.prototype.getDayAbbr = function(){\r\n    \t\tvar days_abbr = [\r\n    \t\t\t\t\t\t\t&#39;Sun&#39;,\r\n    \t\t\t\t\t\t\t&#39;Mon&#39;,\r\n    \t\t\t\t\t\t\t&#39;Tue&#39;,\r\n    \t\t\t\t\t\t\t&#39;Wed&#39;,\r\n    \t\t\t\t\t\t\t&#39;Thur&#39;,\r\n    \t\t\t\t\t\t\t&#39;Fri&#39;,\r\n    \t\t\t\t\t\t\t&#39;Sat&#39;\r\n    \t\t\t\t\t\t];\r\n    \t\treturn days_abbr[this.getDay()];\r\n    \t};\r\n    \t\r\n    \t// Provide the day of year 1-365\r\n    \tDate.prototype.getDayOfYear = function() {\r\n    \t\tvar onejan = new Date(this.getFullYear(),0,1);\r\n    \t\treturn Math.ceil((this - onejan) / 86400000);\r\n    \t};\r\n    \t\r\n    \t// Provide the day suffix (st,nd,rd,th)\r\n    \tDate.prototype.getDaySuffix = function() {\r\n    \t\tvar d = this.getDate();\r\n    \t\tvar sfx = [&quot;th&quot;,&quot;st&quot;,&quot;nd&quot;,&quot;rd&quot;];\r\n    \t\tvar val = d%100;\r\n    \t\t\r\n    \t\treturn (sfx[(val-20)%10] || sfx[val] || sfx[0]);\r\n    \t};\r\n    \t\r\n    \t// Provide Week of Year\r\n    \tDate.prototype.getWeekOfYear = function() {\r\n            var onejan = new Date(this.getFullYear(),0,1);\r\n            return Math.ceil((((this - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n        } \r\n    \t\r\n    \t// Provide if it is a leap year or not\r\n    \tDate.prototype.isLeapYear = function(){\r\n    \t\tvar yr = this.getFullYear();\r\n    \t\t\r\n    \t\tif ((parseInt(yr)%4) == 0){\r\n    \t\t\tif (parseInt(yr)%100 == 0){\r\n    \t\t\t\tif (parseInt(yr)%400 != 0){\r\n    \t\t\t\t\treturn false;\r\n    \t\t\t\t}\r\n    \t\t\t\tif (parseInt(yr)%400 == 0){\r\n    \t\t\t\t\treturn true;\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n    \t\t\tif (parseInt(yr)%100 != 0){\r\n    \t\t\t\treturn true;\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\tif ((parseInt(yr)%4) != 0){\r\n    \t\t\treturn false;\r\n    \t\t} \r\n    \t};\r\n    \t\r\n    \t// Provide Number of Days in a given month\r\n    \tDate.prototype.getMonthDayCount = function() {\r\n            var month_day_counts = [\r\n    \t\t\t\t\t\t\t\t\t31,\r\n    \t\t\t\t\t\t\t\t\tthis.isLeapYear() ? 29 : 28,\r\n    \t\t\t\t\t\t\t\t\t31,\r\n    \t\t\t\t\t\t\t\t\t30,\r\n    \t\t\t\t\t\t\t\t\t31,\r\n    \t\t\t\t\t\t\t\t\t30,\r\n    \t\t\t\t\t\t\t\t\t31,\r\n    \t\t\t\t\t\t\t\t\t31,\r\n    \t\t\t\t\t\t\t\t\t30,\r\n    \t\t\t\t\t\t\t\t\t31,\r\n    \t\t\t\t\t\t\t\t\t30,\r\n    \t\t\t\t\t\t\t\t\t31\r\n    \t\t\t\t\t\t\t\t];\r\n    \t\t\t\t\t\t\t\t\r\n    \t\treturn month_day_counts[this.getMonth()];\r\n        } \r\n    \t\r\n    \t// format provided date into this.format format\r\n    \tDate.prototype.format = function(dateFormat){\r\n    \t\t// break apart format string into array of characters\r\n    \t\tdateFormat = dateFormat.split(&quot;&quot;);\r\n    \r\n    \t\tvar date = this.getDate(),\r\n    \t\t\tmonth = this.getMonth(),\r\n    \t\t\thours = this.getHours(),\r\n    \t\t\tminutes = this.getMinutes(),\r\n    \t\t\tseconds = this.getSeconds();\r\n    \t\t// get all date properties ( based on PHP date object functionality )\r\n    \t\tvar date_props = {\r\n    \t\t\td: date &lt; 10 ? &#39;0&#39;+date : date,\r\n    \t\t\tD: this.getDayAbbr(),\r\n    \t\t\tj: this.getDate(),\r\n    \t\t\tl: this.getDayFull(),\r\n    \t\t\tS: this.getDaySuffix(),\r\n    \t\t\tw: this.getDay(),\r\n    \t\t\tz: this.getDayOfYear(),\r\n    \t\t\tW: this.getWeekOfYear(),\r\n    \t\t\tF: this.getMonthName(),\r\n    \t\t\tm: month &lt; 10 ? &#39;0&#39;+(month+1) : month+1,\r\n    \t\t\tM: this.getMonthAbbr(),\r\n    \t\t\tn: month+1,\r\n    \t\t\tt: this.getMonthDayCount(),\r\n    \t\t\tL: this.isLeapYear() ? &#39;1&#39; : &#39;0&#39;,\r\n    \t\t\tY: this.getFullYear(),\r\n    \t\t\ty: this.getFullYear()+&#39;&#39;.substring(2,4),\r\n    \t\t\ta: hours &gt; 12 ? &#39;pm&#39; : &#39;am&#39;,\r\n    \t\t\tA: hours &gt; 12 ? &#39;PM&#39; : &#39;AM&#39;,\r\n    \t\t\tg: hours % 12 &gt; 0 ? hours % 12 : 12,\r\n    \t\t\tG: hours &gt; 0 ? hours : &quot;12&quot;,\r\n    \t\t\th: hours % 12 &gt; 0 ? hours % 12 : 12,\r\n    \t\t\tH: hours,\r\n    \t\t\ti: minutes &lt; 10 ? &#39;0&#39; + minutes : minutes,\r\n    \t\t\ts: seconds &lt; 10 ? &#39;0&#39; + seconds : seconds\t\t\t\r\n    \t\t};\r\n    \t\t\r\n    \t\t// loop through format array of characters and add matching data else add the format character (:,/, etc.)\r\n    \t\tvar date_string = &quot;&quot;;\r\n    \t\tfor(var i=0;i&lt;dateFormat.length;i++){\r\n    \t\t\tvar f = dateFormat[i];\r\n    \t\t\tif(f.match(/[a-zA-Z]/g)){\r\n    \t\t\t\tdate_string += date_props[f] ? date_props[f] : &#39;&#39;;\r\n    \t\t\t} else {\r\n    \t\t\t\tdate_string += f;\r\n    \t\t\t}\r\n    \t\t}\r\n    \r\n    \t\treturn date_string;\r\n    \t};\r\n    /*\r\n     *\r\n     * END - Date class extension\r\n     * \r\n     ************************************/"},{"score":179,"body_markdown":"If you are **already using jQuery UI** in your project you could do it this way: \r\n\r\n    var formatted = $.datepicker.formatDate(&quot;M d, yy&quot;, new Date(&quot;2014-07-08T09:02:21.377&quot;));\r\n\r\n    // formatted will be &#39;Jul 8, 2014&#39;\r\n\r\nSome datepicker date format options to play with are available [here][1].\r\n\r\n\r\n  [1]: https://jqueryui.com/resources/demos/datepicker/date-formats.html"},{"score":2,"body_markdown":"Here is a script that does exactly what you want\r\n\r\n[https://github.com/UziTech/js-date-format][1]\r\n\r\n    var d = new Date(&quot;2010-8-10&quot;);\r\n    document.write(d.format(&quot;DD-MMM-YYYY&quot;));\r\n\r\n\r\n  [1]: https://github.com/UziTech/js-date-format"},{"score":20,"body_markdown":"A JavaScript solution without using any external libraries:\r\n\r\n    var now = new Date()\r\n    months = [&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;, &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;]\r\n    var formattedDate = now.getDate() + &quot;-&quot; + months[now.getMonth()] + &quot;-&quot; + now.getFullYear()\r\n    alert(formattedDate)\r\n\r\n"},{"score":39,"body_markdown":"@S&#233;bastien  -- alternative all browser support\r\n\r\n    new Date(parseInt(496407600)*1000).toLocaleDateString(&#39;de-DE&#39;, {\r\n    year: &#39;numeric&#39;,\r\n    month: &#39;2-digit&#39;,\r\n    day: &#39;2-digit&#39;\r\n    }).replace(/\\./g, &#39;/&#39;);\r\n\r\n\r\n\r\nDocumentation:\r\n https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString"},{"score":15,"body_markdown":"If you are using jQuery UI in your code, there is an inbuilt function called `formatDate()`. I am using it this way to format today&#39;s date:\r\n\r\n    var testdate = Date();\r\n    testdate = $.datepicker.formatDate( &quot;d-M-yy&quot;,new Date(testdate));\r\n    alert(testdate);\r\n\r\nYou can see  [many other examples of formatting date in the jQuery UI documentation][1].\r\n\r\n  [1]: http://api.jqueryui.com/datepicker/#option-dateFormat\r\n"},{"score":111,"body_markdown":"Plain JavaScript is the best pick for small onetimers.\r\n\r\nOn the other hand, if you need more date stuff, [MomentJS][1] is a great solution.\r\n\r\n**For example:**\r\n\r\n    moment().format(&#39;YYYY-MM-DD HH:m:s&#39;);     // now() -&gt; 2015-03-24 14:32:20\r\n    moment(&quot;20111031&quot;, &quot;YYYYMMDD&quot;).fromNow(); // 3 years ago\r\n    moment(&quot;20120620&quot;, &quot;YYYYMMDD&quot;).fromNow(); // 3 years ago\r\n    moment().startOf(&#39;day&#39;).fromNow();        // 11 hours ago\r\n    moment().endOf(&#39;day&#39;).fromNow();          // in 13 hours\r\n\r\n  [1]: http://momentjs.com/\r\n"},{"score":1,"body_markdown":"Use:\r\n\r\n    thisDate = new Date(parseInt(jsonDateString.replace(&#39;/Date(&#39;, &#39;&#39;)));\r\n    formattedDate = (thisDate.getMonth() + 1) + &quot;/&quot; + (thisDate.getDate()+1) + &quot;/&quot; + thisDate.getFullYear();\r\n\r\nThis takes a [JSON][1] date, &quot;/Date(1429573751663)/&quot; and produces as the formatted string:\r\n\r\n&quot;4/21/2015&quot;\r\n\r\n  [1]: http://en.wikipedia.org/wiki/JSON\r\n"},{"score":565,"body_markdown":"If you need to quickly format your date using plain JavaScript, use `getDate`, `getMonth + 1`, `getFullYear`, `getHours` and `getMinutes`:\r\n\r\n    var d = new Date();\r\n\r\n    var datestring = d.getDate()  + &quot;-&quot; + (d.getMonth()+1) + &quot;-&quot; + d.getFullYear() + &quot; &quot; +\r\n    d.getHours() + &quot;:&quot; + d.getMinutes();\r\n\r\n    // 16-5-2015 9:50\r\n\r\nOr, if you need it to be padded with zeros:\r\n\r\n    var datestring = (&quot;0&quot; + d.getDate()).slice(-2) + &quot;-&quot; + (&quot;0&quot;+(d.getMonth()+1)).slice(-2) + &quot;-&quot; +\r\n        d.getFullYear() + &quot; &quot; + (&quot;0&quot; + d.getHours()).slice(-2) + &quot;:&quot; + (&quot;0&quot; + d.getMinutes()).slice(-2);\r\n\r\n    // 16-05-2015 09:50\r\n"},{"score":51,"body_markdown":"Requested format in one line - no libraries and no Date methods, just regex: \r\n\r\n    var d = (new Date()).toString().replace(/\\S+\\s(\\S+)\\s(\\d+)\\s(\\d+)\\s.*/,&#39;$2-$1-$3&#39;);\r\n    // date will be formatted as &quot;14-Oct-2015&quot; (pass any date object in place of &#39;new Date()&#39;)\r\n\r\nIn my testing, this works reliably in the major browsers (Chrome, Safari, Firefox and IE.) As @RobG pointed out, the output of Date.prototype.toString() is implementation-dependent, so for international or non-browser implementations, just test the output to be sure it works right in your JavaScript engine. You can even add some code to test the string output and make sure it&#39;s matching what you expect before you do the regex replace. "},{"score":2,"body_markdown":"If you are **already using ExtJS** in your project you could use [Ext.Date][1]: \r\n\r\n    var date = new Date();\r\n    Ext.Date.format(date, &quot;d-M-Y&quot;);\r\n\r\nreturns:\r\n\r\n    &quot;11-Nov-2015&quot;\r\n\r\n  [1]: http://docs.sencha.com/extjs/4.0.7/#!/api/Ext.Date\r\n"},{"score":3,"body_markdown":"I use the following. It is simple and works fine.\r\n\r\n     var dtFormat = require(&#39;dtformat&#39;);\r\n       var today = new Date();\r\n       dtFormat(today, &quot;dddd, mmmm dS, yyyy, h:MM:ss TT&quot;);\r\n\r\nOr this:\r\n\r\n    var now = new Date()\r\n    months = [&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;, &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;]\r\n    var formattedDate = now.getDate()  + &quot;-&quot; + months[now.getMonth()] + &quot;-&quot; + now.getFullYear()\r\n    alert(formattedDate)\r\n"},{"score":3,"body_markdown":"There is a new library, [smarti.to.js][1], for localized formatting of JavaScript numbers, dates and JSON dates (Microsoft or ISO8601).\r\n\r\nExample:\r\n\r\n    new Date(&#39;2015-1-1&#39;).to(&#39;dd.MM.yy&#39;)         // Outputs 01.01.2015\r\n    &quot;2015-01-01T10:11:12.123Z&quot;.to(&#39;dd.MM.yy&#39;)   // Outputs 01.01.2015\r\n\r\nThere are also custom short patterns defined in the localization file (smarti.to.{culture}.js). Example (smarti.to.et-EE.js):\r\n\r\n    new Date(&#39;2015-1-1&#39;).to(&#39;d&#39;)                // Outputs 1.01.2015\r\n\r\nAnd a multiformatting ability:\r\n\r\n    smarti.format(&#39;{0:n2} + {1:n2} = {2:n2}&#39;, 1, 2, 3)   // Output: 1,00 + 2,00 = 3,00\r\n\r\n  [1]: https://github.com/onitecsoft/smarti.to.js\r\n"},{"score":2183,"body_markdown":"If you need slightly less control over formatting than the currently accepted answer, [`Date#toLocaleDateString`][5] can be used to create standard locale-specific renderings. The `locale` and `options` arguments let applications specify the language whose formatting conventions should be used, and allow some customization of the rendering.\r\n\r\n###Options key examples:\r\n\r\n 1. **day:** &lt;br/&gt;\r\n    The representation of the day. &lt;br/&gt;\r\n    Possible values are &quot;numeric&quot;, &quot;2-digit&quot;.\r\n 2. **weekday:** &lt;br/&gt;\r\n    The representation of the weekday. &lt;br/&gt;\r\n    Possible values are &quot;narrow&quot;, &quot;short&quot;, &quot;long&quot;.\r\n 3. **year:** &lt;br/&gt;\r\n    The representation of the year. &lt;br/&gt;\r\n    Possible values are &quot;numeric&quot;, &quot;2-digit&quot;.\r\n 4. **month:** &lt;br/&gt;\r\n    The representation of the month. &lt;br/&gt;\r\n    Possible values are &quot;numeric&quot;, &quot;2-digit&quot;, &quot;narrow&quot;, &quot;short&quot;, &quot;long&quot;.\r\n 5. **hour:** &lt;br/&gt;\r\n    The representation of the hour. &lt;br/&gt;\r\n    Possible values are &quot;numeric&quot;, &quot;2-digit&quot;.\r\n 6. **minute:**\r\n    The representation of the minute. &lt;br/&gt;\r\n     Possible values are &quot;numeric&quot;, &quot;2-digit&quot;.\r\n 7. **second:** &lt;br/&gt;\r\n    The representation of the second. &lt;br/&gt;\r\n    Possible values are &quot;numeric&quot;, 2-digit&quot;.\r\n\r\nAll these keys are optional.  You can change the number of options values based on your requirements, and this will also reflect the presence of each date time term.\r\n\r\nNote: If you would only like to configure the content options, but still use the current locale, passing `null` for the first parameter will cause an error.  Use `undefined` instead.\r\n\r\n###For different languages:\r\n\r\n   1. **&quot;en-US&quot;:** For English\r\n   2. **&quot;hi-IN&quot;:** For Hindi\r\n   3. **&quot;ja-JP&quot;:** For Japanese\r\n\r\nYou can use more language options.\r\n\r\n###For example\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var options = { weekday: &#39;long&#39;, year: &#39;numeric&#39;, month: &#39;long&#39;, day: &#39;numeric&#39; };\r\n    var today  = new Date();\r\n\r\n    console.log(today.toLocaleDateString(&quot;en-US&quot;)); // 9/17/2016\r\n    console.log(today.toLocaleDateString(&quot;en-US&quot;, options)); // Saturday, September 17, 2016\r\n    console.log(today.toLocaleDateString(&quot;hi-IN&quot;, options)); // शनिवार, 17 सितंबर 2016\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nYou can also use the `toLocaleString()` method for the same purpose. The only difference is this function provides the time when you don&#39;t pass any options.\r\n\r\n    // Example\r\n    9/17/2016, 1:21:34 PM\r\n\r\n###References:\r\n\r\n* [`toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString)\r\n\r\n* [`toLocaleDateString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString)\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\r\n  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/format\r\n  [4]: https://stackoverflow.com/questions/60544534/controlling-the-format-of-dates-in-javascript/60545316#60545316\r\n  [5]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString"},{"score":3,"body_markdown":"Short, widely compatible approach:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function formatDate(date) {\r\n        date.toISOString()\r\n        .replace(/^(\\d+)-(\\d+)-(\\d+).*$/, // Only extract Y-M-D\r\n            function (a,y,m,d) {\r\n                return [\r\n                    d, // Day\r\n                    [&#39;Jan&#39;,&#39;Feb&#39;,&#39;Mar&#39;,&#39;Apr&#39;,&#39;May&#39;,&#39;Jun&#39;,  // Month Names\r\n                    &#39;Jul&#39;,&#39;Ago&#39;,&#39;Sep&#39;,&#39;Oct&#39;,&#39;Nov&#39;,&#39;Dec&#39;]\r\n                    [m-1], // Month\r\n                    y  // Year\r\n                ].join(&#39;-&#39;) // Stitch together\r\n            })\r\n    }\r\n\r\nOr, as a single line:\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    date.toISOString().replace(/^(\\d+)-(\\d+)-(\\d+)T(\\d+):(\\d+):(\\d+).(\\d+)Z$/, function (a,y,m,d) {return [d,[&#39;Jan&#39;,&#39;Feb&#39;,&#39;Mar&#39;,&#39;Apr&#39;,&#39;May&#39;,&#39;Jun&#39;,&#39;Jul&#39;,&#39;Ago&#39;,&#39;Sep&#39;,&#39;Oct&#39;,&#39;Nov&#39;,&#39;Dic&#39;][m-1],y].join(&#39;-&#39;)})"},{"score":5,"body_markdown":"Try this:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function init(){\r\n        var d = new Date();\r\n        var day = d.getDate();\r\n        var x = d.toDateString().substr(4, 3);\r\n        var year = d.getFullYear();\r\n        document.querySelector(&quot;#mydate&quot;).innerHTML = day + &#39;-&#39; + x + &#39;-&#39; + year;\r\n    }\r\n    window.onload = init;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;div id=&quot;mydate&quot;&gt;&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":100,"body_markdown":"In modern browsers **(*)**, you can just do this:\r\n\r\n    var today = new Date().toLocaleDateString(&#39;en-GB&#39;, {\r\n        day : &#39;numeric&#39;,\r\n        month : &#39;short&#39;,\r\n        year : &#39;numeric&#39;\r\n    }).split(&#39; &#39;).join(&#39;-&#39;);\r\n\r\nOutput if executed today (january 24ᵗʰ, 2016):\r\n\r\n    &#39;24-Jan-2016&#39;\r\n\r\n----------\r\n\r\n**(*)** [**According to MDN**][4], &quot;modern browsers&quot; means Chrome&amp;nbsp;24+, Firefox 29+, Internet&amp;nbsp;Explorer&amp;nbsp;11, Edge&amp;nbsp;12+, Opera&amp;nbsp;15+ &amp; Safari [**nightly build**][5].\r\n\r\n\r\n  [4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\r\n  [5]: https://softwareengineering.stackexchange.com/questions/56490/what-does-nightly-builds-mean\r\n"},{"score":10,"body_markdown":"    var today = new Date();\r\n    var formattedToday = today.toLocaleDateString() + &#39; &#39; + today.toLocaleTimeString();"},{"score":0,"body_markdown":"2.39KB minified. One file. https://github.com/rhroyston/clock-js  \r\n&lt;br&gt;\r\n10-Aug-2010 would be:\r\n\r\n    var str = clock.month\r\n    str.charAt(0).toUpperCase() + str.slice(1,3); //gets you &quot;Aug&quot;\r\n    console.log(clock.day + &#39;-&#39; + str + &#39;-&#39; + clock.year); //gets you 10-Aug-2010\r\n\r\n\r\n\r\n\r\n&lt;br&gt;\r\n&lt;br&gt;"},{"score":13,"body_markdown":"This is how I implemented for my npm plugins\r\n\r\n    var monthNames = [\r\n      &quot;January&quot;, &quot;February&quot;, &quot;March&quot;,\r\n      &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;,\r\n      &quot;August&quot;, &quot;September&quot;, &quot;October&quot;,\r\n      &quot;November&quot;, &quot;December&quot;\r\n    ];\r\n    \r\n    var Days = [\r\n      &quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;,\r\n      &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;\r\n    ];\r\n    \r\n    var formatDate = function(dt,format){\r\n      format = format.replace(&#39;ss&#39;, pad(dt.getSeconds(),2));\r\n      format = format.replace(&#39;s&#39;, dt.getSeconds());\r\n      format = format.replace(&#39;dd&#39;, pad(dt.getDate(),2));\r\n      format = format.replace(&#39;d&#39;, dt.getDate());\r\n      format = format.replace(&#39;mm&#39;, pad(dt.getMinutes(),2));\r\n      format = format.replace(&#39;m&#39;, dt.getMinutes());\r\n      format = format.replace(&#39;MMMM&#39;, monthNames[dt.getMonth()]);\r\n      format = format.replace(&#39;MMM&#39;, monthNames[dt.getMonth()].substring(0,3));\r\n      format = format.replace(&#39;MM&#39;, pad(dt.getMonth()+1,2));\r\n      format = format.replace(/M(?![ao])/, dt.getMonth()+1);\r\n      format = format.replace(&#39;DD&#39;, Days[dt.getDay()]);\r\n      format = format.replace(/D(?!e)/, Days[dt.getDay()].substring(0,3));\r\n      format = format.replace(&#39;yyyy&#39;, dt.getFullYear());\r\n      format = format.replace(&#39;YYYY&#39;, dt.getFullYear());\r\n      format = format.replace(&#39;yy&#39;, (dt.getFullYear()+&quot;&quot;).substring(2));\r\n      format = format.replace(&#39;YY&#39;, (dt.getFullYear()+&quot;&quot;).substring(2));\r\n      format = format.replace(&#39;HH&#39;, pad(dt.getHours(),2));\r\n      format = format.replace(&#39;H&#39;, dt.getHours());\r\n      return format;\r\n    }\r\n    \r\n    pad = function(n, width, z) {\r\n      z = z || &#39;0&#39;;\r\n      n = n + &#39;&#39;;\r\n      return n.length &gt;= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n    }"},{"score":4,"body_markdown":"If you fancy a short, human-readable, function - this is easily adjustable to suit you.\r\n\r\nThe **timeStamp** parameter is milliseconds from 1970 - it is returned by `new Date().getTime()` and many other devices...\r\n\r\nOK, I changed my mind. I included an extra function for zero padding. Curses!\r\n\r\n     function zeroPad(aNumber) {\r\n         return (&quot;0&quot;+aNumber).slice(-2);\r\n     }\r\n     function humanTime(timeStamp) {\r\n        var M = [&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;, &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;];\r\n        var D = new Date(timeStamp); // 23 Aug 2016 16:45:59 &lt;-- Desired format.\r\n        return D.getDate() + &quot; &quot; + M[D.getMonth()] + &quot; &quot; + D.getFullYear() + &quot; &quot; + D.getHours() + &quot;:&quot; + zeroPad(d.getMinutes()) + &quot;:&quot; + zeroPad(D.getSeconds());\r\n     }"},{"score":7,"body_markdown":"Inspired by [JD Smith][1]&#39;s marvellous regular expression solution, I suddenly had this head-splitting idea:\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var D = Date().toString().split(&quot; &quot;);\r\n    console.log(D[2] + &quot;-&quot; + D[1] + &quot;-&quot; + D[3]);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: https://stackoverflow.com/users/530967/jd-smith\r\n"},{"score":16,"body_markdown":"We have lots of solutions for this, but I think the best of them is Moment.js. So I personally suggest to use Moment.js for date and time operations.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log(moment().format(&#39;DD-MMM-YYYY&#39;));\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/moment.js/2.14.1/moment.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n"},{"score":243,"body_markdown":"Custom formatting function:\r\n---------------------------\r\n\r\nFor fixed formats, a simple function make the job. The following example generates the international format YYYY-MM-DD:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n    function dateToYMD(date) {\r\n        var d = date.getDate();\r\n        var m = date.getMonth() + 1; //Month from 0 to 11\r\n        var y = date.getFullYear();\r\n        return &#39;&#39; + y + &#39;-&#39; + (m&lt;=9 ? &#39;0&#39; + m : m) + &#39;-&#39; + (d &lt;= 9 ? &#39;0&#39; + d : d);\r\n    }\r\n\r\n    console.log(dateToYMD(new Date(2017,10,5))); // Nov 5\r\n&lt;!-- end snippet --&gt;\r\n\r\nThe OP format may be generated like:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n    function dateToYMD(date) {\r\n        var strArray=[&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;, &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;];\r\n        var d = date.getDate();\r\n        var m = strArray[date.getMonth()];\r\n        var y = date.getFullYear();\r\n        return &#39;&#39; + (d &lt;= 9 ? &#39;0&#39; + d : d) + &#39;-&#39; + m + &#39;-&#39; + y;\r\n    }\r\n    console.log(dateToYMD(new Date(2017,10,5))); // Nov 5\r\n&lt;!-- end snippet --&gt;\r\n\r\nNote: It is, however, usually not a good idea to extend the JavaScript standard libraries (e.g. by adding this function to the prototype of Date). \r\n\r\nA more advanced function could generate configurable output based on a format parameter.\r\n\r\nIf to write a formatting function is too long, there are plenty of libraries around which does it. Some other answers already enumerate them. But increasing dependencies also has it counter-part.\r\n\r\nStandard ECMAScript formatting functions:\r\n-----------------------------------------\r\n\r\nSince more recent versions of ECMAScript, the `Date` class has some specific formatting functions:\r\n\r\n&gt; **toDateString**: Implementation dependent, show only the date.\r\n&gt;\r\n&gt; http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.todatestring\r\n&gt;\r\n&gt;     new Date().toDateString(); // e.g. &quot;Fri Nov 11 2016&quot;\r\n\r\n----------\r\n\r\n&gt; **toISOString**: Show ISO 8601 date and time.\r\n&gt;\r\n&gt; http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.toisostring\r\n&gt;\r\n&gt;     new Date().toISOString(); // e.g. &quot;2016-11-21T08:00:00.000Z&quot;\r\n\r\n----------\r\n\r\n&gt; **toJSON**: Stringifier for JSON. \r\n&gt;\r\n&gt; http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tojson\r\n&gt;\r\n&gt;     new Date().toJSON(); // e.g. &quot;2016-11-21T08:00:00.000Z&quot;\r\n\r\n----------\r\n\r\n&gt; **toLocaleDateString**: Implementation dependent, a date in locale format.\r\n&gt;\r\n&gt; http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tolocaledatestring\r\n&gt;\r\n&gt;     new Date().toLocaleDateString(); // e.g. &quot;21/11/2016&quot;\r\n\r\n----------\r\n\r\n&gt; **toLocaleString**: Implementation dependent, a date&amp;time in locale format.\r\n&gt;\r\n&gt; http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tolocalestring\r\n&gt;\r\n&gt;     new Date().toLocaleString(); // e.g. &quot;21/11/2016, 08:00:00 AM&quot;\r\n\r\n----------\r\n\r\n&gt; **toLocaleTimeString**: Implementation dependent, a time in locale format.\r\n&gt;\r\n&gt; http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tolocaletimestring\r\n&gt;\r\n&gt;     new Date().toLocaleTimeString(); // e.g. &quot;08:00:00 AM&quot;\r\n\r\n----------\r\n\r\n&gt; **toString**: Generic toString for Date.\r\n&gt;\r\n&gt; http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tostring\r\n&gt;\r\n&gt;     new Date().toString(); // e.g. &quot;Fri Nov 21 2016 08:00:00 GMT+0100 (W. Europe Standard Time)&quot;\r\n\r\n\r\nNote: it is possible to generate custom output out of those formatting &gt;\r\n\r\n&gt;     new Date().toISOString().slice(0,10); //return YYYY-MM-DD\r\n\r\nExamples snippets:\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\nconsole.log(&quot;1) &quot;+  new Date().toDateString());\r\nconsole.log(&quot;2) &quot;+  new Date().toISOString());\r\nconsole.log(&quot;3) &quot;+  new Date().toJSON());\r\nconsole.log(&quot;4) &quot;+  new Date().toLocaleDateString());\r\nconsole.log(&quot;5) &quot;+  new Date().toLocaleString());\r\nconsole.log(&quot;6) &quot;+  new Date().toLocaleTimeString());\r\nconsole.log(&quot;7) &quot;+  new Date().toString());\r\nconsole.log(&quot;8) &quot;+  new Date().toISOString().slice(0,10));\r\n&lt;!-- end snippet --&gt;"},{"score":38,"body_markdown":"**OK**, we have got something called **Intl** which is very useful for formatting a date in JavaScript these days:\r\n\r\nYour date as below:\r\n\r\n    var date = &#39;10/8/2010&#39;;\r\n\r\nAnd you change to Date by using new Date() like below:\r\n\r\n    date = new Date(date);\r\n\r\nAnd now you can format it any way you like using a list of **locales** like below:\r\n\r\n    date = new Intl.DateTimeFormat(&#39;en-AU&#39;).format(date); // Australian date format: &quot;8/10/2010&quot; \r\n&lt;br&gt;\r\n\r\n    date = new Intl.DateTimeFormat(&#39;en-US&#39;).format(date); // USA date format: &quot;10/8/2010&quot; \r\n&lt;br&gt;\r\n\r\n    date = new Intl.DateTimeFormat(&#39;ar-EG&#39;).format(date);  // Arabic date format: &quot;٨‏/١٠‏/٢٠١٠&quot;\r\n\r\nIf you exactly want the format you mentioned above, you can do:\r\n\r\n    date = new Date(Date.UTC(2010, 7, 10, 0, 0, 0));\r\n    var options = {year: &quot;numeric&quot;, month: &quot;short&quot;, day: &quot;numeric&quot;};\r\n    date = new Intl.DateTimeFormat(&quot;en-AU&quot;, options).format(date).replace(/\\s/g, &#39;-&#39;);\r\n\r\nAnd the result is going to be:\r\n\r\n    &quot;10-Aug-2010&quot;\r\n\r\nFor more see the [Intl API][1] and [Intl.DateTimeFormat][2] documentation.\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"},{"score":32,"body_markdown":"Using an ECMAScript Edition 6 (ES6/ES2015) string template:\r\n\r\n    let d = new Date();\r\n    let formatted = `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;\r\n\r\nIf you need to change the delimiters:\r\n\r\n    const delimiter = &#39;/&#39;;\r\n    let formatted = [d.getFullYear(), d.getMonth() + 1, d.getDate()].join(delimiter);\r\n\r\n"},{"score":16,"body_markdown":"A useful and flexible way for formatting the DateTimes in JavaScript is `Intl.DateTimeFormat`:\r\n\r\n    var date = new Date();\r\n    var options = { year: &#39;numeric&#39;, month: &#39;short&#39;, day: &#39;2-digit&#39;};\r\n    var _resultDate = new Intl.DateTimeFormat(&#39;en-GB&#39;, options).format(date);\r\n    // The _resultDate is: &quot;12 Oct 2017&quot;\r\n    // Replace all spaces with - and then log it.\r\n    console.log(_resultDate.replace(/ /g,&#39;-&#39;));\r\n\r\nResult Is:  `&quot;12-Oct-2017&quot;`\r\n\r\nThe date and time formats can be customized using the options argument.\r\n\r\nThe `Intl.DateTimeFormat` object is a constructor for objects that enable language sensitive date and time formatting.\r\n\r\nSyntax\r\n\r\n    new Intl.DateTimeFormat([locales[, options]])\r\n    Intl.DateTimeFormat.call(this[, locales[, options]])\r\n\r\n**Parameters**\r\n\r\n**locales**\r\n\r\nOptional. A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the Intl page. The following Unicode extension keys are allowed:\r\n\r\n    nu\r\n    Numbering system. Possible values include: &quot;arab&quot;, &quot;arabext&quot;, &quot;bali&quot;, &quot;beng&quot;, &quot;deva&quot;, &quot;fullwide&quot;, &quot;gujr&quot;, &quot;guru&quot;, &quot;hanidec&quot;, &quot;khmr&quot;, &quot;knda&quot;, &quot;laoo&quot;, &quot;latn&quot;, &quot;limb&quot;, &quot;mlym&quot;, &quot;mong&quot;, &quot;mymr&quot;, &quot;orya&quot;, &quot;tamldec&quot;, &quot;telu&quot;, &quot;thai&quot;, &quot;tibt&quot;.\r\n    ca\r\n    Calendar. Possible values include: &quot;buddhist&quot;, &quot;chinese&quot;, &quot;coptic&quot;, &quot;ethioaa&quot;, &quot;ethiopic&quot;, &quot;gregory&quot;, &quot;hebrew&quot;, &quot;indian&quot;, &quot;islamic&quot;, &quot;islamicc&quot;, &quot;iso8601&quot;, &quot;japanese&quot;, &quot;persian&quot;, &quot;roc&quot;.\r\n\r\n**Options**\r\n\r\nOptional. An object with some or all of the following properties:\r\n\r\n**localeMatcher**\r\n\r\nThe locale matching algorithm to use. Possible values are `&quot;lookup&quot;` and `&quot;best fit&quot;`; the default is `&quot;best fit&quot;`. For information about this option, see the Intl page.\r\n\r\n**timeZone**\r\n\r\nThe time zone to use. The only value implementations must recognize is `&quot;UTC&quot;`; the default is the runtime&#39;s default time zone. Implementations may also recognize the time zone names of the IANA time zone database, such as `&quot;Asia/Shanghai&quot;`, `&quot;Asia/Kolkata&quot;`, `&quot;America/New_York&quot;`.\r\n\r\n**hour12**\r\n\r\nWhether to use 12-hour time (as opposed to 24-hour time). Possible values are `true` and `false`; the default is locale dependent.\r\n\r\n**formatMatcher**\r\n\r\nThe format matching algorithm to use. Possible values are `&quot;basic&quot;` and `&quot;best fit&quot;`; the default is `&quot;best fit&quot;`. See the following paragraphs for information about the use of this property.\r\n\r\nThe following properties describe the date-time components to use in formatted output and their desired representations. Implementations are required to support at least the following subsets:\r\n\r\n    weekday, year, month, day, hour, minute, second\r\n    weekday, year, month, day\r\n    year, month, day\r\n    year, month\r\n    month, day\r\n    hour, minute, second\r\n    hour, minute\r\n\r\nImplementations may support other subsets, and requests will be negotiated against all available subset-representation combinations to find the best match. Two algorithms are available for this negotiation and selected by the formatMatcher property: A fully specified `&quot;basic&quot;` algorithm and an implementation dependent &quot;best fit&quot; algorithm.\r\n\r\n**weekday**\r\n\r\nThe representation of the weekday. Possible values are `&quot;narrow&quot;`, `&quot;short&quot;`, `&quot;long&quot;`.\r\n\r\n**era**\r\n\r\nThe representation of the era. Possible values are `&quot;narrow&quot;`, `&quot;short&quot;`, `&quot;long&quot;`.\r\n\r\n**year**\r\n\r\nThe representation of the year. Possible values are `&quot;numeric&quot;`, `&quot;2-digit&quot;`.\r\n\r\n**month**\r\n\r\nThe representation of the month. Possible values are `&quot;numeric&quot;`, `&quot;2-digit&quot;`, `&quot;narrow&quot;`, `&quot;short&quot;`, `&quot;long&quot;`.\r\n\r\n**day**\r\n\r\nThe representation of the day. Possible values are `&quot;numeric&quot;`, `&quot;2-digit&quot;`.\r\n\r\n**hour**\r\n\r\nThe representation of the hour. Possible values are `&quot;numeric&quot;`, `&quot;2-digit&quot;`.\r\n\r\n**minute**\r\n\r\nThe representation of the minute. Possible values are `&quot;numeric&quot;`, `&quot;2-digit&quot;`.\r\n\r\n**second**\r\n\r\nThe representation of the second. Possible values are `&quot;numeric&quot;`, `&quot;2-digit&quot;`.\r\n\r\n**timeZoneName**\r\n\r\nThe representation of the time zone name. Possible values are `&quot;short&quot;`, `&quot;long&quot;`.\r\nThe default value for each date-time component property is undefined, but if all component properties are undefined, then the year, month and day are assumed to be `&quot;numeric&quot;`.\r\n\r\n[Check Online][1]\r\n\r\n[More Details][2]\r\n\r\n\r\n  [1]: https://jsbin.com/buvaketoho/5/edit?js,console\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\r\n"},{"score":1,"body_markdown":"The following code will allow you to format the date to either `DD-MM-YYYY` (27-12-2017) or `DD MMM YYYY` (27 Dec 2017) :\r\n\r\n    /** Pad number to fit into nearest power of 10 */\r\n    function padNumber(number, prependChar, count) {\r\n      var out = &#39;&#39; + number; var i;\r\n      if (number &lt; Math.pow(10, count))\r\n        while (out.length &lt; (&#39;&#39; + Math.pow(10, count)).length) out = prependChar + out;\r\n      \r\n      return out;\r\n    }\r\n    \r\n    /* Format the date to &#39;DD-MM-YYYY&#39; or &#39;DD MMM YYYY&#39; */\r\n    function dateToDMY(date, useNumbersOnly) {\r\n      var months = [\r\n        &#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;, &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, \r\n        &#39;Nov&#39;, &#39;Dec&#39;\r\n      ];\r\n    \r\n      return &#39;&#39; + padNumber(date.getDate(), &#39;0&#39;, 1) + \r\n       (useNumbersOnly? &#39;-&#39; + padNumber(date.getMonth() + 1, &#39;0&#39;, 1) + &#39;-&#39; : &#39; &#39; + months[date.getMonth()] + &#39; &#39;)\r\n        + date.getFullYear();\r\n    }\r\n\r\nChange the order of `date.getFullYear()` and `padNumber(date.getDate(), &#39;0&#39;, 1)` to make a `dateToYMD()` function.\r\n\r\nSee [repl.it example](https://repl.it/NUI4/2) for details."},{"score":4,"body_markdown":"`DateFormatter.formatDate(new Date(2010,7,10), &#39;DD-MMM-YYYY&#39;)`\r\n\r\n=&gt;`10-Aug-2010`\r\n\r\n`DateFormatter.formatDate(new Date(), &#39;YYYY-MM-DD HH:mm:ss&#39;)`\r\n\r\n=&gt;`2017-11-22 19:52:37`\r\n\r\n`DateFormatter.formatDate(new Date(2005, 1, 2, 3, 4, 5), &#39;D DD DDD DDDD, M MM MMM MMMM, YY YYYY, h hh H HH, m mm, s ss, a A&#39;)`\r\n\r\n=&gt;`2 02 Wed Wednesday, 2 02 Feb February, 05 2005, 3 03 3 03, 4 04, 5 05, am AM`\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var DateFormatter = {\r\n      monthNames: [\r\n        &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,\r\n        &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;\r\n      ],\r\n      dayNames: [&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;],\r\n      formatDate: function (date, format) {\r\n        var self = this;\r\n        format = self.getProperDigits(format, /d+/gi, date.getDate());\r\n        format = self.getProperDigits(format, /M+/g, date.getMonth() + 1);\r\n        format = format.replace(/y+/gi, function (y) {\r\n          var len = y.length;\r\n          var year = date.getFullYear();\r\n          if (len == 2)\r\n            return (year + &quot;&quot;).slice(-2);\r\n          else if (len == 4)\r\n            return year;\r\n          return y;\r\n        })\r\n        format = self.getProperDigits(format, /H+/g, date.getHours());\r\n        format = self.getProperDigits(format, /h+/g, self.getHours12(date.getHours()));\r\n        format = self.getProperDigits(format, /m+/g, date.getMinutes());\r\n        format = self.getProperDigits(format, /s+/gi, date.getSeconds());\r\n        format = format.replace(/a/ig, function (a) {\r\n          var amPm = self.getAmPm(date.getHours())\r\n          if (a === &#39;A&#39;)\r\n            return amPm.toUpperCase();\r\n          return amPm;\r\n        })\r\n        format = self.getFullOr3Letters(format, /d+/gi, self.dayNames, date.getDay())\r\n        format = self.getFullOr3Letters(format, /M+/g, self.monthNames, date.getMonth())\r\n        return format;\r\n      },\r\n      getProperDigits: function (format, regex, value) {\r\n        return format.replace(regex, function (m) {\r\n          var length = m.length;\r\n          if (length == 1)\r\n            return value;\r\n          else if (length == 2)\r\n            return (&#39;0&#39; + value).slice(-2);\r\n          return m;\r\n        })\r\n      },\r\n      getHours12: function (hours) {\r\n        // https://stackoverflow.com/questions/10556879/changing-the-1-24-hour-to-1-12-hour-for-the-gethours-method\r\n        return (hours + 24) % 12 || 12;\r\n      },\r\n      getAmPm: function (hours) {\r\n        // https://stackoverflow.com/questions/8888491/how-do-you-display-javascript-datetime-in-12-hour-am-pm-format\r\n        return hours &gt;= 12 ? &#39;pm&#39; : &#39;am&#39;;\r\n      },\r\n      getFullOr3Letters: function (format, regex, nameArray, value) {\r\n        return format.replace(regex, function (s) {\r\n          var len = s.length;\r\n          if (len == 3)\r\n            return nameArray[value].substr(0, 3);\r\n          else if (len == 4)\r\n            return nameArray[value];\r\n          return s;\r\n        })\r\n      }\r\n    }\r\n\r\n    console.log(DateFormatter.formatDate(new Date(), &#39;YYYY-MM-DD HH:mm:ss&#39;));\r\n    console.log(DateFormatter.formatDate(new Date(), &#39;D DD DDD DDDD, M MM MMM MMMM, YY YYYY, h hh H HH, m mm, s ss, a A&#39;));\r\n    console.log(DateFormatter.formatDate(new Date(2005, 1, 2, 3, 4, 5), &#39;D DD DDD DDDD, M MM MMM MMMM, YY YYYY, h hh H HH, m mm, s ss, a A&#39;));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThe format description was taken from [Ionic Framework][1] (it does not support `Z`, UTC Timezone Offset)\r\n\r\n&gt; Not thoroughly tested\r\n\r\n  [1]: https://ionicframework.com/docs/api/components/datetime/DateTime/\r\n"},{"score":1,"body_markdown":"I know someone might say that this is silly solution, but it does do the trick by removing the unnecessary information from the date string.\r\n\r\n`yourDateObject` produces:\r\n\r\nWed Dec 13 2017 20:40:40 GMT+0200 (EET)\r\n\r\n`yourDateObject.toString().slice(0, 15);` produces:\r\n\r\nWed Dec 13 2017\r\n"},{"score":16,"body_markdown":"This may help with the problem:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var d = new Date();\r\n\r\n    var options = {   \r\n        day: &#39;numeric&#39;,\r\n        month: &#39;long&#39;, \r\n        year: &#39;numeric&#39;\r\n    };\r\n\r\nconsole.log(d.toLocaleDateString(&#39;en-ZA&#39;, options));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n[![Date to locate format][1]][1]\r\n\r\n  [1]: https://i.stack.imgur.com/qURDD.png\r\n"},{"score":17,"body_markdown":"&lt;!-- begin snippet: js hide: false console: false babel: true --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    new Date().toLocaleDateString()\r\n\r\n    // &quot;3/21/2018&quot;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nMore documentation at [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString)"},{"score":2,"body_markdown":"This is the main answer modified to have 3-char months, and 2-digit year:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function formatDate(date) {\r\n        var monthNames = [&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;];\r\n        var day = date.getDate(), monthIndex = date.getMonth(), year = date.getFullYear().toString().substr(-2);\r\n        return day + &#39; &#39; + monthNames[monthIndex] + &#39; &#39; + year;\r\n    }\r\n\r\n    document.write(formatDate(new Date()));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":9,"body_markdown":"For any one looking for a really simple ES6 solution to copy, paste and adopt:\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: true --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const dateToString = d =&gt; `${d.getFullYear()}-${(&#39;00&#39; + (d.getMonth() + 1)).slice(-2)}-${(&#39;00&#39; + d.getDate()).slice(-2)}` \r\n\r\n    // how to use:\r\n    const myDate = new Date(Date.parse(&#39;04 Dec 1995 00:12:00 GMT&#39;))\r\n    console.log(dateToString(myDate)) // 1995-12-04\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n   "},{"score":2,"body_markdown":"Other way that you can format the date:\r\n\r\n    function formatDate(dDate,sMode){\r\n        var today = dDate;\r\n        var dd = today.getDate();\r\n        var mm = today.getMonth()+1; //January is 0!\r\n        var yyyy = today.getFullYear();\r\n        if(dd&lt;10) {\r\n            dd = &#39;0&#39;+dd\r\n        }\r\n        if(mm&lt;10) {\r\n            mm = &#39;0&#39;+mm\r\n        }\r\n        if (sMode+&quot;&quot;==&quot;&quot;){\r\n            sMode = &quot;dd/mm/yyyy&quot;;\r\n        }\r\n        if (sMode == &quot;yyyy-mm-dd&quot;){\r\n            return  yyyy + &quot;-&quot; + mm + &quot;-&quot; + dd + &quot;&quot;;\r\n        }\r\n        if (sMode == &quot;dd/mm/yyyy&quot;){\r\n            return  dd + &quot;/&quot; + mm + &quot;/&quot; + yyyy;\r\n        }\r\n    }\r\n\r\n"},{"score":2,"body_markdown":"\r\n`yy` = 2-digit year;\r\n`yyyy` = full year\r\n\r\n`M` = digit month;\r\n`MM` = 2-digit month;\r\n`MMM` = short month name;\r\n`MMMM` = full month name\r\n\r\n`EEEE` = full weekday name;\r\n`EEE` = short weekday name\r\n\r\n`d` = digit day;\r\n`dd` = 2-digit day\r\n\r\n`h` = hours;\r\n`hh` = 2-digit hours\r\n\r\n`m` = minutes;\r\n`mm` = 2-digit minutes\r\n\r\n`s` = seconds;\r\n`ss` = 2-digit seconds\r\n\r\n`S` = miliseconds\r\n\r\nUsed similar formating as [Class SimpleDateFormat (Java)][1]\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n    var monthNames = [\r\n      &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;,\r\n      &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;\r\n    ];\r\n    var dayOfWeekNames = [\r\n      &quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;,\r\n      &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;\r\n    ];\r\n    function formatDate(date, formatStr){\r\n        if (!formatStr) {\r\n          formatStr = &#39;dd/mm/yyyy&#39;;\r\n        }\r\n        var day = date.getDate(),\r\n            month = date.getMonth(),\r\n            year = date.getFullYear(),\r\n            hour = date.getHours(),\r\n            minute = date.getMinutes(),\r\n            second = date.getSeconds(),\r\n            miliseconds = date.getMilliseconds(),\r\n            hh = twoDigitPad(hour),\r\n            mm = twoDigitPad(minute),\r\n            ss = twoDigitPad(second),\r\n            EEEE = dayOfWeekNames[date.getDay()],\r\n            EEE = EEEE.substr(0, 3),\r\n            dd = twoDigitPad(day),\r\n            M = month + 1,\r\n            MM = twoDigitPad(M),\r\n            MMMM = monthNames[month],\r\n            MMM = MMMM.substr(0, 3),\r\n            yyyy = year + &quot;&quot;,\r\n            yy = yyyy.substr(2, 2)\r\n        ;\r\n        return formatStr\r\n          .replace(&#39;hh&#39;, hh).replace(&#39;h&#39;, hour)\r\n          .replace(&#39;mm&#39;, mm).replace(&#39;m&#39;, minute)\r\n          .replace(&#39;ss&#39;, ss).replace(&#39;s&#39;, second)\r\n          .replace(&#39;S&#39;, miliseconds)\r\n          .replace(&#39;dd&#39;, dd).replace(&#39;d&#39;, day)\r\n          .replace(&#39;MMMM&#39;, MMMM).replace(&#39;MMM&#39;, MMM).replace(&#39;MM&#39;, MM).replace(&#39;M&#39;, M)\r\n          .replace(&#39;EEEE&#39;, EEEE).replace(&#39;EEE&#39;, EEE)\r\n          .replace(&#39;yyyy&#39;, yyyy)\r\n          .replace(&#39;yy&#39;, yy)\r\n        ;\r\n    }\r\n    function twoDigitPad(num) {\r\n        return num &lt; 10 ? &quot;0&quot; + num : num;\r\n    }\r\n    console.log(formatDate(new Date()));\r\n    console.log(formatDate(new Date(), &#39;EEEE, MMMM d, yyyy hh:mm:ss:S&#39;));\r\n    console.log(formatDate(new Date(), &#39;EEE, MMM d, yyyy hh:mm&#39;));\r\n    console.log(formatDate(new Date(), &#39;yyyy-MM-dd hh:mm:ss:S&#39;));\r\n    console.log(formatDate(new Date(), &#39;yy-MM-dd hh:mm&#39;));\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html"},{"score":33,"body_markdown":"**Packaged Solution:** [Luxon][1]\r\n\r\nIf you want to use a one solution to fit all, I highly recommend using Luxon (a modernized version of [Moment.js][2]) which also does formatting in many locales/languages and tons of other features.\r\n\r\nLuxon is hosted on the Moment.js website and developed by a Moment.js developer because Moment.js has limitations that the developer wanted to address but couldn&#39;t.\r\n\r\nTo install:\r\n\r\n`npm install luxon` or `yarn add luxon` (visit link for other installation methods)\r\n\r\nExample:\r\n\r\n`luxon.DateTime.fromISO(&#39;2010-08-10&#39;).toFormat(&#39;yyyy-LLL-dd&#39;);`\r\n\r\nYields:\r\n\r\n&gt; 10-Aug-2010\r\n\r\n**Manual Solution**\r\n\r\nUsing similar formatting as Moment.js, [Class DateTimeFormatter (Java)][3], and [Class SimpleDateFormat (Java)][4], I implemented a comprehensive solution `formatDate(date, patternStr)` where the code is easy to read and modify. You can display date, time, AM/PM, etc. See code for more examples.\r\n\r\nExample:\r\n\r\n`formatDate(new Date(), &#39;EEEE, MMMM d, yyyy HH:mm:ss:S&#39;)`\r\n\r\n(`formatDate` is implemented in the code snippet below)\r\n\r\nYields:\r\n\r\n&gt; Friday, October 12, 2018 18:11:23:445\r\n\r\nTry the code out by clicking &quot;Run code snippet.&quot;\r\n\r\n**Date and Time Patterns**\r\n\r\n`yy` = 2-digit year; `yyyy` = full year\r\n\r\n`M` = digit month; `MM` = 2-digit month; `MMM` = short month name; `MMMM` = full month name\r\n\r\n`EEEE` = full weekday name; `EEE` = short weekday name\r\n\r\n`d` = digit day; `dd` = 2-digit day\r\n\r\n`h` = hours am/pm; `hh` = 2-digit hours am/pm; `H` = hours; `HH` = 2-digit hours\r\n\r\n`m` = minutes; `mm` = 2-digit minutes; `aaa` = AM/PM\r\n\r\n`s` = seconds; `ss` = 2-digit seconds\r\n\r\n`S` = miliseconds\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n&lt;!-- language: lang-js --&gt;\r\n    var monthNames = [\r\n      &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;,\r\n      &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;\r\n    ];\r\n    var dayOfWeekNames = [\r\n      &quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;,\r\n      &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;\r\n    ];\r\n    function formatDate(date, patternStr){\r\n        if (!patternStr) {\r\n            patternStr = &#39;M/d/yyyy&#39;;\r\n        }\r\n        var day = date.getDate(),\r\n            month = date.getMonth(),\r\n            year = date.getFullYear(),\r\n            hour = date.getHours(),\r\n            minute = date.getMinutes(),\r\n            second = date.getSeconds(),\r\n            miliseconds = date.getMilliseconds(),\r\n            h = hour % 12,\r\n            hh = twoDigitPad(h),\r\n            HH = twoDigitPad(hour),\r\n            mm = twoDigitPad(minute),\r\n            ss = twoDigitPad(second),\r\n            aaa = hour &lt; 12 ? &#39;AM&#39; : &#39;PM&#39;,\r\n            EEEE = dayOfWeekNames[date.getDay()],\r\n            EEE = EEEE.substr(0, 3),\r\n            dd = twoDigitPad(day),\r\n            M = month + 1,\r\n            MM = twoDigitPad(M),\r\n            MMMM = monthNames[month],\r\n            MMM = MMMM.substr(0, 3),\r\n            yyyy = year + &quot;&quot;,\r\n            yy = yyyy.substr(2, 2)\r\n        ;\r\n        // checks to see if month name will be used\r\n        patternStr = patternStr\r\n          .replace(&#39;hh&#39;, hh).replace(&#39;h&#39;, h)\r\n          .replace(&#39;HH&#39;, HH).replace(&#39;H&#39;, hour)\r\n          .replace(&#39;mm&#39;, mm).replace(&#39;m&#39;, minute)\r\n          .replace(&#39;ss&#39;, ss).replace(&#39;s&#39;, second)\r\n          .replace(&#39;S&#39;, miliseconds)\r\n          .replace(&#39;dd&#39;, dd).replace(&#39;d&#39;, day)\r\n          \r\n          .replace(&#39;EEEE&#39;, EEEE).replace(&#39;EEE&#39;, EEE)\r\n          .replace(&#39;yyyy&#39;, yyyy)\r\n          .replace(&#39;yy&#39;, yy)\r\n          .replace(&#39;aaa&#39;, aaa);\r\n        if (patternStr.indexOf(&#39;MMM&#39;) &gt; -1) {\r\n            patternStr = patternStr\r\n              .replace(&#39;MMMM&#39;, MMMM)\r\n              .replace(&#39;MMM&#39;, MMM);\r\n        }\r\n        else {\r\n            patternStr = patternStr\r\n              .replace(&#39;MM&#39;, MM)\r\n              .replace(&#39;M&#39;, M);\r\n        }\r\n        return patternStr;\r\n    }\r\n    function twoDigitPad(num) {\r\n        return num &lt; 10 ? &quot;0&quot; + num : num;\r\n    }\r\n    console.log(formatDate(new Date()));\r\n    console.log(formatDate(new Date(), &#39;dd-MMM-yyyy&#39;)); //OP&#39;s request\r\n    console.log(formatDate(new Date(), &#39;EEEE, MMMM d, yyyy HH:mm:ss.S aaa&#39;));\r\n    console.log(formatDate(new Date(), &#39;EEE, MMM d, yyyy HH:mm&#39;));\r\n    console.log(formatDate(new Date(), &#39;yyyy-MM-dd HH:mm:ss.S&#39;));\r\n    console.log(formatDate(new Date(), &#39;M/dd/yyyy h:mmaaa&#39;));\r\n&lt;!-- end snippet --&gt;\r\n\r\nThank you @Gerry for bringing up Luxon.\r\n\r\n\r\n  [1]: https://moment.github.io/luxon/\r\n  [2]: https://momentjs.com/\r\n  [3]: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html\r\n  [4]: https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html"},{"score":1,"body_markdown":"You don&#39;t need any libraries. Just extract date components and construct the string. Here is how to get `YYYY-MM-DD` format. Also note the month index  &quot;January is 0, February is 1, and so on.&quot;\r\n\r\n    // @flow\r\n\r\n    type Components = {\r\n      day: number,\r\n      month: number,\r\n      year: number\r\n    }\r\n\r\n    export default class DateFormatter {\r\n      // YYYY-MM-DD\r\n      static YYYY_MM_DD = (date: Date): string =&gt; {\r\n        const components = DateFormatter.format(DateFormatter.components(date))\r\n        return `${components.year}-${components.month}-${components.day}`\r\n      }\r\n\r\n      static format = (components: Components) =&gt; {\r\n        return {\r\n          day: `${components.day}`.padStart(2, &#39;0&#39;),\r\n          month: `${components.month}`.padStart(2, &#39;0&#39;),\r\n          year: components.year\r\n        }\r\n      }\r\n\r\n      static components = (date: Date) =&gt; {\r\n        return {\r\n          day: date.getDate(),\r\n          month: date.getMonth() + 1,\r\n          year: date.getFullYear()\r\n        }\r\n      }\r\n    }\r\n\r\n"},{"score":1,"body_markdown":"A simple function that can return the date, the date + time, or just the time:\r\n\r\n````\r\nvar myDate = dateFormatter(&quot;2019-01-24 11:33:24&quot;, &quot;date-time&quot;);\r\n// &gt;&gt; RETURNS &quot;January 24, 2019 11:33:24&quot;\r\n\r\nvar myDate2 = dateFormatter(&quot;2019-01-24 11:33:24&quot;, &quot;date&quot;);\r\n// &gt;&gt; RETURNS &quot;January 24, 2019&quot;\r\n\r\nvar myDate3 = dateFormatter(&quot;2019-01-24 11:33:24&quot;, &quot;time&quot;);\r\n// &gt;&gt; RETURNS &quot;11:33:24&quot;\r\n\r\n\r\nfunction dateFormatter(strDate, format){\r\n\tvar theDate = new Date(strDate);\r\n    if (format==&quot;time&quot;)\r\n       return getTimeFromDate(theDate);\r\n    else{\r\n       var dateOptions = {year:&#39;numeric&#39;, month:&#39;long&#39;, day:&#39;numeric&#39;};\r\n       var formattedDate = theDate.toLocaleDateString(&quot;en-US&quot;, + dateOptions);\r\n       if (format==&quot;date&quot;)\r\n    \t   return formattedDate;\r\n       return formattedDate + &quot; &quot; + getTimeFromDate(theDate);\r\n    }\r\n}\r\n\r\nfunction getTimeFromDate(theDate){\r\n\tvar sec = theDate.getSeconds();\r\n\tif (sec&lt;10)\r\n\t\tsec = &quot;0&quot; + sec;\r\n\tvar min = theDate.getMinutes();\r\n\tif (min&lt;10)\r\n\t\tmin = &quot;0&quot; + min;\r\n\treturn theDate.getHours() + &#39;:&#39;+ min + &#39;:&#39; + sec;\r\n}\r\n"},{"score":7,"body_markdown":"To obtain &quot;10-Aug-2010&quot;, try:\r\n\r\n    var date = new Date(&#39;2010-08-10 00:00:00&#39;);\r\n    date = date.toLocaleDateString(undefined, {day:&#39;2-digit&#39;}) + &#39;-&#39; + date.toLocaleDateString(undefined, {month:&#39;short&#39;}) + &#39;-&#39; + date.toLocaleDateString(undefined, {year:&#39;numeric&#39;})\r\n\r\nFor browser support, see [toLocaleDateString][1].\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString#Browser_compatibility\r\n\r\n"},{"score":1,"body_markdown":"This [Module][1] can easily handle mostly every case there is. \r\nIt is part of a bigger npm package, by Locutus, which includes a variety of functions, but can be used totally independent of the package it self, just copy paste/ adapt a little if not working with npm (change from module to just a function)\r\n\r\nAs a second parameter it accepts a timestamp, which can come from anywhere, such as Date.getTime()\r\n\r\nAlso, Locutus maintains a bigger datetime module, also inside the locutus package which will give a more object oriented way to use it\r\n\r\n[Here][2] you can see other datetime functions, as modules, that proved to be very usefull too.\r\n\r\nYou can find documentation on parameters and format strings [here][3] (note that the doc site is a php site, but the locutus implementation follows exactly the same specs)\r\n\r\nExamples of **date** Module\r\n\r\n\r\n\r\n    date(&#39;H:m:s \\\\m \\\\i\\\\s \\\\m\\\\o\\\\n\\\\t\\\\h&#39;, 1062402400)//&#39;07:09:40 m is month&#39;\r\n\r\n    date(&#39;F j, Y, g:i a&#39;, 1062462400)//&#39;September 2, 2003, 12:26 am&#39;\r\n\r\n    date(&#39;Y W o&#39;, 1062462400)//&#39;2003 36 2003&#39;\r\n\r\n    var $x = date(&#39;Y m d&#39;, (new Date()).getTime() / 1000) $x = $x + &#39;&#39; var $result = $x.length // 2009 01 09\t10\r\n\r\n    date(&#39;W&#39;, 1104534000)\t//&#39;52&#39;\r\n\r\n    date(&#39;B t&#39;, 1104534000)\t//&#39;999 31&#39;\r\n\r\n    date(&#39;W U&#39;, 1293750000.82); // 2010-12-31\t&#39;52 1293750000&#39;\r\n\r\n    date(&#39;W&#39;, 1293836400); // 2011-01-01\t&#39;52&#39;\r\n\r\n    date(&#39;W Y-m-d&#39;, 1293974054); // 2011-01-02\t&#39;52 2011-01-02&#39;\r\n\r\n\r\n  [1]: http://locutus.io/php/datetime/date/\r\n  [2]: http://locutus.io/php/datetime/\r\n  [3]: https://www.php.net/manual/en/function.date.php"},{"score":0,"body_markdown":"Here is some ready-to-paste time/date formatting code that does NOT rely on any external modules/libraries or use jQuery or ES7 or anything.  Unlike the code in some other answers, this code offers this combo of features:\r\n\r\n - it takes a JavaScript Date object as input\r\n - it can display date as local time zone or UTC\r\n - it uses a simple formatting system &quot;{year4} {month02} {second}&quot; that is easy to read and understand even after you write the code, unlike the typical &quot;%D %m %-&quot; which always forces you back to the documentation\r\n - the formatting system does not have any weird self-collisions like some ad-hoc &quot;DD MM YYYY&quot; systems\r\n - you can run the test right here and try it\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // format_date(date, pattern, utc)\r\n    // - date \r\n    //   - a JavaScript Date object\r\n    //   - use &quot;new Date()&quot; for current time\r\n    // - pattern\r\n    //   - a string with embedded {codes} like\r\n    //     &quot;{year4}-{month02}-{day02}: {dayname3}&quot;\r\n    //     see format_date_funcs below for complete list\r\n    //   - any other letters go through unchanged\r\n    // - utc\r\n    //   - if true, shows date in UTC time &quot;zone&quot;\r\n    //   - if false/omitted, shows date in local time zone\r\n    //\r\n    var month_names = \r\n    [\r\n      &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;,\r\n      &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;\r\n    ];\r\n    var day_of_week_names = \r\n    [\r\n      &quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;,\r\n      &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;\r\n    ];\r\n    function space_pad2(num)\r\n    {\r\n        return num &lt; 10 ? &quot; &quot; + num : num;\r\n    }\r\n    function zero_pad2(num)\r\n    {\r\n        return num &lt; 10 ? &quot;0&quot; + num : num;\r\n    }\r\n    function space_pad3(num)\r\n    {\r\n        if (num &lt; 10) \r\n            return &quot;  &quot; + num;\r\n        else if (num &lt; 100)\r\n            return &quot; &quot; + num;\r\n        else\r\n            return num;\r\n    }\r\n    function zero_pad3(num)\r\n    {\r\n        if (num &lt; 10) \r\n            return &quot;00&quot; + num;\r\n        else if (num &lt; 100)\r\n            return &quot;0&quot; + num;\r\n        else\r\n            return num;\r\n    }\r\n    var format_date_funcs =\r\n    {\r\n        // {year4}  = &#39;1902&#39;\r\n        // {year02} =   &#39;02&#39;\r\n        // \r\n        &#39;year4&#39;: function(date, utc)\r\n        {\r\n            var year = utc ? date.getUTCFullYear() : date.getFullYear();\r\n            return year;\r\n        },\r\n        &#39;year02&#39;: function(date, utc)\r\n        {\r\n            var year = utc ? date.getUTCFullYear() : date.getFullYear();\r\n            return year.toString().substr(2,2);\r\n        },\r\n        // {month}   =  &#39;1&#39; - &#39;12&#39;\r\n        // {month2}  = &#39; 1&#39; - &#39;12&#39; (space padded)\r\n        // {month02} = &#39;01&#39; - &#39;12&#39;\r\n        //\r\n        &#39;month&#39;: function(date, utc)\r\n        {\r\n            var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]\r\n            return            month + 1;\r\n        },\r\n        &#39;month2&#39;: function(date, utc)\r\n        {\r\n            var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]\r\n            return space_pad2(month + 1);\r\n        },\r\n        &#39;month02&#39;: function(date, utc)\r\n        {\r\n            var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]\r\n            return zero_pad2(month + 1);\r\n        },\r\n        // {monthname}  = &#39;January&#39;\r\n        // {monthname3} = &#39;Jan&#39;\r\n        // \r\n        &#39;monthname&#39;: function(date, utc)\r\n        {\r\n            var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]\r\n            return month_names[month];\r\n        },\r\n        &#39;monthname3&#39;: function(date, utc)\r\n        {\r\n            var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]\r\n            return month_names[month].substr(0, 3);\r\n        },\r\n        // {day}   =  &#39;1&#39; - &#39;31&#39;\r\n        // {day2}  = &#39; 1&#39; - &#39;31&#39; (space padded)\r\n        // {day02} = &#39;01&#39; - &#39;31&#39;\r\n        // \r\n        &#39;day&#39;: function(date, utc)\r\n        {\r\n            var date = utc ? date.getUTCDate() : date.getDate(); // [1,31]\r\n            return date;\r\n        },\r\n        &#39;day2&#39;: function(date, utc)\r\n        {\r\n            var date = utc ? date.getUTCDate() : date.getDate(); // [1,31]\r\n            return space_pad2(date);\r\n        },\r\n        &#39;day02&#39;: function(date, utc)\r\n        {\r\n            var date = utc ? date.getUTCDate() : date.getDate(); // [1,31]\r\n            return zero_pad2(date);\r\n        },\r\n        // {dayname}  = &#39;Tuesday&#39;\r\n        // {dayname3} = &#39;Tue&#39;\r\n        // \r\n        &#39;dayname&#39;: function(date, utc)\r\n        {\r\n            var day = utc ? date.getUTCDay() : date.getDay(); // [0,6]\r\n            return day_of_week_names[day];\r\n        },\r\n        &#39;dayname3&#39;: function(date, utc)\r\n        {\r\n            var day = utc ? date.getUTCDay() : date.getDay(); // [0,6]\r\n            return day_of_week_names[day].substr(0,3);\r\n        },\r\n        // {24hour}   =  &#39;0&#39; - &#39;23&#39;\r\n        // {24hour2}  = &#39; 0&#39; - &#39;23&#39; (space padded)\r\n        // {24hour02} = &#39;00&#39; - &#39;23&#39;\r\n        //\r\n        &#39;24hour&#39;: function(date, utc)\r\n        {\r\n            var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n            return hour;\r\n        },\r\n        &#39;24hour2&#39;: function(date, utc)\r\n        {\r\n            var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n            return space_pad2(hour);\r\n        },\r\n        &#39;24hour02&#39;: function(date, utc)\r\n        {\r\n            var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n            return zero_pad2(hour);\r\n        },\r\n        // {12hour}   =  &#39;1&#39; - &#39;12&#39;\r\n        // {12hour2}  = &#39; 1&#39; - &#39;12&#39; (space padded)\r\n        // {12hour02} = &#39;01&#39; - &#39;12&#39;\r\n        // {ampm}     = &#39;am&#39; or &#39;pm&#39;\r\n        // {AMPM}     = &#39;AM&#39; or &#39;PM&#39;\r\n        //\r\n        &#39;12hour&#39;: function(date, utc)\r\n        {\r\n            var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n            hour = hour % 12; // [0,11]\r\n            if (0 === hour) hour = 12;\r\n            return hour;\r\n        },\r\n        &#39;12hour2&#39;: function(date, utc)\r\n        {\r\n            var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n            hour = hour % 12; // [0,11]\r\n            if (0 === hour) hour = 12;\r\n            return space_pad2(hour);\r\n        },\r\n        &#39;12hour02&#39;: function(date, utc)\r\n        {\r\n            var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n            hour = hour % 12; // [0,11]\r\n            if (0 === hour) hour = 12;\r\n            return zero_pad2(hour);\r\n        },\r\n        &#39;ampm&#39;: function(date, utc)\r\n        {\r\n            var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n            return (hour &lt; 12 ? &#39;am&#39; : &#39;pm&#39;);\r\n        },\r\n        &#39;AMPM&#39;: function(date, utc)\r\n        {\r\n            var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n            return (hour &lt; 12 ? &#39;AM&#39; : &#39;PM&#39;);\r\n        },\r\n        // {minute}   =  &#39;0&#39; - &#39;59&#39;\r\n        // {minute2}  = &#39; 0&#39; - &#39;59&#39; (space padded)\r\n        // {minute02} = &#39;00&#39; - &#39;59&#39;\r\n        // \r\n        &#39;minute&#39;: function(date, utc)\r\n        {\r\n            var minute = utc ? date.getUTCMinutes() : date.getMinutes(); // [0,59]\r\n            return minute;\r\n        },\r\n        &#39;minute2&#39;: function(date, utc)\r\n        {\r\n            var minute = utc ? date.getUTCMinutes() : date.getMinutes(); // [0,59]\r\n            return space_pad2(minute);\r\n        },\r\n        &#39;minute02&#39;: function(date, utc)\r\n        {\r\n            var minute = utc ? date.getUTCMinutes() : date.getMinutes(); // [0,59]\r\n            return zero_pad2(minute);\r\n        },\r\n        // {second}   =  &#39;0&#39; - &#39;59&#39;\r\n        // {second2}  = &#39; 0&#39; - &#39;59&#39; (space padded)\r\n        // {second02} = &#39;00&#39; - &#39;59&#39;\r\n        // \r\n        &#39;second&#39;: function(date, utc)\r\n        {\r\n            var second = utc ? date.getUTCSeconds() : date.getSeconds(); // [0,59]\r\n            return second;\r\n        },\r\n        &#39;second2&#39;: function(date, utc)\r\n        {\r\n            var second = utc ? date.getUTCSeconds() : date.getSeconds(); // [0,59]\r\n            return space_pad2(second);\r\n        },\r\n        &#39;second02&#39;: function(date, utc)\r\n        {\r\n            var second = utc ? date.getUTCSeconds() : date.getSeconds(); // [0,59]\r\n            return zero_pad2(second);\r\n        },\r\n        // {msec}   =   &#39;0&#39; - &#39;999&#39;\r\n        // {msec3}  = &#39;  0&#39; - &#39;999&#39; (space padded)\r\n        // {msec03} = &#39;000&#39; - &#39;999&#39;\r\n        // \r\n        &#39;msec&#39;: function(date, utc)\r\n        {\r\n            var msec = \r\n                utc ? date.getUTCMilliseconds() : date.getMilliseconds(); // [0,999]\r\n            return msec;\r\n        },\r\n        &#39;msec3&#39;: function(date, utc)\r\n        {\r\n            var msec = \r\n                utc ? date.getUTCMilliseconds() : date.getMilliseconds(); // [0,999]\r\n            return space_pad3(msec);\r\n        },\r\n        &#39;msec03&#39;: function(date, utc)\r\n        {\r\n            var msec = \r\n                utc ? date.getUTCMilliseconds() : date.getMilliseconds(); // [0,999]\r\n            return zero_pad3(msec);\r\n        },\r\n        // {open} = &#39;{&#39; (in case you actually want &#39;{&#39; in the output)\r\n        //\r\n        &#39;open&#39;: function(date, utc)\r\n        {\r\n            return &#39;{&#39;;\r\n        }, \r\n        // {close} = &#39;}&#39; (in case you actually want &#39;}&#39; in the output)\r\n        //\r\n        &#39;close&#39;: function(date, utc)\r\n        {\r\n            return &#39;}&#39;;\r\n        }, \r\n    };\r\n    function format_date(date, pattern, utc)\r\n    {\r\n        if (!pattern) \r\n        {\r\n            pattern = &#39;{month}/{day}/{year4}&#39;;\r\n        }\r\n\r\n        var ret = &#39;&#39;;\r\n\r\n        while (pattern.length &gt; 0)\r\n        {\r\n            var s = pattern.indexOf(&#39;{&#39;);\r\n            var e = pattern.indexOf(&#39;}&#39;);\r\n            //console.log(&#39;s &#39; + s + &#39; e &#39; + e);\r\n            if (-1 !== s &amp;&amp; -1 !== e &amp;&amp; s &lt; e)\r\n            {\r\n                // - there is a well-formed {foo} in range [s,e]\r\n                // - first we emit range [0,s) as literal\r\n            }\r\n            else\r\n            {\r\n                // - rest of string has no {} or has malformed }{ or { or }\r\n                // - just emit the rest of the string as literal and be done\r\n                s = pattern.length; \r\n            }\r\n            // emit range [0,s) as literal\r\n            if (s &gt; 0)\r\n            {\r\n                ret += pattern.substr(0, s);\r\n                pattern = pattern.substr(s);\r\n                e -= s;\r\n                s = 0;\r\n            }\r\n\r\n            if (0 === pattern.length) break;\r\n\r\n            // emit range [s=0,e] by evaluating code\r\n            console.assert(0 === s); // position of {\r\n            console.assert(e &gt; 0);  // position of }\r\n            console.assert(&#39;{&#39; === pattern.substr(s, 1));\r\n            console.assert(&#39;}&#39; === pattern.substr(e, 1));\r\n            var code = pattern.substr(1,e-1);\r\n            var func = format_date_funcs[code];\r\n            console.assert(func);\r\n            ret += func(date, utc);\r\n\r\n            pattern = pattern.substr(e+1);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    if (1) // test format_date\r\n    {\r\n        var fmt = &#39;[&#39;;\r\n        for (var func in format_date_funcs) \r\n        {\r\n            if (!format_date_funcs.hasOwnProperty(func)) continue;\r\n            fmt += &#39;{&#39; + func + &#39;}/&#39;;\r\n        }\r\n        fmt += &#39;]&#39;;\r\n        var now = new Date();\r\n        console.log(fmt);\r\n        console.log(format_date(now, fmt, false /*utc*/));\r\n        console.log(format_date(now, fmt, true /*utc*/));\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":11,"body_markdown":"You should have a look at [**DayJs**][1]  It&#39;s a remake of momentJs but modular architecture oriented so lighter. \r\n\r\n**Fast 2kB alternative to Moment.js with the same modern API**\r\n\r\n\r\n&gt; Day.js is a minimalist JavaScript library that parses, validates, manipulates, and displays dates and times for modern browsers with a largely Moment.js-compatible API. If you use Moment.js, you already know how to use Day.js.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var date = Date.now();\r\n    const formatedDate = dayjs(date).format(&quot;YYYY-MM-DD&quot;)\r\n    console.log(formatedDate);\r\n\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.8.16/dayjs.min.js&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://github.com/iamkun/dayjs"},{"score":9,"body_markdown":"As of 2019, it looks like you can get toLocaleDateString to return only certain parts and then you can join them as you wish:\r\n\r\n    var date = new Date();\r\n\r\n    console.log(date.toLocaleDateString(&quot;en-US&quot;, { day: &#39;numeric&#39; }) \r\n                + &quot;-&quot;+ date.toLocaleDateString(&quot;en-US&quot;, { month: &#39;short&#39; })\r\n                + &quot;-&quot; + date.toLocaleDateString(&quot;en-US&quot;, { year: &#39;numeric&#39; }) );\r\n\r\n    &gt; 16-Nov-2019\r\n\r\n    console.log(date.toLocaleDateString(&quot;en-US&quot;, { month: &#39;long&#39; }) \r\n                + &quot; &quot; + date.toLocaleDateString(&quot;en-US&quot;, { day: &#39;numeric&#39; }) \r\n                + &quot;, &quot; + date.toLocaleDateString(&quot;en-US&quot;, { year: &#39;numeric&#39; }) );\r\n \r\n    &gt; November 16, 2019"},{"score":9,"body_markdown":"In order to format a date as e.g. `10-Aug-2010`, you might want to use `.toDateString()` and **ES6** array destructuring.\r\n\r\n\r\n    const formattedDate = new Date().toDateString()\r\n    // The above yields e.g. &#39;Mon Jan 06 2020&#39;\r\n\r\n    const [, month, day, year] = formattedDate.split(&#39; &#39;)\r\n    \r\n    const ddMmmYyyy = `${day}-${month}-${year}`\r\n    // or\r\n    const ddMmmYyyy = [day, month, year].join(&#39;-&#39;)"},{"score":2,"body_markdown":"This function I inspired by java&#39;s SimpleDateFormat provides various formats such as:\r\n\r\n    dd-MMM-yyyy → 17-Jul-2018\r\n    yyyyMMdd&#39;T&#39;HHmmssXX → 20180717T120856+0900\r\n    yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX → 2018-07-17T12:08:56+09:00\r\n    E, dd MMM yyyy HH:mm:ss Z → Tue, 17 Jul 2018 12:08:56 +0900\r\n    yyyy.MM.dd &#39;at&#39; hh:mm:ss Z → 2018.07.17 at 12:08:56 +0900\r\n    EEE, MMM d, &#39;&#39;yy → Tue, Jul 17, &#39;18\r\n    h:mm a → 12:08 PM\r\n    hh &#39;o&#39;&#39;&#39;&#39;clock&#39; a, X → 12 o&#39;clock PM, +09\r\n\r\n\r\n**Code example:**\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function formatWith(formatStr, date, opts) {\r\n        \r\n            if (!date) {\r\n                date = new Date();\r\n            }\r\n        \r\n            opts = opts || {};\r\n        \r\n            let _days = opts.days;\r\n        \r\n            if (!_days) {\r\n                _days = [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;];\r\n            }\r\n        \r\n            let _months = opts.months;\r\n        \r\n            if (!_months) {\r\n                _months = [&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;, &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;];\r\n            }\r\n        \r\n            const pad = (number, strDigits, isUnpad) =&gt; {\r\n                const strNum = number.toString();\r\n                if (!isUnpad &amp;&amp; strNum.length &gt; strDigits.length) {\r\n                    return strNum;\r\n                } else {\r\n                    return (&#39;0000&#39; + strNum).slice(-strDigits.length);\r\n                }\r\n            };\r\n        \r\n            const timezone = (date, letter) =&gt; {\r\n                const chunk = [];\r\n                const offset = -date.getTimezoneOffset();\r\n                chunk.push(offset === 0 ? &#39;Z&#39; : offset &gt; 0 ? &#39;+&#39; : &#39;-&#39;);//add Z or +,-\r\n                if (offset === 0) return chunk;\r\n                chunk.push(pad(Math.floor(offset / 60), &#39;00&#39;));//hour\r\n                if (letter === &#39;X&#39;) return chunk.join(&#39;&#39;);\r\n                if (letter === &#39;XXX&#39;) chunk.push(&#39;:&#39;);\r\n                chunk.push(pad((offset % 60), &#39;00&#39;));//min\r\n                return chunk.join(&#39;&#39;);\r\n            };\r\n        \r\n            const ESCAPE_DELIM = &#39;\\0&#39;;\r\n            const escapeStack = [];\r\n        \r\n            const escapedFmtStr = formatStr.replace(/&#39;.*?&#39;/g, m =&gt; {\r\n                escapeStack.push(m.replace(/&#39;/g, &#39;&#39;));\r\n                return ESCAPE_DELIM + (escapeStack.length - 1) + ESCAPE_DELIM;\r\n            });\r\n        \r\n            const formattedStr = escapedFmtStr\r\n                .replace(/y{4}|y{2}/g, m =&gt; pad(date.getFullYear(), m, true))\r\n                .replace(/M{3}/g, m =&gt; _months[date.getMonth()])\r\n                .replace(/M{1,2}/g, m =&gt; pad(date.getMonth() + 1, m))\r\n                .replace(/M{1,2}/g, m =&gt; pad(date.getMonth() + 1, m))\r\n                .replace(/d{1,2}/g, m =&gt; pad(date.getDate(), m))\r\n                .replace(/H{1,2}/g, m =&gt; pad(date.getHours(), m))\r\n                .replace(/h{1,2}/g, m =&gt; {\r\n                    const hours = date.getHours();\r\n                    return pad(hours === 0 ? 12 : hours &gt; 12 ? hours - 12 : hours, m);\r\n                })\r\n                .replace(/a{1,2}/g, m =&gt; date.getHours() &gt;= 12 ? &#39;PM&#39; : &#39;AM&#39;)\r\n                .replace(/m{1,2}/g, m =&gt; pad(date.getMinutes(), m))\r\n                .replace(/s{1,2}/g, m =&gt; pad(date.getSeconds(), m))\r\n                .replace(/S{3}/g, m =&gt; pad(date.getMilliseconds(), m))\r\n                .replace(/[E]+/g, m =&gt; _days[date.getDay()])\r\n                .replace(/[Z]+/g, m =&gt; timezone(date, m))\r\n                .replace(/X{1,3}/g, m =&gt; timezone(date, m))\r\n            ;\r\n        \r\n            const unescapedStr = formattedStr.replace(/\\0\\d+\\0/g, m =&gt; {\r\n                const unescaped = escapeStack.shift();\r\n                return unescaped.length &gt; 0 ? unescaped : &#39;\\&#39;&#39;;\r\n            });\r\n        \r\n            return unescapedStr;\r\n        }\r\n\r\n        //Let&#39;s format with above function\r\n        const dateStr = &#39;2018/07/17 12:08:56&#39;;\r\n        const date = new Date(dateStr);\r\n        const patterns = [\r\n            &quot;dd-MMM-yyyy&quot;,\r\n            &quot;yyyyMMdd&#39;T&#39;HHmmssXX&quot;,//ISO8601\r\n            &quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&quot;,//ISO8601EX\r\n            &quot;E, dd MMM yyyy HH:mm:ss Z&quot;,//RFC1123(RFC822) like email\r\n            &quot;yyyy.MM.dd &#39;at&#39; hh:mm:ss Z&quot;,//hh shows 1-12\r\n            &quot;EEE, MMM d, &#39;&#39;yy&quot;,\r\n            &quot;h:mm a&quot;,\r\n            &quot;hh &#39;o&#39;&#39;&#39;&#39;clock&#39; a, X&quot;,\r\n        ];\r\n        \r\n        \r\n        for (let pattern of patterns) {\r\n            console.log(`${pattern} → ${formatWith(pattern, date)}`);\r\n        }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n**And you can use this as a library**\r\n\r\nAlso released as a NPM module.You can use this on node.js or use this from CDN for browser.\r\n\r\n**nodejs**\r\n\r\n    const {SimpleDateFormat} = require(&#39;@riversun/simple-date-format&#39;);\r\n\r\n**on browser**\r\n\r\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/@riversun/simple-date-format@1.0.2/dist/simple-date-format.js&quot;&gt;&lt;/script&gt;\r\n\r\n\r\nWrite code as follows.\r\n\r\n    const date = new Date(&#39;2018/07/17 12:08:56&#39;);\r\n    const sdf = new SimpleDateFormat();\r\n    console.log(sdf.formatWith(&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&quot;, date));//to be &quot;2018-07-17T12:08:56+09:00&quot;\r\n\r\n**Source code here on github**:\r\n\r\nhttps://github.com/riversun/simple-date-format\r\n"},{"score":6,"body_markdown":"Two pure JS one-liners\r\n-\r\n\r\nIn this answer I develop [JD Smith idea](https://stackoverflow.com/a/33131823/860099). I was able to shorten the JD Smith regexp\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let format= d=&gt; d.toString().replace(/\\w+ (\\w+) (\\d+) (\\d+).*/,&#39;$2-$1-$3&#39;);\r\n\r\n    console.log( format(Date()) );\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n[Dave](https://stackoverflow.com/a/39103318/860099) also base on  JD Smith idea but he avoid regexp and give very nice solution - I short a little his solution (by change split param) and opaque it in wrapper\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let format= (d,a=d.toString().split` `)=&gt; a[2]+&quot;-&quot;+a[1]+&quot;-&quot;+a[3];\r\n\r\n    console.log( format(Date()) );\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":5,"body_markdown":"Works same in IE 11, FF &amp; Chrome (Chrome 80.x shows 12 hours format when en-UK selected).\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const d = new Date(&#39;2010/08/05 23:45&#39;) // 26.3.2020\r\n    const dtfUK = new Intl.DateTimeFormat(&#39;UK&#39;, { year: &#39;numeric&#39;, month: &#39;2-digit&#39;, day: &#39;2-digit&#39;,\r\n            hour: &#39;2-digit&#39;,minute: &#39;2-digit&#39;, second: &#39;2-digit&#39; }); //\r\n    const dtfUS = new Intl.DateTimeFormat(&#39;en&#39;, { year: &#39;numeric&#39;, month: &#39;2-digit&#39;, day: &#39;2-digit&#39;,\r\n            hour: &#39;2-digit&#39;,minute: &#39;2-digit&#39;, second: &#39;2-digit&#39; }); //\r\n    console.log(dtfUS.format(d)); // 08/05/2010 11:45:00 PM\r\n    console.log(dtfUK.format(d)); // 05.08.2010 23:45:00\r\n    /* node.js:\r\n    08/05/2010, 11:45:00 PM\r\n    2010-08-05 23:45:00\r\n    */\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nWhat about something more general ?\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var d = new Date(&#39;2010-08-10T10:34:56.789Z&#39;);\r\n    var str = d.toDateString() + // Tue Aug 10 2010\r\n        &#39; &#39; + d.toTimeString().split(&#39; &#39;)[0] + // 12:34:56, GMT+0x00 (GMT+0x:00)\r\n        &#39; &#39; + (d.getMonth() + 101) + // 108\r\n        &#39; &#39; + d.getMilliseconds(); // 789\r\n    console.log(str); // Tue Aug 10 2010 12:34:56 108 789\r\n    console.log(//   $1 Tue  $2 Aug  $3 11     $4 2020 $5 12   $6 34   $7 56    $8 108  $9 789\r\n        str.replace(/(\\S{3}) (\\S{3}) (\\d{1,2}) (\\d{4}) (\\d{2}):(\\d{2}):(\\d{2}) 1(\\d{2}) (\\d{1,3})/, &#39;$3-$2-$4 $5:$6.$9 ($1)&#39;)\r\n    ); // 10-Aug-2010 12:34.789 (Tue)\r\n    /*\r\n    $1: Tue  Week Day string\r\n    $2: Aug  Month short text\r\n    $3: 11   Day\r\n    $4: 2010 Year\r\n    $5: 12   Hour\r\n    $6: 34   Minute\r\n    $7: 56   Seconds\r\n    $8: 08   Month\r\n    $9: 789  Milliseconds\r\n    */\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nOr for example 1-line IIFE *&quot;library&quot;* ;-)\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log(\r\n        (function (frm, d) { return [d.toDateString(), d.toTimeString().split(&#39; &#39;)[0], (d.getMonth() + 101), d.getMilliseconds()].join(&#39; &#39;).replace(/(\\S{3}) (\\S{3}) (\\d{1,2}) (\\d{4}) (\\d{2}):(\\d{2}):(\\d{2}) 1(\\d{2}) (\\d{1,3})/, frm); })\r\n        (&#39;$4/$8/$3 $5:$6 ($1)&#39;, new Date())\r\n    );\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n*You can remove useless parts and / or change indexes if you do not need them.*\r\n"},{"score":0,"body_markdown":"May be this helps some one who are looking for multiple date formats one after the other by willingly or unexpectedly. Please find the code: I am using moment.js format function on a current date as (today is 29-06-2020) var startDate = moment(new Date()).format(&#39;MM/DD/YY&#39;); Result: 06/28/20\r\n\r\nwhat happening is it retains only the year part :20 as &quot;06/28/20&quot;, after If I run the statement : new Date(startDate) The result is &quot;Mon Jun 28 1920 00:00:00 GMT+0530 (India Standard Time)&quot;,\r\n\r\nThen, when I use another format on &quot;06/28/20&quot;: startDate = moment(startDate ).format(&#39;MM-DD-YYYY&#39;); Result: 06-28-1920, in google chrome and firefox browsers it gives correct date on second attempt as: 06-28-2020. But in IE it is having issues, from this I understood we can apply one dateformat on the given date, If we want second date format, it should be apply on the fresh date not on the first date format result. And also observe that for first time applying &#39;MM-DD-YYYY&#39; and next &#39;MM-DD-YY&#39; is working in IE. For clear understanding please find my question in the link: Date went wrong when using Momentjs date format in IE 11"},{"score":1,"body_markdown":"\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function convert_month(i = 0, option = &quot;num&quot;) { // i = index\r\n\r\n      var object_months = [\r\n        { num: 01, short: &quot;Jan&quot;, long: &quot;January&quot; },\r\n        { num: 02, short: &quot;Feb&quot;, long: &quot;Februari&quot; }, \r\n        { num: 03, short: &quot;Mar&quot;, long: &quot;March&quot; },          \r\n        { num: 04, short: &quot;Apr&quot;, long: &quot;April&quot; },\r\n        { num: 05, short: &quot;May&quot;, long: &quot;May&quot; },\r\n        { num: 06, short: &quot;Jun&quot;, long: &quot;Juni&quot; },\r\n        { num: 07, short: &quot;Jul&quot;, long: &quot;July&quot; },\r\n        { num: 08, short: &quot;Aug&quot;, long: &quot;August&quot; },\r\n        { num: 09, short: &quot;Sep&quot;, long: &quot;September&quot; },\r\n        { num: 10, short: &quot;Oct&quot;, long: &quot;October&quot; },\r\n        { num: 11, short: &quot;Nov&quot;, long: &quot;November&quot; },\r\n        { num: 12, short: &quot;Dec&quot;, long: &quot;December&quot; }\r\n      ];\r\n            \r\n      return object_months[i][option];\r\n\r\n    }\r\n          \r\n    var d = new Date();\r\n          \r\n    // https://stackoverflow.com/questions/1408289/how-can-i-do-string-interpolation-in-javascript\r\n    var num   = `${d.getDate()}-${convert_month(d.getMonth())}-${d.getFullYear()}`;\r\n    var short = `${d.getDate()}-${convert_month(d.getMonth(), &quot;short&quot;)}-${d.getFullYear()}`;\r\n    var long  = `${d.getDate()}-${convert_month(d.getMonth(), &quot;long&quot;)}-${d.getFullYear()}`;\r\n\r\n    document.querySelector(&quot;#num&quot;).innerHTML = num;\r\n    document.querySelector(&quot;#short&quot;).innerHTML = short;\r\n    document.querySelector(&quot;#long&quot;).innerHTML = long;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;p&gt;Numeric  : &lt;span id=&quot;num&quot;&gt;&lt;/span&gt; (default)&lt;/p&gt;\r\n    &lt;p&gt;Short    : &lt;span id=&quot;short&quot;&gt;&lt;/span&gt;&lt;/p&gt;\r\n    &lt;p&gt;Long     : &lt;span id=&quot;long&quot;&gt;&lt;/span&gt;&lt;/p&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}],"score":2467}