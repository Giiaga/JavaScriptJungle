{"body":"How do I get current date in JavaScript?\r\n","title":"How do I get the current date in JavaScript?","answers":[{"score":2901,"body_markdown":"Use `new Date()` to generate a new `Date` object containing the current date and time.\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, &#39;0&#39;);\r\n    var mm = String(today.getMonth() + 1).padStart(2, &#39;0&#39;); //January is 0!\r\n    var yyyy = today.getFullYear();\r\n    \r\n    today = mm + &#39;/&#39; + dd + &#39;/&#39; + yyyy;\r\n    document.write(today);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThis will give you today&#39;s date in the format of mm/dd/yyyy.\r\n\r\nSimply change `today = mm +&#39;/&#39;+ dd +&#39;/&#39;+ yyyy;` to whatever format you wish."},{"score":241,"body_markdown":"&gt; ***UPDATED!***, Scroll Down\r\n\r\nIf you want something simple pretty to the end-user ... *`Also, fixed a small suffix issue in the first version below. Now properly returns suffix.`*\r\n\r\n&lt;!-- begin snippet: js hide: false console: false babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var objToday = new Date(),\r\n    \tweekday = new Array(&#39;Sunday&#39;, &#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;),\r\n    \tdayOfWeek = weekday[objToday.getDay()],\r\n    \tdomEnder = function() { var a = objToday; if (/1/.test(parseInt((a + &quot;&quot;).charAt(0)))) return &quot;th&quot;; a = parseInt((a + &quot;&quot;).charAt(1)); return 1 == a ? &quot;st&quot; : 2 == a ? &quot;nd&quot; : 3 == a ? &quot;rd&quot; : &quot;th&quot; }(),\r\n    \tdayOfMonth = today + ( objToday.getDate() &lt; 10) ? &#39;0&#39; + objToday.getDate() + domEnder : objToday.getDate() + domEnder,\r\n    \tmonths = new Array(&#39;January&#39;, &#39;February&#39;, &#39;March&#39;, &#39;April&#39;, &#39;May&#39;, &#39;June&#39;, &#39;July&#39;, &#39;August&#39;, &#39;September&#39;, &#39;October&#39;, &#39;November&#39;, &#39;December&#39;),\r\n    \tcurMonth = months[objToday.getMonth()],\r\n    \tcurYear = objToday.getFullYear(),\r\n    \tcurHour = objToday.getHours() &gt; 12 ? objToday.getHours() - 12 : (objToday.getHours() &lt; 10 ? &quot;0&quot; + objToday.getHours() : objToday.getHours()),\r\n    \tcurMinute = objToday.getMinutes() &lt; 10 ? &quot;0&quot; + objToday.getMinutes() : objToday.getMinutes(),\r\n    \tcurSeconds = objToday.getSeconds() &lt; 10 ? &quot;0&quot; + objToday.getSeconds() : objToday.getSeconds(),\r\n    \tcurMeridiem = objToday.getHours() &gt; 12 ? &quot;PM&quot; : &quot;AM&quot;;\r\n    var today = curHour + &quot;:&quot; + curMinute + &quot;.&quot; + curSeconds + curMeridiem + &quot; &quot; + dayOfWeek + &quot; &quot; + dayOfMonth + &quot; of &quot; + curMonth + &quot;, &quot; + curYear;\r\n\r\n    document.getElementsByTagName(&#39;h1&#39;)[0].textContent = today;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;h1&gt;&lt;/h1&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n&gt; **UBBER UPDATE** After much procrastination, I&#39;ve finally [**GitHubbed**][1] and updated this with the final solution I&#39;ve been using for myself. It&#39;s even had some last-minute edits to make it sweeter! If you&#39;re looking for the old [jsFiddle, please see this][2].\r\n\r\nThis update comes in &lt;s&gt;2&lt;/s&gt; flavors, still relatively small, though not as small as my above, original answer. If you want extremely small, go with that. &lt;br /&gt; Also Note: This is still less bloated than moment.js. While moment.js is nice, imo, it has too many secular methods, which require learning moment as if it were a language. Mine here uses the same common format as [PHP: date][6].\r\n\r\n### Quick Links\r\n - [Date.format.min.js](https://cdn.rawgit.com/JDMcKinstry/JavaScriptDateFormat/master/Date.format.min.js) 5.08 KB\r\n - [dateFormat.min.js](https://cdn.rawgit.com/JDMcKinstry/JavaScriptDateFormat/master/dateFormat.min.js) 4.16 KB\r\n\r\n&gt; **Flavor 1 [`new Date().format(String)`][3]**\r\n&gt; My Personal Fav. I know the taboo but works great on the Date Object. Just be aware of any other mods you may have to the Date Object.\r\n\r\n\t//\tuse as simple as\r\n\tnew Date().format(&#39;m-d-Y h:i:s&#39;);\t//\t07-06-2016 06:38:34\r\n\r\n&gt; **Flavor 2 [`dateFormat(Date, String)`][4]**\r\n&gt; More traditional all-in-one method. Has all the ability of the previous, but is called via the method with Date param.\r\n\r\n\t//\tuse as simple as\r\n\tdateFormat(new Date(), &#39;m-d-Y h:i:s&#39;);\t//\t07-06-2016 06:38:34\r\n\r\n&gt; **BONUS Flavor (requires jQuery) [`$.date(Date, String)`][5]**\r\n&gt; This contains much more than just a simple `format` option. It extends the base Date object and includes methods such as `addDays`. For more information, please see the [*Git*][5].\r\n\r\nIn this mod, the format characters are inspired by [PHP: date][6]. For a complete list, please see my [README][7]\r\n\r\nThis mod also has a much longer list of pre-made formats. To use a premade format, simply enter its key name. `dateFormat(new Date(), &#39;pretty-a&#39;);`\r\n\r\n - &#39;compound&#39;\r\n   - &#39;commonLogFormat&#39; == &#39;d/M/Y:G:i:s&#39;\r\n   - &#39;exif&#39; == &#39;Y:m:d G:i:s&#39;\r\n   - &#39;isoYearWeek&#39; == &#39;Y\\\\\\WW&#39;\r\n   - &#39;isoYearWeek2&#39; == &#39;Y-\\\\\\WW&#39;\r\n   - &#39;isoYearWeekDay&#39; == &#39;Y\\\\\\WWj&#39;\r\n   - &#39;isoYearWeekDay2&#39; == &#39;Y-\\\\\\WW-j&#39;\r\n   - &#39;mySQL&#39; == &#39;Y-m-d h:i:s&#39;\r\n   - &#39;postgreSQL&#39; == &#39;Y.z&#39;\r\n   - &#39;postgreSQL2&#39; == &#39;Yz&#39;\r\n   - &#39;soap&#39; == &#39;Y-m-d\\\\\\TH:i:s.u&#39;\r\n   - &#39;soap2&#39; == &#39;Y-m-d\\\\\\TH:i:s.uP&#39;\r\n   - &#39;unixTimestamp&#39; == &#39;@U&#39;\r\n   - &#39;xmlrpc&#39; == &#39;Ymd\\\\\\TG:i:s&#39;\r\n   - &#39;xmlrpcCompact&#39; == &#39;Ymd\\\\\\tGis&#39;\r\n   - &#39;wddx&#39; == &#39;Y-n-j\\\\\\TG:i:s&#39;\r\n - &#39;constants&#39;\r\n   - &#39;AMERICAN&#39; == &#39;F j Y&#39;\r\n   - &#39;AMERICANSHORT&#39; == &#39;m/d/Y&#39;\r\n   - &#39;AMERICANSHORTWTIME&#39; == &#39;m/d/Y h:i:sA&#39;\r\n   - &#39;ATOM&#39; == &#39;Y-m-d\\\\\\TH:i:sP&#39;\r\n   - &#39;COOKIE&#39; == &#39;l d-M-Y H:i:s T&#39;\r\n   - &#39;EUROPEAN&#39; == &#39;j F Y&#39;\r\n   - &#39;EUROPEANSHORT&#39; == &#39;d.m.Y&#39;\r\n   - &#39;EUROPEANSHORTWTIME&#39; == &#39;d.m.Y H:i:s&#39;\r\n   - &#39;ISO8601&#39; == &#39;Y-m-d\\\\\\TH:i:sO&#39;\r\n   - &#39;LEGAL&#39; == &#39;j F Y&#39;\r\n   - &#39;RFC822&#39; == &#39;D d M y H:i:s O&#39;\r\n   - &#39;RFC850&#39; == &#39;l d-M-y H:i:s T&#39;\r\n   - &#39;RFC1036&#39; == &#39;D d M y H:i:s O&#39;\r\n   - &#39;RFC1123&#39; == &#39;D d M Y H:i:s O&#39;\r\n   - &#39;RFC2822&#39; == &#39;D d M Y H:i:s O&#39;\r\n   - &#39;RFC3339&#39; == &#39;Y-m-d\\\\\\TH:i:sP&#39;\r\n   - &#39;RSS&#39; == &#39;D d M Y H:i:s O&#39;\r\n   - &#39;W3C&#39; == &#39;Y-m-d\\\\\\TH:i:sP&#39;\r\n - &#39;pretty&#39;\r\n   - &#39;pretty-a&#39; == &#39;g:i.sA l jS \\\\\\o\\\\\\f F Y&#39;\r\n   - &#39;pretty-b&#39; == &#39;g:iA l jS \\\\\\o\\\\\\f F Y&#39;\r\n   - &#39;pretty-c&#39; == &#39;n/d/Y g:iA&#39;\r\n   - &#39;pretty-d&#39; == &#39;n/d/Y&#39;\r\n   - &#39;pretty-e&#39; == &#39;F jS - g:ia&#39;\r\n   - &#39;pretty-f&#39; == &#39;g:iA&#39;\r\n\r\n*As you may notice, you can use double `\\` to escape a character.*\r\n\r\n---\r\n\r\n\r\n  [1]: https://github.com/JDMcKinstry/JavaScriptDateFormat\r\n  [2]: http://jsfiddle.net/SpYk3/rYzAY/\r\n  [3]: http://jsfiddle.net/SpYk3/smdz6d43/\r\n  [4]: http://jsfiddle.net/SpYk3/tcqpw5d7/\r\n  [5]: https://github.com/JDMcKinstry/jQuery-Date\r\n  [6]: http://php.net/manual/en/function.date.php\r\n  [7]: https://github.com/JDMcKinstry/JavaScriptDateFormat/blob/master/README.md"},{"score":105,"body_markdown":"Try this:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var currentDate = new Date()\r\n    var day = currentDate.getDate()\r\n    var month = currentDate.getMonth() + 1\r\n    var year = currentDate.getFullYear()\r\n    document.write(&quot;&lt;b&gt;&quot; + day + &quot;/&quot; + month + &quot;/&quot; + year + &quot;&lt;/b&gt;&quot;)\r\n&lt;!-- end snippet --&gt;\r\n\r\nThe result will be like\r\n\r\n    15/2/2012"},{"score":23,"body_markdown":"You can use [Date.js][1] library which extens Date object, thus you can have .today() method.\r\n\r\n\r\n  [1]: http://www.datejs.com/"},{"score":66,"body_markdown":"If you&#39;re looking for a lot more granular control over the date formats, I thoroughly recommend  checking out momentjs. Terrific library - and only 5KB.\r\nhttp://momentjs.com/\r\n"},{"score":7,"body_markdown":"You can use this\r\n\r\n    &lt;script&gt;\r\n    function my_curr_date() {      \r\n        var currentDate = new Date()\r\n        var day = currentDate.getDate();\r\n        var month = currentDate.getMonth() + 1;\r\n        var year = currentDate.getFullYear();\r\n        var my_date = month+&quot;-&quot;+day+&quot;-&quot;+year;\r\n        document.getElementById(&quot;dateField&quot;).value=my_date;    \r\n    }\r\n    &lt;/script&gt;\r\n\r\nThe HTML is\r\n\r\n    &lt;body onload=&#39;return my_curr_date();&#39;&gt;\r\n        &lt;input type=&#39;text&#39; name=&#39;dateField&#39; id=&#39;dateField&#39; value=&#39;&#39; /&gt;\r\n    &lt;/body&gt;"},{"score":53,"body_markdown":"&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var d = (new Date()).toString().split(&#39; &#39;).splice(1,3).join(&#39; &#39;);\r\n\r\n    document.write(d)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nTo break it down into steps:\r\n\r\n1. `(new Date()).toString()` gives &quot;Fri Jun 28 2013 15:30:18 GMT-0700 (PDT)&quot;\r\n\r\n2. `(new Date()).toString().split(&#39; &#39;)` divides the above string on each space and returns an array as follows: [&quot;Fri&quot;, &quot;Jun&quot;, &quot;28&quot;, &quot;2013&quot;, &quot;15:31:14&quot;, &quot;GMT-0700&quot;, &quot;(PDT)&quot;]\r\n\r\n3. `(new Date()).toString().split(&#39; &#39;).splice(1,3).join(&#39; &#39;)` takes the second, third and fourth values from the above array, joins them with spaces, and returns a string &quot;Jun 28 2013&quot;"},{"score":457,"body_markdown":"\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var utc = new Date().toJSON().slice(0,10).replace(/-/g,&#39;/&#39;);\r\n    document.write(utc);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nUse the `replace` option if you&#39;re going to reuse the `utc` variable, such as `new Date(utc)`, as Firefox and Safari don&#39;t recognize a date with dashes.\r\n"},{"score":48,"body_markdown":"This works every time:\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n        var now = new Date();\r\n        var day = (&quot;0&quot; + now.getDate()).slice(-2);\r\n        var month = (&quot;0&quot; + (now.getMonth() + 1)).slice(-2);\r\n        var today = now.getFullYear() + &quot;-&quot; + (month) + &quot;-&quot; + (day);\r\n        \r\n        console.log(today);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":0,"body_markdown":"    (function() { var d = new Date(); return new Date(d - d % 86400000); })()"},{"score":46,"body_markdown":"    var date = new Date().toLocaleDateString(&quot;en-US&quot;);\r\n\r\nAlso, you can call method `toLocaleDateString` with two parameters:\r\n\r\n    var date = new Date().toLocaleDateString(&quot;en-US&quot;, {\r\n        &quot;year&quot;: &quot;numeric&quot;,\r\n        &quot;month&quot;: &quot;numeric&quot;\r\n    });\r\nArticle on [MSDN][1]. More about this method on [MDN][2].\r\n\r\n\r\n  [1]: http://msdn.microsoft.com/en-US/library/kecw102f\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString"},{"score":55,"body_markdown":"You can use moment.js: http://momentjs.com/\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var m = moment().format(&quot;DD/MM/YYYY&quot;);\r\n\r\n    document.write(m);\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.14.1/moment.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":179,"body_markdown":"If you just want a date without time info, use:\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n\r\n    document.write(today);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":3,"body_markdown":"I think this is an old question but the easiest way would be the following:\r\n\r\n    var date = new Date();\r\n    var TimeStamp = date.toLocaleString();\r\n    \r\n    function CurrentTime(){\r\n      alert(TimeStamp);\r\n    }\r\n\r\nThis will grab the current time, pass it to a string based on location and then you can call the function CurrentTime to display the time.  This would be, to me, the most effective way to get a time stamp for something."},{"score":2,"body_markdown":"This is my current favorite, because it&#39;s both flexible and modular. It&#39;s a collection of (at least) three simple functions:\r\n\r\n\r\n    /**\r\n     * Returns an array with date / time information\r\n     * Starts with year at index 0 up to index 6 for milliseconds\r\n     * \r\n     * @param {Date} date   date object. If falsy, will take current time.\r\n     * @returns {[]}\r\n     */\r\n    getDateArray = function(date) {\r\n        date = date || new Date();\r\n        return [\r\n            date.getFullYear(),\r\n            exports.pad(date.getMonth()+1, 2),\r\n            exports.pad(date.getDate(), 2),\r\n            exports.pad(date.getHours(), 2),\r\n            exports.pad(date.getMinutes(), 2),\r\n            exports.pad(date.getSeconds(), 2),\r\n            exports.pad(date.getMilliseconds(), 2)\r\n        ];\r\n    };\r\n\r\nHere&#39;s the pad function:\r\n\r\n     /**\r\n     * Pad a number with n digits\r\n     *\r\n     * @param {number} number   number to pad\r\n     * @param {number} digits   number of total digits\r\n     * @returns {string}\r\n     */\r\n    exports.pad = function pad(number, digits) {\r\n        return new Array(Math.max(digits - String(number).length + 1, 0)).join(0) + number;\r\n    };\r\n\r\nFinally I can either build my date string by hand, or use a simple functions to do it for me:\r\n\r\n    /**\r\n     * Returns nicely formatted date-time\r\n     * @example 2015-02-10 16:01:12\r\n     *\r\n     * @param {object} date\r\n     * @returns {string}\r\n     */\r\n    exports.niceDate = function(date) {\r\n        var d = exports.getDateArray(date);\r\n        return d[0] + &#39;-&#39; + d[1] + &#39;-&#39; + d[2] + &#39; &#39; + d[3] + &#39;:&#39; + d[4] + &#39;:&#39; + d[5];\r\n    };\r\n    \r\n    /**\r\n     * Returns a formatted date-time, optimized for machines\r\n     * @example 2015-02-10_16-00-08\r\n     *\r\n     * @param {object} date\r\n     * @returns {string}\r\n     */\r\n    exports.roboDate = function(date) {\r\n        var d = exports.getDateArray(date);\r\n        return d[0] + &#39;-&#39; + d[1] + &#39;-&#39; + d[2] + &#39;_&#39; + d[3] + &#39;-&#39; + d[4] + &#39;-&#39; + d[5];\r\n    };"},{"score":4,"body_markdown":"    var dateTimeToday = new Date();\r\n    var dateToday = new Date(\r\n        dateTimeToday.getFullYear(), \r\n        (dateTimeToday.getMonth() + 1) /*Jan = 0! */, \r\n        dateTimeToday.getDate(), \r\n        0, \r\n        0, \r\n        0, \r\n        0);\r\n"},{"score":18,"body_markdown":"You can get the current date call the static method now like this:\r\n\r\n    var now = Date.now()\r\n\r\nreference:\r\n\r\nhttps://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now"},{"score":3,"body_markdown":"Pretty Print The Date Like This.\r\n\r\n&gt; June 1st, 2015 11:36:48 AM\r\n\r\nhttps://gist.github.com/Gerst20051/7d72693f722bbb0f6b58"},{"score":10,"body_markdown":"If you want a simple `DD/MM/YYYY` format, I&#39;ve just come up with this simple solution, although it doesn&#39;t prefix missing zeros.\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var d = new Date();\r\n    document.write( [d.getDate(), d.getMonth()+1, d.getFullYear()].join(&#39;/&#39;) );\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":16,"body_markdown":"[Varun&#39;s answer](https://stackoverflow.com/a/19079030/1338062) does not account for [TimezoneOffset](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset). Here is a version that does:\r\n\r\n    var d = new Date()\r\n    new Date(d.getTime() - d.getTimezoneOffset() * 60000).toJSON().slice(0, 10) // 2015-08-11\r\n\r\nThe `TimezoneOffset` is minutes, while the Date constructor takes milliseconds, thus the multiplication by `60000`."},{"score":4,"body_markdown":"You can checkout this\r\n\r\n    var today = new Date();\r\n    today = parseInt(today.getMonth()+1)+&#39;/&#39;+today.getDate()+&#39;/&#39;+today.getFullYear()+&quot;\\nTime : &quot;+today.getHours()+&quot;:&quot;+today.getMinutes()+&quot;:&quot;+today.getSeconds();\r\n    document.write(today);\r\nAnd see the documentation for Date() constructor.\r\n[link][1]\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},{"score":5,"body_markdown":"If by &quot;current date&quot; you are thinking about &quot;today&quot;, then this trick may work for you:\r\n\r\n```javasript\r\n&gt; new Date(3600000*Math.floor(Date.now()/3600000))\r\n2020-05-07T07:00:00.000Z\r\n```\r\n\r\nThis way you are getting today [Date][1] instance with time 0:00:00.\r\n\r\nThe principle of operation is very simple: we take the current timestamp and divide it for 1 day expressed in milliseconds. We will get a fraction. By using [Math.floor][2], we get rid of the fraction, so we get an integer. Now if we multiply it back by one day (again - in milliseconds), we get a date timestamp with the time exactly at the beginning of the day.\r\n\r\n```javascript\r\n&gt; now = Date.now()\r\n1588837459929\r\n&gt; daysInMs = now/3600000\r\n441343.73886916664\r\n&gt; justDays = Math.floor(daysInMs)\r\n441343\r\n&gt; today = justDays*3600000\r\n1588834800000\r\n&gt; new Date(today)\r\n2020-05-07T07:00:00.000Z\r\n```\r\n\r\nClean and simple.\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor"},{"score":9,"body_markdown":"    new Date().toISOString().slice(0,10); \r\n\r\nwould work too"},{"score":4,"body_markdown":"What&#39;s the big deal with this..   The cleanest way to do this is \r\n\r\n `var currentDate=new Date().toLocaleString().slice(0,10);`"},{"score":1,"body_markdown":"##The basics\r\n\r\nIf you&#39;re happy with the format `Sun Jan 24 2016 21:23:07 GMT+0100 (CET)`, you could just use this code :\r\n\r\n    var today = new Date();\r\n\r\n##Date.prototype.toLocaleDateString()\r\n\r\nIf you want to format your output, consider using [**`Date.prototype.toLocaleDateString()`**][1] :\r\n\r\n    var today = new Date().toLocaleDateString(&#39;de-DE&#39;, {     \r\n        weekday: &#39;long&#39;, \r\n        year: &#39;numeric&#39;,\r\n        month: &#39;long&#39;,\r\n        day: &#39;numeric&#39;\r\n    });\r\n\r\nIf you executed that code today (january 24ᵗʰ, 2016) on a modern browser, it would produce the string `Sonntag, 24. Januar 2016`. Older browsers may generate a different result, though, as eg. IE&lt;11 doesn&#39;t support locales or options arguments.\r\n\r\n##Going custom\r\n\r\nIf [**`Date.prototype.toLocaleDateString()`**][1] isn&#39;t flexible enough to fulfill whatever need you may have, you might want to consider creating a custom Date object that looks like this :\r\n\r\n    var DateObject = (function() {\r\n        var monthNames = [\r\n          &quot;January&quot;, &quot;February&quot;, &quot;March&quot;,\r\n          &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;,\r\n          &quot;August&quot;, &quot;September&quot;, &quot;October&quot;,\r\n          &quot;November&quot;, &quot;December&quot;\r\n        ];\r\n        var date = function(str) {\r\n            this.set(str);\r\n        };\r\n        date.prototype = {\r\n            set : function(str) {\r\n                var dateDef = str ? new Date(str) : new Date();\r\n                this.day = dateDef.getDate();\r\n                this.dayPadded = (this.day &lt; 10) ? (&quot;0&quot; + this.day) : &quot;&quot; + this.day;\r\n                this.month = dateDef.getMonth() + 1;\r\n                this.monthPadded = (this.month &lt; 10) ? (&quot;0&quot; + this.month) : &quot;&quot; + this.month;\r\n                this.monthName = monthNames[this.month - 1];\r\n                this.year = dateDef.getFullYear();\r\n            }\r\n        };\r\n        return date;\r\n    })();\r\n\r\nIf you included that code and executed `new DateObject()` today (january 24ᵗʰ, 2016), it would produce an object with the following properties :\r\n\r\n    day: 24\r\n    dayPadded: &quot;24&quot;\r\n    month: 1\r\n    monthPadded: &quot;01&quot;\r\n    monthName: &quot;January&quot;\r\n    year: 2016\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString"},{"score":11,"body_markdown":"\r\n    new Date().toDateString();\r\nResult:\r\n\r\n&gt; &quot;Wed Feb 03 2016&quot;"},{"score":254,"body_markdown":"**The shortest possible.** \r\n\r\nTo get format like &quot;2018-08-03&quot;:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let today = new Date().toISOString().slice(0, 10)\r\n\r\n    console.log(today)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nTo get format like &quot;8/3/2018&quot;:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let today = new Date().toLocaleDateString()\r\n\r\n    console.log(today)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nAlso, you can pass [locale][1] as argument, for example `toLocaleDateString(&quot;sr&quot;)`, etc.\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString#Using_locales"},{"score":2,"body_markdown":"2.39KB minified. One file. https://github.com/rhroyston/clock-js  \r\n&lt;br&gt;\r\nJust trying to help...\r\n&lt;br&gt;\r\n&lt;br&gt;\r\n\r\n\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/64dzS.jpg"},{"score":30,"body_markdown":"Cleaner, simpler version:\r\n\r\n    new Date().toLocaleString();\r\n\r\nResult **varies** according to the user&#39;s **locale**:\r\n&gt; 2/27/2017, 9:15:41 AM"},{"score":4,"body_markdown":"This may help you\r\n\r\n    var date = new Date();\r\n    console.log(date.getDate()+&#39;/&#39;+(date.getMonth()+1)+&#39;/&#39;+date.getFullYear());\r\n\r\nThis will print current date in dd/MM/yyyy format\r\n\r\n"},{"score":8,"body_markdown":"**LATEST EDIT: 8/23/19**\r\nThe [date-fns][1] library works much like [moment.js][2] but has a WAY smaller footprint. It lets you cherry pick which functions you want to include in your project so you don&#39;t have to compile the whole library to format today&#39;s date. If a minimal 3rd party lib isn&#39;t an option for your project, I endorse the accepted solution by Samuel Meddows up top.\r\n\r\n**Preserving history below because it helped a few people. But for the record it&#39;s pretty hacky and liable to break without warning, as are most of the solutions on this post**\r\n\r\n**EDIT 2/7/2017**\r\n**A one-line JS solution:** \r\n\r\n&gt;tl;dr&lt;br&gt;&lt;br&gt;\r\n`var todaysDate =&#160;new Date(Date.now()).toLocaleString().slice(0,3).match(/[0-9]/i) ? new Date(Date.now()).toLocaleString().split(&#39; &#39;)[0].split(&#39;,&#39;)[0] : new Date(Date.now()).toLocaleString().split(&#39; &#39;)[1] + &quot; &quot; + new Date(Date.now()).toLocaleString().split(&#39; &#39;)[2] + &quot; &quot; + new Date(Date.now()).toLocaleString().split(&#39; &#39;)[3];`\r\n&lt;br&gt;&lt;br&gt;edge, ff latest, &amp; chrome return `todaysDate = &quot;2/7/2017&quot;` &lt;br&gt;&quot;works&quot;* in IE10+\r\n\r\n\r\n**Explanation**\r\n\r\nI found out that IE10 and IE Edge do things a bit differently.. go figure.\r\nwith `new Date(Date.now()).toLocaleString()` as input,\r\n\r\nIE10 returns: \r\n\r\n    &quot;Tuesday, February 07, 2017 2:58:25 PM&quot;\r\n\r\nI could write a big long function and FTFY. But **you really ought to use [moment.js][3] for this stuff.** My script merely cleans this up and gives you the *expanded* traditional US notation: `&gt; todaysDate = &quot;March 06, 2017&quot;`\r\n\r\nIE EDGE returns:\r\n\r\n    &quot;‎2‎/‎7‎/‎2017‎ ‎2‎:‎59‎:‎27‎ ‎PM&quot;\r\n\r\nOf course it couldn&#39;t be that easy. **Edge&#39;s date string has invisible &quot;•&quot; characters between each visible one.** So not only will we now be checking if the first character is a number, but the first 3 characters, since it turns out that any single character in the whole date range&#160;will eventually be a dot or a slash at some point. So to keep things simple, just [.slice()][4] the first three chars (tiny buffer against future shenanigans) and then check for numbers. It should probably be noted that these invisible dots could potentially persist in your code. I&#39;d maybe dig into that if you&#39;ve got bigger plans than just printing this string to your view.\r\n\r\n**∴ updated one-liner:**\r\n\r\n    var todaysDate =&#160;new Date(Date.now()).toLocaleString().slice(0,3).match(/[0-9]/i) ? new Date(Date.now()).toLocaleString().split(&#39; &#39;)[0].split(&#39;,&#39;)[0] : new Date(Date.now()).toLocaleString().split(&#39; &#39;)[1] + &quot; &quot; + new Date(Date.now()).toLocaleString().split(&#39; &#39;)[2] + &quot; &quot; + new Date(Date.now()).toLocaleString().split(&#39; &#39;)[3];\r\n\r\nThat sucks to read. How about:\r\n\r\n    var dateString =&#160;new Date(Date.now()).toLocaleString();\r\n    var todaysDate =&#160;dateString.slice(0,3).match(/[0-9]/i) ? dateString.split(&#39; &#39;)[0].split(&#39;,&#39;)[0] : dateString.split(&#39; &#39;)[1] + &quot; &quot; + dateString.split(&#39; &#39;)[2] + &quot; &quot; + dateString.split(&#39; &#39;)[3];\r\n\r\n**ORIGINAL ANSWER**\r\n\r\nI&#39;ve got a one-liner for you:\r\n\r\n    new Date(Date.now()).toLocaleString().split(&#39;, &#39;)[0];\r\n\r\nand `[1]` will give you the time of day.\r\n\r\n\r\n  [1]: https://www.npmjs.com/package/date-fns\r\n  [2]: https://www.npmjs.com/package/moment\r\n  [3]: https://momentjs.com/\r\n  [4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice"},{"score":6,"body_markdown":"If you are using jQuery. Try this one liner :\r\n\r\n    $.datepicker.formatDate(&#39;dd/mm/yy&#39;, new Date());\r\n\r\nHere is the convention for formatting the date \r\n\r\n - d - day of month (no leading zero)\r\n - dd - day of month (two digit)\r\n - o - day of the year (no leading zeros)\r\n - oo - day of the year (three digit)\r\n - D - day name short\r\n - DD - day name long\r\n - m - month of year (no leading zero)\r\n - mm - month of year (two digit)\r\n - M - month name short\r\n - MM - month name long\r\n - y - year (two digit)\r\n - yy - year (four digit)\r\n\r\nHere is the reference for jQuery [datepicker][1]\r\n\r\n\r\n  [1]: http://api.jqueryui.com/datepicker/"},{"score":1,"body_markdown":"You can use my DATE API given below for everyday use of date formatting along with getting current date, yesterday etc. \r\nHow to use \r\n  e.g. \r\n   \r\n\r\n     var dt = new Date();  \r\n           /// ANY DATE YOU WANT --  dt = new Date(&quot;&quot;July 21, 1983 01:15:00&quot;&quot;)\r\n            \r\n           dateObj = dt.getFormattedDate();\r\n          \r\n           alert( dateObj.isToday() );\r\n           alert( dateObj.todayDay() );\r\n           alert( dateObj.monthNameDayYear() );\r\n\r\n-------------------------------------------------------------------\r\n    (function () {\r\n    \r\n        fnDateProcessor = function () {\r\n            var that = this;\r\n    \r\n            return {\r\n    \r\n                yyyymmdd: function (separator) {\r\n                    var fdate = this.formatDate(true, true) ,\r\n                        separator = separator ? separator : &quot;-&quot;;\r\n                    return fdate.year + separator + fdate.month + separator + fdate.day;\r\n                },\r\n    \r\n                monthNameDayYear: function () {\r\n                    var fdate = this.formatDate(true, true);\r\n                    return fdate.monthName + &quot; &quot; + fdate.day + &quot;, &quot; + fdate.year;\r\n                },\r\n    \r\n                ddmmyyyy: function (separator) {\r\n                    var fdate = this.formatDate(true, true) ,\r\n                        separator = separator ? separator : &quot;/&quot;;\r\n                    return fdate.day + separator + fdate.month + separator + fdate.year;\r\n                },\r\n    \r\n                meridianTime: function () {\r\n                    var fdate = this.formatDate();\r\n                    return fdate.hour + &quot;:&quot; + fdate.minute + &quot; &quot; + fdate.meridian;\r\n                },\r\n    \r\n                monthDay: function (separator) {\r\n    \r\n                    var fdate = this.formatDate();\r\n                    separator = checkSeparator(separator);\r\n                    return fdate.monthName.substring(0, 3) + separator + fdate.day;\r\n    \r\n                },\r\n    \r\n                weekMonthDayYear: function () {\r\n                    var fdate = this.formatDate();\r\n                    //separator = checkSeparator(separator);\r\n    \r\n                    return fdate.weekDay + &quot; &quot; + fdate.monthName.substring(0, 3) +\r\n                        fdate.day + &quot; ,&quot; + fdate.year;\r\n                },\r\n    \r\n                timeZoneInclusive: function () {\r\n    \r\n                    return new Date(that);\r\n                },\r\n    \r\n                todayDay: function () { return new Date().getDate(); },\r\n                todayMonth: function () { return new Date().getMonth() + 1; },\r\n                dateDay: function () { return this.formatDate().day; },\r\n                dateMonth: function () { return this.formatDate().month; },\r\n                isToday: function () { return this.sameDate(new Date()); },\r\n                isYesterday: function () {\r\n                    d = new Date(); d.setDate(d.getDate() - 1);\r\n                    return this.sameDate(d);\r\n                },\r\n    \r\n                formatDate: function () {\r\n                    var zeroPaddedMnth = true, zeroPaddedDay = false,\r\n                        zeroPaddedHr = false, zeroPaddedMin = true;\r\n                    // Possible to take Options arg that overide / merge to defaults\r\n    \r\n                    var monthNames = [\r\n                        &quot;January&quot;, &quot;February&quot;, &quot;March&quot;,\r\n                        &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;,\r\n                        &quot;August&quot;, &quot;September&quot;, &quot;October&quot;,\r\n                        &quot;November&quot;, &quot;December&quot;\r\n                    ];\r\n                    var weekDays = [&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;];\r\n    \r\n                    var day = getFormattedDay(that.getDate(), zeroPaddedDay);\r\n                    var monthIndex = that.getMonth();\r\n                    var month = getFormattedMonth(monthIndex + 1, zeroPaddedMnth);\r\n                    var year = that.getFullYear();\r\n                    var wkDay = that.getDay();\r\n                    var hour = getFormattedHour(that.getHours(), zeroPaddedHr);\r\n                    var minute = getFormattedMinute(that.getMinutes(), zeroPaddedMin);\r\n                    var meridian = getMeridian(that.getHours());\r\n    \r\n                    return {\r\n                        &quot;day&quot;: day, &quot;monthName&quot;: monthNames[monthIndex], &quot;month&quot;: month,\r\n                        &quot;weekDay&quot;: weekDays[wkDay], &quot;year&quot;: year, &quot;hour&quot;: hour, &quot;minute&quot;: minute,\r\n                        &quot;meridian&quot;: meridian\r\n                    };\r\n                },\r\n    \r\n                compareDate: function (d2) {     /// validates if caller is less than argument                            \r\n                    d2 = _isString(d2) ? new Date(d2) : d2;\r\n    \r\n                    return !this.sameDate(d2)\r\n                        &amp;&amp; typeof d2 != &quot;number&quot;\r\n                        ? that &lt; d2 : false;\r\n                },\r\n    \r\n                sameDate: function (d) {\r\n                    return that.getFullYear() === d.getFullYear()\r\n                        &amp;&amp; that.getDate() === d.getDate()\r\n                        &amp;&amp; that.getMonth() === d.getMonth();\r\n                },\r\n    \r\n                dateAfter: function (separator) {\r\n                    var fdate = this.formatDate();\r\n                    var separator = separator ? separator : &quot;-&quot;;\r\n                    return fdate.year + separator + fdate.month + separator + (fdate.day + 1);\r\n                }\r\n    \r\n            };\r\n    \r\n        };\r\n    \r\n    \r\n        function _isString(obj) {\r\n            var toString = Object.prototype.toString;\r\n            return toString.call(obj) == &#39;[object String]&#39;;\r\n        }\r\n    \r\n        function checkSeparator(separator) {\r\n            // NOT GENERIC ... NEEDS REVISION\r\n            switch (separator) {\r\n                case &quot; &quot;: sep = separator; break;\r\n                case &quot;,&quot;: sep = &quot; ,&quot;; break;\r\n                default:\r\n                    sep = &quot; &quot;; break;\r\n            }\r\n    \r\n            return sep;\r\n        }\r\n    \r\n        function getFormattedHour(h, zeroPadded) {\r\n            h = h % 12;\r\n            h = h ? h : 12;    //  12 instead of 00\r\n            return zeroPadded ? addZero(h) : h;\r\n        }\r\n    \r\n        function getFormattedMinute(m, zeroPadded) {\r\n    \r\n            return zeroPadded ? addZero(m) : m;\r\n        }\r\n    \r\n        function getFormattedDay(dd, zeroPadded) {\r\n    \r\n            return zeroPadded ? addZero(dd) : dd;\r\n        }\r\n        function getFormattedMonth(mm, zeroPadded) {\r\n    \r\n            return zeroPadded ? addZero(mm) : mm;\r\n        }\r\n    \r\n        function getMeridian(hr) {\r\n    \r\n            return hr &gt;= 12 ? &#39;PM&#39; : &#39;AM&#39;;\r\n        }\r\n    \r\n        function addZero(i) {\r\n            if (i &lt; 10) {\r\n                i = &quot;0&quot; + i;\r\n            }\r\n            return i;\r\n        }\r\n    \r\n    \r\n        Date.prototype.getFormattedDate = fnDateProcessor;\r\n    \r\n    } ());\r\n\r\n"},{"score":15,"body_markdown":"The Shortest Answer is: `new Date().toJSON().slice(0,10)`"},{"score":-1,"body_markdown":"You can get by using `new Date()` to the current browser date in JavaScript. \r\n\r\nBut currently we have a good plugin for ***Parse, validate, manipulate, and display dates and times in JavaScript*** by using [moment.js][1] \r\n\r\n\r\n  [1]: https://momentjs.com/"},{"score":28,"body_markdown":"If you are happy with YYYY-MM-DD format, this will do the job as well.\r\n\r\n`new Date().toISOString().split(&#39;T&#39;)[0]`\r\n\r\n`2018-03-10`"},{"score":12,"body_markdown":"As `toISOString()` will only return current UTC time , not local time. We have to make a date by using &#39;.toString()&#39; function to get date in `yyyy-MM-dd` format like\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    document.write(new Date(new Date().toString().split(&#39;GMT&#39;)[0]+&#39; UTC&#39;).toISOString().split(&#39;T&#39;)[0]);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n**To get date and time into in `yyyy-MM-ddTHH:mm:ss` format**\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    document.write(new Date(new Date().toString().split(&#39;GMT&#39;)[0]+&#39; UTC&#39;).toISOString().split(&#39;.&#39;)[0]);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n**To get date and time into in `yyyy-MM-dd HH:mm:ss` format**\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    document.write(new Date(new Date().toString().split(&#39;GMT&#39;)[0]+&#39; UTC&#39;).toISOString().split(&#39;.&#39;)[0].replace(&#39;T&#39;,&#39; &#39;));\r\n\r\n&lt;!-- end snippet --&gt;\r\n"},{"score":2,"body_markdown":"If you&#39;re looking for a lot more granular control over the date formats, I thoroughly recommend checking out date-FNS. Terrific library - much smaller than moment.js and it&#39;s function based approach make it much faster then other class based libraries. Provide large number of operations needed over dates. \r\n\r\nhttps://date-fns.org/docs/Getting-Started"},{"score":2,"body_markdown":"If your looking to format into a string.\r\n\r\n    statusUpdate = &quot;time &quot; + new Date(Date.now()).toLocaleTimeString();\r\n\r\noutput &quot;time 11:30:53 AM&quot;\r\n"},{"score":0,"body_markdown":"This answer is for people looking for a date with ISO-8601 like format and with the timezone.\r\nIt&#39;s pure JS for those who don&#39;t want to include any date library.\r\n\r\n          var date = new Date();\r\n          var timeZone = date.toString();\r\n          //Get timezone ( &#39;GMT+0200&#39; )\r\n          var timeZoneIndex = timeZone.indexOf(&#39;GMT&#39;);\r\n          //Cut optional string after timezone ( &#39;(heure de Paris)&#39; )\r\n          var optionalTimeZoneIndex = timeZone.indexOf(&#39;(&#39;);\r\n          if(optionalTimeZoneIndex != -1){\r\n        \t  timeZone = timeZone.substring(timeZoneIndex, optionalTimeZoneIndex);\r\n          }\r\n          else{\r\n        \t  timeZone = timeZone.substring(timeZoneIndex);\r\n          }\r\n          //Get date with JSON format ( &#39;2019-01-23T16:28:27.000Z&#39; )\r\n          var formattedDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toJSON();\r\n          //Cut ms\r\n          formattedDate = formattedDate.substring(0,formattedDate.indexOf(&#39;.&#39;));\r\n          //Add timezone\r\n          formattedDate = formattedDate + &#39; &#39; + timeZone;\r\n          console.log(formattedDate);\r\n\r\nPrint something like this in the console :\r\n&gt;2019-01-23T17:12:52 GMT+0100 \r\n\r\nJSFiddle : https://jsfiddle.net/n9mszhjc/4/\r\n\r\n"},{"score":-1,"body_markdown":"With ability to render in custom format and using month name in different locales:\r\n\r\n\r\n    const locale = &#39;en-us&#39;;\r\n    const d = new Date(date);\r\n\r\n    const day = d.getDate();\r\n    const month = d.toLocaleString(locale, { month: &#39;long&#39; });\r\n    const year = d.getFullYear();\r\n\r\n    const time = d.toLocaleString(locale, { hour12: false, hour: &#39;numeric&#39;, minute: &#39;numeric&#39;});\r\n\r\n    return `${month} ${day}, ${year} @ ${time}`; // May 5, 2019 @ 23:41"},{"score":5,"body_markdown":"This is good to get formatted date \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let date = new Date().toLocaleDateString(&quot;en&quot;, {year:&quot;numeric&quot;, day:&quot;2-digit&quot;, month:&quot;2-digit&quot;});\r\n    console.log(date);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":4,"body_markdown":"**This does a lot;**\r\n\r\n  \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n        var today = new Date();\r\n        var date = today.getFullYear()+&#39;/&#39;+(today.getMonth()+1)+&#39;/&#39;+today.getDate();\r\n        document.write(date);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nWhere **today.getFullYear()**- gets current year, **today.getMonth()+1** - gets current month and **today.getDate()** gets today&#39;s date.\r\nAll of this is concatinated with &#39;/&#39;."},{"score":-1,"body_markdown":"My solution uses string literal [Find out more...][1]\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // Declare Date as d\r\n    var d = new Date()\r\n\r\n    // Inline formatting of Date\r\n    const exampleOne = `${d.getDay()}-${d.getMonth() + 1}-${d.getFullYear()}`\r\n    // January is 0 so +1 is required\r\n\r\n    // With Breaklines and Operators\r\n    const exampleTwo = `+++++++++++\r\n    With Break Lines and Arithmetic Operators Example\r\n    Year on newline: ${d.getFullYear()}\r\n    Year minus(-) 30 years: ${d.getFullYear() - 30}\r\n    You get the idea...\r\n    +++++++++++`\r\n    \r\n    console.log(&#39;=============&#39;)\r\n    console.log(exampleOne)\r\n    console.log(&#39;=============&#39;)\r\n    \r\n    console.log(exampleTwo)\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"},{"score":0,"body_markdown":"To get just the date then it is built in to javascript:\r\n\r\n    new Date();\r\n\r\nIf you are looking for date formatting and you are anyways using the [Kendo JQuery UI][1] library for your site then I suggest using the built in kendo function:\r\n\r\n    kendo.toString(new Date(), &quot;yyMMdd&quot;); //or any other typical date format\r\nFor a full list of supported formats [see here][2]\r\n\r\n\r\n  [1]: https://www.telerik.com/kendo-jquery-ui\r\n  [2]: https://docs.telerik.com/kendo-ui/globalization/intl/dateformatting"},{"score":-1,"body_markdown":"If you only require the string representation, then simply use:\r\n\r\n    Date();"},{"score":-1,"body_markdown":"Try This and you can adjust date formate accordingly:       \r\n\r\n    var today = new Date();\r\n        var dd = today.getDate();\r\n        var mm = today.getMonth() + 1;\r\n        var yyyy = today.getFullYear();\r\n        if (dd &lt; 10) {\r\n            dd = &#39;0&#39; + dd;\r\n        }\r\n        if (mm &lt; 10) {\r\n            mm = &#39;0&#39; + mm;\r\n        }\r\n     var myDate= dd + &#39;-&#39; + mm + &#39;-&#39; + yyyy;"},{"score":2,"body_markdown":"# TL;DR #\n\nMost of the answers found here are correct **only** if you need the current time that&#39;s on your local machine (client) which is a source that often cannot be considered reliable (it will probably differ from another system).\n\nReliable sources are:\n\n - Web server&#39;s clock (but make sure that it&#39;s updated)\n - Time APIs &amp; CDNs\n\n# Details #\n\nA method called on the `Date` instance will return a value based on the local time of your machine.\n\nFurther details can be found in &quot;MDN web docs&quot;: [JavaScript Date object][1].\n\nFor your convenience, I&#39;ve added a relevant note from their docs:\n\n&gt; (...) the basic methods to fetch the date and time or its components all work in the local (i.e. host system) time zone and offset.\n\nAnother source mentioning this is: [JavaScript date and time object][2]\n\n&gt; it is important to note that if someone&#39;s clock is off by a few hours or they are in a different time zone, then the Date object will create a different times from the one created on your own computer.\n\nSome reliable sources that you can use are:\n\n - Your web server&#39;s clock (first check if it&#39;s properly set)\n - Time APIs &amp; CDNs:\n   - https://timezonedb.com/api\n   - http://worldtimeapi.org\n   - http://worldclockapi.com\n   - http://www.geonames.org/export/ws-overview.html\n   - Other related APIs: https://www.programmableweb.com/category/time/api\n\nBut if accuracy is not important for your use case or if you simply need the date to be relative to local machine&#39;s time then you can safely use Javascript&#39;s `Date` basic methods like `Date.now()`.\n\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n  [2]: http://www.tizag.com/javascriptT/javascriptdate.php"},{"score":5,"body_markdown":"A straighforward way to pull that off (whilst considering your current time zone it taking advantage of the ISO yyyy-mm-dd format) is:\r\n\r\n    let d = new Date().toISOString().substring(0,19).replace(&quot;T&quot;,&quot; &quot;) // &quot;2020-02-18 16:41:58&quot;\r\n\r\nUsually, this is a pretty all-purpose compatible date format and you can convert it to pure date value if needed:\r\n\r\n    Date.parse(d); // 1582044297000\r\n\r\n\r\n\r\n"},{"score":5,"body_markdown":"Try\r\n\r\n    `${Date()}`.slice(4,15)\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log( `${Date()}`.slice(4,15) )\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nWe use here standard JS functionalities: [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals), [Date object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) which is cast to string, and [slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice). This is probably shortest solution which meet OP requirements (no time, only date)"},{"score":0,"body_markdown":"For anyone looking for a date format like this **09-Apr-2020**\r\n\r\n    function getDate(){\r\n      var months = [&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]\r\n\r\n      var today = new Date();\r\n      var dd    = String(today.getDate()).padStart(2, &#39;0&#39;);\r\n      var mm    = months[today.getMonth()];\r\n      var yyyy  = today.getFullYear();\r\n\r\n      today = dd + &quot;-&quot; + mm + &quot;-&quot; + yyyy;\r\n      return today;\r\n    }\r\n\r\n    getDate();"},{"score":-1,"body_markdown":"    Date.prototype.toLocalFullDateStringYYYYMMDDHHMMSS = function () {\r\n    if (this != null &amp;&amp; this != undefined) {\r\n        let str = this.getFullYear();\r\n        str += &quot;-&quot; + round(this.getMonth() + 1);\r\n        str += &quot;-&quot; + round(this.getDate());\r\n        str += &quot;T&quot;;\r\n        str += round(this.getHours());\r\n        str += &quot;:&quot; + round(this.getMinutes());\r\n        str += &quot;:&quot; + round(this.getSeconds());\r\n        return str;\r\n    } else {\r\n        return this;\r\n    }\r\n\r\n    function round(n){\r\n        if(n &lt; 10){\r\n            return &quot;0&quot; + n;\r\n        }\r\n        else return n;\r\n    }};"},{"score":3,"body_markdown":"Using JS built in `Date.prototype.toLocaleDateString()`\r\nFrom MDN docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n    const options = { \r\n      month: &#39;2-digit&#39;, \r\n      day: &#39;2-digit&#39;,\r\n      year: &#39;numeric&#39;, \r\n    };\r\n\r\n    console.log(new Date().toLocaleDateString(&#39;en-US&#39;, options)); // mm/dd/yyyy\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}],"score":2453}