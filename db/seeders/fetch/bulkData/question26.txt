{"body":"What is the best way to copy text to the clipboard? (multi-browser)\r\n\r\nI have tried: \r\n\r\n    function copyToClipboard(text) {\r\n    \tif (window.clipboardData) { // Internet Explorer\r\n    \t    window.clipboardData.setData(&quot;Text&quot;, text);\r\n    \t} else {  \r\n    \t    unsafeWindow.netscape.security.PrivilegeManager.enablePrivilege(&quot;UniversalXPConnect&quot;);  \r\n    \t    const clipboardHelper = Components.classes[&quot;@mozilla.org/widget/clipboardhelper;1&quot;].getService(Components.interfaces.nsIClipboardHelper);  \r\n    \t    clipboardHelper.copyString(text);\r\n    \t}\r\n    }\r\n\r\nbut in Internet Explorer it gives a syntax error. In Firefox, it says `unsafeWindow is not defined`.\r\n\r\n A nice trick without flash: https://stackoverflow.com/questions/17527870/how-does-trello-access-the-users-clipboard","title":"How do I copy to the clipboard in JavaScript?","answers":[{"score":4,"body_markdown":"As far as I know that only works in Internet&amp;nbsp;Explorer.\r\n\r\nSee also *[Dynamic Tools - JavaScript Copy To Clipboard][1]*, but it requires the user to change the configuration first and even then it doesn&#39;t seems to work.\r\n\r\n  [1]: http://www.dynamic-tools.net/toolbox/copyToClipboard/\r\n\r\n"},{"score":88,"body_markdown":"Reading and modifying the clipboard from a webpage raises security and privacy concerns. However, in Internet&amp;nbsp;Explorer, it is possible to do it. I found this [example snippet][1]:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n        &lt;script type=&quot;text/javascript&quot;&gt;\r\n            function select_all(obj) {\r\n                var text_val=eval(obj);\r\n                text_val.focus();\r\n                text_val.select();\r\n                r = text_val.createTextRange();\r\n                if (!r.execCommand) return; // feature detection\r\n                r.execCommand(&#39;copy&#39;);\r\n            }\r\n        &lt;/script&gt;\r\n        &lt;input value=&quot;http://www.sajithmr.com&quot;\r\n         onclick=&quot;select_all(this)&quot; name=&quot;url&quot; type=&quot;text&quot; /&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: http://www.sajithmr.com/onclick-select-all-and-copy-to-clipboard-javascript/\r\n"},{"score":10,"body_markdown":"In browsers other than IE you need to use a small flash object to manipulate the clipboard, e.g.\r\n\r\n  - [Auto copy to clipboard](http://ajaxian.com/archives/auto-copy-to-clipboard)"},{"score":22,"body_markdown":"The other methods will copy plain text to the clipboard. To copy HTML (ie, you can paste results into a WSIWYG editor), you can do the following in **IE ONLY**. This is is fundamentally different from the other methods, as the browser actually visibly selects the content.\r\n\r\n    // create an editable DIV and append the HTML content you want copied\r\n    var editableDiv = document.createElement(&quot;div&quot;);\r\n    with (editableDiv) {\r\n        contentEditable = true;\r\n    }     \r\n    editableDiv.appendChild(someContentElement);  \t      \r\n\r\n    // select the editable content and copy it to the clipboard\r\n    var r = document.body.createTextRange();\r\n    r.moveToElementText(editableDiv);\r\n    r.select();  \r\n    r.execCommand(&quot;Copy&quot;);\r\n    \r\n    // deselect, so the browser doesn&#39;t leave the element visibly selected\r\n    r.moveToElementText(someHiddenDiv);\r\n    r.select();   "},{"score":4,"body_markdown":"Looks like you took the code from [Greasemonkey\\JavaScript Copy to Clipboard button](https://stackoverflow.com/questions/316508/greasemonkey-javascript-copy-to-clipboard-button &quot;Greasemonkey\\JavaScript Copy to Clipboard button&quot;) or the original source of this snippet...\r\n\r\nThis code was for Greasemonkey, hence the unsafeWindow. And I guess the syntax error in IE comes from the `const` keyword which is specific to Firefox (replace it with `var`)."},{"score":13,"body_markdown":"As of Flash 10, you can only copy to clipboard if the action originates from user interaction with a Flash object. ([Read related section from Adobe&#39;s Flash 10 announcement][1])\r\n\r\nThe solution is to overly a flash object above the Copy button, or whatever element initiates the copy. Zero Clipboard is currently the best library with this implementation. Experienced Flash developers may just want to make their own library.\r\n\r\n  [1]: http://www.adobe.com/devnet/flashplayer/articles/fplayer10_security_changes_02.html#head31"},{"score":86,"body_markdown":"If you want a really simple solution (takes less than 5 minutes to integrate) and looks good right out of the box, then [Clippy](http://github.com/mojombo/clippy) is a nice alternative to some of the more complex solutions.\r\n\r\nIt was written by a co-founder of GitHub. Example Flash embed code below:\r\n\r\n    &lt;object\r\n       classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot;\r\n       width=&quot;110&quot;\r\n       height=&quot;14&quot;\r\n       id=&quot;clippy&quot;&gt;\r\n      &lt;param name=&quot;movie&quot; value=&quot;/flash/clippy.swf&quot;/&gt;\r\n      &lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;\r\n      &lt;param name=&quot;quality&quot; value=&quot;high&quot;/&gt;\r\n      &lt;param name=&quot;scale&quot; value=&quot;noscale&quot;/&gt;\r\n      &lt;param NAME=&quot;FlashVars&quot; value=&quot;text=#{text}&quot;/&gt;\r\n      &lt;param name=&quot;bgcolor&quot; value=&quot;#{bgcolor}&quot;/&gt;\r\n      &lt;embed\r\n         src=&quot;/flash/clippy.swf&quot;\r\n         width=&quot;110&quot;\r\n         height=&quot;14&quot;\r\n         name=&quot;clippy&quot;\r\n         quality=&quot;high&quot;\r\n         allowScriptAccess=&quot;always&quot;\r\n         type=&quot;application/x-shockwave-flash&quot;\r\n         pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot;\r\n         FlashVars=&quot;text=#{text}&quot;\r\n         bgcolor=&quot;#{bgcolor}&quot;/&gt;\r\n    &lt;/object&gt;\r\n\r\nRemember to replace `#{text}` with the text you need copied, and `#{bgcolor}` with a color.\r\n\r\n"},{"score":8,"body_markdown":"I had the same problem building a custom grid edit from (something like Excel) and compatibility with Excel. I had to support selecting multiple cells, copying and pasting.\r\n\r\nSolution: create a textarea where you will be inserting data for the user to copy (for me when the user is selecting cells), set focus on it (for example, when user press &lt;kbd&gt;Ctrl&lt;/kbd&gt;) and select the whole text.\r\n\r\nSo, when the user hit &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt; he/she gets copied cells he/she selected. After testing just resizing the textarea to one pixel (I didn&#39;t test if it will be working on display:none). It works nicely on all browsers, and it is transparent to the user.\r\n\r\nPasting - you could do same like this (differs on your target) - keep focus on textarea and catch paste events using onpaste (in my project I use textareas in cells to edit).\r\n\r\nI can&#39;t paste an example (commercial project), but you get the idea.\r\n"},{"score":25,"body_markdown":"From one of the projects I&#39;ve been working on, a jQuery copy-to-clipboard plugin that utilizes the [Zero Clipboard][1] library.\r\n\r\nIt is easier to use than the native Zero Clipboard plugin if you&#39;re a heavy jQuery user.\r\n\r\n  [1]: https://github.com/patricklodder/jquery-zclip\r\n"},{"score":1279,"body_markdown":"Automatic copying to clipboard may be dangerous, therefore most browsers (except IE) make it very difficult. Personally, I use the following simple trick:\r\n\r\n\r\n    function copyToClipboard(text) {\r\n      window.prompt(&quot;Copy to clipboard: Ctrl+C, Enter&quot;, text);\r\n    }\r\n\r\nThe user is presented with the prompt box, where the text to be copied is already selected. Now it&#39;s enough to press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt; and &lt;kbd&gt;Enter&lt;/kbd&gt; (to close the box) -- and voila!\r\n\r\nNow the clipboard copy operation is SAFE, because the user does it manually (but in a pretty straightforward way). Of course, works in all browsers.\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;button id=&quot;demo&quot; onclick=&quot;copyToClipboard(document.getElementById(&#39;demo&#39;).innerHTML)&quot;&gt;This is what I want to copy&lt;/button&gt;\r\n\r\n    &lt;script&gt;\r\n      function copyToClipboard(text) {\r\n        window.prompt(&quot;Copy to clipboard: Ctrl+C, Enter&quot;, text);\r\n      }\r\n    &lt;/script&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":6,"body_markdown":"This is an expansion of @Chase&#39;s answer, with the advantage that it will work for IMAGE and TABLE elements, not just DIVs on IE9.\r\n\r\n    if (document.createRange) {\r\n        // IE9 and modern browsers\r\n        var r = document.createRange();\r\n        r.setStartBefore(to_copy);\r\n        r.setEndAfter(to_copy);\r\n        r.selectNode(to_copy);\r\n        var sel = window.getSelection();\r\n        sel.addRange(r);\r\n        document.execCommand(&#39;Copy&#39;);  // does nothing on FF\r\n    } else {\r\n        // IE 8 and earlier.  This stuff won&#39;t work on IE9.\r\n        // (unless forced into a backward compatibility mode,\r\n        // or selecting plain divs, not img or table). \r\n        var r = document.body.createTextRange();\r\n        r.moveToElementText(to_copy);\r\n        r.select()\r\n        r.execCommand(&#39;Copy&#39;);\r\n    }\r\n"},{"score":5,"body_markdown":"It seems I misread the question, but for reference, you can extract a range of the DOM (not to clipboard; compatible with all modern browsers), and combine it with the oncopy and onpaste and onbeforepaste events to get clipboard behaviour. Here&#39;s the code to achieve this: \r\n\r\n    function clipBoard(sCommand) {\r\n      var oRange=contentDocument.createRange();\r\n      oRange.setStart(startNode, startOffset);\r\n      oRange.setEnd(endNode, endOffset);\r\n    /* This is where the actual selection happens.\r\n    in the above, startNode and endNode are dom nodes defining the beginning \r\n    and end of the &quot;selection&quot; respectively. startOffset and endOffset are \r\n    constants that are defined as follows:\r\n\r\n    END_TO_END: 2\r\n    END_TO_START: 3\r\n    NODE_AFTER: 1\r\n    NODE_BEFORE: 0\r\n    NODE_BEFORE_AND_AFTER: 2\r\n    NODE_INSIDE: 3\r\n    START_TO_END: 1\r\n    START_TO_START: 0\r\n\r\n    and would be used like oRange.START_TO_END */\r\n          switch(sCommand) {\r\n        case &quot;cut&quot;:\r\n              this.oFragment=oRange.extractContents();\r\n          oRange.collapse();\r\n          break;\r\n        case &quot;copy&quot;:\r\n          this.oFragment=oRange.cloneContents();\r\n          break;\r\n        case &quot;paste&quot;:\r\n          oRange.deleteContents();\r\n          var cloneFragment=this.oFragment.cloneNode(true)\r\n          oRange.insertNode(cloneFragment);\r\n          oRange.collapse();\r\n          break;\r\n      }\r\n    }"},{"score":22,"body_markdown":"I found the following solution:\r\n\r\nOn key down handler creates &quot;pre&quot; tag. We set the content to copy to this tag, then make a selection on this tag and return true in handler. This calls standard handler of chrome and copies selected text.\r\n\r\nAnd if you need you may be set the timeout for function for restoring previous selection. My implementation on Mootools:\r\n\r\n       function EnybyClipboard() {\r\n         this.saveSelection = false;\r\n         this.callback = false;\r\n         this.pastedText = false;\r\n\r\n         this.restoreSelection = function() {\r\n           if (this.saveSelection) {\r\n             window.getSelection().removeAllRanges();\r\n             for (var i = 0; i &lt; this.saveSelection.length; i++) {\r\n               window.getSelection().addRange(this.saveSelection[i]);\r\n             }\r\n             this.saveSelection = false;\r\n           }\r\n         };\r\n\r\n         this.copyText = function(text) {\r\n           var div = $(&#39;special_copy&#39;);\r\n           if (!div) {\r\n             div = new Element(&#39;pre&#39;, {\r\n               &#39;id&#39;: &#39;special_copy&#39;,\r\n               &#39;style&#39;: &#39;opacity: 0;position: absolute;top: -10000px;right: 0;&#39;\r\n             });\r\n             div.injectInside(document.body);\r\n           }\r\n           div.set(&#39;text&#39;, text);\r\n           if (document.createRange) {\r\n             var rng = document.createRange();\r\n             rng.selectNodeContents(div);\r\n             this.saveSelection = [];\r\n             var selection = window.getSelection();\r\n             for (var i = 0; i &lt; selection.rangeCount; i++) {\r\n               this.saveSelection[i] = selection.getRangeAt(i);\r\n             }\r\n             window.getSelection().removeAllRanges();\r\n             window.getSelection().addRange(rng);\r\n             setTimeout(this.restoreSelection.bind(this), 100);\r\n           } else return alert(&#39;Copy not work. :(&#39;);\r\n         };\r\n\r\n         this.getPastedText = function() {\r\n           if (!this.pastedText) alert(&#39;Nothing to paste. :(&#39;);\r\n           return this.pastedText;\r\n         };\r\n\r\n         this.pasteText = function(callback) {\r\n           var div = $(&#39;special_paste&#39;);\r\n           if (!div) {\r\n             div = new Element(&#39;textarea&#39;, {\r\n               &#39;id&#39;: &#39;special_paste&#39;,\r\n               &#39;style&#39;: &#39;opacity: 0;position: absolute;top: -10000px;right: 0;&#39;\r\n             });\r\n             div.injectInside(document.body);\r\n             div.addEvent(&#39;keyup&#39;, function() {\r\n               if (this.callback) {\r\n                 this.pastedText = $(&#39;special_paste&#39;).get(&#39;value&#39;);\r\n                 this.callback.call(null, this.pastedText);\r\n                 this.callback = false;\r\n                 this.pastedText = false;\r\n                 setTimeout(this.restoreSelection.bind(this), 100);\r\n               }\r\n             }.bind(this));\r\n           }\r\n           div.set(&#39;value&#39;, &#39;&#39;);\r\n           if (document.createRange) {\r\n             var rng = document.createRange();\r\n             rng.selectNodeContents(div);\r\n             this.saveSelection = [];\r\n             var selection = window.getSelection();\r\n             for (var i = 0; i &lt; selection.rangeCount; i++) {\r\n               this.saveSelection[i] = selection.getRangeAt(i);\r\n             }\r\n             window.getSelection().removeAllRanges();\r\n             window.getSelection().addRange(rng);\r\n             div.focus();\r\n             this.callback = callback;\r\n           } else return alert(&#39;Fail to paste. :(&#39;);\r\n         };\r\n       }\r\n\r\nUsage:\r\n\r\n    enyby_clip = new EnybyClipboard(); //init \r\n\r\n    enyby_clip.copyText(&#39;some_text&#39;); // place this in CTRL+C handler and return true;\r\n\r\n    enyby_clip.pasteText(function callback(pasted_text) {\r\n            alert(pasted_text);\r\n    }); // place this in CTRL+V handler and return true;\r\n\r\nOn paste it creates textarea and works the same way.\r\n\r\nPS may be this solution can be used for creating fully cross-browser solution without flash. Its works in FF and Chrome."},{"score":68,"body_markdown":"I like this one: \r\n\r\n    &lt;input onclick=&quot;this.select();&quot; type=&#39;text&#39; value=&#39;copy me&#39; /&gt;\r\n\r\nIf a user doesn&#39;t know how to copy text in their OS, then it&#39;s likely they don&#39;t know how to paste either.  So just have it automatically selected, leaving the rest to the user."},{"score":2,"body_markdown":"If the copied link has to be pasted on the same site, then a simple solution is to highlight the text before pressing the simple HTML copy button and then on pressing it, the text content is stored in a session. And wherever it is to be pasted, there is a paste button. \r\n\r\n**I know, it&#39;s not a persistent and universal solution, but it&#39;s something :)\r\n"},{"score":2,"body_markdown":"@Jimbo, here is the simple Ajax/session based clipboard for the same website.\r\n\r\nNote that the session must be enabled &amp; valid and this solution works for the same site. I tested it on CodeIgniter, but I ran into session/Ajax problem, but [this][1] solved that problem too. If you don&#39;t want to play with sessions, use a database table.\r\n\r\n**JavaScript/jQuery**\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n        $(document).ready(function() {\r\n\r\n            $(&quot;#copy_btn_id&quot;).click(function(){\r\n\r\n                $.post(&quot;&lt;?php echo base_url();?&gt;ajax/foo_copy/&quot;+$(this).val(), null,\r\n                    function(data){\r\n                        // Copied successfully\r\n                    }, &quot;html&quot;\r\n                );\r\n            });\r\n\r\n            $(&quot;#paste_btn_id&quot;).click(function() {\r\n\r\n               $.post(&quot;&lt;?php echo base_url();?&gt;ajax/foo_paste/&quot;, null,\r\n                   function(data) {\r\n                       $(&#39;#paste_btn_id&#39;).val(data);\r\n                   }, &quot;html&quot;\r\n               );\r\n            });\r\n        });\r\n    &lt;/script&gt;\r\n\r\n**HTML content**\r\n\r\n    &lt;input type=&#39;text&#39; id=&#39;copy_btn_id&#39; onclick=&#39;this.select();&#39;  value=&#39;myvalue&#39; /&gt;\r\n    &lt;input type=&#39;text&#39; id=&#39;paste_btn_id&#39; value=&#39;&#39; /&gt;\r\n\r\n**PHP code**\r\n\r\n    &lt;?php\r\n        class Ajax extends CI_Controller {\r\n\r\n            public function foo_copy($val){\r\n                $this-&gt;session-&gt;set_userdata(array(&#39;clipboard_val&#39; =&gt; $val));\r\n            }\r\n\r\n            public function foo_paste(){\r\n                echo $this-&gt;session-&gt;userdata(&#39;clipboard_val&#39;);\r\n                exit();\r\n            }\r\n        }\r\n    ?&gt;\r\n\r\n  [1]: https://stackoverflow.com/questions/7980193/codeigniter-session-bugging-out-with-ajax-calls\r\n\r\n"},{"score":5,"body_markdown":"My bad. This only works in IE.\r\n\r\nHere&#39;s yet another way to copy text:\r\n\r\n    &lt;p&gt;\r\n        &lt;a onclick=&quot;window.clipboardData.setData(&#39;text&#39;, document.getElementById(&#39;Test&#39;).innerText);&quot;&gt;Copy&lt;/a&gt;\r\n    &lt;/p&gt;"},{"score":2,"body_markdown":"In case you&#39;re reading text from the clipboard in a Chrome extension, with &#39;clipboardRead&#39; permission allowed, you can use the below code:\r\n\r\n    function readTextFromClipboardInChromeExtension() {\r\n        var ta = $(&#39;&lt;textarea/&gt;&#39;);\r\n        $(&#39;body&#39;).append(ta);\r\n        ta.focus();\r\n        document.execCommand(&#39;paste&#39;);\r\n        var text = ta.val();\r\n        ta.blur();\r\n        ta.remove();\r\n        return text;\r\n    }\r\n\r\n\r\n"},{"score":34,"body_markdown":"ZeroClipboard is the best cross-browser solution I&#39;ve found:\r\n\r\n \r\n    &lt;div id=&quot;copy&quot; data-clipboard-text=&quot;Copy Me!&quot;&gt;Click to copy&lt;/div&gt;    \r\n    &lt;script src=&quot;ZeroClipboard.js&quot;&gt;&lt;/script&gt;\r\n    &lt;script&gt;\r\n      var clip = new ZeroClipboard( document.getElementById(&#39;copy&#39;) );\r\n    &lt;/script&gt;\r\n    \r\n\r\nIf you need non-flash support for iOS you just add a fall-back:\r\n\r\n\r\n    clip.on( &#39;noflash&#39;, function ( client, args ) {\r\n        $(&quot;#copy&quot;).click(function(){            \r\n            var txt = $(this).attr(&#39;data-clipboard-text&#39;);\r\n            prompt (&quot;Copy link, then click OK.&quot;, txt);\r\n        });\r\n    });  \r\n\r\n\r\n\r\n\r\nhttp://zeroclipboard.org/\r\n\r\nhttps://github.com/zeroclipboard/ZeroClipboard"},{"score":2,"body_markdown":"In Chrome you can use [`copy(&#39;the text or variable etc&#39;)`](http://anti-code.com/devtools-cheatsheet/#command-line-api).  While this isn&#39;t cross-browser (and [doesn&#39;t work in a snippet?](https://code.google.com/p/chromium/issues/detail?id=260401)), you could add it to the other cross-browser answers."},{"score":70,"body_markdown":"I have recently written a [technical blog post][1] on this very problem (I work at Lucidchart and we recently did an overhaul on our clipboard).\r\n\r\nCopying plain text to the clipboard is relatively simple, assuming you want to do it during a system copy event (user presses &lt;KBD&gt;Ctrl&lt;/KBD&gt;&lt;KBD&gt;C&lt;/KBD&gt; or uses the browser&#39;s menu).\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var isIe = (navigator.userAgent.toLowerCase().indexOf(&quot;msie&quot;) != -1 \r\n               || navigator.userAgent.toLowerCase().indexOf(&quot;trident&quot;) != -1);\r\n\r\n    document.addEventListener(&#39;copy&#39;, function(e) {\r\n        var textToPutOnClipboard = &quot;This is some text&quot;;\r\n        if (isIe) {\r\n            window.clipboardData.setData(&#39;Text&#39;, textToPutOnClipboard);    \r\n        } else {\r\n            e.clipboardData.setData(&#39;text/plain&#39;, textToPutOnClipboard);\r\n        }\r\n        e.preventDefault();\r\n    });\r\n\r\nPutting text on the clipboard not during a system copy event is much more difficult. It looks like some of these other answers reference ways to do it via Flash, which is the only cross-browser way to do it (so far as I understand).\r\n\r\nOther than that, there are some options on a browser-by-browser basis.\r\n\r\nThis is the most simple in IE, where you can access the clipboardData object at anytime from JavaScript via:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    window.clipboardData\r\n\r\n(When you attempt to do this outside of a system cut, copy, or paste event, however, IE will prompt the user to grant the web application clipboard permission.)\r\n\r\nIn Chrome, you can create a Chrome extension that will give you [clipboard permissions][2] (this is what we do for Lucidchart). Then for users with your extension installed you&#39;ll just need to fire the system event yourself:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    document.execCommand(&#39;copy&#39;);\r\n\r\nIt looks like Firefox has [some options][3] that allow users to grant permissions to certain sites to access the clipboard, but I haven&#39;t tried any of these personally.\r\n\r\n  [1]: https://www.lucidchart.com/techblog/2014/12/02/definitive-guide-copying-pasting-javascript/\r\n  [2]: https://developer.chrome.com/extensions/declare_permissions\r\n  [3]: http://kb.mozillazine.org/Granting_JavaScript_access_to_the_clipboard"},{"score":2,"body_markdown":"For the security reason you can&#39;t do that. You must choose Flash for copying to the clipboard.\r\n\r\nI suggest this one: [http://zeroclipboard.org/][1]\r\n\r\n  [1]: http://zeroclipboard.org/\r\n"},{"score":2493,"body_markdown":"# Overview\r\n\r\nThere are three primary browser APIs for copying to the clipboard:\r\n\r\n1. [Async Clipboard API][1] `[navigator.clipboard.writeText]`\r\n - Text-focused portion available in [Chrome 66 (March 2018)][2]\r\n - Access is asynchronous and uses [JavaScript Promises][3], can be written so security user prompts (if displayed) don&#39;t interrupt the JavaScript in the page.\r\n - Text can be copied to the clipboard directly from a variable.\r\n - Only supported on pages served over HTTPS.\r\n - In Chrome 66 pages inactive tabs can write to the clipboard without a permissions prompt.\r\n2. `document.execCommand(&#39;copy&#39;)`\r\n - Most browsers support this as of ~April 2015 (see Browser Support below).\r\n - Access is synchronous, i.e. stops JavaScript in the page until complete including displaying and user interacting with any security prompts.\r\n - Text is read from the DOM and placed on the clipboard.\r\n - During testing ~April 2015 only Internet Explorer was noted as displaying permissions prompts whilst writing to the clipboard.\r\n3. Overriding the copy event\r\n - See Clipboard API documentation on [Overriding the copy event][4].\r\n - Allows you to modify what appears on the clipboard from any copy event, can include other formats of data other than plain text.\r\n - Not covered here as it doesn&#39;t directly answer the question.\r\n\r\n# General development notes\r\nDon&#39;t expect clipboard related commands to work whilst you are testing code in the console. Generally, the page is required to be active (Async Clipboard API) or requires user interaction (e.g. a user click) to allow (`document.execCommand(&#39;copy&#39;)`) to access the clipboard see below for more detail.\r\n\r\n## **IMPORTANT** (noted here 2020/02/20)\r\nNote that since this post was originally written [deprecation of permissions in cross-origin IFRAMEs](https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-permissions-in-cross-origin-iframes) and other [IFRAME &quot;sandboxing&quot;][5] prevents the embedded demos &quot;Run code snippet&quot; buttons and &quot;codepen.io example&quot; from working in some browsers (including Chrome and Microsoft Edge).\r\n\r\nTo develop create your own web page, serve that page over an HTTPS connection to test and develop against.\r\n\r\nHere is a test/demo page which demonstrates the code working:\r\nhttps://deanmarktaylor.github.io/clipboard-test/\r\n\r\n\r\n\r\n# Async + Fallback\r\nDue to the level of browser support for the new Async Clipboard API, you will likely want to fall back to the `document.execCommand(&#39;copy&#39;)` method to get good browser coverage.\r\n\r\nHere is a simple example (may not work embedded in this site, read &quot;important&quot; note above):\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function fallbackCopyTextToClipboard(text) {\r\n      var textArea = document.createElement(&quot;textarea&quot;);\r\n      textArea.value = text;\r\n      \r\n      // Avoid scrolling to bottom\r\n      textArea.style.top = &quot;0&quot;;\r\n      textArea.style.left = &quot;0&quot;;\r\n      textArea.style.position = &quot;fixed&quot;;\r\n\r\n      document.body.appendChild(textArea);\r\n      textArea.focus();\r\n      textArea.select();\r\n\r\n      try {\r\n        var successful = document.execCommand(&#39;copy&#39;);\r\n        var msg = successful ? &#39;successful&#39; : &#39;unsuccessful&#39;;\r\n        console.log(&#39;Fallback: Copying text command was &#39; + msg);\r\n      } catch (err) {\r\n        console.error(&#39;Fallback: Oops, unable to copy&#39;, err);\r\n      }\r\n\r\n      document.body.removeChild(textArea);\r\n    }\r\n    function copyTextToClipboard(text) {\r\n      if (!navigator.clipboard) {\r\n        fallbackCopyTextToClipboard(text);\r\n        return;\r\n      }\r\n      navigator.clipboard.writeText(text).then(function() {\r\n        console.log(&#39;Async: Copying to clipboard was successful!&#39;);\r\n      }, function(err) {\r\n        console.error(&#39;Async: Could not copy text: &#39;, err);\r\n      });\r\n    }\r\n\r\n    var copyBobBtn = document.querySelector(&#39;.js-copy-bob-btn&#39;),\r\n      copyJaneBtn = document.querySelector(&#39;.js-copy-jane-btn&#39;);\r\n\r\n    copyBobBtn.addEventListener(&#39;click&#39;, function(event) {\r\n      copyTextToClipboard(&#39;Bob&#39;);\r\n    });\r\n\r\n\r\n    copyJaneBtn.addEventListener(&#39;click&#39;, function(event) {\r\n      copyTextToClipboard(&#39;Jane&#39;);\r\n    });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;div style=&quot;display:inline-block; vertical-align:top;&quot;&gt;\r\n      &lt;button class=&quot;js-copy-bob-btn&quot;&gt;Set clipboard to BOB&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;\r\n      &lt;button class=&quot;js-copy-jane-btn&quot;&gt;Set clipboard to JANE&lt;/button&gt;\r\n    &lt;/div&gt;\r\n    &lt;div style=&quot;display:inline-block;&quot;&gt;\r\n      &lt;textarea class=&quot;js-test-textarea&quot; cols=&quot;35&quot; rows=&quot;4&quot;&gt;Try pasting into here to see what you have on your clipboard:\r\n\r\n      &lt;/textarea&gt;\r\n    &lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n(codepen.io example may not work, read &quot;important&quot; note above)\r\nNote that this snippet is not working well in Stack Overflow&#39;s embedded preview you can try it here: https://codepen.io/DeanMarkTaylor/pen/RMRaJX?editors=1011\r\n\r\n\r\n# Async Clipboard API\r\n- [Chrome 66 announcement post (March 2018)][2]\r\n- Reference [Async Clipboard API][1] draft documentation\r\n\r\nNote that there is an ability to &quot;request permission&quot; and test for access to the clipboard via the permissions API in Chrome 66.\r\n\r\n    var text = &quot;Example text to appear on clipboard&quot;;\r\n    navigator.clipboard.writeText(text).then(function() {\r\n      console.log(&#39;Async: Copying to clipboard was successful!&#39;);\r\n    }, function(err) {\r\n      console.error(&#39;Async: Could not copy text: &#39;, err);\r\n    });\r\n\r\n\r\n# document.execCommand(&#39;copy&#39;)\r\nThe rest of this post goes into the nuances and detail of the `document.execCommand(&#39;copy&#39;)` API.\r\n\r\n## Browser Support\r\nThe JavaScript [`document.execCommand(&#39;copy&#39;)`][6] support has grown, see the links below for browser updates:\r\n\r\n- Internet Explorer 10+ (although [this document][7] indicates some support was there from Internet Explorer 5.5+).\r\n- [Google Chrome 43+ (~April 2015)][8]\r\n- [Mozilla Firefox 41+ (shipping ~September 2015)][9]\r\n- [Opera 29+ (based on Chromium 42, ~April 2015)][10]\r\n\r\n\r\n## Simple Example\r\n\r\n(may not work embedded in this site, read &quot;important&quot; note above)\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var copyTextareaBtn = document.querySelector(&#39;.js-textareacopybtn&#39;);\r\n\r\n    copyTextareaBtn.addEventListener(&#39;click&#39;, function(event) {\r\n      var copyTextarea = document.querySelector(&#39;.js-copytextarea&#39;);\r\n      copyTextarea.focus();\r\n      copyTextarea.select();\r\n\r\n      try {\r\n        var successful = document.execCommand(&#39;copy&#39;);\r\n        var msg = successful ? &#39;successful&#39; : &#39;unsuccessful&#39;;\r\n        console.log(&#39;Copying text command was &#39; + msg);\r\n      } catch (err) {\r\n        console.log(&#39;Oops, unable to copy&#39;);\r\n      }\r\n    });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;p&gt;\r\n      &lt;button class=&quot;js-textareacopybtn&quot; style=&quot;vertical-align:top;&quot;&gt;Copy Textarea&lt;/button&gt;\r\n      &lt;textarea class=&quot;js-copytextarea&quot;&gt;Hello I&#39;m some text&lt;/textarea&gt;\r\n    &lt;/p&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n## Complex Example: Copy to clipboard without displaying input\r\nThe above simple example works great if there is a `textarea` or `input` element visible on the screen.\r\n\r\nIn some cases, you might wish to copy text to the clipboard without displaying an `input` / `textarea` element. This is one example of a way to work around this (basically insert an element, copy to clipboard, remove element):\r\n\r\nTested with Google Chrome 44, Firefox 42.0a1, and Internet Explorer 11.0.8600.17814.\r\n\r\n(may not work embedded in this site, read &quot;important&quot; note above)\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function copyTextToClipboard(text) {\r\n      var textArea = document.createElement(&quot;textarea&quot;);\r\n\r\n      //\r\n      // *** This styling is an extra step which is likely not required. ***\r\n      //\r\n      // Why is it here? To ensure:\r\n      // 1. the element is able to have focus and selection.\r\n      // 2. if the element was to flash render it has minimal visual impact.\r\n      // 3. less flakyness with selection and copying which **might** occur if\r\n      //    the textarea element is not visible.\r\n      //\r\n      // The likelihood is the element won&#39;t even render, not even a\r\n      // flash, so some of these are just precautions. However in\r\n      // Internet Explorer the element is visible whilst the popup\r\n      // box asking the user for permission for the web page to\r\n      // copy to the clipboard.\r\n      //\r\n\r\n      // Place in the top-left corner of screen regardless of scroll position.\r\n      textArea.style.position = &#39;fixed&#39;;\r\n      textArea.style.top = 0;\r\n      textArea.style.left = 0;\r\n\r\n      // Ensure it has a small width and height. Setting to 1px / 1em\r\n      // doesn&#39;t work as this gives a negative w/h on some browsers.\r\n      textArea.style.width = &#39;2em&#39;;\r\n      textArea.style.height = &#39;2em&#39;;\r\n\r\n      // We don&#39;t need padding, reducing the size if it does flash render.\r\n      textArea.style.padding = 0;\r\n\r\n      // Clean up any borders.\r\n      textArea.style.border = &#39;none&#39;;\r\n      textArea.style.outline = &#39;none&#39;;\r\n      textArea.style.boxShadow = &#39;none&#39;;\r\n\r\n      // Avoid flash of the white box if rendered for any reason.\r\n      textArea.style.background = &#39;transparent&#39;;\r\n\r\n\r\n      textArea.value = text;\r\n\r\n      document.body.appendChild(textArea);\r\n      textArea.focus();\r\n      textArea.select();\r\n\r\n      try {\r\n        var successful = document.execCommand(&#39;copy&#39;);\r\n        var msg = successful ? &#39;successful&#39; : &#39;unsuccessful&#39;;\r\n        console.log(&#39;Copying text command was &#39; + msg);\r\n      } catch (err) {\r\n        console.log(&#39;Oops, unable to copy&#39;);\r\n      }\r\n\r\n      document.body.removeChild(textArea);\r\n    }\r\n\r\n\r\n    var copyBobBtn = document.querySelector(&#39;.js-copy-bob-btn&#39;),\r\n      copyJaneBtn = document.querySelector(&#39;.js-copy-jane-btn&#39;);\r\n\r\n    copyBobBtn.addEventListener(&#39;click&#39;, function(event) {\r\n      copyTextToClipboard(&#39;Bob&#39;);\r\n    });\r\n\r\n\r\n    copyJaneBtn.addEventListener(&#39;click&#39;, function(event) {\r\n      copyTextToClipboard(&#39;Jane&#39;);\r\n    });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;div style=&quot;display:inline-block; vertical-align:top;&quot;&gt;\r\n      &lt;button class=&quot;js-copy-bob-btn&quot;&gt;Set clipboard to BOB&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;\r\n      &lt;button class=&quot;js-copy-jane-btn&quot;&gt;Set clipboard to JANE&lt;/button&gt;\r\n    &lt;/div&gt;\r\n    &lt;div style=&quot;display:inline-block;&quot;&gt;\r\n      &lt;textarea class=&quot;js-test-textarea&quot; cols=&quot;35&quot; rows=&quot;4&quot;&gt;Try pasting into here to see what you have on your clipboard:\r\n\r\n      &lt;/textarea&gt;\r\n    &lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n## Additional notes\r\n### Only works if the user takes an action\r\n\r\nAll `document.execCommand(&#39;copy&#39;)` calls must take place as a direct result of a user action, e.g. click event handler. This is a measure to prevent messing with the user&#39;s clipboard when they don&#39;t expect it.\r\n\r\nSee the [Google Developers post here][8] for more info.\r\n\r\n### Clipboard API\r\n\r\nNote the full Clipboard API draft specification can be found here:\r\nhttps://w3c.github.io/clipboard-apis/\r\n\r\n### Is it supported?\r\n- `document.queryCommandSupported(&#39;copy&#39;)` should return `true` if the command &quot;is supported by the browser&quot;.\r\n- and `document.queryCommandEnabled(&#39;copy&#39;)` return `true` if the `document.execCommand(&#39;copy&#39;)` will succeed if called now. Checking to ensure the command was called from a user-initiated thread and other requirements are met.\r\n\r\nHowever, as an example of browser compatibility issues, Google Chrome from ~April to ~October 2015 only returned `true` from `document.queryCommandSupported(&#39;copy&#39;)` if the command was called from a user-initiated thread.\r\n\r\nNote compatibility detail below.\r\n\r\n### Browser Compatibility Detail\r\nWhilst a simple call to `document.execCommand(&#39;copy&#39;)` wrapped in a `try`/`catch` block called as a result of a user click will get you the most compatibility use the following has some provisos:\r\n\r\nAny call to `document.execCommand`, `document.queryCommandSupported` or `document.queryCommandEnabled` should be wrapped in a `try`/`catch` block.\r\n\r\nDifferent browser implementations and browser versions throw differing types of exceptions when called instead of returning `false`.\r\n\r\nDifferent browser implementations are still in flux and the [Clipboard API][11] is still in draft, so remember to do your testing.\r\n\r\n\r\n  [1]: https://www.w3.org/TR/clipboard-apis/#async-clipboard-api\r\n  [2]: https://developers.google.com/web/updates/2018/03/clipboardapi\r\n  [3]: https://developers.google.com/web/fundamentals/primers/promises\r\n  [4]: https://w3c.github.io/clipboard-apis/#override-copy\r\n  [5]: https://blog.chromium.org/2010/05/security-in-depth-html5s-sandbox.html\r\n  [6]: https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand\r\n  [7]: https://msdn.microsoft.com/en-us/library/ms537834(v=vs.85).aspx\r\n  [8]: https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en\r\n  [9]: https://developer.mozilla.org/en-US/Firefox/Releases/41#Interfaces.2FAPIs.2FDOM\r\n  [10]: https://dev.opera.com/blog/opera-29/#cut-and-copy-commands\r\n  [11]: https://w3c.github.io/clipboard-apis/"},{"score":9,"body_markdown":"This is a bit of a combination between the other answers.\r\n\r\n    var copyToClipboard = function(textToCopy){\r\n        $(&quot;body&quot;)\r\n            .append($(&#39;&lt;textarea name=&quot;fname&quot; class=&quot;textToCopyInput&quot;/&gt;&#39; )\r\n            .val(textToCopy))\r\n            .find(&quot;.textToCopyInput&quot;)\r\n            .select();\r\n          try {\r\n            var successful = document.execCommand(&#39;copy&#39;);\r\n            var msg = successful ? &#39;successful&#39; : &#39;unsuccessful&#39;;\r\n            alert(&#39;Text copied to clipboard!&#39;);\r\n          } catch (err) {\r\n              window.prompt(&quot;To copy the text to clipboard: Ctrl+C, Enter&quot;, textToCopy);\r\n          }\r\n         $(&quot;.textToCopyInput&quot;).remove();\r\n    }\r\n\r\nIt uses jQuery, but it doesn&#39;t have to of course. You can change that if you want. I just had jQuery to my disposal. You can also add some CSS to make sure the input doesn&#39;t show. For instance something like:\r\n\r\n    .textToCopyInput{opacity: 0; position: absolute;}\r\n\r\nOr of course you could also do some inline styling\r\n\r\n    .append($(&#39;&lt;textarea name=&quot;fname&quot; style=&quot;opacity: 0;  position: absolute;&quot; class=&quot;textToCopyInput&quot;/&gt;&#39; )\r\n\r\n\r\n\r\n"},{"score":54,"body_markdown":"[clipboard.js][1] is a small, non-Flash, utility that allows copying of text or HTML data to the clipboard. It&#39;s very easy to use, just include the .js and use something like this:\r\n\r\n    &lt;button id=&#39;markup-copy&#39;&gt;Copy Button&lt;/button&gt;\r\n\r\n    &lt;script&gt;\r\n    document.getElementById(&#39;markup-copy&#39;).addEventListener(&#39;click&#39;, function() {\r\n      clipboard.copy({\r\n        &#39;text/plain&#39;: &#39;Markup text. Paste me into a rich text editor.&#39;,\r\n        &#39;text/html&#39;: &#39;&lt;i&gt;here&lt;/i&gt; is some &lt;b&gt;rich text&lt;/b&gt;&#39;\r\n      }).then(\r\n        function(){console.log(&#39;success&#39;); },\r\n        function(err){console.log(&#39;failure&#39;, err);\r\n      });\r\n\r\n    });\r\n    &lt;/script&gt;\r\n\r\nclipboard.js is also on [GitHub][2].\r\n\r\n&gt; **Note:** This has been deprecated now. Migrate to [here][3].\r\n\r\n  [1]: https://www.npmjs.com/package/clipboard-js\r\n  [2]: https://github.com/lgarron/clipboard.js\r\n  [3]: https://github.com/lgarron/clipboard-polyfill\r\n"},{"score":3,"body_markdown":"In addition to [Dean Taylor&#39;s updated answer (July 2015)][1], I wrote a jQuery method looking like his example.\r\n\r\n[jsFiddle][2]\r\n\r\n    /**\r\n    * Copies the current selected text to the SO clipboard\r\n    * This method must be called from an event to work with `execCommand()`\r\n    * @param {String} text Text to copy\r\n    * @param {Boolean} [fallback] Set to true shows a prompt\r\n    * @return Boolean Returns `true` if the text was copied or the user clicked on accept (in prompt), `false` otherwise\r\n    */\r\n    var CopyToClipboard = function(text, fallback){\r\n        var fb = function () {\r\n            $t.remove();\r\n            if (fallback !== undefined &amp;&amp; fallback) {\r\n                var fs = &#39;Please, copy the following text:&#39;;\r\n                if (window.prompt(fs, text) !== null) return true;\r\n            }\r\n            return false;\r\n        };\r\n        var $t = $(&#39;&lt;textarea /&gt;&#39;);\r\n        $t.val(text).css({\r\n            width: &#39;100px&#39;,\r\n            height: &#39;40px&#39;\r\n        }).appendTo(&#39;body&#39;);\r\n        $t.select();\r\n        try {\r\n            if (document.execCommand(&#39;copy&#39;)) {\r\n                $t.remove();\r\n                return true;\r\n            }\r\n            fb();\r\n        }\r\n        catch (e) {\r\n            fb();\r\n        }\r\n    };\r\n\r\n  [1]: https://stackoverflow.com/a/30810322/1684970\r\n  [2]: http://jsfiddle.net/kmsdev/wf43zq1y/\r\n"},{"score":2,"body_markdown":"Update 2015: currently theres a way to use `document.execCommand` to work with the clipboard.\r\n[clipboard.js][1] provides a cross browser way to work with the clipboard ( [browser support][2] )\r\n\r\n\r\n  [1]: https://github.com/zenorocha/clipboard.js\r\n  [2]: http://caniuse.com/#search=document.execCommand"},{"score":2,"body_markdown":"I was going to use clipboard.js, but it doesn&#39;t have any mobile solution in place (yet) ... so I wrote a super small library:\r\n\r\nhttps://github.com/ryanpcmcquen/cheval\r\n\r\nThis will either copy the text (Desktop/Android/Safari 10+), or at the very least, select the text (older versions of iOS). Minified it is just over 1kB. In desktop Safari (&lt;v10) it tells the user to `Press Command + C to copy`. You also don&#39;t need to write any JavaScript to use it."},{"score":7,"body_markdown":"I have used clipboard.js.\r\n\r\nWe can get it on npm:\r\n\r\n    npm install clipboard --save\r\n\r\nAnd also on [Bower][1]\r\n\r\n    bower install clipboard --save\r\n\r\nUsage &amp; examples are at https://zenorocha.github.io/clipboard.js/.\r\n\r\n  [1]: https://bower.io/\r\n"},{"score":24,"body_markdown":"Since Chrome 42+ and Firefox 41+ now support the **document.execCommand(&#39;copy&#39;)** command. So I created a couple of functions for a cross-browser copy-to-clipboard ability using a combination of [Tim Down&#39;s old answer][1] and [Google Developer&#39;s answer][2]:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function selectElementContents(el) {\r\n        // Copy textarea, pre, div, etc.\r\n        if (document.body.createTextRange) {\r\n            // IE\r\n            var textRange = document.body.createTextRange();\r\n            textRange.moveToElementText(el);\r\n            textRange.select();\r\n            textRange.execCommand(&quot;Copy&quot;);\r\n        } \r\n        else if (window.getSelection &amp;&amp; document.createRange) {\r\n            // Non-Internet Explorer\r\n            var range = document.createRange();\r\n            range.selectNodeContents(el);\r\n            var sel = window.getSelection();\r\n            sel.removeAllRanges();\r\n            sel.addRange(range);\r\n            try {\r\n                var successful = document.execCommand(&#39;copy&#39;);\r\n                var msg = successful ? &#39;successful&#39; : &#39;unsuccessful&#39;;\r\n                console.log(&#39;Copy command was &#39; + msg);\r\n            }\r\n            catch (err) {\r\n                console.log(&#39;Oops, unable to copy&#39;);\r\n            }\r\n        }\r\n    } // end function selectElementContents(el)\r\n\r\n    function make_copy_button(el) {\r\n        var copy_btn = document.createElement(&#39;input&#39;);\r\n        copy_btn.type = &quot;button&quot;;\r\n        el.parentNode.insertBefore(copy_btn, el.nextSibling);\r\n        copy_btn.onclick = function() {\r\n            selectElementContents(el);\r\n        };\r\n\r\n        if (document.queryCommandSupported(&quot;copy&quot;) || parseInt(navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./)[2]) &gt;= 42) {\r\n            // Copy works with Internet Explorer 4+, Chrome 42+, Firefox 41+, Opera 29+\r\n            copy_btn.value = &quot;Copy to Clipboard&quot;;\r\n        }\r\n        else {\r\n            // Select only for Safari and older Chrome, Firefox and Opera\r\n            copy_btn.value = &quot;Select All (then press Ctrl + C to Copy)&quot;;\r\n        }\r\n    }\r\n    /* Note: document.queryCommandSupported(&quot;copy&quot;) should return &quot;true&quot; on browsers that support copy\r\n        but there was a bug in Chrome versions 42 to 47 that makes it return &quot;false&quot;.  So in those\r\n        versions of Chrome feature detection does not work!\r\n        See https://code.google.com/p/chromium/issues/detail?id=476508\r\n    */\r\n\r\n    make_copy_button(document.getElementById(&quot;markup&quot;));\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;pre id=&quot;markup&quot;&gt;\r\n      Text that can be copied or selected with cross browser support.\r\n    &lt;/pre&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: https://stackoverflow.com/a/8024509/4307527\r\n  [2]: https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en\r\n\r\n\r\n"},{"score":333,"body_markdown":"The following approach works in Chrome, Firefox, Internet Explorer and Edge, and in recent versions of Safari (copy support was added in version 10 which was released Oct 2016).\r\n\r\n - Create a textarea and set its contents to the text you want copied to the clipboard.\r\n - Append the textarea to the DOM.\r\n - Select the text in the textarea.\r\n - Call document.execCommand(&quot;copy&quot;)\r\n - Remove the textarea from the dom.\r\n\r\nNote: you will not see the textarea, as it is added and removed within the same synchronous invocation of Javascript code.\r\n\r\nSome things to watch out for if you are implementing this yourself:\r\n\r\n - For security reasons, this can only called from an event handler such as click (Just as with opening windows).\r\n - Internet Explorer will show a permission dialog the first time the clipboard is updated.\r\n - Internet Explorer, and Edge will scroll when the textarea is focused.\r\n - execCommand() may throw in some cases.\r\n - Newlines and tabs can get swallowed unless you use a textarea. (Most articles seem to recommend using a div)\r\n - The textarea will be visible while the Internet Explorer dialog is shown, you either need to hide it, or use the Internet Explorer specific clipboardData API.\r\n - In Internet Explorer system administrators can disable the clipboard API.\r\n\r\nThe function below should handle all of the following issues as cleanly as possible. Please leave a comment if you find any problems or have any suggestions for improving it.\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    // Copies a string to the clipboard. Must be called from within an\r\n    // event handler such as click. May return false if it failed, but\r\n    // this is not always possible. Browser support for Chrome 43+,\r\n    // Firefox 42+, Safari 10+, Edge and Internet Explorer 10+.\r\n    // Internet Explorer: The clipboard feature may be disabled by\r\n    // an administrator. By default a prompt is shown the first\r\n    // time the clipboard is used (per session).\r\n    function copyToClipboard(text) {\r\n        if (window.clipboardData &amp;&amp; window.clipboardData.setData) {\r\n            // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.\r\n            return clipboardData.setData(&quot;Text&quot;, text);\r\n\r\n        }\r\n        else if (document.queryCommandSupported &amp;&amp; document.queryCommandSupported(&quot;copy&quot;)) {\r\n            var textarea = document.createElement(&quot;textarea&quot;);\r\n            textarea.textContent = text;\r\n            textarea.style.position = &quot;fixed&quot;;  // Prevent scrolling to bottom of page in Microsoft Edge.\r\n            document.body.appendChild(textarea);\r\n            textarea.select();\r\n            try {\r\n                return document.execCommand(&quot;copy&quot;);  // Security exception may be thrown by some browsers.\r\n            }\r\n            catch (ex) {\r\n                console.warn(&quot;Copy to clipboard failed.&quot;, ex);\r\n                return false;\r\n            }\r\n            finally {\r\n                document.body.removeChild(textarea);\r\n            }\r\n        }\r\n    }\r\n\r\nhttps://jsfiddle.net/fx6a6n6x/\r\n\r\n\r\n"},{"score":1,"body_markdown":"After searching a solution that supports Safari and other browsers (Internet&amp;nbsp;Explorer&amp;nbsp;9 and later),\r\n\r\nI use the same as GitHub: [ZeroClipboard][1]\r\n\r\n**Example:**\r\n-------------\r\nhttp://zeroclipboard.org/index-v1.x.html\r\n\r\n**HTML**\r\n\r\n    &lt;html&gt;\r\n      &lt;body&gt;\r\n        &lt;button id=&quot;copy-button&quot; data-clipboard-text=&quot;Copy Me!&quot; title=&quot;Click to copy me.&quot;&gt;Copy to Clipboard&lt;/button&gt;\r\n        &lt;script src=&quot;ZeroClipboard.js&quot;&gt;&lt;/script&gt;\r\n        &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;\r\n      &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\n**JavaScript**\r\n\r\n    var client = new ZeroClipboard(document.getElementById(&quot;copy-button&quot;));\r\n\r\n    client.on(&quot;ready&quot;, function (readyEvent) {\r\n        // alert( &quot;ZeroClipboard SWF is ready!&quot; );\r\n\r\n        client.on(&quot;aftercopy&quot;, function (event) {\r\n            // `this` === `client`\r\n            // `event.target` === the element that was clicked\r\n            event.target.style.display = &quot;none&quot;;\r\n            alert(&quot;Copied text to clipboard: &quot; + event.data[&quot;text/plain&quot;]);\r\n        });\r\n    });\r\n\r\n  [1]: https://github.com/zeroclipboard/zeroclipboard\r\n\r\n"},{"score":11,"body_markdown":"There are many answers already, however like to add one (jQuery). Works great on any browser, also mobile ones (i.e., prompts about security, but when you accept it just works fine).\r\n\r\n    function appCopyToClipBoard(sText)\r\n    {\r\n        var oText = false,\r\n            bResult = false;\r\n        try\r\n        {\r\n            oText = document.createElement(&quot;textarea&quot;);\r\n            $(oText).addClass(&#39;clipboardCopier&#39;).val(sText).insertAfter(&#39;body&#39;).focus();\r\n            oText.select();\r\n            document.execCommand(&quot;Copy&quot;);\r\n            bResult = true;\r\n        }\r\n        catch(e) {\r\n        }\r\n\r\n        $(oText).remove();\r\n        return bResult;\r\n    }\r\n\r\nIn your code:\r\n\r\n    if (!appCopyToClipBoard(&#39;Hai there! This is copied to the clipboard.&#39;))\r\n    {\r\n        alert(&#39;Sorry, copy to clipboard failed.&#39;);\r\n    }\r\n\r\n\r\n"},{"score":4,"body_markdown":"I had to copy the non-input boxes text (text within any div/span tag) from the page and came up with following code. The only trick is to have a hidden field, but as type TEXT. It won&#39;t work with type hidden.\r\n\r\n    function copyToClipboard(sID) {\r\n        var aField = document.getElementById(&quot;hiddenField&quot;);\r\n\r\n        aField.hidden = false;\r\n        aField.value  = document.getElementById(sID).textContent;\r\n        aField.select();\r\n        document.execCommand(&quot;copy&quot;);\r\n        alert(&quot;Following text has been copied to the clipboard.\\n\\n&quot; + aField.value);\r\n        aField.hidden = true;\r\n    }\r\n\r\nAnd in the HTML add the following:\r\n\r\n    input type=&quot;text&quot; id=&quot;hiddenField&quot; style=&quot;width:5px;border:0&quot; /&gt;\r\n    ...\r\n\r\n\r\n\r\n\r\n\r\n"},{"score":12,"body_markdown":"I found the following solution:\r\n\r\nI have the text in a hidden input. Because `setSelectionRange` doesn&#39;t work on hidden inputs, I changed temporarily the type to text, copied the text, and then made it hidden again. If you want to copy the text from an element, you can pass it to the function and save its content in the target variable.\r\n\r\n    jQuery(&#39;#copy&#39;).on(&#39;click&#39;, function () {\r\n        copyToClipboard();\r\n    });\r\n\r\n    function copyToClipboard() {\r\n        var target = jQuery(&#39;#hidden_text&#39;);\r\n\r\n        // Make it visible, so can be focused\r\n        target.attr(&#39;type&#39;, &#39;text&#39;);\r\n        target.focus();\r\n        // Select all the text\r\n        target[0].setSelectionRange(0, target.val().length);\r\n\r\n        // Copy the selection\r\n        var succeed;\r\n        try {\r\n            succeed = document.execCommand(&quot;copy&quot;);\r\n        }\r\n        catch (e) {\r\n            succeed = false;\r\n        }\r\n\r\n        // Hide input again\r\n        target.attr(&#39;type&#39;, &#39;hidden&#39;);\r\n\r\n        return succeed;\r\n    }\r\n\r\n\r\n\r\n"},{"score":12,"body_markdown":"&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n      &lt;!DOCTYPE html&gt;\r\n\r\n      &lt;style&gt;\r\n        #t {\r\n          width: 1px\r\n          height: 1px\r\n          border: none\r\n        }\r\n        #t:focus {\r\n          outline: none\r\n        }\r\n      &lt;/style&gt;\r\n\r\n      &lt;script&gt;\r\n        function copy(text) {\r\n          var t = document.getElementById(&#39;t&#39;)\r\n          t.innerHTML = text\r\n          t.select()\r\n          try {\r\n            var successful = document.execCommand(&#39;copy&#39;)\r\n            var msg = successful ? &#39;successfully&#39; : &#39;unsuccessfully&#39;\r\n            console.log(&#39;text coppied &#39; + msg)\r\n          } catch (err) {\r\n            console.log(&#39;Unable to copy text&#39;)\r\n          }\r\n          t.innerHTML = &#39;&#39;\r\n        }\r\n      &lt;/script&gt;\r\n\r\n      &lt;textarea id=t&gt;&lt;/textarea&gt;\r\n\r\n      &lt;button onclick=&quot;copy(&#39;hello world&#39;)&quot;&gt;\r\n        Click me\r\n      &lt;/button&gt;\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":2,"body_markdown":"I compiled a few functions in a simple solution to cover all cases, with prompt fallback if needed.\r\n\r\n    window.copyToClipboard = function(text) {\r\n      // Internet Explorer specific\r\n      if (window.clipboardData &amp;&amp; window.clipboardData.setData) {\r\n        return clipboardData.setData(&quot;Text&quot;, text);\r\n      }\r\n\r\n      // All other modern browsers\r\n      target = document.createElement(&quot;textarea&quot;);\r\n      target.style.position = &quot;absolute&quot;;\r\n      target.style.left = &quot;-9999px&quot;;\r\n      target.style.top = &quot;0&quot;;\r\n      target.textContent = text;\r\n      document.body.appendChild(target);\r\n      target.focus();\r\n      target.setSelectionRange(0, target.value.length);\r\n\r\n      // Copy the selection of fall back to prompt\r\n      try {\r\n        document.execCommand(&quot;copy&quot;);\r\n        target.remove();\r\n        console.log(&#39;Copied to clipboard: &quot;&#39;+text+&#39;&quot;&#39;);\r\n      }\r\n      catch(e) {\r\n        console.log(&quot;Can&#39;t copy string on this browser. Try to use Chrome, Firefox or Opera.&quot;)\r\n        window.prompt(&quot;Copy to clipboard: Ctrl+C, Enter&quot;, text);\r\n      }\r\n    }\r\n\r\nTest it here: https://jsfiddle.net/jv0avz65/\r\n"},{"score":0,"body_markdown":"I have put together the solution presented by @dean-taylor here along with some other select / unselect code from elsewhere into a jQuery plugin available on NPM:\r\n\r\nhttps://www.npmjs.com/package/jquery.text-select\r\n\r\n### Install: \r\n`npm install --save jquery.text-select`\r\n\r\n### Usage:\r\n\r\n    &lt;script&gt;\r\n        $(document).ready(function(){\r\n            $(&quot;#selectMe&quot;).selectText(); // Hightlight / select the text\r\n            $(&quot;#selectMe&quot;).selectText(false); // Clear the selection\r\n\r\n            $(&quot;#copyMe&quot;).copyText(); // Copy text to clipboard\r\n        });\r\n    &lt;/script&gt;\r\n\r\nFuther info on methods / events can be found at the NPM registry page above.\r\n"},{"score":22,"body_markdown":"I&#39;ve put together what I think is the best one.\r\n\r\n - Uses cssText to avoid exceptions in Internet Explorer as opposed to style directly.\r\n - Restores selection if there was one\r\n - Sets read-only so the keyboard doesn&#39;t come up on mobile devices\r\n - Has a workaround for iOS so that it actually works as it normally blocks execCommand.\r\n\r\nHere it is:\r\n\r\n    const copyToClipboard = (function initClipboardText() {\r\n      const textarea = document.createElement(&#39;textarea&#39;);\r\n\r\n      // Move it off-screen.\r\n      textarea.style.cssText = &#39;position: absolute; left: -99999em&#39;;\r\n\r\n      // Set to readonly to prevent mobile devices opening a keyboard when\r\n      // text is .select()&#39;ed.\r\n      textarea.setAttribute(&#39;readonly&#39;, true);\r\n\r\n      document.body.appendChild(textarea);\r\n\r\n      return function setClipboardText(text) {\r\n        textarea.value = text;\r\n\r\n        // Check if there is any content selected previously.\r\n        const selected = document.getSelection().rangeCount &gt; 0 ?\r\n          document.getSelection().getRangeAt(0) : false;\r\n\r\n        // iOS Safari blocks programmatic execCommand copying normally, without this hack.\r\n        // https://stackoverflow.com/questions/34045777/copy-to-clipboard-using-javascript-in-ios\r\n        if (navigator.userAgent.match(/ipad|ipod|iphone/i)) {\r\n          const editable = textarea.contentEditable;\r\n          textarea.contentEditable = true;\r\n          const range = document.createRange();\r\n          range.selectNodeContents(textarea);\r\n          const sel = window.getSelection();\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n          textarea.setSelectionRange(0, 999999);\r\n          textarea.contentEditable = editable;\r\n        }\r\n        else {\r\n          textarea.select();\r\n        }\r\n\r\n        try {\r\n          const result = document.execCommand(&#39;copy&#39;);\r\n\r\n          // Restore previous selection.\r\n          if (selected) {\r\n            document.getSelection().removeAllRanges();\r\n            document.getSelection().addRange(selected);\r\n          }\r\n\r\n          return result;\r\n        }\r\n        catch (err) {\r\n          console.error(err);\r\n          return false;\r\n        }\r\n      };\r\n    })();\r\n\r\nUsage: `copyToClipboard(&#39;some text&#39;)`\r\n\r\n"},{"score":1,"body_markdown":"This is the best. So much winning.\r\n\r\n    var toClipboard = function(text) {\r\n        var doc = document;\r\n\r\n        // Create temporary element\r\n        var textarea = doc.createElement(&#39;textarea&#39;);\r\n        textarea.style.position = &#39;absolute&#39;;\r\n        textarea.style.opacity  = &#39;0&#39;;\r\n        textarea.textContent    = text;\r\n\r\n        doc.body.appendChild(textarea);\r\n\r\n        textarea.focus();\r\n        textarea.setSelectionRange(0, textarea.value.length);\r\n\r\n        // Copy the selection\r\n        var success;\r\n        try {\r\n            success = doc.execCommand(&quot;copy&quot;);\r\n        }\r\n        catch(e) {\r\n            success = false;\r\n        }\r\n\r\n        textarea.remove();\r\n\r\n        return success;\r\n    }\r\n"},{"score":120,"body_markdown":"Here is my take on that one...\r\n\r\n    function copy(text) {\r\n        var input = document.createElement(&#39;input&#39;);\r\n        input.setAttribute(&#39;value&#39;, text);\r\n        document.body.appendChild(input);\r\n        input.select();\r\n        var result = document.execCommand(&#39;copy&#39;);\r\n        document.body.removeChild(input);\r\n        return result;\r\n     }\r\n\r\n\r\n@korayem: Note that using html `input` field won&#39;t respect line breaks `\\n` and will flatten any text into a single line.\r\n\r\nAs mentioned by @nikksan in the comments, using `textarea` will fix the problem as follows:\r\n\r\n    function copy(text) {\r\n        var input = document.createElement(&#39;textarea&#39;);\r\n        input.innerHTML = text;\r\n        document.body.appendChild(input);\r\n        input.select();\r\n        var result = document.execCommand(&#39;copy&#39;);\r\n        document.body.removeChild(input);\r\n        return result;\r\n    }"},{"score":5,"body_markdown":"This was the only thing I ever got working, after looking up various ways all around the Internet. This is a messy topic. There are lots of solutions posted around the world and most of them do *not* work. This worked for me:\r\n\r\nNOTE: This code will only work when executed as direct synchronous code to something like an &#39;onClick&#39; method. If you call in an asynchronous response to Ajax or in any other asynchronous way it will not work.\r\n\r\n    copyToClipboard(text) {\r\n        var copyText = document.createElement(&quot;input&quot;);\r\n        copyText.type = &quot;text&quot;;\r\n        document.body.appendChild(copyText);\r\n        copyText.style = &quot;display: inline; width: 1px;&quot;;\r\n        copyText.value = text;\r\n        copyText.focus();\r\n        document.execCommand(&quot;SelectAll&quot;);\r\n        document.execCommand(&quot;Copy&quot;);\r\n        copyText.remove();\r\n    }\r\n\r\nI do realize this code will show a 1-pixel wide component visibly on the screen for a millisecond, but decided not to worry about that, which is something that others can address if a real problem.\r\n\r\n\r\n"},{"score":5,"body_markdown":"To copy a selected text (&#39;Text To Copy&#39;) to your clipboard, create a Bookmarklet (browser bookmark that executes JavaScript) and execute it (click on it). It will create a temporary textarea.\r\n\r\nCode from GitHub:\r\n\r\nhttps://gist.github.com/stefanmaric/2abf96c740191cda3bc7a8b0fc905a7d\r\n\r\n    (function (text) {\r\n      var node = document.createElement(&#39;textarea&#39;);\r\n      var selection = document.getSelection();\r\n\r\n      node.textContent = text;\r\n      document.body.appendChild(node);\r\n\r\n      selection.removeAllRanges();\r\n      node.select();\r\n      document.execCommand(&#39;copy&#39;);\r\n\r\n      selection.removeAllRanges();\r\n      document.body.removeChild(node);\r\n    })(&#39;Text To Copy&#39;);\r\n\r\n"},{"score":2,"body_markdown":"This was the only thing that worked for me:\r\n\r\n    let textarea = document.createElement(&#39;textarea&#39;);\r\n    textarea.setAttribute(&#39;type&#39;, &#39;hidden&#39;);\r\n    textarea.textContent = &#39;the string you want to copy&#39;;\r\n    document.body.appendChild(textarea);\r\n    textarea.select();\r\n    document.execCommand(&#39;copy&#39;);"},{"score":2,"body_markdown":"Using the JavaScript feature using `try/catch` you can even have better error handling in doing so like this:\r\n\r\n    copyToClipboard() {\r\n        let el = document.getElementById(&#39;Test&#39;).innerText\r\n        el.focus(); // el.select();\r\n        try {\r\n            var successful = document.execCommand(&#39;copy&#39;);\r\n            if (successful) {\r\n                console.log(&#39;Copied Successfully! Do whatever you want next&#39;);\r\n            }\r\n            else {\r\n                throw (&#39;Unable to copy&#39;);\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.warn(&#39;Oops, Something went wrong &#39;, err);\r\n        }\r\n    }\r\n\r\n\r\n"},{"score":11,"body_markdown":"Copy text from HTML input to the clipboard:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n     function myFunction() {\r\n       /* Get the text field */\r\n       var copyText = document.getElementById(&quot;myInput&quot;);\r\n\r\n       /* Select the text field */\r\n       copyText.select();\r\n\r\n       /* Copy the text inside the text field */\r\n       document.execCommand(&quot;Copy&quot;);\r\n\r\n       /* Alert the copied text */\r\n       alert(&quot;Copied the text: &quot; + copyText.value);\r\n     }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n     &lt;!-- The text field --&gt;\r\n     &lt;input type=&quot;text&quot; value=&quot;Hello Friend&quot; id=&quot;myInput&quot;&gt;\r\n\r\n     &lt;!-- The button used to copy the text --&gt;\r\n    &lt;button onclick=&quot;myFunction()&quot;&gt;Copy text&lt;/button&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n**Note:** *The `document.execCommand()` method is not supported in Internet Explorer 9 and earlier.*\r\n\r\n**Source**: [W3Schools - *Copy Text to Clipboard*](https://www.w3schools.com/howto/howto_js_copy_clipboard.asp)\r\n\r\n"},{"score":0,"body_markdown":"Here&#39;s an elegant solution for Angular 5.x+:\r\n\r\nComponent:\r\n\r\n    import {\r\n      ChangeDetectionStrategy,\r\n      ChangeDetectorRef,\r\n      Component,\r\n      ElementRef,\r\n      EventEmitter,\r\n      Input,\r\n      OnInit,\r\n      Output,\r\n      Renderer2,\r\n      ViewChild\r\n    } from &#39;@angular/core&#39;;\r\n    \r\n    @Component({\r\n      selector: &#39;copy-to-clipboard&#39;,\r\n      templateUrl: &#39;./copy-to-clipboard.component.html&#39;,\r\n      styleUrls: [&#39;./copy-to-clipboard.component.scss&#39;],\r\n      changeDetection: ChangeDetectionStrategy.OnPush\r\n    })\r\n    \r\n    export class CopyToClipboardComponent implements OnInit {\r\n      @ViewChild(&#39;input&#39;) input: ElementRef;\r\n      @Input() size = &#39;md&#39;;\r\n      @Input() theme = &#39;complement&#39;;\r\n      @Input() content: string;\r\n      @Output() copied: EventEmitter&lt;string&gt; = new EventEmitter&lt;string&gt;();\r\n      @Output() error: EventEmitter&lt;string&gt; = new EventEmitter&lt;string&gt;();\r\n    \r\n      constructor(private renderer: Renderer2) {}\r\n    \r\n      ngOnInit() {}\r\n    \r\n      copyToClipboard() {\r\n    \r\n        const rootElement = this.renderer.selectRootElement(this.input.nativeElement);\r\n    \r\n        // iOS Safari blocks programmtic execCommand copying normally, without this hack.\r\n        // https://stackoverflow.com/questions/34045777/copy-to-clipboard-using-javascript-in-ios\r\n        if (navigator.userAgent.match(/ipad|ipod|iphone/i)) {\r\n    \r\n          this.renderer.setAttribute(this.input.nativeElement, &#39;contentEditable&#39;, &#39;true&#39;);\r\n    \r\n          const range = document.createRange();\r\n    \r\n          range.selectNodeContents(this.input.nativeElement);\r\n    \r\n          const sel = window.getSelection();\r\n    \r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n    \r\n          rootElement.setSelectionRange(0, 999999);\r\n        } else {\r\n          rootElement.select();\r\n        }\r\n    \r\n        try {\r\n          document.execCommand(&#39;copy&#39;);\r\n          this.copied.emit();\r\n        } catch (err) {\r\n          this.error.emit(err);\r\n        }\r\n      };\r\n    }\r\n\r\nTemplate:\r\n\r\n    &lt;button class=&quot;btn btn-{{size}} btn-{{theme}}&quot; type=&quot;button&quot; (click)=&quot;copyToClipboard()&quot;&gt;\r\n      &lt;ng-content&gt;&lt;/ng-content&gt;\r\n    &lt;/button&gt;\r\n    \r\n    &lt;input #input class=&quot;hidden-input&quot; [ngModel]=&quot;content&quot;&gt;\r\n\r\nStyles:\r\n\r\n    .hidden-input {\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      width: 1px; \r\n      height: 1px;\r\n      padding: 0;\r\n      border: 0;\r\n      box-shadow: none;\r\n      outline: none;\r\n      background: transparent;\r\n    }"},{"score":0,"body_markdown":"Here is my solution:\r\n\r\n    var codeElement =\r\n        document.getElementsByClassName(&quot;testelm&quot;) &amp;&amp;\r\n            document.getElementsByClassName(&quot;testelm&quot;).length ?\r\n        document.getElementsByClassName(&quot;testelm&quot;)[0] :\r\n        &quot;&quot;;\r\n    if (codeElement != &quot;&quot;) {\r\n        var e = document.createRange();\r\n        e.selectNodeContents(codeElement);\r\n        var selection = window.getSelection();\r\n        selection.removeAllRanges();\r\n        selection.addRange(e);\r\n        document.execCommand(&quot;Copy&quot;);\r\n        selection.removeAllRanges();\r\n    }\r\n\r\n\r\n\r\n"},{"score":24,"body_markdown":"I use this very successfully (**without** jQuery or any other framework).\r\n\r\n    function copyToClp(txt){\r\n        txt = document.createTextNode(txt);\r\n        var m = document;\r\n        var w = window;\r\n        var b = m.body;\r\n        b.appendChild(txt);\r\n        if (b.createTextRange) {\r\n            var d = b.createTextRange();\r\n            d.moveToElementText(txt);\r\n            d.select();\r\n            m.execCommand(&#39;copy&#39;);\r\n        } \r\n        else {\r\n            var d = m.createRange();\r\n            var g = w.getSelection;\r\n            d.selectNodeContents(txt);\r\n            g().removeAllRanges();\r\n            g().addRange(d);\r\n            m.execCommand(&#39;copy&#39;);\r\n            g().removeAllRanges();\r\n        }\r\n        txt.remove();\r\n    }\r\n\r\n*Warning*\r\n\r\nTabs are converted to spaces (at least in Chrome).\r\n\r\n"},{"score":34,"body_markdown":"In 2018, here&#39;s how you can go about it:\r\n\r\n    async copySomething(text?) {\r\n      try {\r\n        const toCopy = text || location.href;\r\n        await navigator.clipboard.writeText(toCopy);\r\n        console.log(&#39;Text or Page URL copied&#39;);\r\n      }\r\n      catch (err) {\r\n        console.error(&#39;Failed to copy: &#39;, err);\r\n      }\r\n    }\r\n\r\nIt is used in my Angular 6+ code like so:\r\n\r\n    &lt;button mat-menu-item (click)=&quot;copySomething()&quot;&gt;\r\n        &lt;span&gt;Copy link&lt;/span&gt;\r\n    &lt;/button&gt;\r\n\r\nIf I pass in a string, it copies it. If nothing, it copies the page&#39;s URL.\r\n\r\nMore gymnastics to the clipboard stuff can be done too. See more information here:\r\n\r\n*[Unblocking Clipboard Access][1]*\r\n\r\n  [1]: https://developers.google.com/web/updates/2018/03/clipboardapi\r\n\r\n"},{"score":0,"body_markdown":"This *can* be done just by using a combination of getElementbyId, Select(), blur() and the copy command.\r\n\r\n**Note**\r\n\r\nThe select() method selects all the text in a &amp;lt;textarea&gt; element or an &amp;lt;input&gt; element with a text field. This might not work on a button.\r\n\r\n**Usage**\r\n\r\n    let copyText = document.getElementById(&#39;input-field&#39;);\r\n    copyText.select()\r\n    document.execCommand(&quot;copy&quot;);\r\n    copyReferal.blur()\r\n    document.getElementbyId(&#39;help-text&#39;).textContent = &#39;Copied&#39;\r\n\r\nThe blur() method will remove the ugly highlighted portion instead of that you can show at beautiful message that *your content was copied successfully*.\r\n\r\n\r\n\r\n\r\n\r\n"},{"score":2,"body_markdown":"Using `document.execCommand` will do the job for you...\r\n\r\nUsing that, you can also do **cut**, **copy** and **paste**...\r\n\r\nThis is one simple clipboard copy functionality which copies everything from input text...\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function copyInputText() {\r\n      var copyText = document.querySelector(&quot;#input&quot;);\r\n      copyText.select();\r\n      document.execCommand(&quot;copy&quot;);\r\n    }\r\n\r\n    document.querySelector(&quot;#copy&quot;).addEventListener(&quot;click&quot;, copyInputText);\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;input id=&quot;input&quot; type=&quot;text&quot; /&gt;\r\n    &lt;button id=&quot;copy&quot;&gt;Copy&lt;/button&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nFor more information, see [*Interact with the clipboard*][1] (add-on).\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard\r\n\r\n\r\n\r\n"},{"score":0,"body_markdown":"I have tried many solutions. If it works in modern browsers, it won&#39;t in Internet&amp;nbsp;Explorer. If it works in Internet&amp;nbsp;Explorer, it won&#39;t on iOS. I finally groomed them all and arrived at the below fix that works in all the browsers, iOS, webview, and Android.\r\n\r\nNote: I also covered the scenario where the user denies permission to the clipboard. Additionally, the message &quot;link copied&quot; will be displayed even if the user copies manually.\r\n\r\n    &lt;div class=&quot;form-group col-md-12&quot;&gt;\r\n        &lt;div class=&quot;input-group col-md-9&quot;&gt;\r\n            &lt;input name=&quot;copyurl&quot;\r\n                   type=&quot;text&quot;\r\n                   class=&quot;form-control br-0 no-focus&quot;\r\n                   id=&quot;invite-url&quot;\r\n                   placeholder=&quot;http://www.invitelink.com/example&quot;\r\n                   readonly&gt;\r\n            &lt;span class=&quot;input-group-addon&quot; id=&quot;copy-link&quot; title=&quot;Click here to copy the invite link&quot;&gt;\r\n                &lt;i class=&quot;fa fa-clone txt-18 text-success&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\r\n            &lt;/span&gt;\r\n        &lt;/div&gt;\r\n        &lt;span class=&quot;text-success copy-success hidden&quot;&gt;Link copied.&lt;/span&gt;\r\n    &lt;/div&gt;\r\n\r\nScript:\r\n\r\n    var addEvent =  window.attachEvent || window.addEventListener;\r\n    var event = &#39;copy&#39;;\r\n    var $inviteUrl = $(&#39;#invite-url&#39;);\r\n\r\n    $(&#39;#copy-link&#39;).on(&#39;click&#39;, function(e) {\r\n        if ($inviteUrl.val()) {\r\n            if (navigator.userAgent.match(/ipad|ipod|iphone/i)) {\r\n                var el = $inviteUrl.get(0);\r\n                var editable = el.contentEditable;\r\n                var readOnly = el.readOnly;\r\n                el.contentEditable = true;\r\n                el.readOnly = false;\r\n                var range = document.createRange();\r\n                range.selectNodeContents(el);\r\n                var sel = window.getSelection();\r\n                sel.removeAllRanges();\r\n                sel.addRange(range);\r\n                el.setSelectionRange(0, 999999);\r\n                el.contentEditable = editable;\r\n                el.readOnly = readOnly;\r\n                document.execCommand(&#39;copy&#39;);\r\n                $inviteUrl.blur();\r\n            }\r\n            else {\r\n                $inviteUrl.select();\r\n                document.execCommand(&quot;copy&quot;);\r\n            }\r\n        }\r\n    });\r\n\r\n    addEvent(event, function(event) {\r\n        if ($inviteUrl.val() &amp;&amp; event.target.id == &#39;invite-url&#39;) {\r\n            var $copyLink = $(&#39;#copy-link i&#39;);\r\n            $copyLink.removeClass(&#39;fa-clone&#39;);\r\n            $copyLink.addClass(&#39;fa-check&#39;);\r\n            $(&#39;.copy-success&#39;).removeClass(&#39;hidden&#39;);\r\n            setTimeout(function() {\r\n                $copyLink.removeClass(&#39;fa-check&#39;);\r\n                $copyLink.addClass(&#39;fa-clone&#39;);\r\n                $(&#39;.copy-success&#39;).addClass(&#39;hidden&#39;);\r\n            }, 2000);\r\n        }\r\n    });\r\n\r\n\r\n\r\n"},{"score":1,"body_markdown":"Here is an easy example ;)\r\n\r\n```lang-html\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n    &lt;body&gt;\r\n        &lt;input type=&quot;text&quot;\r\n               value=&quot;Hello, World!&quot;\r\n               id=&quot;myInput&quot;&gt;\r\n        &lt;button onclick=&quot;myFunction()&quot;&gt;Copy text&lt;/button&gt;\r\n\r\n        &lt;p&gt;The document.execCommand() method is not supported\r\n           in Internet&amp;nbsp;Explorer&amp;nbsp;8 and earlier.&lt;/p&gt;\r\n\r\n        &lt;script&gt;\r\n            function myFunction() {\r\n                var copyText = document.getElementById(&quot;myInput&quot;);\r\n                copyText.select();\r\n                document.execCommand(&quot;copy&quot;);\r\n                alert(&quot;Copied the text: &quot; + copyText.value);\r\n            }\r\n        &lt;/script&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;\r\n```\r\n\r\n"},{"score":2,"body_markdown":"This is a standalone class and ensures no flashing could occur from the temporary `textarea` by placing it off-screen.\r\n\r\nThis works in Safari (desktop), FF, and Chrome.\r\n\r\n    // ================================================================================\r\n    // ClipboardClass\r\n    // ================================================================================\r\n    var ClipboardClass = (function() {\r\n    \r\n    \r\n       function copyText(text) {\r\n       \t    // Create temp element off-screen to hold text.\r\n    \t\tvar tempElem = $(&#39;&lt;textarea style=&quot;position: absolute; top: -8888px; left: -8888px&quot;&gt;&#39;);\r\n    \t\t$(&quot;body&quot;).append(tempElem);\r\n                  \r\n       \t    tempElem.val(text).select();\r\n         \tdocument.execCommand(&quot;copy&quot;);\r\n      \t\ttempElem.remove();\r\n       }\r\n    \r\n    \r\n       // ============================================================================\r\n       // Class API\r\n       // ============================================================================\r\n    \treturn {\r\n    \t\tcopyText: copyText\r\n    \t};\r\n    })();"},{"score":4,"body_markdown":"    function copytoclipboard(element) {\r\n    \r\n     \r\n      var $temp = $(&quot;&lt;input&gt;&quot;);\r\n            $(&quot;body&quot;).append($temp);\r\n            $temp.val(&#39;0&#39;+element).select();\r\n            document.execCommand(&quot;copy&quot;);\r\n            $temp.remove();\r\n    \r\n    }"},{"score":23,"body_markdown":"\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n        $(&quot;td&quot;).click(function (e) {\r\n            var clickedCell = $(e.target).closest(&quot;td&quot;);\r\n            navigator.clipboard.writeText(clickedCell.text());\r\n            alert(clickedCell.text());\r\n        });\r\n\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;table&gt;\r\n    &lt;tr&gt;\r\n    &lt;td&gt;First&lt;td&gt;\r\n    &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n    &lt;td&gt;Second&lt;td&gt;\r\n    &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n    &lt;td&gt;Third&lt;td&gt;\r\n    &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n    &lt;td&gt;Fourth&lt;td&gt;\r\n    &lt;/tr&gt;\r\n    &lt;/table&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nI&#39;ve read all the answers, as of June 1st, 2020, I&#39;ve beeen struggling to solve this when I finally found documentation:\r\n\r\n    $(&quot;td&quot;).click(function (e) {\r\n        var clickedCell = $(e.target).closest(&quot;td&quot;);\r\n        navigator.clipboard.writeText(clickedCell.text());\r\n    });\r\n\r\nIt will write the clicked cell text to the browser clipboard.\r\n\r\nYou can change the selectors &quot;td&quot; for anything you want, you can add console.log for debugging and/or alert functions.\r\n\r\nHere is documentation:\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText"},{"score":0,"body_markdown":"    document.querySelector(&#39;#some_your_textfield_id&#39;).select();\r\n    document.execCommand(&#39;copy&#39;);\r\n\r\n*first row to select text that you want to copy*\r\n \r\n*second row to copy selected text*"},{"score":3,"body_markdown":"This solution was found [here][1]. The `document.execCommand(&quot;copy&quot;);` is not supported on Internet Explorer 8 and earlier.\r\n&lt;br/&gt;\r\n&lt;br/&gt;\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const copyBtn =  document.getElementById(&quot;copyBtn&quot;);\r\n    const input = document.getElementById(&quot;input&quot;);\r\n\r\n    function copyText() {\r\n      const value = input.value;\r\n      \r\n      input.select(); // selects the input variable as the text to be copied\r\n      input.setSelectionRange(0, 99999); // this is used to set the selection range for mobile devices\r\n      \r\n      document.execCommand(&quot;copy&quot;); // copies the selected text\r\n      \r\n      alert(&quot;Copied the text &quot; + value); // displays the copied text in a prompt\r\n    }\r\n\r\n    copyBtn.onmousedown = function () {\r\n      copyText();\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;input type=&quot;text&quot; id=&quot;input&quot; placeholder=&quot;Type text to copy... &quot;/&gt;\r\n    &lt;button id=&quot;copyBtn&quot;&gt;\r\n      Copy\r\n    &lt;/button&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n[1]: https://www.w3schools.com/howto/howto_js_copy_clipboard.asp"},{"score":0,"body_markdown":"&gt; **Note:** Not a duplicate of [this answer](https://stackoverflow.com/a/31946063/12860895), as that library is completely unrelated to this one, which is far more popular.\r\n\r\n[Clipboard.js](https://clipboardjs.com) is a popular library (29.5k stars on GitHub, 3.1m weekly downloads on npm and 704m hits/month on jsDelivr) makes copying text to the clipboard super easy:\r\n\r\n```html\r\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/clipboard@2.0.6/dist/clipboard.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n&lt;!-- Target --&gt;\r\n&lt;input id=&quot;foo&quot; value=&quot;foo&quot;&gt;\r\n\r\n&lt;!-- Trigger --&gt;\r\n&lt;button class=&quot;btn&quot; data-clipboard-target=&quot;#foo&quot;&gt;\r\n    &lt;img src=&quot;assets/clippy.svg&quot; alt=&quot;Copy to clipboard&quot;&gt;\r\n&lt;/button&gt;\r\n```\r\n\r\n### Links:\r\n\r\n- [ClipboardJS.com](https://clipboardjs.com/)\r\n- [zenorocha/clipboard.js](https://github.com/zenorocha/clipboard.js)\r\n- [npm](https://www.npmjs.com/package/clipboard)\r\n- [jsDelivr](https://www.jsdelivr.com/package/npm/clipboard)"}],"score":3543}