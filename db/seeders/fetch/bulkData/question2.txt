{"body":"Is it possible to toggle the visibility of an element, using the functions `.hide()`, `.show()` or `.toggle()`?\r\n\r\nHow would you test if an element is `visible` or `hidden`?\r\n","title":"How do I check if an element is hidden in jQuery?","answers":[{"score":989,"body_markdown":"    if ( $(element).css(&#39;display&#39;) == &#39;none&#39; || $(element).css(&quot;visibility&quot;) == &quot;hidden&quot;){\r\n        // &#39;element&#39; is hidden\r\n    }\r\n\r\nThe above method does not consider the visibility of the parent. To consider the parent as well, you should use `.is(&quot;:hidden&quot;)` or `.is(&quot;:visible&quot;)`.\r\n\r\nFor example,\r\n\r\n    &lt;div id=&quot;div1&quot; style=&quot;display:none&quot;&gt;\r\n      &lt;div id=&quot;div2&quot; style=&quot;display:block&quot;&gt;Div2&lt;/div&gt;\r\n    &lt;/div&gt;\r\n\r\n&gt; The above method will consider `div2` visible while `:visible` not. But the above might be useful in many cases, especially when you need to find if there is any error divs visible in the hidden parent because in such conditions `:visible` will not work.\r\n\r\n\r\n\r\n"},{"score":1511,"body_markdown":"You can use the [`hidden`](http://docs.jquery.com/Selectors/hidden) selector:\r\n    \r\n    // Matches all elements that are hidden\r\n    $(&#39;element:hidden&#39;)\r\n\r\nAnd the [`visible`](http://docs.jquery.com/Selectors/visible) selector:\r\n\r\n    // Matches all elements that are visible\r\n    $(&#39;element:visible&#39;)\r\n"},{"score":9609,"body_markdown":"Since the question refers to a single element, this code might be more suitable:\r\n\r\n    // Checks CSS content for display:[none|block], ignores visibility:[true|false]\r\n    $(element).is(&quot;:visible&quot;);\r\n\r\n    // The same works with hidden\r\n    $(element).is(&quot;:hidden&quot;);\r\n\r\nIt is the same as [twernt&#39;s suggestion][1], but applied to a single element; and it [matches the algorithm recommended in the jQuery FAQ][2].\r\n\r\nWe use jQuery&#39;s is() to check the selected element with another element, selector or any jQuery object. This method traverses along the DOM elements to find a match, which satisfies the passed parameter. It will return true if there is a match, otherwise return false.\r\n\r\n  [1]: https://stackoverflow.com/questions/178325/how-do-you-test-if-something-is-hidden-in-jquery/178386#178386\r\n  [2]: https://stackoverflow.com/questions/178325/how-do-i-check-if-an-element-is-hidden-in-jquery/4685330#4685330\r\n\r\n\r\n"},{"score":306,"body_markdown":"Often when checking if something is visible or not, you are going to go right ahead immediately and do something else with it. jQuery chaining makes this easy.\r\n\r\nSo if you have a selector and you want to perform some action on it only if is visible or hidden, you can use `filter(&quot;:visible&quot;)` or `filter(&quot;:hidden&quot;)` followed by chaining it with the action you want to take.\r\n\r\nSo instead of an `if` statement, like this:\r\n\r\n    if ($(&#39;#btnUpdate&#39;).is(&quot;:visible&quot;))\r\n    {\r\n         $(&#39;#btnUpdate&#39;).animate({ width: &quot;toggle&quot; });   // Hide button\r\n    }\r\n\r\nOr more efficient, but even uglier:\r\n\r\n    var button = $(&#39;#btnUpdate&#39;);\r\n    if (button.is(&quot;:visible&quot;))\r\n    {\r\n         button.animate({ width: &quot;toggle&quot; });   // Hide button\r\n    }\r\n\r\nYou can do it all in one line:\r\n\r\n    $(&#39;#btnUpdate&#39;).filter(&quot;:visible&quot;).animate({ width: &quot;toggle&quot; });\r\n"},{"score":407,"body_markdown":"From *[How do I determine the state of a toggled element?][1]*\r\n\r\n-------\r\n\r\nYou can determine whether an element is collapsed or not by using the `:visible` and `:hidden` selectors.\r\n\r\n    var isVisible = $(&#39;#myDiv&#39;).is(&#39;:visible&#39;);\r\n    var isHidden = $(&#39;#myDiv&#39;).is(&#39;:hidden&#39;);\r\n\r\nIf you&#39;re simply acting on an element based on its visibility, you can just include `:visible` or `:hidden` in the selector expression. For example:\r\n\r\n     $(&#39;#myDiv:visible&#39;).animate({left: &#39;+=200px&#39;}, &#39;slow&#39;);\r\n\r\n  [1]: http://learn.jquery.com/using-jquery-core/faq/how-do-i-determine-the-state-of-a-toggled-element/\r\n"},{"score":550,"body_markdown":"None of these answers address what I understand to be the question, which is what I was searching for, *&quot;How do I handle items that have `visibility: hidden`?&quot;*. Neither `:visible` nor `:hidden` will handle this, as they are both looking for display per the documentation.  As far as I could determine, there is no selector to handle CSS visibility.  Here is how I resolved it (standard jQuery selectors, there may be a more condensed syntax):\r\n\r\n    $(&quot;.item&quot;).each(function() {\r\n        if ($(this).css(&quot;visibility&quot;) == &quot;hidden&quot;) {\r\n            // handle non visible state\r\n        } else {\r\n            // handle visible state\r\n        }\r\n    });\r\n"},{"score":223,"body_markdown":"This works for me, and I am using `show()` and `hide()` to make my div hidden/visible:\r\n\r\n    if( $(this).css(&#39;display&#39;) == &#39;none&#39; ){\r\n    \t/* your code goes here */\r\n    } else {\r\n    \t/* alternate logic   */\r\n    }\r\n\r\n"},{"score":252,"body_markdown":"The `:visible` selector according to [the jQuery documentation][jh]:\r\n\r\n&gt; * They have a CSS `display` value of `none`.\r\n&gt; * They are form elements with `type=&quot;hidden&quot;`.\r\n&gt; * Their width and height are explicitly set to 0.\r\n&gt; * An ancestor element is hidden, so the element is not shown on the page.\r\n&gt;\r\n&gt; Elements with `visibility: hidden` or `opacity: 0` are considered to be visible, since they still consume space in the layout.\r\n\r\nThis is useful in some cases and useless in others, because if you want to check if the element is visible (`display != none`), ignoring the parents visibility, you will find that doing `.css(&quot;display&quot;) == &#39;none&#39;` is not only faster, but will also return the visibility check correctly.\r\n\r\nIf you want to check visibility instead of display, you should use: `.css(&quot;visibility&quot;) == &quot;hidden&quot;`.\r\n\r\nAlso take into consideration [the additional jQuery notes][jv]:\r\n\r\n&gt; Because `:visible` is a jQuery extension and not part of the CSS specification, queries using `:visible` cannot take advantage of the performance boost provided by the native DOM `querySelectorAll()` method. To achieve the best performance when using `:visible` to select elements, first select the elements using a pure CSS selector, then use `.filter(&quot;:visible&quot;)`.\r\n\r\nAlso, if you are concerned about performance, you should check *[Now you see meâ€¦ show/hide performance][1]* (2010-05-04). And use other methods to show and hide elements.\r\n\r\n[jh]: https://api.jquery.com/hidden-selector/\r\n[jv]: https://api.jquery.com/visible-selector/\r\n  [1]: http://www.learningjquery.com/2010/05/now-you-see-me-showhide-performance\r\n"},{"score":169,"body_markdown":"I would use CSS class `.hide { display: none!important; }`. \r\n\r\nFor hiding/showing, I call `.addClass(&quot;hide&quot;)/.removeClass(&quot;hide&quot;)`. For checking visibility, I use `.hasClass(&quot;hide&quot;)`.\r\n\r\nIt&#39;s a simple and clear way to check/hide/show elements, if you don&#39;t plan to use `.toggle()` or `.animate()` methods.\r\n"},{"score":125,"body_markdown":"Another answer you should put into consideration is if you are hiding an element, you should use [jQuery][1], but instead of actually hiding it, you remove the whole element, but you copy its [HTML][2] content and the tag itself into a jQuery variable, and then all you need to do is test if there is such a tag on the screen, using the normal `if (!$(&#39;#thetagname&#39;).length)`.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/JQuery\r\n  [2]: http://en.wikipedia.org/wiki/HTML\r\n"},{"score":222,"body_markdown":"How **[element visibility and jQuery works][1]**;\r\n\r\nAn element could be hidden with `display:none`, `visibility:hidden` or `opacity:0`. The difference between those methods:\r\n\r\n - `display:none` hides the element, and it does not take up any space;\r\n - `visibility:hidden` hides the element, but it still takes up space in the layout;\r\n - `opacity:0` hides the element as &quot;visibility:hidden&quot;, and it still takes up space in the layout; the only difference is that opacity lets one to make an element partly transparent;   \r\n\r\n\r\n        if ($(&#39;.target&#39;).is(&#39;:hidden&#39;)) {\r\n          $(&#39;.target&#39;).show();\r\n        } else {\r\n          $(&#39;.target&#39;).hide();\r\n        }\r\n        if ($(&#39;.target&#39;).is(&#39;:visible&#39;)) {\r\n          $(&#39;.target&#39;).hide();\r\n        } else {\r\n          $(&#39;.target&#39;).show();\r\n        }\r\n        \r\n        if ($(&#39;.target-visibility&#39;).css(&#39;visibility&#39;) == &#39;hidden&#39;) {\r\n          $(&#39;.target-visibility&#39;).css({\r\n            visibility: &quot;visible&quot;,\r\n            display: &quot;&quot;\r\n          });\r\n        } else {\r\n          $(&#39;.target-visibility&#39;).css({\r\n            visibility: &quot;hidden&quot;,\r\n            display: &quot;&quot;\r\n          });\r\n        }\r\n        \r\n        if ($(&#39;.target-visibility&#39;).css(&#39;opacity&#39;) == &quot;0&quot;) {\r\n          $(&#39;.target-visibility&#39;).css({\r\n            opacity: &quot;1&quot;,\r\n            display: &quot;&quot;\r\n          });\r\n        } else {\r\n          $(&#39;.target-visibility&#39;).css({\r\n            opacity: &quot;0&quot;,\r\n            display: &quot;&quot;\r\n          });\r\n        }\r\n    \r\n    \r\n    **Useful jQuery toggle methods:**  \r\n\r\n        $(&#39;.click&#39;).click(function() {\r\n          $(&#39;.target&#39;).toggle();\r\n        });\r\n    \r\n        $(&#39;.click&#39;).click(function() {\r\n          $(&#39;.target&#39;).slideToggle();\r\n        });\r\n    \r\n        $(&#39;.click&#39;).click(function() {\r\n          $(&#39;.target&#39;).fadeToggle();\r\n        });\r\n\r\n\r\n  [1]: http://web-profile.net/jquery/dev/jquery-element-visible-hidden/\r\n"},{"score":140,"body_markdown":"One can simply use the `hidden` or `visible` attribute, like:\r\n    \r\n    $(&#39;element:hidden&#39;)\r\n    $(&#39;element:visible&#39;)\r\n\r\nOr you can simplify the same with *is* as follows.\r\n\r\n    $(element).is(&quot;:visible&quot;)\r\n"},{"score":138,"body_markdown":"`ebdiv` should be set to `style=&quot;display:none;&quot;`. It works for both show and hide:\r\n\r\n    $(document).ready(function(){\r\n        $(&quot;#eb&quot;).click(function(){\r\n            $(&quot;#ebdiv&quot;).toggle();\r\n        });    \r\n    });\r\n"},{"score":170,"body_markdown":"You can also do this using plain JavaScript:\r\n\r\n    function isRendered(domObj) {\r\n        if ((domObj.nodeType != 1) || (domObj == document.body)) {\r\n            return true;\r\n        }\r\n        if (domObj.currentStyle &amp;&amp; domObj.currentStyle[&quot;display&quot;] != &quot;none&quot; &amp;&amp; domObj.currentStyle[&quot;visibility&quot;] != &quot;hidden&quot;) {\r\n            return isRendered(domObj.parentNode);\r\n        } else if (window.getComputedStyle) {\r\n    \t\tvar cs = document.defaultView.getComputedStyle(domObj, null);\r\n    \t\tif (cs.getPropertyValue(&quot;display&quot;) != &quot;none&quot; &amp;&amp; cs.getPropertyValue(&quot;visibility&quot;) != &quot;hidden&quot;) {\r\n    \t\t\treturn isRendered(domObj.parentNode);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\nNotes:\r\n\r\n  1. Works everywhere\r\n\r\n  2. Works for nested elements\r\n\r\n  3. Works for CSS and inline styles\r\n\r\n  4. Doesn&#39;t require a framework"},{"score":94,"body_markdown":"This may work:\r\n\r\n    expect($(&quot;#message_div&quot;).css(&quot;display&quot;)).toBe(&quot;none&quot;);"},{"score":145,"body_markdown":"**[Demo Link][2]** \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $(&#39;#clickme&#39;).click(function() {\r\n      $(&#39;#book&#39;).toggle(&#39;slow&#39;, function() {\r\n        // Animation complete.\r\n        alert($(&#39;#book&#39;).is(&quot;:visible&quot;)); //&lt;--- TRUE if Visible False if Hidden\r\n      });\r\n    });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;div id=&quot;clickme&quot;&gt;\r\n      Click here\r\n    &lt;/div&gt;\r\n    &lt;img id=&quot;book&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/8/87/Google_Chrome_icon_%282011%29.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n**Source:** \r\n\r\n[Blogger Plug n Play - jQuery Tools and Widgets: How to See if Element is hidden or Visible Using jQuery][1]\r\n\r\n\r\n\r\n\r\n  [1]: http://bloggerplugnplay.blogspot.in/2013/01/how-to-see-if-element-is-hidden-or.html\r\n  [2]: https://freakyjolly.com/demo/check-if-visible-or-hidden-jquery.html"},{"score":70,"body_markdown":"To check if it is not visible I use `!`:\r\n\r\n    if ( !$(&#39;#book&#39;).is(&#39;:visible&#39;)) {\r\n        alert(&#39;#book is not visible&#39;)\r\n    }\r\n\r\nOr the following is also the sam, saving the jQuery selector in a variable to have better performance when you need it multiple times:\r\n\r\n    var $book = $(&#39;#book&#39;)\r\n\r\n    if(!$book.is(&#39;:visible&#39;)) {\r\n        alert(&#39;#book is not visible&#39;)\r\n    }\r\n"},{"score":64,"body_markdown":"## Use class toggling, not style editing . . . ##\n\nUsing classes designated for &quot;hiding&quot; elements is easy and also one of the most efficient methods. Toggling a class &#39;hidden&#39; with a `Display` style of &#39;none&#39; will perform faster than editing that style directly. I explained some of this pretty thoroughly in Stack Overflow question *[Turning two elements visible/hidden in the same div][1]*.\n\n----------\n\n## JavaScript Best Practices and Optimization ##\n\nHere is a truly enlightening video of a Google Tech Talk by Google front-end engineer Nicholas Zakas:\n\n - **[Speed Up Your Javascript][2]** (YouTube)\n\n  [1]: https://stackoverflow.com/questions/17725361/turning-two-elements-visible-hidden-in-same-div/17726550#answer-17726550\n  [2]: http://www.youtube.com/watch?v=mHtdZgou0qU\n"},{"score":78,"body_markdown":"Example: \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $(document).ready(function() {\r\n      if ($(&quot;#checkme:hidden&quot;).length) {\r\n        console.log(&#39;Hidden&#39;);\r\n      }\r\n    });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;div id=&quot;checkme&quot; class=&quot;product&quot; style=&quot;display:none&quot;&gt;\r\n      &lt;span class=&quot;itemlist&quot;&gt;&lt;!-- Shows Results for Fish --&gt;&lt;/span&gt; Category:Fish\r\n      &lt;br&gt;Product: Salmon Atlantic\r\n      &lt;br&gt;Specie: Salmo salar\r\n      &lt;br&gt;Form: Steaks\r\n    &lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":33,"body_markdown":"Also here&#39;s a ternary conditional expression to check the state of the element and then to toggle it:\r\n\r\n    $(&#39;someElement&#39;).on(&#39;click&#39;, function(){ $(&#39;elementToToggle&#39;).is(&#39;:visible&#39;) ? $(&#39;elementToToggle&#39;).hide(&#39;slow&#39;) : $(&#39;elementToToggle&#39;).show(&#39;slow&#39;); });"},{"score":32,"body_markdown":"    if($(&#39;#postcode_div&#39;).is(&#39;:visible&#39;)) {\r\n        if($(&#39;#postcode_text&#39;).val()==&#39;&#39;) {\r\n            $(&#39;#spanPost&#39;).text(&#39;\\u00a0&#39;);\r\n        } else {\r\n            $(&#39;#spanPost&#39;).text($(&#39;#postcode_text&#39;).val());\r\n    }"},{"score":54,"body_markdown":"You need to check both... Display as well as visibility:\r\n\r\n    if ($(this).css(&quot;display&quot;) == &quot;none&quot; || $(this).css(&quot;visibility&quot;) == &quot;hidden&quot;) {\r\n        // The element is not visible\r\n    } else {\r\n        // The element is visible\r\n    }\r\n\r\nIf we check for `$(this).is(&quot;:visible&quot;)`, jQuery checks for both the things automatically.\r\n"},{"score":38,"body_markdown":"Because `Elements with visibility: hidden or opacity: 0 are considered visible, since they still consume space in the layout` (as described for [jQuery :visible Selector][1]) - we can check if element is *really* visible in this way:\r\n\r\n    function isElementReallyHidden (el) {\r\n\t\treturn $(el).is(&quot;:hidden&quot;) || $(el).css(&quot;visibility&quot;) == &quot;hidden&quot; || $(el).css(&#39;opacity&#39;) == 0;\r\n\t}\r\n\t\r\n\tvar booElementReallyShowed = !isElementReallyHidden(someEl);\r\n    $(someEl).parents().each(function () {\r\n        if (isElementReallyHidden(this)) {\r\n            booElementReallyShowed = false;\r\n        }\r\n    });\r\n\r\n\r\n  [1]: https://api.jquery.com/visible-selector/"},{"score":62,"body_markdown":"After all, none of examples suits me, so I wrote my own.\r\n\r\n**Tests** (no support of Internet&amp;nbsp;Explorer `filter:alpha`):\r\n\r\na) Check if the document is not hidden\r\n\r\nb) Check if an element has zero width / height / opacity or `display:none` / `visibility:hidden` in inline styles\r\n\r\nc) Check if the center (also because it is faster than testing every pixel / corner) of element is not hidden by other element (and all ancestors, example: `overflow:hidden` / scroll / one element over another) or screen edges\r\n\r\nd) Check if an element has zero width / height / opacity or `display:none` / visibility:hidden in computed styles (among all ancestors)\r\n\r\n**Tested on**\r\n\r\nAndroid 4.4 (Native browser/Chrome/Firefox), Firefox (Windows/Mac), Chrome (Windows/Mac), Opera (Windows [Presto][1]/Mac WebKit), Internet&amp;nbsp;Explorer (Internet&amp;nbsp;Explorer 5-11 document modes + Internet&amp;nbsp;Explorer 8 on a virtual machine), and Safari (Windows/Mac/iOS).\r\n\r\n    var is_visible = (function () {\r\n        var x = window.pageXOffset ? window.pageXOffset + window.innerWidth - 1 : 0,\r\n            y = window.pageYOffset ? window.pageYOffset + window.innerHeight - 1 : 0,\r\n            relative = !!((!x &amp;&amp; !y) || !document.elementFromPoint(x, y));\r\n            function inside(child, parent) {\r\n                while(child){\r\n                    if (child === parent) return true;\r\n                    child = child.parentNode;\r\n                }\r\n            return false;\r\n        };\r\n        return function (elem) {\r\n            if (\r\n                document.hidden ||\r\n                elem.offsetWidth==0 ||\r\n                elem.offsetHeight==0 ||\r\n                elem.style.visibility==&#39;hidden&#39; ||\r\n                elem.style.display==&#39;none&#39; ||\r\n                elem.style.opacity===0\r\n            ) return false;\r\n            var rect = elem.getBoundingClientRect();\r\n            if (relative) {\r\n                if (!inside(document.elementFromPoint(rect.left + elem.offsetWidth/2, rect.top + elem.offsetHeight/2),elem)) return false;\r\n            } else if (\r\n                !inside(document.elementFromPoint(rect.left + elem.offsetWidth/2 + window.pageXOffset, rect.top + elem.offsetHeight/2 + window.pageYOffset), elem) ||\r\n                (\r\n                    rect.top + elem.offsetHeight/2 &lt; 0 ||\r\n                    rect.left + elem.offsetWidth/2 &lt; 0 ||\r\n                    rect.bottom - elem.offsetHeight/2 &gt; (window.innerHeight || document.documentElement.clientHeight) ||\r\n                    rect.right - elem.offsetWidth/2 &gt; (window.innerWidth || document.documentElement.clientWidth)\r\n                )\r\n            ) return false;\r\n            if (window.getComputedStyle || elem.currentStyle) {\r\n                var el = elem,\r\n                    comp = null;\r\n                while (el) {\r\n                    if (el === document) {break;} else if(!el.parentNode) return false;\r\n                    comp = window.getComputedStyle ? window.getComputedStyle(el, null) : el.currentStyle;\r\n                    if (comp &amp;&amp; (comp.visibility==&#39;hidden&#39; || comp.display == &#39;none&#39; || (typeof comp.opacity !==&#39;undefined&#39; &amp;&amp; comp.opacity != 1))) return false;\r\n                    el = el.parentNode;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    })();\r\n\r\nHow to use:\r\n\r\n    is_visible(elem) // boolean\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Presto_%28layout_engine%29\r\n\r\n\r\n\r\n"},{"score":29,"body_markdown":"    .is(&quot;:not(&#39;:hidden&#39;)&quot;) /*if shown*/"},{"score":106,"body_markdown":"When testing an element against `:hidden` selector in jQuery it should be considered that **an absolute positioned element may be recognized as hidden although their child elements are visible**.\r\n\r\nThis seems somewhat counter-intuitive in the first place â€“ though having a closer look at the jQuery documentation gives the relevant information:\r\n\r\n&gt; Elements can be considered hidden for several reasons: [...] Their width and height are explicitly set to 0. [...]\r\n\r\nSo this actually makes sense in regards to the box-model and the computed style for the element. Even if width and height are not set *explicitly* to 0 they may be set *implicitly*.\r\n\r\nHave a look at the following example:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log($(&#39;.foo&#39;).is(&#39;:hidden&#39;)); // true\r\n    console.log($(&#39;.bar&#39;).is(&#39;:hidden&#39;)); // false\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    .foo {\r\n      position: absolute;\r\n      left: 10px;\r\n      top: 10px;\r\n      background: #ff0000;\r\n    }\r\n\r\n    .bar {\r\n      position: absolute;\r\n      left: 10px;\r\n      top: 10px;\r\n      width: 20px;\r\n      height: 20px;\r\n      background: #0000ff;\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;div class=&quot;foo&quot;&gt;\r\n      &lt;div class=&quot;bar&quot;&gt;&lt;/div&gt;\r\n    &lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n---\r\n\r\n**Update for jQuery 3.x:**\r\n\r\nWith jQuery 3 the described behavior will change! Elements will be considered visible if they have any layout boxes, including those of zero width and/or height.\r\n\r\nJSFiddle with jQuery 3.0.0-alpha1:\r\n\r\nhttp://jsfiddle.net/pM2q3/7/\r\n\r\nThe same JavaScript code will then have this output:\r\n\r\n    console.log($(&#39;.foo&#39;).is(&#39;:hidden&#39;)); // false\r\n    console.log($(&#39;.bar&#39;).is(&#39;:hidden&#39;)); // false\r\n\r\n\r\n"},{"score":40,"body_markdown":"Simply check visibility by checking for a boolean value, like:\r\n\r\n    if (this.hidden === false) {\r\n        // Your code\r\n    }\r\n\r\nI used this code for each function. Otherwise you can use `is(&#39;:visible&#39;)` for checking the visibility of an element.\r\n"},{"score":36,"body_markdown":"But what if the element&#39;s CSS is like the following?\r\n\r\n    .element{\r\n        position: absolute;left:-9999;    \r\n    }\r\n\r\nSo [this answer to Stack Overflow question *How to check if an element is off-screen*][1] should also be considered.\r\n\r\n  [1]: https://stackoverflow.com/questions/8897289\r\n"},{"score":34,"body_markdown":"A function can be created in order to check for visibility/display attributes in order to gauge whether the element is shown in the UI or not. \r\n\r\n    function checkUIElementVisible(element) {\r\n        return ((element.css(&#39;display&#39;) !== &#39;none&#39;) &amp;&amp; (element.css(&#39;visibility&#39;) !== &#39;hidden&#39;));\r\n    }\r\n\r\n[Working Fiddle](http://jsfiddle.net/w8bytkqc/)\r\n"},{"score":44,"body_markdown":"Maybe you can do something like this\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $(document).ready(function() {\r\n       var visible = $(&#39;#tElement&#39;).is(&#39;:visible&#39;);\r\n\r\n       if(visible) {\r\n          alert(&quot;visible&quot;);\r\n                        // Code\r\n       }\r\n       else\r\n       {\r\n          alert(&quot;hidden&quot;);\r\n       }\r\n    });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://code.jquery.com/jquery-1.10.2.js&quot;&gt;&lt;/script&gt;\r\n\r\n    &lt;input type=&quot;text&quot; id=&quot;tElement&quot; style=&quot;display:block;&quot;&gt;Firstname&lt;/input&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":62,"body_markdown":"Example of using the **visible** check for adblocker is activated:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $(document).ready(function(){\r\n      if(!$(&quot;#ablockercheck&quot;).is(&quot;:visible&quot;))\r\n        $(&quot;#ablockermsg&quot;).text(&quot;Please disable adblocker.&quot;).show();\r\n    });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;div class=&quot;ad-placement&quot; id=&quot;ablockercheck&quot;&gt;&lt;/div&gt;\r\n    &lt;div id=&quot;ablockermsg&quot; style=&quot;display: none&quot;&gt;&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n&quot;ablockercheck&quot; is a ID which adblocker blocks. So checking it if it is visible you are able to detect if adblocker is turned On."},{"score":21,"body_markdown":"    if($(&#39;#id_element&#39;).is(&quot;:visible&quot;)){\r\n       alert(&#39;shown&#39;);\r\n    }else{\r\n       alert(&#39;hidden&#39;);\r\n    }"},{"score":11,"body_markdown":"This is some option to check that tag is visible or not\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n     // using a pure CSS selector  \r\n       if ($(&#39;p:visible&#39;)) {  \r\n          alert(&#39;Paragraphs are visible (checked using a CSS selector) !&#39;);  \r\n       };  \r\n      \r\n       // using jQuery&#39;s is() method  \r\n       if ($(&#39;p&#39;).is(&#39;:visible&#39;)) {  \r\n          alert(&#39;Paragraphs are visible (checked using is() method)!&#39;);  \r\n       };  \r\n      \r\n       // using jQuery&#39;s filter() method  \r\n       if ($(&#39;p&#39;).filter(&#39;:visible&#39;)) {  \r\n          alert(&#39;Paragraphs are visible (checked using filter() method)!&#39;);  \r\n       };  \r\n      \r\n       // you can use :hidden instead of :visible to reverse the logic and check if an element is hidden  \r\n       // if ($(&#39;p:hidden&#39;)) {  \r\n       //    do something  \r\n       // };  \r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":3,"body_markdown":"    if($(&quot;h1&quot;).is(&quot;:hidden&quot;)){\r\n        // your code..\r\n    }\r\n\r\n"},{"score":11,"body_markdown":"You can just add a class when it is visible. Add a class, `show`. Then check for it have a class:\r\n\r\n    $(&#39;#elementId&#39;).hasClass(&#39;show&#39;);\r\n\r\nIt returns true if you have the `show` class.\r\n\r\nAdd CSS like this:\r\n\r\n    .show{ display: block; }\r\n\r\n"},{"score":15,"body_markdown":"This is how [jQuery][1] internally solves this problem:\r\n\r\n    jQuery.expr.pseudos.visible = function( elem ) {\r\n    \treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\r\n    };\r\n\r\nIf you don&#39;t use jQuery, you can just leverage this code and turn it into your own function:\r\n\r\n    function isVisible(elem) {\r\n    \treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\r\n    };\r\n\r\nWhich `isVisible` will return `true` as long as the element is visible.\r\n\r\n\r\n  [1]: https://github.com/jquery/jquery/blob/055cb7534e2dcf7ee8ad145be83cb2d74b5331c7/src/css/hiddenVisibleSelectors.js"},{"score":16,"body_markdown":"You can use this:\r\n\r\n    $(element).is(&#39;:visible&#39;);\r\n\r\nExample code\r\n---------------\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $(document).ready(function()\r\n    {\r\n        $(&quot;#toggle&quot;).click(function()\r\n        {\r\n            $(&quot;#content&quot;).toggle();\r\n        });\r\n\r\n        $(&quot;#visiblity&quot;).click(function()\r\n        {\r\n           if( $(&#39;#content&#39;).is(&#39;:visible&#39;) )\r\n           {\r\n              alert(&quot;visible&quot;); // Put your code for visibility\r\n           }\r\n           else\r\n           {\r\n              alert(&quot;hidden&quot;);\r\n           }\r\n        });\r\n    });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n    &lt;p id=&quot;content&quot;&gt;This is a Content&lt;/p&gt;\r\n\r\n    &lt;button id=&quot;toggle&quot;&gt;Toggle Content Visibility&lt;/button&gt;\r\n    &lt;button id=&quot;visibility&quot;&gt;Check Visibility&lt;/button&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":20,"body_markdown":"I searched for this, and none of the answers are correct for my case, so I&#39;ve created a function that will return false if one&#39;s eyes can&#39;t see the element\r\n\r\n    jQuery.fn.extend({\r\n      isvisible: function() {\r\n    \t//\r\n    \t//\tThis function call this: $(&quot;div&quot;).isvisible()\r\n    \t//\tReturn true if the element is visible\r\n    \t//\tReturn false if the element is not visible for our eyes\r\n    \t//\r\n    \tif ( $(this).css(&#39;display&#39;) == &#39;none&#39; ){\r\n    \t\tconsole.log(&quot;this = &quot; + &quot;display:none&quot;);\r\n    \t\treturn false;\r\n    \t}\r\n    \telse if( $(this).css(&#39;visibility&#39;) == &#39;hidden&#39; ){\r\n    \t\tconsole.log(&quot;this = &quot; + &quot;visibility:hidden&quot;);\t\r\n    \t\treturn false;\r\n    \t}\r\n    \telse if( $(this).css(&#39;opacity&#39;) == &#39;0&#39; ){\r\n    \t\tconsole.log(&quot;this = &quot; + &quot;opacity:0&quot;);\r\n    \t\treturn false;\r\n    \t}\t\r\n    \telse{\r\n    \t\tconsole.log(&quot;this = &quot; + &quot;Is Visible&quot;);\r\n    \t\treturn true;\r\n    \t}\r\n      }  \r\n    });"},{"score":18,"body_markdown":"As `hide()`, `show()` and `toggle()` attaches inline css (display:none or display:block) to element.\r\nSimilarly, we can easily use the ternary operator to check whether the element is hidden or visible by checking display CSS.\r\n\r\n**UPDATE:**\r\n\r\n - You also need to check if element CSS set to visibility: &quot;visible&quot; or visibility: &quot;hidden&quot;\r\n - The element will be also visible if display property set to inline-block, block, flex.\r\n\r\nSo we can check for the property of an element that makes it invisible. So they are `display: none` and `visibility: &quot;hidden&quot;;`\r\n\r\nWe can create an object for checking property responsible for hiding element:\r\n\r\n    var hiddenCssProps = {\r\n    display: &quot;none&quot;,\r\n    visibility: &quot;hidden&quot;\r\n    }\r\n\r\nWe can check by looping through each key value in object matching if element property for key matches with hidden property value.\r\n\r\n    var isHidden = false;\r\n    for(key in hiddenCssProps) {\r\n      if($(&#39;#element&#39;).css(key) == hiddenCssProps[key]) {\r\n         isHidden = true;\r\n       }\r\n    }\r\n\r\nIf you want to check property like element height: 0 or width: 0 or more, you can extend this object and add more property to it and can check."},{"score":5,"body_markdown":"You can use the \r\n\r\n    $( &quot;div:visible&quot; ).click(function() {\r\n      $( this ).css( &quot;background&quot;, &quot;yellow&quot; );\r\n    });\r\n    $( &quot;button&quot; ).click(function() {\r\n      $( &quot;div:hidden&quot; ).show( &quot;fast&quot; );\r\n    });\r\n\r\nAPI Documentation: [**visible Selector**][1]\r\n\r\n\r\n  [1]: https://api.jquery.com/visible-selector/"},{"score":13,"body_markdown":"I just want to clarify that, in jQuery,\r\n\r\n&gt; Elements can be considered hidden for several reasons:\r\n&gt;\r\n&gt; - They have a CSS display value of none.\r\n&gt; - They are form elements with type=&quot;hidden&quot;.\r\n&gt; - Their width and height are explicitly set to 0.\r\n&gt; - An ancestor element is hidden, so the element is not shown on the page.\r\n&gt;\r\n&gt; Elements with visibility: hidden or opacity: 0 are considered to be visible, since they still consume space in the layout. During animations that hide an element, the element is considered to be visible until the end of the animation.\r\n&gt;\r\n&gt; Source: [:hidden Selector | jQuery API Documentation](https://api.jquery.com/hidden-selector/)\r\n\r\n    if($(&#39;.element&#39;).is(&#39;:hidden&#39;)) {\r\n      // Do something\r\n    }\r\n"},{"score":17,"body_markdown":"There are quite a few ways to check if an element is visible or hidden in jQuery.\r\n\r\n*Demo HTML for example reference*\r\n\r\n    &lt;div id=&quot;content&quot;&gt;Content&lt;/div&gt;\r\n    &lt;div id=&quot;content2&quot; style=&quot;display:none&quot;&gt;Content2&lt;/div&gt;\r\n\r\n**Use Visibility Filter Selector `$(&#39;element:hidden&#39;)` or `$(&#39;element:visible&#39;)`**\r\n\r\n - `$(&#39;element:hidden&#39;)`: Selects all elements that are hidden.\r\n\r\n        Example:\r\n           $(&#39;#content2:hidden&#39;).show();\r\n\r\n - `$(&#39;element:visible&#39;)`: Selects all elements that are visible.\r\n\r\n        Example:\r\n           $(&#39;#content:visible&#39;).css(&#39;color&#39;, &#39;#EEE&#39;);\r\n\r\n&gt; Read more at http://api.jquery.com/category/selectors/visibility-filter-selectors/\r\n\r\n**Use `is()` Filtering**\r\n\r\n        Example:\r\n           $(&#39;#content&#39;).is(&quot;:visible&quot;).css(&#39;color&#39;, &#39;#EEE&#39;);\r\n\r\n        Or checking condition\r\n        if ($(&#39;#content&#39;).is(&quot;:visible&quot;)) {\r\n             // Perform action\r\n        }\r\n\r\n&gt; Read more at http://api.jquery.com/is/\r\n"},{"score":8,"body_markdown":"There are too many methods to check for hidden elements. This is the best choice (I just recommended you):\r\n\r\n&gt; Using jQuery, make an element, &quot;display:none&quot;, in CSS for hidden.\r\n\r\nThe point is:\r\n\r\n    $(&#39;element:visible&#39;)\r\n\r\nAnd an example for use:\r\n\r\n    $(&#39;element:visible&#39;).show();\r\n\r\n"},{"score":4,"body_markdown":"To be fair the question pre-dates *this* answer.\r\n\r\nI add it not to criticise the OP, but to help anyone still asking this question.\r\n\r\nThe correct way to determine whether something is visible is to consult your view-model;\r\n\r\nIf you don&#39;t know what that means then you are about to embark on a journey of discovery that will make your work a great deal less difficult.\r\n\r\nHere&#39;s an overview of the [model-view-view-model][1] architecture (MVVM).\r\n\r\n[KnockoutJS][2] is a binding library that will let you try this stuff out without learning an entire framework.\r\n\r\nAnd here&#39;s some JavaScript code and a DIV that may or may not be visible.\r\n\r\n    &lt;html&gt;\r\n    &lt;body&gt;\r\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.1/knockout-min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;script&gt;\r\n        var vm = {\r\n            IsDivVisible: ko.observable(true);\r\n        }\r\n        vm.toggle = function(data, event) {\r\n          // Get current visibility state for the div\r\n          var x = IsDivVisible();\r\n          // Set it to the opposite\r\n          IsDivVisible(!x);\r\n        }\r\n        ko.applyBinding(vm);\r\n    &lt;/script&gt;\r\n    &lt;div data-bind=&quot;visible: IsDivVisible&quot;&gt;Peekaboo!&lt;/div&gt;\r\n    &lt;button data-bind=&quot;click: toggle&quot;&gt;Toggle the div&#39;s visibility&lt;/button&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\nNotice that the toggle function does not consult the DOM to determine the visibility of the div; it consults the view-model.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel\r\n  [2]: http://knockoutjs.com\r\n\r\n\r\n\r\n\r\n"},{"score":0,"body_markdown":"    $(&#39;someElement&#39;).on(&#39;click&#39;, function(){ $(&#39;elementToToggle&#39;).is(&#39;:visible&#39;)\r\n"},{"score":18,"body_markdown":"Just simply check if that element is **visible** and it will return a **boolean**. jQuery hides the elements by adding *display none* to the element, so if you want to use pure JavaScript, you can still do that, for example:\r\n\r\n    if (document.getElementById(&quot;element&quot;).style.display === &#39;block&#39;) {\r\n      // Your element is visible; do whatever you&#39;d like\r\n    }\r\n\r\nAlso, you can use jQuery as it seems the rest of your code is using that and you have smaller block of code. Something like the below in jQuery does the same trick for you:\r\n\r\n    if ($(element).is(&quot;:visible&quot;)) {\r\n        // Your element is visible, do whatever you&#39;d like\r\n    };\r\n\r\nAlso using the `css` method in jQuery can result in the same thing:\r\n\r\n    if ($(element).css(&#39;display&#39;) === &#39;block&#39;) {\r\n        // Your element is visible, do whatever you&#39;d like\r\n    }\r\n\r\nAlso in case of checking for visibility and display, you can do the below:\r\n\r\n    if ($(this).css(&quot;display&quot;) === &quot;block&quot; || $(this).css(&quot;visibility&quot;) === &quot;visible&quot;) {\r\n       // Your element is visible, do whatever you&#39;d like\r\n    }\r\n"},{"score":7,"body_markdown":"Simply check for the `display` attribute (or `visibility` depending on what kind of invisibility you prefer). Example:\r\n\r\n    if ($(&#39;#invisible&#39;).css(&#39;display&#39;) == &#39;none&#39;) {\r\n        // This means the HTML element with ID &#39;invisible&#39; has its &#39;display&#39; attribute set to &#39;none&#39;\r\n    }\r\n\r\n\r\n\r\n\r\n"},{"score":3,"body_markdown":"You can use a CSS class when it visible or hidden by toggling the class:\r\n\r\n    .show{ display :block; }\r\n\r\nSet your jQuery `toggleClass()` or `addClass()` or `removeClass();`.\r\n\r\nAs an example,\r\n\r\n`jQuery(&#39;#myID&#39;).toggleClass(&#39;show&#39;)`\r\n\r\nThe above code will add `show` css class when the element don&#39;t have `show` and will remove when it has `show` class.\r\n\r\nAnd when you are checking if it visible or not, You can follow this jQuery code,\r\n\r\n`jQuery(&#39;#myID&#39;).hasClass(&#39;show&#39;);`\r\n\r\nAbove code will return a boolean (true) when `#myID` element has our class (`show`) and false when it don&#39;t have the (`show`) class.\r\n\r\n\r\n\r\n"},{"score":1,"body_markdown":"You can do this:\r\n\r\n    isHidden = function(element){\r\n        return (element.style.display === &quot;none&quot;);\r\n    };\r\n\r\n    if(isHidden($(&quot;element&quot;)) == true){\r\n        // Something\r\n    }\r\n\r\n\r\n"},{"score":1,"body_markdown":"Instead of writing an `event` for every single `element`, do this:\r\n\r\n    $(&#39;div&#39;).each(function(){\r\n      if($(this).css(&#39;display&#39;) === &#39;none&#39;){\r\n        $(this).css({&#39;display&#39;:&#39;block&#39;});\r\n      }\r\n    });\r\n\r\nAlso you can use it on the inputs:\r\n\r\n    $(&#39;input&#39;).each(function(){\r\n      if($(this).attr(&#39;type&#39;) === &#39;hidden&#39;){\r\n        $(this).attr(&#39;type&#39;, &#39;text&#39;);\r\n      }\r\n    });\r\n\r\n\r\n\r\n"},{"score":4,"body_markdown":"If you want to check if an element is visible on the page, depending on the visibility of its parent, you can check if `width` and `height` of the element are both equal to `0`.\r\n\r\njQuery\r\n\r\n`$element.width() === 0 &amp;&amp; $element.height() === 0`\r\n\r\nVanilla\r\n\r\n`element.clientWidth === 0 &amp;&amp; element.clientHeight === 0`\r\n\r\nOr\r\n\r\n`element.offsetWidth === 0 &amp;&amp; element.offsetHeight === 0`"},{"score":4,"body_markdown":"A jQuery solution, but it is still a bit better for those who want to change the button text as well:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $(function(){\r\n      $(&quot;#showHide&quot;).click(function(){\r\n        var btn = $(this);\r\n        $(&quot;#content&quot;).toggle(function () {\r\n          btn.text($(this).css(&quot;display&quot;) === &#39;none&#39; ? &quot;Show&quot; : &quot;Hide&quot;);\r\n        });\r\n       });\r\n     });\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n    &lt;button id=&quot;showHide&quot;&gt;Hide&lt;/button&gt;\r\n    &lt;div id=&quot;content&quot;&gt;\r\n      &lt;h2&gt;Some content&lt;/h2&gt;\r\n      &lt;p&gt;\r\n      What is Lorem Ipsum? Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.\r\n      &lt;/p&gt;\r\n    &lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n"},{"score":9,"body_markdown":"# 1 â€¢ jQuery solution\r\n### Methods to determine if an element is visible in jQuery\r\n\r\n    &lt;script&gt;\r\n    if ($(&quot;#myelement&quot;).is(&quot;:visible&quot;)){alert (&quot;#myelement is visible&quot;);}\r\n    if ($(&quot;#myelement&quot;).is(&quot;:hidden&quot;)){alert (&quot;#myelement is hidden&quot;); }\r\n    &lt;/script&gt;\r\n\r\n### Loop on all *visible* div children of the element of id &#39;myelement&#39;:\r\n\r\n    $(&quot;#myelement div:visible&quot;).each( function() {\r\n     //Do something\r\n    });\r\n\r\n### Peeked at source of jQuery \r\n \r\nThis is how jQuery implements this feature:\r\n\r\n    jQuery.expr.filters.visible = function( elem ) {\r\n        return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\r\n    };\r\n\r\n# 2 â€¢ [How to check if an element is off-screen - CSS][1]\r\nUsing Element.getBoundingClientRect() you can easily detect whether or not your element is within the boundaries of your viewport (i.e. onscreen or offscreen):\r\n\r\n    jQuery.expr.filters.offscreen = function(el) {\r\n      var rect = el.getBoundingClientRect();\r\n      return (\r\n               (rect.x + rect.width) &lt; 0 \r\n                 || (rect.y + rect.height) &lt; 0\r\n                 || (rect.x &gt; window.innerWidth || rect.y &gt; window.innerHeight)\r\n             );\r\n    };\r\n\r\nYou could then use that in several ways:\r\n\r\n    // Returns all elements that are offscreen\r\n    $(&#39;:offscreen&#39;);\r\n    \r\n    // Boolean returned if element is offscreen\r\n    $(&#39;div&#39;).is(&#39;:offscreen&#39;);\r\n\r\nIf you use Angular, check: *[Donâ€™t use hidden attribute with Angular][2]*\r\n\r\n  [1]: https://stackoverflow.com/questions/8897289/how-to-check-if-an-element-is-off-screen\r\n  [2]: http://www.talkingdotnet.com/dont-use-hidden-attribute-angularjs-2/\r\n"},{"score":1,"body_markdown":"Try\r\n\r\n    content.style.display != &#39;none&#39;\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function toggle() {\r\n      $(content).toggle();\r\n      let visible= content.style.display != &#39;none&#39;\r\n      console.log(&#39;visible:&#39;, visible);\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n    &lt;button onclick=&quot;toggle()&quot;&gt;Show/hide&lt;/button&gt;\r\n    &lt;div id=&quot;content&quot;&gt;ABC&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":3,"body_markdown":"You can use jQuery&#39;s `is()` function to check the selected element visible or hidden. This method traverses along the DOM elements to find a match, which satisfies the passed parameter. It will return true if there is a match otherwise returns false.\r\n\r\n    &lt;script&gt;\r\n    \t($(&quot;#myelement&quot;).is(&quot;:visible&quot;))? alert(&quot;#myelement is visible&quot;) : alert(&quot;#myelement is hidden&quot;);\r\n    &lt;/script&gt;\r\n"},{"score":1,"body_markdown":"The below code checks if an element is hidden in jQuery or visible\r\n\r\n    // You can also do this...\r\n\r\n            $(&quot;button&quot;).click(function(){\r\n                // show hide paragraph on button click\r\n                $(&quot;p&quot;).toggle(&quot;slow&quot;, function(){\r\n                    // check paragraph once toggle effect is completed\r\n                    if($(&quot;p&quot;).is(&quot;:visible&quot;)){\r\n                        alert(&quot;The paragraph  is visible.&quot;);\r\n                    } else{\r\n                        alert(&quot;The paragraph  is hidden.&quot;);\r\n                    }\r\n                });\r\n            });\r\n\r\n\r\n"},{"score":4,"body_markdown":"### Extended function for checking if element is visible, display none, or even the opacity level\r\n\r\nIt returns `false` if the element is not visible.\r\n\r\n    function checkVisible(e) {\r\n        if (!(e instanceof Element)) throw Error(&#39;not an Element&#39;);\r\n        const elementStyle = getComputedStyle(e);\r\n        if (elementStyle.display === &#39;none&#39; || elementStyle.visibility !== &#39;visible&#39; || elementStyle.opacity &lt; 0.1) return false;\r\n        if (e.offsetWidth + e.offsetHeight + e.getBoundingClientRect().height +\r\n            e.getBoundingClientRect().width === 0) {\r\n            return false;\r\n        }\r\n        const elemCenter   = {\r\n            x: e.getBoundingClientRect().left + e.offsetWidth / 2,\r\n            y: e.getBoundingClientRect().top + e.offsetHeight / 2\r\n        };\r\n        if (elemCenter.x &lt; 0 || elemCenter.y &lt; 0) return false;\r\n        if (elemCenter.x &gt; (document.documentElement.clientWidth || window.innerWidth)) return false;\r\n        if (elemCenter.y &gt; (document.documentElement.clientHeight || window.innerHeight)) return false;\r\n        let pointContainer = document.elementFromPoint(elemCenter.x, elemCenter.y);\r\n        do {\r\n            if (pointContainer === e) return true;\r\n        } while (pointContainer = pointContainer.parentNode);\r\n        return false;\r\n    }"},{"score":0,"body_markdown":"You can also:\r\n\r\n\r\n \r\n\r\n       hideShow(){\r\n      $(&quot;#accordionZiarat&quot;).hide();\r\n      // Checks CSS content for display:[none|block], ignores visibility:[true|false]\r\n      if ($(&quot;#accordionZiarat&quot;).is(&quot;:visible&quot;)) {\r\n        $(&quot;#accordionZiarat&quot;).hide();\r\n      }\r\n    \r\n      \r\n      else if ($(&quot;#accordionZiarat&quot;).is(&quot;:hidden&quot;)) {\r\n        $(&quot;#accordionZiarat&quot;).show();\r\n      }\r\n    \r\n      else{\r\n    \r\n      }"},{"score":4,"body_markdown":"Using hidden selection you can match all hidden elements\r\n\r\n    $(&#39;element:hidden&#39;)\r\n\r\nUsing Visible selection you can match all visible elements\r\n\r\n    $(&#39;element:visible&#39;)"}],"score":7953}