{"body":"How can I generate random whole numbers between two specified variables in JavaScript, e.g. `x = 4` and `y = 8` would output any of `4, 5, 6, 7, 8`?","title":"Generating random whole numbers in JavaScript in a specific range?","answers":[{"score":4073,"body_markdown":"There are some examples on the [Mozilla Developer Network][1] page:\r\n\r\n    /**\r\n     * Returns a random number between min (inclusive) and max (exclusive)\r\n     */\r\n    function getRandomArbitrary(min, max) {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n\r\n    /**\r\n     * Returns a random integer between min (inclusive) and max (inclusive).\r\n     * The value is no lower than min (or the next integer greater than min\r\n     * if min isn&#39;t an integer) and no greater than max (or the next integer\r\n     * lower than max if max isn&#39;t an integer).\r\n     * Using Math.round() will give you a non-uniform distribution!\r\n     */\r\n    function getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n&lt;hr&gt;\r\n\r\nHere&#39;s the logic behind it. It&#39;s a simple rule of three:\r\n\r\n`Math.random()` returns a `Number` between 0 (inclusive) and 1 (exclusive). So we have an interval like this:\r\n\r\n    [0 .................................... 1)\r\n\r\nNow, we&#39;d like a number between `min` (inclusive) and `max` (exclusive):\r\n\r\n    [0 .................................... 1)\r\n    [min .................................. max)\r\n\r\nWe can use the `Math.random` to get the correspondent in the [min, max) interval. But, first we should factor a little bit the problem by subtracting `min` from the second interval:\r\n\r\n    [0 .................................... 1)\r\n    [min - min ............................ max - min)\r\n\r\nThis gives:\r\n\r\n    [0 .................................... 1)\r\n    [0 .................................... max - min)\r\n\r\nWe may now apply `Math.random` and then calculate the correspondent. Let&#39;s choose a random number:\r\n\r\n\r\n                    Math.random()\r\n                        |\r\n    [0 .................................... 1)\r\n    [0 .................................... max - min)\r\n                        |\r\n                        x (what we need)\r\n\r\nSo, in order to find `x`, we would do:\r\n\r\n    x = Math.random() * (max - min);\r\n\r\nDon&#39;t forget to add `min` back, so that we get a number in the [min, max) interval:\r\n\r\n    x = Math.random() * (max - min) + min;\r\n\r\nThat was the first function from MDN. The second one, returns an integer between `min` and `max`, both inclusive.\r\n\r\nNow for getting integers, you could use `round`, `ceil` or `floor`.\r\n\r\nYou could use `Math.round(Math.random() * (max - min)) + min`, this however gives a non-even distribution. Both, `min` and `max` only have approximately half the chance to roll:\r\n\r\n    min...min+0.5...min+1...min+1.5   ...    max-0.5....max\r\n    └───┬───┘└────────┬───────┘└───── ... ─────┘└───┬──┘   ← Math.round()\r\n       min          min+1                          max\r\n\r\nWith `max` excluded from the interval, it has an even less chance to roll than `min`.\r\n\r\nWith `Math.floor(Math.random() * (max - min +1)) + min` you have a perfectly even distribution.\r\n\r\n    min.... min+1... min+2 ... max-1... max.... max+1 (is excluded from interval)\r\n    |        |        |         |        |        |\r\n    └───┬───┘└───┬───┘└─── ... ┘└───┬───┘└───┬───┘   ← Math.floor()\r\n       min     min+1               max-1    max\r\n\r\nYou can&#39;t use `ceil()` and `-1` in that equation because `max` now had a slightly less chance to roll, but you can roll the (unwanted) `min-1` result too.\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"},{"score":59,"body_markdown":"    function getRandomizer(bottom, top) {\r\n        return function() {\r\n            return Math.floor( Math.random() * ( 1 + top - bottom ) ) + bottom;\r\n        }\r\n    }\r\n\r\nusage:\r\n\r\n    var rollDie = getRandomizer( 1, 6 );\r\n    \r\n    var results = &quot;&quot;\r\n    for ( var i = 0; i&lt;1000; i++ ) {\r\n        results += rollDie() + &quot; &quot;;    //make a string filled with 1000 random numbers in the range 1-6.\r\n    }\r\n\r\nbreakdown: \r\n\r\nWe are returning a function (borrowing from functional programming) that when called, will return a random integer between the the values `bottom` and `top`, inclusive. We say &#39;inclusive&#39; because we want to include both bottom and top in the range of numbers that can be returned. This way, `getRandomizer( 1, 6 )` will return either 1, 2, 3, 4, 5, or 6. \r\n\r\n(bottom is lower number, top is greater number)\r\n\r\n    Math.random() * ( 1 + top - bottom )\r\n\r\n`Math.random()` returns a random double between 0 and 1, and if we multiply it by one plus the difference between `top` and `bottom`, we&#39;ll get a double somewhere between `0` and `1+b-a`. \r\n\r\n    Math.floor( Math.random() * ( 1 + top - bottom ) )\r\n\r\n`Math.floor` rounds the number down to the nearest integer. So we now have all the integers between `0` and `top-bottom`. The 1 looks confusing, but it needs to be there because we are always rounding down, so the top number will never actually be reached without it. The random decimal we generate needs to be in the range `0` to `(1+top-bottom)` so we can round down and get an int in the range `0` to `top-bottom`\r\n\r\n    Math.floor( Math.random() * ( 1 + top - bottom ) ) + bottom\r\n\r\nThe code in the previous example gave us an integer in the range `0` and `top-bottom`, so all we need to do now is add `bottom` to that result to get an integer in the range `bottom` and `top` inclusive. :D\r\n\r\n--------\r\n\r\nNOTE: If you pass in a non-integer value or the greater number first you&#39;ll get undesirable behavior, but unless anyone requests it I am not going to delve into the argument checking code as its rather far from the intent of the original question. \r\n"},{"score":9,"body_markdown":"    function getRandomInt(lower, upper)\r\n    {\r\n    \t//to create an even sample distribution\r\n    \treturn Math.floor(lower + (Math.random() * (upper - lower + 1)));\r\n    \t\r\n    \t//to produce an uneven sample distribution\r\n    \t//return Math.round(lower + (Math.random() * (upper - lower)));\r\n    \t\r\n    \t//to exclude the max value from the possible values\r\n    \t//return Math.floor(lower + (Math.random() * (upper - lower)));\r\n    }\r\n\r\n\r\nTo test this function, and variations of this function, save the below HTML/JavaScript to a file and open with a browser.  The code will produce a *graph* showing the distribution of one million function calls.  The code will also record the edge cases, so if the the function produces a value greater than the max, or less than the min, you.will.know.about.it.\r\n\r\n    &lt;html&gt;\r\n    \t&lt;head&gt;\r\n    \t\t&lt;script type=&quot;text/javascript&quot;&gt;\r\n    \t\tfunction getRandomInt(lower, upper)\r\n    \t\t{\r\n    \t\t\t//to create an even sample distribution\r\n    \t\t\treturn Math.floor(lower + (Math.random() * (upper - lower + 1)));\r\n    \t\t\t\r\n    \t\t\t//to produce an uneven sample distribution\r\n    \t\t\t//return Math.round(lower + (Math.random() * (upper - lower)));\r\n    \t\t\t\r\n    \t\t\t//to exclude the max value from the possible values\r\n    \t\t\t//return Math.floor(lower + (Math.random() * (upper - lower)));\r\n    \t\t}\r\n    \r\n    \t\tvar min = -5;\r\n    \t\tvar max = 5;\r\n    \t\t\r\n    \t\tvar array = new Array();\r\n    \r\n    \t\tfor(var i = 0; i &lt;= (max - min) + 2; i++) {\r\n    \t\t  array.push(0);\r\n    \t\t}\r\n    \r\n    \t\tfor(var i = 0; i &lt; 1000000; i++) {\r\n    \t\t\tvar random = getRandomInt(min, max);\r\n    \t\t\tarray[random - min + 1]++;\r\n    \t\t}\r\n    \r\n    \t\tvar maxSample = 0;\r\n    \t\tfor(var i = 0; i &lt; max - min; i++) {\r\n    \t\t\tmaxSample = Math.max(maxSample, array[i]);\r\n    \t\t}\r\n    \t\t\r\n    \t\t//create a bar graph to show the sample distribution\r\n    \t\tvar maxHeight = 500;\r\n    \t\tfor(var i = 0; i &lt;= (max - min) + 2; i++) {\r\n    \t\t\tvar sampleHeight = (array[i]/maxSample) * maxHeight;\r\n    \t\t\t\r\n    \t\t\tdocument.write(&#39;&lt;span style=&quot;display:inline-block;color:&#39;+(sampleHeight == 0 ? &#39;black&#39; : &#39;white&#39;)+&#39;;background-color:black;height:&#39;+sampleHeight+&#39;px&quot;&gt;&amp;nbsp;[&#39; + (i + min - 1) + &#39;]:&amp;nbsp;&#39;+array[i]+&#39;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&#39;);\r\n    \t\t}\r\n    \t\tdocument.write(&#39;&lt;hr/&gt;&#39;);\r\n    \t\t&lt;/script&gt;\r\n    \t&lt;/head&gt;\r\n    \t&lt;body&gt;\r\n    \t\t\r\n    \t&lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\n"},{"score":551,"body_markdown":"    var randomnumber = Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;"},{"score":11,"body_markdown":"For a random integer with a range, try:\r\n\r\n\tfunction random(minimum, maximum) {\r\n\t  var bool = true;\r\n\t  \r\n\t  while (bool) {\r\n\t    var number = (Math.floor(Math.random() * maximum + 1) + minimum);\r\n\t    if (number &gt; 20) {\r\n\t      bool = true;\r\n\t    } else {\r\n\t      bool = false;\r\n\t    }\r\n\t  }\r\n\r\n\t  return number;\r\n\t}\r\n\r\n\r\n"},{"score":35,"body_markdown":"    function randomRange(min, max) {\r\n      return ~~(Math.random() * (max - min + 1)) + min\r\n    }\r\n\r\nAlternative if you are using **[Underscore.js][1]** you can use\r\n\r\n    _.random(min, max)\r\n\r\n\r\n  [1]: http://underscorejs.org/#random"},{"score":11,"body_markdown":"After generating a random number using a computer program, it is still consider as a random number if the picked number is a part or the full one of the initial one. But if it was changed, then **mathematicians are not accept it as a random number and they can call it a biased number.** But if you are developing a program for a simple task, this will not be a case to consider. **But if you are developing a program to generate a random number for a valuable stuff such as lottery program, or gambling game, then your program will be rejected by the management if you are not consider about the above case.**\r\n\r\nSo for those kind of people, here is my suggestion:\r\n\r\nGenerate a random number using `Math.random()`.(say this `n`)\r\n\r\n    Now for [0,10) ==&gt;  n*10 (i.e. one digit) and for[10,100) ==&gt; n*100 (i.e. two digits) and so on. Here squire bracket indicates that boundary is inclusive and round bracket indicates boundary is exclusive.\r\n    Then remove the rest after the decimal point. (i.e. get floor) - using Math.floor(), this can be done.\r\n\r\nIf you know how to read random number table to pick a random number, you know above process(multiplying by 1, 10, 100 and so on) is not violates the one that I was mentioned at the beginning.( Because it changes only the place of the decimal point.)\r\n\r\nStudy the following example and develop it to your needs.\r\n\r\nIf you need a sample [0,9] then floor of n*10 is your answer and if need [0,99] then floor of n*100 is your answer and so on.\r\n\r\nNow let enter into your role:\r\n\r\nYou&#39;ve asked numbers among specific range. (In this case you are biased among that range. - By taking a number from [1,6] by roll a die, then you are biased into [1,6] but still it is a random if and only if die is unbiased.)\r\n\r\nSo consider your range ==&gt; [78, 247]\r\nnumber of elements of the range = 247 - 78 + 1 = 170; (since both the boundaries are inclusive.\r\n\r\n    /*Mthod 1:*/\r\n    \tvar i = 78, j = 247, k = 170, a = [], b = [], c, d, e, f, l = 0;\r\n        for(; i &lt;= j; i++){ a.push(i); }\r\n    \twhile(l &lt; 170){\r\n            c = Math.random()*100; c = Math.floor(c);\r\n            d = Math.random()*100; d = Math.floor(d);\r\n            b.push(a[c]); e = c + d;\r\n            if((b.length != k) &amp;&amp; (e &lt; k)){  b.push(a[e]); }\r\n    \t    l = b.length;\r\n        }\r\n        console.log(&#39;Method 1:&#39;);\r\n        console.log(b);\r\n    /*Method 2:*/\r\n    \r\n        var a, b, c, d = [], l = 0;\r\n        while(l &lt; 170){\r\n            a = Math.random()*100; a = Math.floor(a);\r\n            b = Math.random()*100; b = Math.floor(b);\r\n            c = a + b;\r\n            if(c &lt;= 247 || c &gt;= 78){ d.push(c); }else{ d.push(a); }\r\n    \t\tl = d.length;\r\n        }\r\n        console.log(&#39;Method 2:&#39;);\r\n        console.log(d);\r\n\r\nNote: In method one, first I created an array which contains numbers that you need and then randomly put them into another array.\r\nIn method two, generate numbers randomly and check those are in the range that you need. Then put it into an array. Here I generated two random numbers and used total of them to maximize the speed of the program by minimizing the failure rate that obtaining a useful number. However adding generated numbers will also give some biassness. So I would recommend my first method to generate random numbers within a specific range.\r\n\r\nIn both methods, your console will show the result.(Press f12 in Chrome to open the console)"},{"score":7,"body_markdown":"To get a random number say between 1 and 6, first do:\r\n\r\n        0.5 + (Math.random() * ((6 - 1) + 1))\r\n\r\nThis multiplies a random number by 6 and then adds 0.5 to it. Next round the number to a positive integer by doing:\r\n\r\n        Math.round(0.5 + (Math.random() * ((6 - 1) + 1))\r\n\r\nThis round the number to the nearest whole number.\r\n\r\nOr to make it more understandable do this:\r\n\r\n        var value = 0.5 + (Math.random() * ((6 - 1) + 1))\r\n        var roll = Math.round(value);\r\n        return roll;\r\n\r\nIn general the code for doing this using variables is:\r\n\r\n        var value = (Min - 0.5) + (Math.random() * ((Max - Min) + 1))\r\n        var roll = Math.round(value);\r\n        return roll;\r\n\r\nThe reason for taking away 0.5 from the minimum value is because using the minimum value alone would allow you to get an integer that was one more than your maximum value. By taking away 0.5 from the minimum value you are essentially preventing the maximum value from being rounded up.\r\n\r\n**Hope that helps.**"},{"score":6,"body_markdown":"Random whole number between lowest and highest:\r\n\r\n    function randomRange(l,h){\r\n      var range = (h-l);\r\n      var random = Math.floor(Math.random()*range);\r\n      if (random === 0){random+=1;}\r\n      return l+random;\r\n    }\r\n\r\nNot the most elegant solution.. but something quick."},{"score":35,"body_markdown":"Return a random number between 1 and 10:\r\n \r\n    Math.floor((Math.random()*10) + 1); \r\n\r\nReturn a random number between 1 and 100:\r\n \r\n    Math.floor((Math.random()*100) + 1)"},{"score":16,"body_markdown":"The other answers don&#39;t account for the perfectly reasonable parameters of `0` and `1`. Instead you should use the `round` **instead** of `ceil` or `floor`:\r\n\r\n    function randomNumber(minimum, maximum){\r\n        return Math.round( Math.random() * (maximum - minimum) + minimum);\r\n    }\r\n    \r\n    console.log(randomNumber(0,1));  # 0 1 1 0 1 0\r\n    console.log(randomNumber(5,6));  # 5 6 6 5 5 6\r\n    console.log(randomNumber(3,-1)); # 1 3 1 -1 -1 -1\r\n\r\n"},{"score":5,"body_markdown":"Here&#39;s what I use to generate random numbers.\r\n\r\n    function random(high,low) {\r\n        high++;\r\n        return Math.floor((Math.random())*(high-low))+low;\r\n    }\r\nWe do execute `high++` because` Math.random()` generates a random number between 0, (inclusive), and 1(exclusive) The one being excluded, means we must increase the high by one before executing any math. We then subtract low from high, giving us the highest number to generate - low, then +low, bringing high back to normal, and making the lowest number atleast low. then we return the resulting number\r\n\r\n`random(7,3)` could return `3,4,5,6, or 7`\r\n\r\n"},{"score":174,"body_markdown":"# [Math.random()][1]\n\nReturns an [integer random number][2] between min (**included**) and max (**included**):\n\n    function randomInteger(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\nOr [any random number][3] between min (**included**) and max (**not included**):\n\n    function randomNumber(min, max) {\n      return Math.random() * (max - min) + min;\n    }\n\nUseful examples (integers):\n\n    // 0 -&gt; 10\n    Math.floor(Math.random() * 11);\n\n    // 1 -&gt; 10\n    Math.floor(Math.random() * 10) + 1;\n\n    // 5 -&gt; 20\n    Math.floor(Math.random() * 16) + 5;\n\n    // -10 -&gt; (-2)\n    Math.floor(Math.random() * 9) - 10;\n\n** And always nice to be reminded (Mozilla):\n\n&gt; Math.random() does not provide cryptographically secure random\n&gt; numbers. Do not use them for anything related to security. Use the Web\n&gt; Crypto API instead, and more precisely the\n&gt; window.crypto.getRandomValues() method.\n\n\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values_inclusive\n  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_number_between_two_values"},{"score":7,"body_markdown":"Using following code you can generate array of random numbers, without repeating, in a given range.\r\n\r\n    function genRandomNumber(how_many_number,min,max) {\r\n                 \r\n                // parameters\r\n                // how_many_number : how many numbers you want to generate. For example it is 5.\r\n                // min(inclusive) : minimum/low value of a range. it must be any positive integer but less than max. i.e 4\r\n                // max(inclusive) : maximun value of a range. it must be any positive integer. i.e 50\r\n                // return type: array\r\n                \r\n                var random_number = [];\r\n                for (var i = 0; i &lt; how_many_number; i++) {\r\n                    var gen_num = parseInt((Math.random() * (max-min+1)) + min);\r\n                    do {\r\n                        var is_exist = random_number.indexOf(gen_num);\r\n                        if (is_exist &gt;= 0) {\r\n                            gen_num = parseInt((Math.random() * (max-min+1)) + min);\r\n                        }\r\n                        else {\r\n                            random_number.push(gen_num);\r\n                            is_exist = -2;\r\n                        }\r\n                    }\r\n                    while (is_exist &gt; -1);\r\n                }\r\n                document.getElementById(&#39;box&#39;).innerHTML = random_number;\r\n            }\r\n"},{"score":3,"body_markdown":"this is my take on a random number in a range, as in I wanted to get a random number within a range of base to exponent.  e.g. base = 10, exponent = 2, gives a random number from 0 to 100, ideally, and so on.\r\n\r\nif it helps use it, here it is:\r\n\r\n\r\n    // get random number within provided base + exponent\r\n    // by Goran Biljetina --&gt; 2012\r\n    \r\n    function isEmpty(value){\r\n        return (typeof value === &quot;undefined&quot; || value === null);\r\n    }\r\n    var numSeq = new Array();\r\n    function add(num,seq){\r\n        var toAdd = new Object();\r\n         toAdd.num = num;\r\n         toAdd.seq = seq;\r\n         numSeq[numSeq.length] = toAdd;\r\n    }\r\n    function fillNumSeq (num,seq){\r\n        var n;\r\n        for(i=0;i&lt;=seq;i++){\r\n            n = Math.pow(num,i);\r\n            add(n,i);\r\n        }\r\n    }\r\n    function getRandNum(base,exp){\r\n        if (isEmpty(base)){\r\n            console.log(&quot;Specify value for base parameter&quot;);\r\n        }\r\n        if (isEmpty(exp)){\r\n            console.log(&quot;Specify value for exponent parameter&quot;);\r\n        }\r\n        fillNumSeq(base,exp);\r\n        var emax;\r\n        var eseq;\r\n        var nseed;\r\n        var nspan;\r\n        emax = (numSeq.length);\r\n        eseq = Math.floor(Math.random()*emax)+1;\r\n        nseed = numSeq[eseq].num;\r\n        nspan = Math.floor((Math.random())*(Math.random()*nseed))+1;\r\n        return Math.floor(Math.random()*nspan)+1;\r\n    }\r\n    \r\n    console.log(getRandNum(10,20),numSeq);\r\n    //testing:\r\n    //getRandNum(-10,20);\r\n    //console.log(getRandNum(-10,20),numSeq);\r\n    //console.log(numSeq);\r\n\r\n"},{"score":4,"body_markdown":"        &lt;!DOCTYPE html&gt;\r\n    &lt;html&gt;\r\n    \t&lt;head&gt;\r\n    \t\t\t&lt;meta charset=&quot;utf-8&quot; /&gt;\r\n    \t&lt;/head&gt;\r\n    \t&lt;body&gt;\r\n    \t\t&lt;script&gt;\r\n    \t\t\t/*\r\n    \t\t\t\t\r\n    \t\t\t\tassuming that window.crypto.getRandomValues is available\r\n    \t\t\t\tthe real range would be fron 0 to 1,998 instead of 0 to 2,000\r\n    \t\t\t\tSee javascript documentation for explanation\r\n    \t\t\t\thttps://developer.mozilla.org/en-US/docs/Web/API/RandomSource/getRandomValues\r\n    \t\t\t*/\r\n    \t\t\tvar array = new Uint8Array(2);\r\n    \t\t\twindow.crypto.getRandomValues(array);\r\n    \t\t\tconsole.log(array[0] + array[1]);\r\n    \t\t\t\r\n    \t\t&lt;/script&gt;\r\n    \t&lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\nUint8Array create a array filled with a number up to 3 digits which would be a maximum of 999. This code is very short."},{"score":7,"body_markdown":"I know this question is already answered but my answer could help someone.\r\n\r\nI found this simple method on W3Schools:\r\n\r\n    Math.floor((Math.random() * max) + min);\r\n\r\nHope this would help someone."},{"score":0,"body_markdown":"This can handle generating upto 20 digit UNIQUE random number\r\n\r\n**JS**\r\n\r\n    var generatedNumbers = [];\r\n    \r\n    function generateRandomNumber(precision) { // precision --&gt; number precision in integer \r\n        if (precision &lt;= 20) {\r\n            var randomNum = Math.round(Math.random().toFixed(precision) * Math.pow(10, precision));\r\n            if (generatedNumbers.indexOf(randomNum) &gt; -1) {\r\n                if (generatedNumbers.length == Math.pow(10, precision))\r\n                    return &quot;Generated all values with this precision&quot;;\r\n    \t\t\t\treturn generateRandomNumber(precision);\r\n            } else {\r\n                generatedNumbers.push(randomNum);\r\n                return randomNum;\r\n            }\r\n        } else\r\n    \t   return &quot;Number Precision shoould not exceed 20&quot;;\r\n    }\r\n    generateRandomNumber(1);\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n[JsFiddle][2]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/Bb1bo.jpg\r\n  [2]: http://jsfiddle.net/Nofiden/6ae8up1k/2/"},{"score":13,"body_markdown":"Here is the MS DotNet Implementation of Random class in javascript-\r\n\r\n    var Random = (function () {\r\n    function Random(Seed) {\r\n        if (!Seed) {\r\n            Seed = this.milliseconds();\r\n        }\r\n        this.SeedArray = [];\r\n        for (var i = 0; i &lt; 56; i++)\r\n            this.SeedArray.push(0);\r\n        var num = (Seed == -2147483648) ? 2147483647 : Math.abs(Seed);\r\n        var num2 = 161803398 - num;\r\n        this.SeedArray[55] = num2;\r\n        var num3 = 1;\r\n        for (var i_1 = 1; i_1 &lt; 55; i_1++) {\r\n            var num4 = 21 * i_1 % 55;\r\n            this.SeedArray[num4] = num3;\r\n            num3 = num2 - num3;\r\n            if (num3 &lt; 0) {\r\n                num3 += 2147483647;\r\n            }\r\n            num2 = this.SeedArray[num4];\r\n        }\r\n        for (var j = 1; j &lt; 5; j++) {\r\n            for (var k = 1; k &lt; 56; k++) {\r\n                this.SeedArray[k] -= this.SeedArray[1 + (k + 30) % 55];\r\n                if (this.SeedArray[k] &lt; 0) {\r\n                    this.SeedArray[k] += 2147483647;\r\n                }\r\n            }\r\n        }\r\n        this.inext = 0;\r\n        this.inextp = 21;\r\n        Seed = 1;\r\n    }\r\n    Random.prototype.milliseconds = function () {\r\n        var str = new Date().valueOf().toString();\r\n        return parseInt(str.substr(str.length - 6));\r\n    };\r\n    Random.prototype.InternalSample = function () {\r\n        var num = this.inext;\r\n        var num2 = this.inextp;\r\n        if (++num &gt;= 56) {\r\n            num = 1;\r\n        }\r\n        if (++num2 &gt;= 56) {\r\n            num2 = 1;\r\n        }\r\n        var num3 = this.SeedArray[num] - this.SeedArray[num2];\r\n        if (num3 == 2147483647) {\r\n            num3--;\r\n        }\r\n        if (num3 &lt; 0) {\r\n            num3 += 2147483647;\r\n        }\r\n        this.SeedArray[num] = num3;\r\n        this.inext = num;\r\n        this.inextp = num2;\r\n        return num3;\r\n    };\r\n    Random.prototype.Sample = function () {\r\n        return this.InternalSample() * 4.6566128752457969E-10;\r\n    };\r\n    Random.prototype.GetSampleForLargeRange = function () {\r\n        var num = this.InternalSample();\r\n        var flag = this.InternalSample() % 2 == 0;\r\n        if (flag) {\r\n            num = -num;\r\n        }\r\n        var num2 = num;\r\n        num2 += 2147483646.0;\r\n        return num2 / 4294967293.0;\r\n    };\r\n    Random.prototype.Next = function (minValue, maxValue) {\r\n        if (!minValue &amp;&amp; !maxValue)\r\n            return this.InternalSample();\r\n        var num = maxValue - minValue;\r\n        if (num &lt;= 2147483647) {\r\n            return parseInt((this.Sample() * num + minValue).toFixed(0));\r\n        }\r\n        return this.GetSampleForLargeRange() * num + minValue;\r\n    };\r\n    Random.prototype.NextDouble = function () {\r\n        return this.Sample();\r\n    };\r\n    Random.prototype.NextBytes = function (buffer) {\r\n        for (var i = 0; i &lt; buffer.length; i++) {\r\n            buffer[i] = this.InternalSample() % 256;\r\n        }\r\n    };\r\n    return Random;\r\n    }());\r\n\r\n**Use:**\r\n\r\n            var r = new Random();\r\n            var nextInt = r.Next(1, 100); //returns an integer between range\r\n            var nextDbl = r.NextDouble(); //returns a random decimal\r\n\r\n"},{"score":5,"body_markdown":"Here is an example of a javascript function that can generate a random number of any specified length **without using Math.random():**\r\n    \r\n\r\n        function genRandom(length)\r\n        {\r\n         const t1 = new Date().getMilliseconds();\r\n         var min = &quot;1&quot;,max = &quot;9&quot;;\r\n         var result;\r\n         var numLength = length;\r\n         if (numLength != 0)\r\n         {\r\n            for (var i = 1; i &lt; numLength; i++)\r\n            {\r\n               min = min.toString() + &quot;0&quot;;\r\n               max = max.toString() + &quot;9&quot;;\r\n            }\r\n         } \r\n         else\r\n         {\r\n            min = 0;\r\n            max = 0;\r\n            return; \r\n         }\r\n    \r\n          for (var i = min; i &lt;= max; i++)\r\n          {\r\n               //Empty Loop\r\n          }\r\n        \r\n          const t2 = new Date().getMilliseconds();\r\n          console.log(t2);\r\n          result = ((max - min)*t1)/t2;\r\n          console.log(result);\r\n          return result;\r\n        }"},{"score":23,"body_markdown":"If you need variable between 0 and max you can use:\r\n\r\n    Math.floor(Math.random() *  max);\r\n\r\n "},{"score":0,"body_markdown":"/*\r\n Write a function called `randUpTo` that accepts a number and returns a \r\n random whole number between 0 and that number?\r\n*/\r\n\r\n    var randUpTo = function(num) {\r\n        return Math.floor(Math.random() * (num - 1) + 0);\r\n    };\r\n\r\n/*\r\n Write a function called `randBetween` that accepts two numbers \r\n representing a range and returns a random whole number between those two \r\n numbers.\r\n*/\r\n\r\n    var randBetween = function (min, max) {\r\n        return Math.floor(Math.random() * (max - min - 1)) + min;\r\n    };\r\n\r\n/*\r\n Write a function called `randFromTill` that accepts two numbers \r\n representing a range and returns a random number between min (inclusive) \r\n and max (exclusive).\r\n*/\r\n\r\n    var randFromTill = function (min, max) {\r\n        return Math.random() * (max - min) + min;\r\n    };\r\n\r\n/*\r\n Write a function called `randFromTo` that accepts two numbers \r\n representing a range and returns a random integer between min (inclusive) \r\n and max (inclusive)\r\n*/\r\n\r\n    var randFromTo = function (min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    };\r\n\r\n"},{"score":15,"body_markdown":"**Use this function to get random numbers between given range**\r\n\r\n\r\n    function rnd(min,max){\r\n        return Math.floor(Math.random()*(max-min+1)+min );\r\n    }"},{"score":5,"body_markdown":"`Math.random()` is fast and suitable for many purposes, but it&#39;s not appropriate if you need cryptographically-secure values (it&#39;s not secure), or if you need integers from a completely uniform unbiased distribution (the multiplication approach used in others answers produces certain values slightly more often than others).\r\n\r\nIn such cases, we can use `crypto.getRandomValues()` to generate secure integers, and reject any generated values that we can&#39;t map uniformly into the target range. This will be slower, but it shouldn&#39;t be significant unless you&#39;re generating extremely large numbers of values.\r\n\r\nTo clarify the biased distribution concern, consider the case where we want to generate a value between 1 and 5, but we have a random number generator that produces values between 1 and 16 (a 4-bit value). We want to have the same number of generated values mapping to each output value, but 16 does not evenly divide by 5: it leaves a remainder of 1. So we need to reject 1 of the possible generated values, and only continue when we get one of the 15 lesser values that can be uniformly mapped into our target range. Our behaviour could look like this pseudocode:\r\n\r\n```none\r\nGenerate a 4-bit integer in the range 1-16.\r\nIf we generated  1,  6, or 11 then output 1.\r\nIf we generated  2,  7, or 12 then output 2.\r\nIf we generated  3,  8, or 13 then output 3.\r\nIf we generated  4,  9, or 14 then output 4.\r\nIf we generated  5, 10, or 15 then output 5.\r\nIf we generated 16 then reject it and try again.\r\n```\r\n\r\nThe following code uses similar logic, but generates a 32-bit integer instead, because that&#39;s the largest common integer size that can be represented by JavaScript&#39;s standard `number` type. (This could be modified to use `BigInt`s if you need a larger range.) Regardless of the chosen range, the fraction of generated values that are rejected will always be less than 0.5, so the expected number of rejections will always be less than 1.0 and usually close to 0.0; you don&#39;t need to worry about it looping forever.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const randomInteger = (min, max) =&gt; {\r\n      const range = max - min;\r\n      const maxGeneratedValue = 0xFFFFFFFF;\r\n      const possibleResultValues = range + 1;\r\n      const possibleGeneratedValues = maxGeneratedValue + 1;\r\n      const remainder = possibleGeneratedValues % possibleResultValues;\r\n      const maxUnbiased = maxGeneratedValue - remainder;\r\n\r\n      if (!Number.isInteger(min) || !Number.isInteger(max) ||\r\n           max &gt; Number.MAX_SAFE_INTEGER || min &lt; Number.MIN_SAFE_INTEGER) {\r\n        throw new Error(&#39;Arguments must be safe integers.&#39;);\r\n      } else if (range &gt; maxGeneratedValue) {\r\n        throw new Error(`Range of ${range} (from ${min} to ${max}) &gt; ${maxGeneratedValue}.`);\r\n      } else if (max &lt; min) {\r\n        throw new Error(`max (${max}) must be &gt;= min (${min}).`);\r\n      } else if (min === max) {\r\n        return min;\r\n      } \r\n\r\n      let generated;\r\n      do {\r\n        generated = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } while (generated &gt; maxUnbiased);\r\n\r\n      return min + (generated % possibleResultValues);\r\n    };\r\n\r\n    console.log(randomInteger(-8, 8));          // -2\r\n    console.log(randomInteger(0, 0));           // 0\r\n    console.log(randomInteger(0, 0xFFFFFFFF));  // 944450079\r\n    console.log(randomInteger(-1, 0xFFFFFFFF));\r\n    // Error: Range of 4294967296 covering -1 to 4294967295 is &gt; 4294967295.\r\n    console.log(new Array(12).fill().map(n =&gt; randomInteger(8, 12)));\r\n    // [11, 8, 8, 11, 10, 8, 8, 12, 12, 12, 9, 9]\r\n\r\n&lt;!-- end snippet --&gt;"},{"score":0,"body_markdown":"I made this function which takes into account options like min, max, exclude (a list of ints to exclude), and seed (in case you want a seeded random generator).\r\n\r\n    get_random_int = function(args={})\r\n    {\r\n        let def_args =\r\n        {\r\n            min: 0,\r\n            max: 1,\r\n            exclude: false,\r\n            seed: Math.random\r\n        }\r\n    \r\n        args = Object.assign(def_args, args)\r\n    \r\n        let num = Math.floor(args.seed() * (args.max - args.min + 1) + args.min)\r\n    \r\n        if(args.exclude)\r\n        {\r\n            let diff = args.max - args.min\r\n            let n = num\r\n    \r\n            for(let i=0; i&lt;diff*2; i++)\r\n            {\r\n                if(args.exclude.includes(n))\r\n                {\r\n                    if(n + 1 &lt;= args.max)\r\n                    {\r\n                        n += 1\r\n                    }\r\n    \r\n                    else\r\n                    {\r\n                        n = args.min\r\n                    }\r\n                }\r\n    \r\n                else\r\n                {\r\n                    num = n\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    \r\n        return num\r\n    }\r\n\r\n\r\nIt can be used like:\r\n\r\n    let n = get_random_int\r\n    (\r\n        {\r\n            min: 0,\r\n            max: some_list.length - 1,\r\n            exclude: [3, 6, 5],\r\n            seed: my_seed_function\r\n        }\r\n    )\r\n\r\nOr more simply:\r\n\r\n    let n = get_random_int\r\n    (\r\n        {\r\n            min: 0,\r\n            max: some_list.length - 1\r\n        }\r\n    )\r\n\r\nThen you can do:\r\n\r\n    let item = some_list[n]\r\n\r\nGist: https://gist.github.com/madprops/757deb000bdec25776d5036dae58ee6e"},{"score":1,"body_markdown":"You can you this code snippet,\r\n\r\n    let randomNumber = function(first,second){\r\n    let number = Math.floor(Math.random()*Math.floor(second));\r\n    while(number&lt;first){\r\n        \r\n        number = Math.floor(Math.random()*Math.floor(second));\r\n    }\r\n    return number;\r\n    }"},{"score":0,"body_markdown":"- random(min,max) generates a random number between min (inclusive) and max (exclusive)\r\n- Math.floor rounds a number down to the nearest integer\r\n\r\n        function generateRandomInteger (min, max) { \r\n            return Math.floor(random(min,max)) \r\n        }`\r\n\r\nSo to generate a random integer between 4 and 8 inclusive, call the above function with the following arguments:\r\n\r\n    generateRandomInteger (4,9)"},{"score":10,"body_markdown":"Crypto-Strong\r\n-\r\nTo get [crypto-strong][1] random integer number in ragne [x,y] try\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let cs= (x,y)=&gt;x+(y-x+1)*crypto.getRandomValues(new Uint32Array(1))[0]/2**32|0\r\n\r\n    console.log(cs(4,8))\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues"},{"score":2,"body_markdown":"[Ionuț G. Stan][1] wrote a great answer but it was a bit too complex for me to grasp. So, I found an even simpler explanation of the same concepts at https://teamtreehouse.com/community/mathfloor-mathrandom-max-min-1-min-explanation by Jason Anello.\r\n\r\n**NOTE:** The only important thing you should know before reading Jason&#39;s explanation is a definition of &quot;truncate&quot;. He uses that term when describing `Math.floor()`. Oxford dictionary defines &quot;truncate&quot; as:\r\n\r\n&gt; Shorten (something) by cutting off the top or end.\r\n\r\n\r\n  [1]: https://stackoverflow.com/users/58808/ionu%C8%9B-g-stan"},{"score":1,"body_markdown":"My method of generating random number between 0 and n, where n &lt;= 10 (n excluded):\r\n\r\n    Math.floor((Math.random() * 10) % n)"},{"score":0,"body_markdown":"For best performance, you can simply use:\r\n\r\n    var r = (Math.random() * (maximum - minimum + 1) ) &lt;&lt; 0\r\n\r\n"},{"score":0,"body_markdown":"# Problems with the accepted answer\r\n\r\nIt&#39;s worth noting that the accepted answer does not properly handle cases where min is greater than max. Here&#39;s an example of that:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    min = Math.ceil(2);\r\n    max = Math.floor(1);\r\n    for(var i = 0; i &lt; 25; i++) {\r\n      console.log(Math.floor(Math.random() * (max - min + 1)) + min);\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIn addition, it&#39;s a bit wordy and unclear to read if you&#39;re unfamiliar with this little algorithm.\r\n\r\n# Why is Randojs a better solution?\r\n\r\nRandojs handles cases where min is greater than max automatically (and it&#39;s cryptographically secure):\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    for(var i = 0; i &lt; 25; i++) console.log(rando(2, 1));\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://randojs.com/1.0.0.js&quot;&gt;&lt;/script&gt;\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIt also handles negatives, zeros, and everything else you&#39;d expect. If you need to do floats or use other variable types, there are options for that as well, but I won&#39;t talk about them here. They&#39;re on the [site][1] so you can delve deeper there if needed. The final reason is pretty obvious. Stylistically, it&#39;s is much cleaner and easier to read.\r\n\r\n-----------------------------------------\r\n\r\n# TL;DR. Just give me the solution...\r\n[randojs.com][1] makes this and a ton of other common randomness stuff robust, reliable, as simple/readable as this:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log(rando(20, 30));\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://randojs.com/1.0.0.js&quot;&gt;&lt;/script&gt;\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: https://randojs.com"},{"score":0,"body_markdown":"```\r\n// Example\r\nfunction ourRandomRange(ourMin, ourMax) {\r\n    return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;\r\n}\r\n\r\nourRandomRange(1, 9);\r\n\r\n// Only change code below this line.\r\nfunction randomRange(myMin, myMax) {\r\n    var a = Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;\r\n    return a; // Change this line\r\n}\r\n\r\n// Change these values to test your function\r\nvar myRandom = randomRange(5, 15);\r\n```"},{"score":11,"body_markdown":"All these solution are using way too much firepower, you only need to call one function: Math.random();\r\n \r\n\r\n```Math.random() * max | 0;```\r\n\r\nthis returns a random int between 0(inclusive) and max (non-inclusive):"}],"score":2078}