{"body":"Is there a way to empty an array and if so possibly with `.remove()`?\r\n\r\nFor instance, \r\n\r\n    A = [1,2,3,4];\r\n\r\nHow can I empty that?\r\n","title":"How do I empty an array in JavaScript?","answers":[{"score":4652,"body_markdown":"Ways to clear an existing array `A`:\r\n\r\n**Method 1**\r\n\r\n(this was my original answer to the question)\r\n\r\n    A = [];\r\n\r\nThis code will set the variable `A` to a new empty array. This is perfect if you don&#39;t have **references to the original array `A`** anywhere else because this actually creates a brand new (empty) array. You should be careful with this method because if you have referenced this array from another variable or property, the original array will remain unchanged. Only use this if you only reference the array by its original variable `A`.\r\n\r\nThis is also the fastest solution.\r\n\r\nThis code sample shows the issue you can encounter when using this method:\r\n\r\n    var arr1 = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;];\r\n    var arr2 = arr1;  // Reference arr1 by another variable \r\n    arr1 = [];\r\n    console.log(arr2); // Output [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;]\r\n\r\n**Method 2** (as [suggested][1] by [Matthew Crumley][2])\r\n\r\n    A.length = 0\r\n\r\nThis will clear the existing array by setting its length to 0. Some have argued that this may not work in all implementations of JavaScript, but it turns out that this is not the case. It also works when using &quot;strict mode&quot; in ECMAScript 5 because the length property of an array is a read/write property.\r\n\r\n**Method 3** (as [suggested][3] by [Anthony][4])\r\n\r\n    A.splice(0,A.length)\r\n\r\nUsing `.splice()` will work perfectly, but since the `.splice()` function will return an array with all the removed items, it will actually return a copy of the original array. Benchmarks suggest that this has no effect on performance whatsoever.\r\n\r\n**Method 4** (as [suggested][5] by [tanguy_k][6])\r\n\r\n    while(A.length &gt; 0) {\r\n        A.pop();\r\n    }\r\n\r\nThis solution is not very succinct, and it is also the slowest solution, contrary to earlier benchmarks referenced in the original answer.\r\n\r\n**Performance**\r\n\r\nOf all the methods of clearing an ***existing array***, methods 2 and 3 are very similar in performance and are a lot faster than method 4. See this [benchmark][7].\r\n\r\nAs pointed out by [Diadistis][8] in their [answer][9] below, the original benchmarks that were used to determine the performance of the four methods described above were flawed. The original benchmark reused the cleared array so the second iteration was clearing an array that was already empty.\r\n\r\nThe following benchmark fixes this flaw: [http://jsben.ch/#/hyj65][7]. It clearly shows that methods #2 (length property) and #3 (splice) are the fastest (not counting method #1 which doesn&#39;t change the original array).\r\n\r\n&lt;hr/&gt;\r\n\r\nThis has been a hot topic and the cause of a lot of controversy. There are actually many correct answers and because this answer has been marked as the accepted answer for a very long time, I will include all of the methods here. If you vote for this answer, please upvote the other answers that I have referenced as well.\r\n\r\n  [1]: https://stackoverflow.com/a/1234337/113570\r\n  [2]: https://stackoverflow.com/users/2214/matthew-crumley\r\n  [3]: https://stackoverflow.com/a/8134354/113570\r\n  [4]: https://stackoverflow.com/users/1047275/anthony\r\n  [5]: https://stackoverflow.com/a/17306971/113570\r\n  [6]: https://stackoverflow.com/users/990356/tanguy-k\r\n  [7]: http://jsben.ch/#/hyj65\r\n  [8]: https://stackoverflow.com/users/47401/diadistis\r\n  [9]: https://stackoverflow.com/a/28548360/113570\r\n"},{"score":2504,"body_markdown":"If you need to keep the original array because you have other references to it that should be updated too, you can clear it without creating a new array by setting its length to zero:\r\n\r\n    A.length = 0;"},{"score":225,"body_markdown":"A more cross-browser friendly and more optimal solution will be to use the `splice` method to empty the content of the array A as below:\r\n\r\n`A.splice(0, A.length);`"},{"score":36,"body_markdown":"You can add this to your JavaScript file to allow your arrays to be &quot;cleared&quot;:\r\n\r\n    Array.prototype.clear = function() {\r\n        this.splice(0, this.length);\r\n    };\r\n\r\nThen you can use it like this:\r\n\r\n    var list = [1, 2, 3];\r\n    list.clear();\r\n\r\nOr if you want to be sure you don&#39;t destroy something:\r\n\r\n    if (!Array.prototype.clear) {\r\n        Array.prototype.clear = function() {\r\n           this.splice(0, this.length);\r\n        };\r\n    }\r\n\r\nLots of people think you shouldn&#39;t modify native objects (like Array), and I&#39;m inclined to agree. Please use caution in deciding how to handle this.\r\n    "},{"score":15,"body_markdown":"    Array.prototype.clear = function() {\r\n        this.length = 0;\r\n    };\r\n\r\nAnd call it: `array.clear();`"},{"score":294,"body_markdown":"&lt;s&gt;Here the fastest working implementation&lt;/s&gt; while **keeping the same array** (&quot;mutable&quot;):\r\n\r\n    function clearArray(array) {\r\n      while (array.length) {\r\n        array.pop();\r\n      }\r\n    }\r\n\r\nFYI it cannot be simplified to `while (array.pop())`: the tests will fail.\r\n\r\nFYI [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear) and [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear) define `clear()`, it would have seem logical to have `clear()` for [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) too.\r\n\r\nTypeScript version:\r\n\r\n    function clearArray&lt;T&gt;(array: T[]) {\r\n      while (array.length) {\r\n        array.pop();\r\n      }\r\n    }\r\n\r\nThe corresponding tests:\r\n\r\n    describe(&#39;clearArray()&#39;, () =&gt; {\r\n      test(&#39;clear regular array&#39;, () =&gt; {\r\n        const array = [1, 2, 3, 4, 5];\r\n        clearArray(array);\r\n        expect(array.length).toEqual(0);\r\n        expect(array[0]).toEqual(undefined);\r\n        expect(array[4]).toEqual(undefined);\r\n      });\r\n\r\n      test(&#39;clear array that contains undefined and null&#39;, () =&gt; {\r\n        const array = [1, undefined, 3, null, 5];\r\n        clearArray(array);\r\n        expect(array.length).toEqual(0);\r\n        expect(array[0]).toEqual(undefined);\r\n        expect(array[4]).toEqual(undefined);\r\n      });\r\n    });\r\n\r\nHere the updated jsPerf: &lt;s&gt;http://jsperf.com/array-destroy/32&lt;/s&gt; http://jsperf.com/array-destroy/152"},{"score":8,"body_markdown":"Use a modified version of [Jan][1]&#39;s initial suggestion:\r\n\r\n    var originalLength = A.length;\r\n    for (var i = originalLength; i &gt; 0; i--) {\r\n         A.pop();\r\n    }\r\n\r\n  [1]: https://stackoverflow.com/users/2039571/jan\r\n\r\nTerser:\r\n\r\n```\r\nfor (let i = A.length; i &gt; 0;A.pop(),i--) {}\r\n```\r\n\r\nOr here&#39;s another take:\r\n\r\n```\r\nwhile(!A[Symbol.iterator]().next().done)A.shift()\r\n```\r\n"},{"score":15,"body_markdown":"In case you are interested in the memory allocation, you may compare each approach using something like [this jsfiddle](http://jsfiddle.net/k9KGU/) in conjunction with chrome dev tools&#39; timeline tab. You will want to use the trash bin icon at the bottom to force a garbage collection after &#39;clearing&#39; the array. This should give you a more definite answer for the browser of your choice. A lot of answers here are old and I wouldn&#39;t rely on them but rather test as in @tanguy_k&#39;s answer above.\r\n\r\n_(for an intro to the aforementioned tab you can check out [here](http://addyosmani.com/blog/taming-the-unicorn-easing-javascript-memory-profiling-in-devtools/))_\r\n\r\nStackoverflow forces me to copy the jsfiddle so here it is:\r\n\r\n    &lt;html&gt;\r\n    &lt;script&gt;\r\n    var size = 1000*100\r\n    window.onload = function() {\r\n      document.getElementById(&quot;quantifier&quot;).value = size\r\n    }\r\n    \r\n    function scaffold()\r\n    {\r\n      console.log(&quot;processing Scaffold...&quot;);\r\n      a = new Array\r\n    }\r\n    function start()\r\n    {\r\n      size = document.getElementById(&quot;quantifier&quot;).value\r\n      console.log(&quot;Starting... quantifier is &quot; + size);\r\n      console.log(&quot;starting test&quot;)\r\n      for (i=0; i&lt;size; i++){\r\n        a[i]=&quot;something&quot;\r\n      }\r\n      console.log(&quot;done...&quot;)\r\n    }\r\n    \r\n    function tearDown()\r\n    {\r\n      console.log(&quot;processing teardown&quot;);\r\n      a.length=0\r\n    }\r\n    \r\n    &lt;/script&gt;\r\n    &lt;body&gt;\r\n    \t&lt;span style=&quot;color:green;&quot;&gt;Quantifier:&lt;/span&gt;\r\n    \t&lt;input id=&quot;quantifier&quot; style=&quot;color:green;&quot; type=&quot;text&quot;&gt;&lt;/input&gt;\r\n    \t&lt;button onclick=&quot;scaffold()&quot;&gt;Scaffold&lt;/button&gt;\r\n    \t&lt;button onclick=&quot;start()&quot;&gt;Start&lt;/button&gt;\r\n    \t&lt;button onclick=&quot;tearDown()&quot;&gt;Clean&lt;/button&gt;\r\n    \t&lt;br/&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\nAnd you should take note that it may depend on the type of the array elements, as javascript manages strings differently than other primitive types, not to mention arrays of objects. The type may affect what happens."},{"score":12,"body_markdown":"`A.splice(0);`\r\n\r\nI just did this on some code I am working on.  It cleared the array."},{"score":63,"body_markdown":"Performance test:\r\n\r\nhttp://jsperf.com/array-clear-methods/3\r\n\r\n    a = []; // 37% slower\r\n    a.length = 0; // 89% slower\r\n    a.splice(0, a.length)  // 97% slower\r\n    while (a.length &gt; 0) {\r\n        a.pop();\r\n    } // Fastest\r\n"},{"score":14,"body_markdown":"If you are using \r\n\r\n    a = []; \r\n\r\nThen you are assigning new array reference to a, if reference in a is already assigned to any other variable, then it will not empty that array too and hence garbage collector will not collect that memory.\r\n\r\nFor ex. \r\n\r\n    var a=[1,2,3];\r\n    var b=a;\r\n    a=[];\r\n    console.log(b);// It will print [1,2,3];\r\n\r\n\r\nor\r\n\r\n    a.length = 0;\r\n\r\nWhen we specify `a.length`, we are just resetting boundaries of the array and memory for rest array elements will be connected by garbage collector. \r\n\r\n\r\nInstead of these two solutions are better.\r\n\r\n    a.splice(0,a.length)\r\nand\r\n\r\n    while(a.length &gt; 0) {\r\n        a.pop();\r\n    }\r\n\r\nAs per previous answer by kenshou.html, second method is faster.\r\n"},{"score":19,"body_markdown":"There is a lot of confusion and misinformation regarding the while;pop/shift performance both in answers and comments. The while/pop solution has (as expected) the **worst performance**. What&#39;s actually happening is that setup runs only once for each sample that runs the snippet in a loop. eg:\r\n\r\n    var arr = [];\r\n\r\n    for (var i = 0; i &lt; 100; i++) { \r\n        arr.push(Math.random()); \r\n    }\r\n\r\n    for (var j = 0; j &lt; 1000; j++) {\r\n        while (arr.length &gt; 0) {\r\n            arr.pop(); // this executes 100 times, not 100000\r\n        }\r\n    }\r\n\r\nI have created a new test that works correctly :\r\n\r\nhttp://jsperf.com/empty-javascript-array-redux\r\n\r\n**Warning:** even in this version of the test you can&#39;t actually see the real difference because cloning the array takes up most of the test time. It still shows that `splice` is the fastest way to clear the array (not taking `[]` into consideration because while it is the fastest it&#39;s not actually clearing the existing array)."},{"score":113,"body_markdown":"The answers that have no less that 2739 upvotes by now are misleading and incorrect.\r\n\r\nThe question is: &quot;How do you empty your existing array?&quot; E.g. for `A = [1,2,3,4]`.\r\n\r\n1. Saying &quot;`A = []` is the answer&quot; is ignorant and absolutely incorrect. `[] == []` is **false**.\r\n\r\n    This is because these two arrays are two separate, individual objects, with their own two identities, taking up their own space in the digital world, each on its own.\r\n\r\n----\r\n\r\nLet&#39;s say your mother asks you to empty the trash can. \r\n\r\n - You don&#39;t bring in a new one as if you&#39;ve done what you&#39;ve been asked for.\r\n - Instead, you empty the trash can. \r\n - You don&#39;t replace the filled one with a new empty can, and you don&#39;t take the label &quot;A&quot; from the filled can and stick it to the new one as in `A = [1,2,3,4]; A = [];`\r\n\r\nEmptying an array object is the easiest thing ever:\r\n\r\n    A.length = 0;\r\n\r\nThis way, the can under &quot;A&quot; is not only empty, but also as clean as new!\r\n\r\n----\r\n\r\n2. Furthermore, you are not required to remove the trash by hand until the can is empty! You were asked to empty the existing one, completely, in one turn, not to pick up the trash until the can gets empty, as in:\r\n\r\n        while(A.length &gt; 0) {\r\n            A.pop();\r\n        }\r\n\r\n3. Nor, to put your left hand at the bottom of the trash, holding it with your right at the top to be able to pull its content out as in:\r\n\r\n        A.splice(0, A.length);\r\n\r\nNo, you were asked to empty it:\r\n\r\n    A.length = 0;\r\n\r\nThis is the only code that correctly empties the contents of a given JavaScript array."},{"score":6,"body_markdown":"[![enter image description here][1]][1]\r\n\r\n*To Empty a Current memory location of an array use: `&#39;myArray.length = 0&#39;` or `&#39;myArray.pop() UN-till its length is 0&#39;`*\r\n\r\n - [`length`][2] : You can set the length property to truncate an array at any time. When you extend an array by changing its length property, the number of actual elements increases.\r\n - [`pop()`][3]  : The pop method removes the **last** element from an array and returns that returns the removed value.\r\n - [`shift()`][4] : The shift method removes the element at the **zeroeth index** and shifts the values at consecutive indexes down, then returns the removed value.\r\n\r\nExample:\r\n\r\n\tvar arr = [&#39;77&#39;];\r\n\tarr.length = 20;\r\n\tconsole.log(&quot;Increasing : &quot;, arr); // (20) [&quot;77&quot;, empty &#215; 19]\r\n\tarr.length = 12;\r\n\tconsole.log(&quot;Truncating : &quot;, arr); // (12) [&quot;77&quot;, empty &#215; 11]\r\n\t\r\n    var mainArr = new Array();\r\n    mainArr = [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;];\r\n    \r\n    var refArr = mainArr;\r\n    console.log(&#39;Current&#39;, mainArr, &#39;Refered&#39;, refArr);\r\n    \r\n    refArr.length = 3;\r\n    console.log(&#39;Length: ~ Current&#39;, mainArr, &#39;Refered&#39;, refArr);\r\n    \r\n    mainArr.push(&#39;0&#39;);\r\n    console.log(&#39;Push to the End of Current Array Memory Location \\n~ Current&#39;, mainArr, &#39;Refered&#39;, refArr);\r\n    \r\n    mainArr.poptill_length(0);\r\n    console.log(&#39;Empty Array \\n~ Current&#39;, mainArr, &#39;Refered&#39;, refArr);\r\n    \r\n    Array.prototype.poptill_length = function (e) {\r\n      while (this.length) {\r\n        if( this.length == e ) break;\r\n    \t\r\n    \tconsole.log(&#39;removed last element:&#39;, this.pop());\r\n      }\r\n    };\r\n\r\n-----\r\n\r\n* [`new Array() | []`][5] *Create an Array with new memory location by using `Array constructor` or `array literal`.*\r\n\r\n\t\tmainArr = []; // a new empty array is addressed to mainArr.\r\n\t\t\r\n\t\tvar arr = new Array(&#39;10&#39;); // Array constructor\r\n\t\tarr.unshift(&#39;1&#39;); // add to the front\r\n\t\tarr.push(&#39;15&#39;); // add to the end\r\n\t\tconsole.log(&quot;After Adding : &quot;, arr); // [&quot;1&quot;, &quot;10&quot;, &quot;15&quot;]\r\n\r\n\t\tarr.pop(); // remove from the end\r\n\t\tarr.shift(); // remove from the front\r\n\t\tconsole.log(&quot;After Removing : &quot;, arr); // [&quot;10&quot;]\r\n\r\n\t\tvar arrLit = [&#39;14&#39;, &#39;17&#39;];\r\n\t\tconsole.log(&quot;array literal &#171; &quot;, indexedItem( arrLit ) ); // {0,14}{1,17}\r\n\r\n\t\tfunction indexedItem( arr ) {\r\n\t\t\tvar indexedStr = &quot;&quot;;\r\n\t\t\tarr.forEach(function(item, index, array) {\r\n\t\t\t\tindexedStr += &quot;{&quot;+index+&quot;,&quot;+item+&quot;}&quot;;\r\n\t\t\t\tconsole.log(item, index);\r\n\t\t\t});\r\n\t\t\treturn indexedStr;\r\n\t\t}\r\n\r\n\t\r\n* *[`slice()`][6] : By using slice function we get an shallow copy of elements from the original array, with new memory address, So that any modification on cloneArr will not affect to an actual|original array.*\r\n\r\n\t\tvar shallowCopy = mainArr.slice(); // this is how to make a copy\r\n\t\t\r\n\t\tvar cloneArr = mainArr.slice(0, 3); \r\n\t\tconsole.log(&#39;Main&#39;, mainArr, &#39;\\tCloned&#39;, cloneArr);\r\n\t\t\r\n\t\tcloneArr.length = 0; // Clears current memory location of an array.\r\n\t\tconsole.log(&#39;Main&#39;, mainArr, &#39;\\tCloned&#39;, cloneArr);\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/nChy7.png\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\r\n  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\r\n  [4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\r\n  [5]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\r\n  [6]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"},{"score":7,"body_markdown":"If you use constants then you have no choice:\r\n\r\n    const numbers = [1, 2, 3]\r\n\r\nYou can not reasign:\r\n\r\n    numbers = []\r\n\r\nYou can only truncate:\r\n\r\n    numbers.length = 0"},{"score":4,"body_markdown":"I&#39;m surprised no one has suggested this yet:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let xs = [1,2,3,4];\r\n    for (let i in xs)\r\n        delete xs[i];\r\n\r\nThis yields an array in quite a different state from the other solutions. In a sense, the array has been &#39;emptied&#39;:\r\n\r\n    xs\r\n    =&gt; Array [ &lt;4 empty slots&gt; ]\r\n\r\n    [...xs]\r\n    =&gt; Array [ undefined, undefined, undefined, undefined ]\r\n\r\n    xs.length\r\n    =&gt; 4\r\n\r\n    xs[0]\r\n    =&gt; ReferenceError: reference to undefined property xs[0]\r\n\r\nYou can produce an equivalent array with `[,,,,]` or `Array(4)`"},{"score":-10,"body_markdown":"Use below if you need to empty Angular 2+ FormArray. \r\n\r\n    public emptyFormArray(formArray:FormArray) {\r\n    \tfor (let i = formArray.controls.length - 1; i &gt;= 0; i--) {\r\n    \t\tformArray.removeAt(i);\r\n    \t}\r\n    }"},{"score":19,"body_markdown":"You can easily create a function to do that for you, change the **length** or even add it to **native Array** as `remove()` function for reuse.\r\n\r\nImagine you have this array:\r\n\r\n    var arr = [1, 2, 3, 4, 5]; //the array\r\n\r\nOK, just simply run this:\r\n\r\n    arr.length = 0; //change the length\r\n\r\nand the result is:\r\n\r\n    [] //result\r\n\r\neasy way to empty an array...\r\n\r\nAlso using loop which is not necessary but just another way to do that:\r\n\r\n    /* could be arr.pop() or arr.splice(0)\r\n    don&#39;t need to return as main array get changed */\r\n\r\n    function remove(arr) {\r\n      while(arr.length) {\r\n        arr.shift(); \r\n      }\r\n    }\r\n\r\nThere are also tricky way which you can think about, for example something like this:\r\n\r\n    arr.splice(0, arr.length); //[]\r\n\r\nSo if arr has 5 items, it will splice 5 items from 0, which means nothing will remain in the array.\r\n\r\nAlso other ways like simply reassign the array for example:\r\n\r\n    arr = []; //[]\r\n\r\nIf you look at the Array functions, there are many other ways to do this, but the most recommended one could be changing the length.\r\n\r\nAs I said in the first place, you can also prototype remove() as it&#39;s the answer to your question. you can simply choose one of the methods above and prototype it to Array object in JavaScript, something like:\r\n\r\n    Array.prototype.remove = Array.prototype.remove || function() {\r\n      this.splice(0, this.length);\r\n    };\r\n\r\nand you can simply call it like this to empty any array in your javascript application:\r\n\r\n    arr.remove(); //[]"}],"score":2197}