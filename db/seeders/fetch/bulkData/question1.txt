{"body":"I have an array of numbers and I&#39;m using the `.push()` method to add elements to it.\r\n\r\nIs there a simple way to remove a specific element from an array?\r\n\r\nI&#39;m looking for the equivalent of something like:\r\n\r\n```javascript\r\narray.remove(number);\r\n```\r\n\r\nI have to use *core* JavaScript. Frameworks are not allowed.\r\n","title":"How can I remove a specific item from an array?","answers":[{"score":166,"body_markdown":"```js\r\nArray.prototype.remove_by_value = function(val) {\r\n for (var i = 0; i &lt; this.length; i++) {\r\n  if (this[i] === val) {\r\n   this.splice(i, 1);\r\n   i--;\r\n  }\r\n }\r\n return this;\r\n}[\r\n // call like\r\n (1, 2, 3, 4)\r\n].remove_by_value(3);\r\n```\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- langua\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    Array.prototype.remove_by_value = function(val) {\r\n      for (var i = 0; i &lt; this.length; i++) {\r\n        if (this[i] === val) {\r\n          this.splice(i, 1);\r\n          i--;\r\n        }\r\n      }\r\n      return this;\r\n    }\r\n\r\n    var rooms = [&#39;hello&#39;, &#39;something&#39;]\r\n\r\n    rooms = rooms.remove_by_value(&#39;hello&#39;)\r\n\r\n    console.log(rooms)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":1395,"body_markdown":"I don&#39;t know how you are expecting `array.remove(int)` to behave. There are three possibilities I can think of that you might want.\r\n\r\nTo remove an element of an array at an index `i`:\r\n\r\n```javascript\r\narray.splice(i, 1);\r\n```\r\n\r\nIf you want to remove every element with value `number` from the array:\r\n\r\n```javascript\r\nfor (var i = array.length - 1; i &gt;= 0; i--) {\r\n if (array[i] === number) {\r\n  array.splice(i, 1);\r\n }\r\n}\r\n```\r\n\r\nIf you just want to make the element at index `i` no longer exist, but you don&#39;t want the indexes of the other elements to change:\r\n\r\n```\r\ndelete array[i];\r\n```\r\n"},{"score":12806,"body_markdown":"Find the `index` of the array element you want to remove using [`indexOf`][2], and then remove that index with [`splice`][1].\r\n\r\n&gt; The splice() method changes the contents of an array by removing\r\n&gt; existing elements and/or adding new elements.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const array = [2, 5, 9];\r\n\r\n    console.log(array);\r\n\r\n    const index = array.indexOf(5);\r\n    if (index &gt; -1) {\r\n      array.splice(index, 1);\r\n    }\r\n\r\n    // array = [2, 9]\r\n    console.log(array); \r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThe second parameter of `splice` is the number of elements to remove. Note that `splice` modifies the array in place and returns a new array containing the elements that have been removed.\r\n___\r\nFor the reason of completeness, here are functions. The first function removes only a single occurrence (i.e. removing the first match of `5` from `[2,5,9,1,5,8,5]`), while the second function removes all occurrences:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function removeItemOnce(arr, value) {\r\n      var index = arr.indexOf(value);\r\n      if (index &gt; -1) {\r\n        arr.splice(index, 1);\r\n      }\r\n      return arr;\r\n    }\r\n\r\n    function removeItemAll(arr, value) {\r\n      var i = 0;\r\n      while (i &lt; arr.length) {\r\n        if (arr[i] === value) {\r\n          arr.splice(i, 1);\r\n        } else {\r\n          ++i;\r\n        }\r\n      }\r\n      return arr;\r\n    }\r\n    //Usage\r\n    console.log(removeItemOnce([2,5,9,1,5,8,5], 5))\r\n    console.log(removeItemAll([2,5,9,1,5,8,5], 5))\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\r\n\r\n"},{"score":502,"body_markdown":"It depends on whether you want to keep an empty spot or not.\r\n\r\nIf you **do** want an empty slot:\r\n\r\n    array[index] = undefined;\r\n\r\nIf you **don&#39;t** want an empty slot:\r\n\r\n    //To keep the original:\r\n    //oldArray = [...array];\r\n\r\n    //This modifies the array.\r\n    array.splice(index, 1);\r\n\r\nAnd if you need the value of that item, you can just store the returned array&#39;s element:\r\n\r\n    var value = array.splice(index, 1)[0];\r\n\r\nIf you want to remove at either end of the array, you can use `array.pop()` for the last one or `array.shift()` for the first one (both return the value of the item as well).\r\n\r\nIf you don&#39;t know the index of the item, you can use `array.indexOf(item)` to get it (in a `if()` to get one item or in a `while()` to get all of them). `array.indexOf(item)` returns either the index or `-1` if not found.&amp;nbsp;\r\n\r\n  [1]: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\r\n"},{"score":66,"body_markdown":"If you want a new array with the deleted positions removed, you can always delete the specific element and filter out the array. It might need an extension of the [array object][1] for browsers that don&#39;t implement the filter method, but in the long term it&#39;s easier since all you do is this:\r\n\r\n    var my_array = [1, 2, 3, 4, 5, 6];\r\n    delete my_array[4];\r\n    console.log(my_array.filter(function(a){return typeof a !== &#39;undefined&#39;;}));\r\n\r\nIt should display `[1, 2, 3, 4, 6]`.\r\n\r\n  [1]: http://www.tutorialspoint.com/javascript/array_filter.htm\r\n\r\n\r\n"},{"score":193,"body_markdown":"There are two major approaches:\r\n\r\n 1. **splice()**: `anArray.splice(index, 1);`\r\n\r\n 2. **delete**: `delete anArray[index];`\r\n\r\nBe careful when you use delete for an array. It is good for deleting attributes of objects, but not so good for arrays. It is better to use `splice` for arrays.\r\n\r\nKeep in mind that when you use `delete` for an array you could get wrong results for `anArray.length`. In other words, `delete` would remove the element, but it wouldn&#39;t update the value of length property.\r\n\r\nYou can also expect to have holes in index numbers after using delete, e.g. you could end up with having indexes 1, 3, 4, 8, 9, and 11 and length as it was before using delete. In that case, all indexed `for` loops would crash, since indexes are no longer sequential.\r\n\r\nIf you are forced to use `delete` for some reason, then you should use [`for each`][1] loops when you need to loop through arrays. As the matter of fact, always avoid using indexed `for` loops, if possible. That way the code would be more robust and less prone to problems with indexes.\r\n\r\n  [1]: https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript\r\n\r\n"},{"score":30,"body_markdown":"**Update:** This method is recommended only if you cannot use ECMAScript 2015 (formerly known as ES6). If you can use it, other answers here provide much neater implementations.\r\n\r\n---\r\n\r\n[This gist here][1] will solve your problem, and also deletes all occurrences of the argument instead of just 1 (or a specified value).\r\n\r\n    Array.prototype.destroy = function(obj){\r\n    \t// Return null if no objects were found and removed\r\n    \tvar destroyed = null;\r\n    \t\r\n    \tfor(var i = 0; i &lt; this.length; i++){\r\n    \t\t\r\n    \t\t// Use while-loop to find adjacent equal objects\r\n    \t\twhile(this[i] === obj){\r\n    \t\t\t\r\n    \t\t\t// Remove this[i] and store it within destroyed\r\n    \t\t\tdestroyed = this.splice(i, 1)[0];\r\n    \t\t}\r\n    \t}\r\n    \t\r\n    \treturn destroyed;\r\n    }\r\n\r\nUsage:\r\n\r\n    var x = [1, 2, 3, 3, true, false, undefined, false];\r\n\r\n    x.destroy(3);         // =&gt; 3\r\n    x.destroy(false);     // =&gt; false\r\n    x;                    // =&gt; [1, 2, true, undefined]\r\n\r\n    x.destroy(true);      // =&gt; true\r\n    x.destroy(undefined); // =&gt; undefined\r\n    x;                    // =&gt; [1, 2]\r\n\r\n    x.destroy(3);         // =&gt; null\r\n    x;                    // =&gt; [1, 2]\r\n\r\n\r\n  [1]: https://gist.github.com/zykadelic/5069236"},{"score":61,"body_markdown":"Check out this code. It works in every **major browser**.\r\n\r\n```js\r\nremove_item = function(arr, value) {\r\n var b = &#39;&#39;;\r\n for (b in arr) {\r\n  if (arr[b] === value) {\r\n   arr.splice(b, 1);\r\n   break;\r\n  }\r\n }\r\n return arr;\r\n};\r\n```\r\n\r\nCall this function\r\n\r\n    remove_item(array,value);\r\n"},{"score":10,"body_markdown":"You can iterate over each `array`-item and `splice` it if it exist in your `array`.\r\n\r\n\r\n    function destroy(arr, val) {\r\n        for (var i = 0; i &lt; arr.length; i++) if (arr[i] === val) arr.splice(i, 1);\r\n        return arr;\r\n    }"},{"score":14,"body_markdown":"**Create new array:**\r\n\r\n    var my_array = new Array();\r\n\r\n**Add elements to this array:**\r\n\r\n    my_array.push(&quot;element1&quot;);\r\n\r\n**The function indexOf (returns index or -1 when not found):**\r\n\r\n    var indexOf = function(needle)\r\n    {\r\n        if (typeof Array.prototype.indexOf === &#39;function&#39;) // Newer browsers\r\n        {\r\n            indexOf = Array.prototype.indexOf;\r\n        }\r\n        else // Older browsers\r\n        {\r\n            indexOf = function(needle)\r\n            {\r\n                var index = -1;\r\n\r\n                for (var i = 0; i &lt; this.length; i++)\r\n                {\r\n                    if (this[i] === needle)\r\n                    {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n                return index;\r\n            };\r\n        }\r\n\r\n        return indexOf.call(this, needle);\r\n    };\r\n\r\n**Check index of this element (tested with Firefox and Internet&amp;nbsp;Explorer&amp;nbsp;8 (and later)):**\r\n\r\n    var index = indexOf.call(my_array, &quot;element1&quot;);\r\n\r\n**Remove 1 element located at index from the array**\r\n\r\n    my_array.splice(index, 1);\r\n\r\n"},{"score":296,"body_markdown":"A friend was having issues in [Internet&amp;nbsp;Explorer&amp;nbsp;8][1] and showed me what he did. I told him it was wrong, and he told me he got the answer here. The current top answer will not work in all browsers (Internet&amp;nbsp;Explorer&amp;nbsp;8 for example), and it will only remove the first occurrence of the item.\r\n\r\n## Remove ALL instances from an array\r\n\r\n    function array_remove_index_by_value(arr, item)\r\n    {\r\n     for (var i = arr.length; i--;)\r\n     {\r\n      if (arr[i] === item) {arr.splice(i, 1);}\r\n     }\r\n    }\r\n\r\nIt loops through the array backwards (since indices and length will change as items are removed) and removes the item if it&#39;s found. It works in all browsers.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Internet_Explorer_8\r\n"},{"score":24,"body_markdown":"You can do a backward loop to make sure not to screw up the indexes, if there are multiple instances of the element.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var myElement = &quot;chocolate&quot;;\r\n    var myArray = [&#39;chocolate&#39;, &#39;poptart&#39;, &#39;poptart&#39;, &#39;poptart&#39;, &#39;chocolate&#39;, &#39;poptart&#39;, &#39;poptart&#39;, &#39;chocolate&#39;];\r\n\r\n    /* Important code */\r\n    for (var i = myArray.length - 1; i &gt;= 0; i--) {\r\n      if (myArray[i] == myElement) myArray.splice(i, 1);\r\n    }\r\n    console.log(myArray);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n[Live Demo](http://jsfiddle.net/lun471k/7m6G9/)"},{"score":80,"body_markdown":"John Resig [posted a good implementation][1]:\r\n\r\n    // Array Remove - By John Resig (MIT Licensed)\r\n    Array.prototype.remove = function(from, to) {\r\n      var rest = this.slice((to || from) + 1 || this.length);\r\n      this.length = from &lt; 0 ? this.length + from : from;\r\n      return this.push.apply(this, rest);\r\n    };\r\n\r\nIf you don’t want to extend a global object, you can do something like the following, instead:\r\n\r\n    // Array Remove - By John Resig (MIT Licensed)\r\n    Array.remove = function(array, from, to) {\r\n        var rest = array.slice((to || from) + 1 || array.length);\r\n        array.length = from &lt; 0 ? array.length + from : from;\r\n        return array.push.apply(array, rest);\r\n    };\r\n\r\nBut the main reason I am posting this is to warn users against the alternative implementation suggested in the comments on that page (Dec 14, 2007):\r\n\r\n    Array.prototype.remove = function(from, to){\r\n      this.splice(from, (to=[0,from||1,++to-from][arguments.length])&lt;0?this.length+to:to);\r\n      return this.length;\r\n    };\r\n\r\nIt seems to work well at first, but through a painful process I discovered it fails when trying to remove the second to last element in an array. For example, if you have a 10-element array and you try to remove the 9th element with this:\r\n\r\n    myArray.remove(8);\r\n\r\nYou end up with an 8-element array. Don&#39;t know why but I confirmed John&#39;s original implementation doesn&#39;t have this problem.\r\n\r\n\r\n  [1]: http://ejohn.org/blog/javascript-array-remove/"},{"score":120,"body_markdown":"There is no need to use `indexOf` or `splice`. However, it performs better if you only want to remove one occurrence of an element. \r\n\r\n**Find and move (move):**\r\n\r\n    function move(arr, val) {\r\n      var j = 0;\r\n      for (var i = 0, l = arr.length; i &lt; l; i++) {\r\n        if (arr[i] !== val) {\r\n          arr[j++] = arr[i];\r\n        }\r\n      }\r\n      arr.length = j;\r\n    }\r\n\r\n**Use `indexOf` and `splice` (indexof):**\r\n\r\n    function indexof(arr, val) {\r\n      var i;\r\n      while ((i = arr.indexOf(val)) != -1) {\r\n        arr.splice(i, 1);\r\n      }\r\n    }\r\n\r\n**Use only `splice` (splice):**\r\n\r\n    function splice(arr, val) {\r\n      for (var i = arr.length; i--;) {\r\n        if (arr[i] === val) {\r\n          arr.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n**Run-times on nodejs for array with 1000 elements (average over 10000 runs):**\r\n\r\n*indexof* is approximately 10x slower than *move*. Even if improved by removing the call to `indexOf` in *splice* it performs much worse than *move*. \r\n\r\n    Remove all occurrences:\r\n        move 0.0048 ms\r\n        indexof 0.0463 ms\r\n        splice 0.0359 ms\r\n\r\n    Remove first occurrence:\r\n        move_one 0.0041 ms\r\n        indexof_one 0.0021 ms"},{"score":22,"body_markdown":"    Array.prototype.removeItem = function(a) {\r\n        for (i = 0; i &lt; this.length; i++) {\r\n            if (this[i] == a) {\r\n                for (i2 = i; i2 &lt; this.length - 1; i2++) {\r\n                    this[i2] = this[i2 + 1];\r\n                }\r\n                this.length = this.length - 1\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    var recentMovies = [&#39;Iron Man&#39;, &#39;Batman&#39;, &#39;Superman&#39;, &#39;Spiderman&#39;];\r\n    recentMovies.removeItem(&#39;Superman&#39;);\r\n\r\n\r\n"},{"score":15,"body_markdown":"I also ran into the situation where I had to remove an element from `Array`. `.indexOf` was not working in Internet&amp;nbsp;Explorer, so I am sharing my working `jQuery.inArray()` solution:\r\n\r\n    var index = jQuery.inArray(val, arr);\r\n    if (index &gt; -1) {\r\n        arr.splice(index, 1);\r\n        //console.log(arr);\r\n    }\r\n\r\n"},{"score":1388,"body_markdown":"Edited on 2016 October\r\n=======\r\n- Do it simple, intuitive and explicit ([Occam&#39;s razor][1])\r\n- Do it immutable (original array stay unchanged)\r\n- Do it with standard JavaScript functions, if your browser doesn&#39;t support them - **use polyfill**\r\n\r\nIn this code example I use **&quot;array.filter(...)&quot;** function to remove unwanted items from an array. This function doesn&#39;t change the original array and creates a new one. If your browser doesn&#39;t support this function (e.g. Internet Explorer before version 9, or Firefox before version 1.5), consider using [**the filter polyfill from Mozilla**][2].\r\n\r\nRemoving item (ECMA-262 Edition 5 code aka oldstyle JavaScript)\r\n=======\r\n    var value = 3\r\n\r\n    var arr = [1, 2, 3, 4, 5, 3]\r\n\r\n    arr = arr.filter(function(item) {\r\n        return item !== value\r\n    })\r\n\r\n    console.log(arr)\r\n    // [ 1, 2, 4, 5 ]\r\n\r\nRemoving item (ECMAScript 6 code)\r\n=======\r\n    let value = 3\r\n\r\n    let arr = [1, 2, 3, 4, 5, 3]\r\n\r\n    arr = arr.filter(item =&gt; item !== value)\r\n\r\n    console.log(arr)\r\n    // [ 1, 2, 4, 5 ]\r\n\r\n**IMPORTANT** ECMAScript&amp;nbsp;6 &quot;() =&gt; {}&quot; arrow function syntax is not supported in Internet&amp;nbsp;Explorer at all, Chrome before 45 version, Firefox before 22 version, and Safari before 10 version. To use ECMAScript&amp;nbsp;6 syntax in old browsers you can use [BabelJS][3].\r\n\r\n---\r\n\r\nRemoving multiple items (ECMAScript&amp;nbsp;7 code)\r\n=======\r\n\r\nAn additional advantage of this method is that you can remove multiple items\r\n\r\n    let forDeletion = [2, 3, 5]\r\n\r\n    let arr = [1, 2, 3, 4, 5, 3]\r\n\r\n    arr = arr.filter(item =&gt; !forDeletion.includes(item))\r\n    // !!! Read below about array.includes(...) support !!!\r\n\r\n    console.log(arr)\r\n    // [ 1, 4 ]\r\n\r\n**IMPORTANT** &quot;array.includes(...)&quot; function is not supported in Internet&amp;nbsp;Explorer at all, Chrome before 47 version, Firefox before 43 version, Safari before 9 version, and Edge before 14 version so [**here is polyfill from Mozilla**][4].\r\n\r\nRemoving multiple items (in the future, maybe)\r\n=======\r\n\r\nIf the [&quot;This-Binding Syntax&quot;][5] proposal is ever accepted, you&#39;ll be able to do this:\r\n\r\n    // array-lib.js\r\n\r\n    export function remove(...forDeletion) {\r\n        return this.filter(item =&gt; !forDeletion.includes(item))\r\n    }\r\n\r\n    // main.js\r\n\r\n    import { remove } from &#39;./array-lib.js&#39;\r\n\r\n    let arr = [1, 2, 3, 4, 5, 3]\r\n\r\n    // :: This-Binding Syntax Proposal\r\n    // using &quot;remove&quot; function as &quot;virtual method&quot;\r\n    // without extending Array.prototype\r\n    arr = arr::remove(2, 3, 5)\r\n\r\n    console.log(arr)\r\n    // [ 1, 4 ]\r\n\r\n[**Try it yourself in BabelJS :)**][6]\r\n\r\n**Reference**\r\n\r\n - [Array.prototype.includes][7]\r\n - [Functional composition][8]\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Occam%27s_razor\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill\r\n  [3]: http://babeljs.io\r\n  [4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill\r\n  [5]: https://github.com/tc39/proposal-bind-operator\r\n  [6]: https://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=false&amp;presets=es2015%2Creact%2Cstage-0%2Cstage-2&amp;targets=&amp;browsers=chrome%20%3E%2050&amp;builtIns=false&amp;code=%20%20%20%20function%20remove(...forDeletion)%20%7B%0A%20%20%20%20%20%20%20%20return%20this.filter(item%20%3D%3E%20!forDeletion.includes(item))%0A%20%20%20%20%7D%0A%0A%20%20%20%20let%20arr%20%3D%20%5B1%2C%202%2C%203%2C%204%2C%205%2C%203%5D%0A%0A%20%20%20%20%2F%2F%20%3A%3A%20This-Binding%20Syntax%20Proposal%0A%20%20%20%20%2F%2F%20using%20remove%20function%20as%20%22virtual%20method%22%0A%20%20%20%20arr%20%3D%20arr%3A%3Aremove(2%2C%203%2C%205)%0A%0A%20%20%20%20console.log(arr)%0A%20%20%20%20%2F%2F%20%5B%201%2C%204%20%5D\r\n  [7]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\r\n  [8]: https://vanslaars.io/post/create-pipe-function/\r\n\r\n"},{"score":36,"body_markdown":"I&#39;m pretty new to JavaScript and needed this functionality. I merely wrote this:\r\n\r\n    function removeFromArray(array, item, index) {\r\n      while((index = array.indexOf(item)) &gt; -1) {\r\n        array.splice(index, 1);\r\n      }\r\n    }\r\n\r\nThen when I want to use it:\r\n\r\n    //Set-up some dummy data\r\n    var dummyObj = {name:&quot;meow&quot;};\r\n    var dummyArray = [dummyObj, &quot;item1&quot;, &quot;item1&quot;, &quot;item2&quot;];\r\n\r\n    //Remove the dummy data\r\n    removeFromArray(dummyArray, dummyObj);\r\n    removeFromArray(dummyArray, &quot;item2&quot;);\r\n\r\nOutput - As expected.\r\n[&quot;item1&quot;, &quot;item1&quot;]\r\n\r\nYou may have different needs than I, so you can easily modify it to suit them. I hope this helps someone.\r\n"},{"score":18,"body_markdown":"Based on all the answers which were mainly correct and taking into account the best practices suggested (especially not using Array.prototype directly), I came up with the below code:\r\n\r\n    function arrayWithout(arr, values) {\r\n      var isArray = function(canBeArray) {\r\n        if (Array.isArray) {\r\n          return Array.isArray(canBeArray);\r\n        }\r\n        return Object.prototype.toString.call(canBeArray) === &#39;[object Array]&#39;;\r\n      };\r\n\r\n      var excludedValues = (isArray(values)) ? values : [].slice.call(arguments, 1);\r\n      var arrCopy = arr.slice(0);\r\n  \r\n      for (var i = arrCopy.length - 1; i &gt;= 0; i--) {\r\n        if (excludedValues.indexOf(arrCopy[i]) &gt; -1) {\r\n          arrCopy.splice(i, 1);\r\n        }\r\n      }\r\n  \r\n      return arrCopy;\r\n    }\r\n\r\nReviewing the above function, despite the fact that it works fine, I realised there could be some performance improvement. Also using ES6 instead of ES5 is a much better approach. To that end, this is the improved code:\r\n    \r\n    const arrayWithoutFastest = (() =&gt; {\r\n      const isArray = canBeArray =&gt; (&#39;isArray&#39; in Array) \r\n        ? Array.isArray(canBeArray) \r\n        : Object.prototype.toString.call(canBeArray) === &#39;[object Array]&#39;;\r\n\r\n      let mapIncludes = (map, key) =&gt; map.has(key);\r\n      let objectIncludes = (obj, key) =&gt; key in obj;\r\n      let includes;\r\n\r\n      function arrayWithoutFastest(arr, ...thisArgs) {\r\n        let withoutValues = isArray(thisArgs[0]) ? thisArgs[0] : thisArgs;\r\n    \r\n        if (typeof Map !== &#39;undefined&#39;) {\r\n          withoutValues = withoutValues.reduce((map, value) =&gt; map.set(value, value), new Map());\r\n          includes = mapIncludes;\r\n        } else {\r\n          withoutValues = withoutValues.reduce((map, value) =&gt; { map[value] = value; return map; } , {}); \r\n          includes = objectIncludes;\r\n        }\r\n    \r\n        const arrCopy = [];\r\n        const length = arr.length;\r\n\r\n        for (let i = 0; i &lt; length; i++) {\r\n          // If value is not in exclude list\r\n          if (!includes(withoutValues, arr[i])) {\r\n            arrCopy.push(arr[i]);\r\n          }\r\n        }\r\n\r\n        return arrCopy;\r\n      }\r\n\r\n      return arrayWithoutFastest;  \r\n    })();\r\n\r\nHow to use:\r\n\r\n    const arr = [1,2,3,4,5,&quot;name&quot;, false];\r\n    \r\n    arrayWithoutFastest(arr, 1); // will return array [2,3,4,5,&quot;name&quot;, false]\r\n    arrayWithoutFastest(arr, &#39;name&#39;); // will return [2,3,4,5, false]\r\n    arrayWithoutFastest(arr, false); // will return [2,3,4,5]\r\n    arrayWithoutFastest(arr,[1,2]); // will return [3,4,5,&quot;name&quot;, false];\r\n    arrayWithoutFastest(arr, {bar: &quot;foo&quot;}); // will return the same array (new copy)\r\n\r\n\r\nI am currently writing a blog post in which I have benchmarked several solutions for Array without problem and compared the time it takes to run. I will update this answer with the link once I finish that post. Just to let you know, I have compared the above against lodash&#39;s without and in case the browser supports `Map`, it beats lodash! Notice that I am not using `Array.prototype.indexOf` or `Array.prototype.includes` as wrapping the exlcudeValues in a `Map` or `Object` makes querying faster!\r\n"},{"score":10,"body_markdown":"In [CoffeeScript][1]:\r\n\r\n    my_array.splice(idx, 1) for ele, idx in my_array when ele is this_value\r\n\r\n  [1]: http://en.wikipedia.org/wiki/CoffeeScript\r\n"},{"score":21,"body_markdown":"I know there are a lot of answers already, but many of them seem to over complicate the problem.  Here is a simple, recursive way of removing all instances of a key - calls self until index isn&#39;t found.  Yes, it only works in browsers with `indexOf`, but it&#39;s simple and can be easily polyfilled.\r\n\r\n**Stand-alone function**\r\n\r\n    function removeAll(array, key){\r\n        var index = array.indexOf(key);\r\n\r\n        if(index === -1) return;\r\n\r\n        array.splice(index, 1);\r\n        removeAll(array,key);\r\n    }\r\n\r\n**Prototype method**\r\n\r\n    Array.prototype.removeAll = function(key){\r\n        var index = this.indexOf(key);\r\n\r\n        if(index === -1) return;\r\n \r\n        this.splice(index, 1);\r\n        this.removeAll(key);\r\n    }\r\n\r\n"},{"score":83,"body_markdown":"You can do it easily with the [filter][1] method:\r\n\r\n    function remove(arrOriginal, elementToRemove){\r\n        return arrOriginal.filter(function(el){return el !== elementToRemove});\r\n    }\r\n    console.log(remove([1, 2, 1, 0, 3, 1, 4], 1));\r\n\r\nThis removes all elements from the array and also works faster than a combination of `slice` and `indexOf`.\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\r\n\r\n\r\n"},{"score":7,"body_markdown":"I like this version of splice, removing an element by its value using `$.inArray`:\r\n\r\n    $(document).ready(function(){\r\n        var arr = [&quot;C#&quot;,&quot;Ruby&quot;,&quot;PHP&quot;,&quot;C&quot;,&quot;C++&quot;];\r\n        var itemtoRemove = &quot;PHP&quot;;\r\n        arr.splice($.inArray(itemtoRemove, arr),1);\r\n    });\r\n"},{"score":89,"body_markdown":"This provides a predicate instead of a value.\r\n\r\n**NOTE:** it will update the given array, and return the affected rows.\r\n\r\n##Usage\r\n\r\n    var removed = helper.removeOne(arr, row =&gt; row.id === 5 );\r\n\r\n    var removed = helper.remove(arr, row =&gt; row.name.startsWith(&#39;BMW&#39;));\r\n\r\n##Definition\r\n\r\n```js\r\nvar helper = {\r\n // Remove and return the first occurrence\r\n\r\n removeOne: function(array, predicate) {\r\n  for (var i = 0; i &lt; array.length; i++) {\r\n   if (predicate(array[i])) {\r\n    return array.splice(i, 1);\r\n   }\r\n  }\r\n },\r\n\r\n // Remove and return all occurrences\r\n\r\n remove: function(array, predicate) {\r\n  var removed = [];\r\n\r\n  for (var i = 0; i &lt; array.length; ) {\r\n   if (predicate(array[i])) {\r\n    removed.push(array.splice(i, 1));\r\n    continue;\r\n   }\r\n   i++;\r\n  }\r\n  return removed;\r\n },\r\n};\r\n```"},{"score":78,"body_markdown":"[Underscore.js][1] can be used to solve issues with multiple browsers. It uses in-build browser methods if present. If they are absent like in the case of older Internet&amp;nbsp;Explorer versions it uses its own custom methods.\r\n\r\nA simple example to remove elements from array (from the website):\r\n\r\n    _.without([1, 2, 1, 0, 3, 1, 4], 0, 1); // =&gt; [2, 3, 4]\r\n\r\n  [1]: http://underscorejs.org/#without\r\n"},{"score":3,"body_markdown":"    var index,\r\n        input = [1,2,3],\r\n        indexToRemove = 1;\r\n        integers = [];\r\n    \r\n    for (index in input) {\r\n        if (input.hasOwnProperty(index)) {\r\n            if (index !== indexToRemove) {\r\n                integers.push(result); \r\n            }\r\n        }\r\n    }\r\n    input = integers;\r\n\r\nThis solution will take an array of input and will search through the input for the value to remove.  This will loop through the entire input array and the result will be a second array integers that has had the specific index removed. The integers array is then copied back into the input array.  "},{"score":8,"body_markdown":"Use jQuery&#39;s InArray:\r\n\r\n    A = [1, 2, 3, 4, 5, 6];\r\n    A.splice($.inArray(3, A), 1);\r\n    //It will return A=[1, 2, 4, 5, 6]`   \r\n\r\n**Note: inArray will return -1, if the element was not found.**\r\n"},{"score":6,"body_markdown":"Removing the value with index and splice!\r\n\r\n    function removeArrValue(arr,value) {\r\n        var index = arr.indexOf(value);\r\n        if (index &gt; -1) {\r\n            arr.splice(index, 1);\r\n        }\r\n        return arr;\r\n    }\r\n"},{"score":2,"body_markdown":"If you must support older versions of Internet&amp;nbsp;Explorer, I recommend using the following polyfill (note: this is **not** a framework). It&#39;s a 100% backwards-compatible replacement of all modern array methods (JavaScript 1.8.5 / ECMAScript 5 Array Extras) that works for Internet Explorer 6+, Firefox 1.5+, Chrome, Safari, &amp; Opera.\r\n\r\nhttps://github.com/plusdude/array-generics\r\n"},{"score":3,"body_markdown":"There are many fantastic answers here, but for me, what worked most simply wasn&#39;t removing my element from the array completely, but simply setting the value of it to null.\r\n\r\nThis works for most cases I have and is a good solution since I will be using the variable later and don&#39;t want it gone, just empty for now. Also, this approach is completely cross-browser compatible.\r\n\r\n    array.key = null;\r\n"},{"score":32,"body_markdown":"If you have complex objects in the array you can use filters? \r\nIn situations where $.inArray or array.splice is not as easy to use. Especially if the objects are perhaps shallow in the array.\r\n\r\nE.g. if you have an object with an Id field and you want the object removed from an array:\r\n\r\n    this.array = this.array.filter(function(element, i) {\r\n        return element.id !== idToRemove;\r\n    });"},{"score":51,"body_markdown":"You can use lodash [\\_.pull][1] (mutate array), [\\_.pullAt][2] (mutate array) or [\\_.without][3] (does&#39;t mutate array), \r\n\r\n    var array1 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]\r\n    _.pull(array1, &#39;c&#39;)\r\n    console.log(array1) // [&#39;a&#39;, &#39;b&#39;, &#39;d&#39;]\r\n\r\n    var array2 = [&#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;]\r\n    _.pullAt(array2, 0)\r\n    console.log(array2) // [&#39;f&#39;, &#39;g&#39;, &#39;h&#39;]\r\n\r\n    var array3 = [&#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;]\r\n    var newArray = _.without(array3, &#39;i&#39;) // [&#39;j&#39;, &#39;k&#39;, &#39;l&#39;]\r\n    console.log(array3) // [&#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;]\r\n\r\n\r\n  [1]: https://lodash.com/docs#pull\r\n  [2]: https://lodash.com/docs#pullAt\r\n  [3]: https://lodash.com/docs#without"},{"score":3,"body_markdown":"The following method will remove all entries of a given value from an array without creating a new array and with only one iteration which is *superfast*. And it works in ancient [Internet&amp;nbsp;Explorer 5.5][1] browser:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function removeFromArray(arr, removeValue) {\r\n      for (var i = 0, k = 0, len = arr.length &gt;&gt;&gt; 0; i &lt; len; i++) {\r\n        if (k &gt; 0)\r\n          arr[i - k] = arr[i];\r\n\r\n        if (arr[i] === removeValue)\r\n          k++;\r\n      }\r\n\r\n      for (; k--;)\r\n        arr.pop();\r\n    }\r\n\r\n    var a = [0, 1, 0, 2, 0, 3];\r\n\r\n    document.getElementById(&#39;code&#39;).innerHTML =\r\n      &#39;Initial array [&#39; + a.join(&#39;, &#39;) + &#39;]&#39;;\r\n    //Initial array [0, 1, 0, 2, 0, 3]\r\n\r\n    removeFromArray(a, 0);\r\n\r\n    document.getElementById(&#39;code&#39;).innerHTML +=\r\n      &#39;&lt;br&gt;Resulting array [&#39; + a.join(&#39;, &#39;) + &#39;]&#39;;\r\n    //Resulting array [1, 2, 3]\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;code id=&quot;code&quot;&gt;&lt;/code&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Internet_Explorer_5\r\n"},{"score":5,"body_markdown":"Remove last occurrence or all occurrences, or first occurrence?  \r\n\r\n    var array = [2, 5, 9, 5];\r\n\r\n    // Remove last occurrence (or all occurrences)\r\n    for (var i = array.length; i--;) {\r\n      if (array[i] === 5) {\r\n         array.splice(i, 1);\r\n         break; // Remove this line to remove all occurrences\r\n      }\r\n    }\r\n\r\nor\r\n\r\n    var array = [2, 5, 9, 5];\r\n\r\n    // Remove first occurrence\r\n    for (var i = 0; array.length; i++) {\r\n      if (array[i] === 5) {\r\n         array.splice(i, 1);\r\n         break; // Do not remove this line\r\n      }\r\n    }\r\n"},{"score":7,"body_markdown":"By my solution you can remove one or more than one item in an array thanks to pure JavaScript. There is no need for another JavaScript library.\r\n\r\n    var myArray = [1,2,3,4,5]; // First array\r\n\r\n    var removeItem = function(array,value) {  // My clear function\r\n        if(Array.isArray(value)) {  // For multi remove\r\n            for(var i = array.length - 1; i &gt;= 0; i--) {\r\n                for(var j = value.length - 1; j &gt;= 0; j--) {\r\n                    if(array[i] === value[j]) {\r\n                        array.splice(i, 1);\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        else { // For single remove\r\n            for(var i = array.length - 1; i &gt;= 0; i--) {\r\n                if(array[i] === value) {\r\n                    array.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    removeItem(myArray,[1,4]); // myArray will be [2,3,5]\r\n"},{"score":8,"body_markdown":"**Vanilla JavaScript (ES5.1) – *in place* edition**\r\n\r\n*Browser support: [Internet&amp;nbsp;Explorer&amp;nbsp;9][1] or later ([detailed browser support][2])*\r\n\r\n    /**\r\n     * Removes all occurences of the item from the array.\r\n     *\r\n     * Modifies the array “in place”, i.e. the array passed as an argument\r\n     * is modified as opposed to creating a new array. Also returns the modified\r\n     * array for your convenience.\r\n     */\r\n    function removeInPlace(array, item) {\r\n        var foundIndex, fromIndex;\r\n\r\n        // Look for the item (the item can have multiple indices)\r\n        fromIndex = array.length - 1;\r\n        foundIndex = array.lastIndexOf(item, fromIndex);\r\n\r\n        while (foundIndex !== -1) {\r\n            // Remove the item (in place)\r\n            array.splice(foundIndex, 1);\r\n\r\n            // Bookkeeping\r\n            fromIndex = foundIndex - 1;\r\n            foundIndex = array.lastIndexOf(item, fromIndex);\r\n        }\r\n\r\n        // Return the modified array\r\n        return array;\r\n    }\r\n\r\n**Vanilla JavaScript (ES5.1) – *immutable* edition**\r\n\r\n*Browser support: Same as vanilla JavaScript in place edition*\r\n\r\n    /**\r\n     * Removes all occurences of the item from the array.\r\n     *\r\n     * Returns a new array with all the items of the original array except\r\n     * the specified item.\r\n     */\r\n    function remove(array, item) {\r\n        var arrayCopy;\r\n\r\n        arrayCopy = array.slice();\r\n\r\n        return removeInPlace(arrayCopy, item);\r\n    }\r\n\r\n\r\n**Vanilla ES6 – *immutable* edition**\r\n\r\n*Browser support: Chrome 46, Edge 12, Firefox 16, Opera 37, Safari 8 ([detailed browser support][3])*\r\n\r\n    /**\r\n     * Removes all occurences of the item from the array.\r\n     *\r\n     * Returns a new array with all the items of the original array except\r\n     * the specified item.\r\n     */\r\n    function remove(array, item) {\r\n        // Copy the array\r\n        array = [...array];\r\n    \r\n        // Look for the item (the item can have multiple indices)\r\n        let fromIndex = array.length - 1;\r\n        let foundIndex = array.lastIndexOf(item, fromIndex);\r\n    \r\n        while (foundIndex !== -1) {\r\n            // Remove the item by generating a new array without it\r\n            array = [\r\n                ...array.slice(0, foundIndex),\r\n                ...array.slice(foundIndex + 1),\r\n            ];\r\n    \r\n            // Bookkeeping\r\n            fromIndex = foundIndex - 1;\r\n            foundIndex = array.lastIndexOf(item, fromIndex)\r\n        }\r\n    \r\n        // Return the new array\r\n        return array;\r\n    }\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Internet_Explorer_9\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf#Browser_compatibility\r\n  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator#Browser_compatibility"},{"score":25,"body_markdown":"A more modern, [ECMAScript 2015][1] (formerly known as Harmony or ES&amp;nbsp;6) approach. Given:\r\n\r\n    const items = [1, 2, 3, 4];\r\n    const index = 2;\r\n\r\nThen:\r\n\r\n    items.filter((x, i) =&gt; i !== index);\r\n\r\nYielding: \r\n\r\n    [1, 2, 4]\r\n\r\nYou can use [Babel][2] and a [polyfill service][3] to ensure this is well supported across browsers.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\r\n  [2]: https://babeljs.io/\r\n  [3]: http://cdn.polyfill.io/v2/docs/\r\n"},{"score":11,"body_markdown":"I think many of the JavaScript instructions are not well thought out for functional programming. Splice returns the deleted element where most of the time you need the reduced array. This is bad.\r\n\r\nImagine you are doing a recursive call and have to pass an array with one less item, probably without the current indexed item. Or imagine you are doing another recursive call and has to pass an array with an element pushed.\r\n\r\nIn neither of these cases you can do `myRecursiveFunction(myArr.push(c))` or `myRecursiveFunction(myArr.splice(i,1))`. The first idiot will in fact pass the length of the array and the second idiot will pass the deleted element as a parameter.\r\n\r\nSo what I do in fact... For deleting an array element and passing the resulting to a function as a parameter at the same time I do as follows\r\n\r\n    myRecursiveFunction(myArr.slice(0,i).concat(a.slice(i+1)))\r\n\r\nWhen it comes to push that&#39;s more silly... I do like,\r\n\r\n    myRecursiveFunction((myArr.push(c),myArr))\r\n\r\nI believe in a proper functional language a method mutating the object it&#39;s called upon must return a reference to the very object as a result.\r\n"},{"score":0,"body_markdown":"    Array.prototype.remove = function(x) {\r\n        var y=this.slice(x+1);\r\n        var z=[];\r\n        for(i=0;i&lt;=x-1;i++) {\r\n            z[z.length] = this[i];\r\n        }\r\n\r\n        for(i=0;i&lt;y.length;i++){\r\n            z[z.length]=y[i];\r\n        }\r\n\r\n        return z;\r\n    }\r\n"},{"score":5,"body_markdown":"Use [jQuery.grep()][1]:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var y = [1, 2, 3, 9, 4]\r\n    var removeItem = 9;\r\n\r\n    y = jQuery.grep(y, function(value) {\r\n      return value != removeItem;\r\n    });\r\n    console.log(y)\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  [1]: http://api.jquery.com/jquery.grep/\r\n\r\n"},{"score":7,"body_markdown":"I made a fairly efficient extension to the base JavaScript array:\r\n\r\n    Array.prototype.drop = function(k) {\r\n      var valueIndex = this.indexOf(k);\r\n      while(valueIndex &gt; -1) {\r\n        this.removeAt(valueIndex);\r\n        valueIndex = this.indexOf(k);\r\n      }\r\n    };\r\n"},{"score":78,"body_markdown":"You can use ES6. For example to delete the value &#39;3&#39; in this case:\r\n\r\n    var array=[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;]\r\n    var newArray = array.filter((value)=&gt;value!=&#39;3&#39;);\r\n    console.log(newArray);\r\n\r\nOutput : \r\n\r\n    [&quot;1&quot;, &quot;2&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]"},{"score":53,"body_markdown":"**ES6 &amp; without mutation:  (October 2016)**\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n\r\n    const removeByIndex = (list, index) =&gt;\r\n          [\r\n            ...list.slice(0, index),\r\n            ...list.slice(index + 1)\r\n          ];\r\n             \r\n    output = removeByIndex([33,22,11,44],1) //=&gt; [33,11,44]\r\n          \r\n    console.log(output)\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":7,"body_markdown":"While most of the previous answers answer the question, it is not clear enough why the `slice()` method has not been used. Yes, `filter()` meets the immutability criteria, but how about doing the following shorter equivalent?\r\n\r\n    const myArray = [1,2,3,4];\r\n\r\nAnd now let’s say that we should remove the second element from the array, we can simply do:\r\n\r\n    const newArray = myArray.slice(0, 1).concat(myArray.slice(2, 4));\r\n\r\n    // [1,3,4]\r\n\r\nThis way of deleting an element from an array is strongly encouraged today in the community due to its simple and immutable nature. In general, methods which cause mutation should be avoided. For example, you are encouraged to replace `push()` with `concat()` and `splice()` with `slice()`.\r\n"},{"score":6,"body_markdown":"I made a function:\r\n\r\n    function pop(valuetoremove, myarray) {\r\n        var indexofmyvalue = myarray.indexOf(valuetoremove);\r\n        myarray.splice(indexofmyvalue, 1);\r\n    }\r\n\r\nAnd used it like this:\r\n\r\n    pop(valuetoremove, myarray);\r\n"},{"score":6,"body_markdown":"## Remove one value, using loose comparison, without mutating the original array, ES6\r\n\r\n    /**\r\n     * Removes one instance of `value` from `array`, without mutating the original array. Uses loose comparison.\r\n     *\r\n     * @param {Array} array Array to remove value from\r\n     * @param {*} value Value to remove\r\n     * @returns {Array} Array with `value` removed\r\n     */\r\n    export function arrayRemove(array, value) {\r\n        for(let i=0; i&lt;array.length; ++i) {\r\n            if(array[i] == value) {\r\n                let copy = [...array];\r\n                copy.splice(i, 1);\r\n                return copy;\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n"},{"score":10,"body_markdown":"Remove element at index i, without mutating the original array:\r\n\r\n    /**\r\n    * removeElement\r\n    * @param {Array} array\r\n    * @param {Number} index\r\n    */\r\n    function removeElement(array, index) {\r\n       return Array.from(array).splice(index, 1);\r\n    }\r\n\r\n    // Another way is\r\n    function removeElement(array, index) {\r\n       return array.slice(0).splice(index, 1);\r\n    }\r\n"},{"score":11,"body_markdown":"**2017-05-08**\r\n\r\nMost of the given answers work for strict comparison, meaning that both objects reference the exact same object in memory (or are primitive types), but often you want to remove a non-primitive object from an array that has a certain value. For instance, if you make a call to a server and want to check a retrieved object against a local object.\r\n\r\n    const a = {&#39;field&#39;: 2} // Non-primitive object\r\n    const b = {&#39;field&#39;: 2} // Non-primitive object with same value\r\n    const c = a            // Non-primitive object that reference the same object as &quot;a&quot;\r\n\r\n    assert(a !== b) // Don&#39;t reference the same item, but have same value\r\n    assert(a === c) // Do reference the same item, and have same value (naturally)\r\n\r\n    //Note: there are many alternative implementations for valuesAreEqual\r\n    function valuesAreEqual (x, y) {\r\n       return  JSON.stringify(x) === JSON.stringify(y)\r\n    }\r\n\r\n\r\n    //filter will delete false values\r\n    //Thus, we want to return &quot;false&quot; if the item\r\n    // we want to delete is equal to the item in the array\r\n    function removeFromArray(arr, toDelete){\r\n        return arr.filter(target =&gt; {return !valuesAreEqual(toDelete, target)})\r\n    }\r\n\r\n    const exampleArray = [a, b, b, c, a, {&#39;field&#39;: 2}, {&#39;field&#39;: 90}];\r\n    const resultArray = removeFromArray(exampleArray, a);\r\n\r\n    //resultArray = [{&#39;field&#39;:90}]\r\n\r\nThere are alternative/faster implementations for valuesAreEqual, but this does the job. You can also use a custom comparator if you have a specific field to check (for example, some retrieved UUID vs a local UUID).\r\n\r\nAlso note that this is a functional operation, meaning that it does not mutate the original array.\r\n\r\n"},{"score":41,"body_markdown":"**OK,** for example you have the array below:\r\n\r\n    var num = [1, 2, 3, 4, 5];\r\n\r\nAnd we want to delete number 4. You can simply use the below code:\r\n\r\n    num.splice(num.indexOf(4), 1); // num will be [1, 2, 3, 5];\r\n\r\nIf you are reusing this function, you write a reusable function which will be attached to the *native* array function like below:\r\n\r\n    Array.prototype.remove = Array.prototype.remove || function(x) {\r\n      const i = this.indexOf(x);\r\n      if(i===-1)\r\n          return;\r\n      this.splice(i, 1); // num.remove(5) === [1, 2, 3];\r\n    }\r\n\r\nBut how about if you have the below array instead with a few [5]s in the array?\r\n\r\n    var num = [5, 6, 5, 4, 5, 1, 5];\r\n\r\nWe need a loop to check them all, but an easier and more efficient way is using built-in JavaScript functions, so we write a function which use a filter like below instead:\r\n\r\n    const _removeValue = (arr, x) =&gt; arr.filter(n =&gt; n!==x);\r\n    //_removeValue([1, 2, 3, 4, 5, 5, 6, 5], 5) // Return [1, 2, 3, 4, 6]\r\n\r\nAlso there are third-party libraries which do help you to do this, like Lodash or Underscore. For more information, look at lodash _.pull, _.pullAt or _.without.\r\n\r\n\r\n"},{"score":16,"body_markdown":"**Remove by Index**\r\n\r\nA function that returns a copy of array without the element at index:\r\n\r\n    /**\r\n    * removeByIndex\r\n    * @param {Array} array\r\n    * @param {Number} index\r\n    */\r\n    function removeByIndex(array, index){\r\n          return array.filter(function(elem, _index){\r\n              return index != _index;\r\n        });\r\n    }\r\n    l = [1,3,4,5,6,7];\r\n    console.log(removeByIndex(l, 1));\r\n\r\n    $&gt; [ 1, 4, 5, 6, 7 ]\r\n\r\n**Remove by Value**\r\n\r\nFunction that return a copy of array without the Value.\r\n\r\n    /**\r\n    * removeByValue\r\n    * @param {Array} array\r\n    * @param {Number} value\r\n    */\r\n    function removeByValue(array, value){\r\n          return array.filter(function(elem, _index){\r\n              return value != elem;\r\n        });\r\n    }\r\n    l = [1,3,4,5,6,7];\r\n    console.log(removeByValue(l, 5));\r\n\r\n    $&gt; [ 1, 3, 4, 6, 7]\r\n\r\n"},{"score":0,"body_markdown":"There are already a lot of answers, but because no one has done it with a one liner yet, I figured I&#39;d show my method. It takes advantage of the fact that the string.split() function will remove all of the specified characters when creating an array. Here is an example: \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var ary = [1,2,3,4,1234,10,4,5,7,3];\r\n    out = ary.join(&quot;-&quot;).split(&quot;-4-&quot;).join(&quot;-&quot;).split(&quot;-&quot;);\r\n    console.log(out);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIn this example, all of the 4&#39;s are being removed from the array ary. However, it is important to note that any array containing the character &quot;-&quot; will cause issues with this example. In short, it will cause the join(&quot;-&quot;) function to piece your string together improperly. In such a situation, all of the the &quot;-&quot; strings in the above snipet can be replaced with any string that will not be used in the original array. Here is another example: \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var ary = [1,2,3,4,&#39;-&#39;,1234,10,&#39;-&#39;,4,5,7,3];\r\n    out = ary.join(&quot;!@#&quot;).split(&quot;!@#4!@#&quot;).join(&quot;!@#&quot;).split(&quot;!@#&quot;);\r\n    console.log(out);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":9,"body_markdown":"I post my code that removes an array element in place, and reduce the array length as well.\r\n\r\n    function removeElement(idx, arr) {\r\n        // Check the index value\r\n        if (idx &lt; 0 || idx &gt;= arr.length) {\r\n            return;\r\n        }\r\n        // Shift the elements\r\n        for (var i = idx; i &gt; 0; --i) {\r\n            arr[i] = arr[i - 1];\r\n        }\r\n        // Remove the first element in array\r\n        arr.shift();\r\n    }\r\n\r\n\r\n"},{"score":5,"body_markdown":"For anyone looking to replicate a method that will return a new array that has duplicate numbers or strings removed, this has been put together from existing answers:\r\n\r\n    function uniq(array) {\r\n      var len = array.length;\r\n      var dupFree = [];\r\n      var tempObj = {};\r\n    \r\n      for (var i = 0; i &lt; len; i++) {\r\n        tempObj[array[i]] = 0;\r\n      }\r\n    \r\n      console.log(tempObj);\r\n    \r\n      for (var i in tempObj) {\r\n        var element = i;\r\n        if (i.match(/\\d/)) {\r\n          element = Number(i);\r\n        }\r\n        dupFree.push(element);\r\n      }\r\n    \r\n      return dupFree;\r\n    }"},{"score":10,"body_markdown":"What a shame you have an array of integers, not an object where the keys are string equivalents of these integers.\r\n\r\nI&#39;ve looked through a lot of these answers and they all seem to use &quot;brute force&quot; as far as I can see. I haven&#39;t examined every single one, apologies if this is not so. For a smallish array this is fine, but what if you have 000s of integers in it?\r\n\r\nCorrect me if I&#39;m wrong, but can&#39;t we assume that in a `key =&gt; value` map, of the kind which a JavaScript object is, that the key retrieval mechanism can be assumed to be highly engineered and optimised? (NB: if some super-expert tells me that this is not the case, I can suggest using ECMAScript&amp;nbsp;6&#39;s [Map class][1] instead, which certainly will be).\r\n\r\nI&#39;m just suggesting that, in certain circumstances, the best solution might be to convert your array to an object... the problem being, of course, that you might have repeating integer values.  I suggest putting those in buckets as the &quot;value&quot; part of the `key =&gt; value` entries. (NB: if you are sure you don&#39;t have any repeating array elements this can be much simpler: values &quot;same as&quot; keys, and just go `Object.values(...)` to get back your modified array).\r\n\r\nSo you could do:\r\n\r\n    const arr = [ 1, 2, 55, 3, 2, 4, 55 ];\r\n    const f =    function( acc, val, currIndex ){\r\n        // We have not seen this value before: make a bucket... NB: although val&#39;s typeof is &#39;number&#39;,\r\n        // there is seamless equivalence between the object key (always string)\r\n        // and this variable val.\r\n        ! ( val in acc ) ? acc[ val ] = []: 0;\r\n        // Drop another array index in the bucket\r\n        acc[ val ].push( currIndex );\r\n        return acc;\r\n    }\r\n    const myIntsMapObj = arr.reduce( f, {});\r\n\r\n    console.log( myIntsMapObj );\r\n\r\nOutput:\r\n\r\n&gt; Object [ &lt;1 empty slot&gt;, Array[1], Array[2], Array[1], Array[1], &lt;5\r\n&gt; empty slots&gt;, 46 more… ]\r\n\r\nIt is then easy to delete all the numbers 55.\r\n\r\n    delete myIntsMapObj[ 55 ]; // Again, although keys are strings this works\r\n\r\nYou don&#39;t have to delete them all: index values are pushed into their buckets in order of appearance, so (for example):\r\n\r\n    myIntsMapObj[ 55 ].shift(); // And\r\n    myIntsMapObj[ 55 ].pop();\r\n\r\nwill delete the first and last occurrence respectively.  You can count frequency of occurrence easily, replace all 55s with 3s by transferring the contents of one bucket to another, etc.\r\n\r\nRetrieving a modified `int` array from your &quot;bucket object&quot; is slightly involved but not so much: each bucket contains the index (in the original array) of the value represented by the (`string`) key. Each of these bucket values is also unique (each is the unique *index value* in the original array): so you turn them into keys in a new object, with the (real) integer from the &quot;integer string key&quot; as value... then sort the keys and go `Object.values( ... )`.\r\n\r\nThis sounds very involved and time-consuming... but obviously everything depends on the circumstances and desired usage. My understanding is that all versions and contexts of JavaScript operate only in one thread, and the thread doesn&#39;t &quot;let go&quot;, so there could be some horrible congestion with a &quot;brute force&quot; method: caused not so much by the `indexOf` ops, but multiple repeated `slice`/`splice` ops.\r\n\r\n**Addendum** &lt;/br&gt;\r\nIf you&#39;re **sure** this is too much engineering for your use case surely the simplest &quot;brute force&quot; approach is\r\n\r\n    const arr = [ 1, 2, 3, 66, 8, 2, 3, 2 ];\r\n    const newArray = arr.filter( number =&gt; number !== 3 );\r\n    console.log( newArray )\r\n\r\n(Yes, other answers have spotted `Array.prototype.filter`...)\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\r\n\r\n\r\n\r\n\r\n"},{"score":28,"body_markdown":"You should never mutate your array. As this is against the functional programming pattern. You can create a new array without referencing the array you want to change data of using the ECMAScript&amp;nbsp;6 method ```filter```;\r\n\r\n    var myArray = [1, 2, 3, 4, 5, 6];\r\n\r\nSuppose you want to remove ```5``` from the array, you can simply do it like this:\r\n\r\n    myArray = myArray.filter(value =&gt; value !== 5);\r\n\r\nThis will give you a new array without the value you wanted to remove. So the result will be:\r\n\r\n     [1, 2, 3, 4, 6]; // 5 has been removed from this array\r\n\r\nFor further understanding you can read the MDN documentation on [Array.filter][1].\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\r\n\r\n"},{"score":5,"body_markdown":"\tvar array = [2, 5, 9];\r\n\tarray.splice(array.findIndex(x =&gt; x==5), 1);\r\n\r\nUsing Array.findindex, we can reduce the number of lines of code.\r\n\r\n[developer.mozilla.org][1]\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex"},{"score":7,"body_markdown":"I just created a polyfill on the `Array.prototype` via `Object.defineProperty` to remove a desired element in an array without leading to errors when iterating over it later via `for .. in ..`\r\n\r\n    if (!Array.prototype.remove) {\r\n      // Object.definedProperty is used here to avoid problems when iterating with &quot;for .. in ..&quot; in Arrays\r\n      // https://stackoverflow.com/questions/948358/adding-custom-functions-into-array-prototype\r\n      Object.defineProperty(Array.prototype, &#39;remove&#39;, {\r\n        value: function () {\r\n          if (this == null) {\r\n            throw new TypeError(&#39;Array.prototype.remove called on null or undefined&#39;)\r\n          }\r\n    \r\n          for (var i = 0; i &lt; arguments.length; i++) {\r\n            if (typeof arguments[i] === &#39;object&#39;) {\r\n              if (Object.keys(arguments[i]).length &gt; 1) {\r\n                throw new Error(&#39;This method does not support more than one key:value pair per object on the arguments&#39;)\r\n              }\r\n              var keyToCompare = Object.keys(arguments[i])[0]\r\n    \r\n              for (var j = 0; j &lt; this.length; j++) {\r\n                if (this[j][keyToCompare] === arguments[i][keyToCompare]) {\r\n                  this.splice(j, 1)\r\n                  break\r\n                }\r\n              }\r\n            } else {\r\n              var index = this.indexOf(arguments[i])\r\n              if (index !== -1) {\r\n                this.splice(index, 1)\r\n              }\r\n            }\r\n          }\r\n          return this\r\n        }\r\n      })\r\n    } else {\r\n      var errorMessage = &#39;DANGER ALERT! Array.prototype.remove has already been defined on this browser. &#39;\r\n      errorMessage += &#39;This may lead to unwanted results when remove() is executed.&#39;\r\n      console.log(errorMessage)\r\n    }\r\n\r\n**Removing an integer value**\r\n\r\n    var a = [1, 2, 3]\r\n    a.remove(2)\r\n    a // Output =&gt; [1, 3]\r\n\r\n**Removing a string value**\r\n\r\n    var a = [&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;]\r\n    a.remove(&#39;abc&#39;)\r\n    a // Output =&gt; [&#39;a&#39;, &#39;ab&#39;]\r\n\r\n**Removing a boolean value**\r\n\r\n    var a = [true, false, true]\r\n    a.remove(false)\r\n    a // Output =&gt; [true, true]\r\n\r\nIt is also possible to remove an object inside the array via this `Array.prototype.remove` method. You just need to specify the `key =&gt; value` of the `Object` you want to remove.\r\n\r\n**Removing an object value**\r\n\r\n    var a = [{a: 1, b: 2}, {a: 2, b: 2}, {a: 3, b: 2}]\r\n    a.remove({a: 1})\r\n    a // Output =&gt; [{a: 2, b: 2}, {a: 3, b: 2}]"},{"score":4,"body_markdown":"A very naive implementation would be as follows:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    Array.prototype.remove = function(data) {\r\n        const dataIdx = this.indexOf(data)\r\n        if(dataIdx &gt;= 0) {\r\n            this.splice(dataIdx ,1);\r\n        }\r\n        return this.length;\r\n    }\r\n\r\n    let a = [1,2,3];\r\n    // This will change arr a to [1, 3]\r\n    a.remove(2);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nI return the length of the array from the function to comply with the other methods, like `Array.prototype.push()`.\r\n"},{"score":-15,"body_markdown":"    let array = [5,5,4,4,2,3,4]    \r\n    let newArray = array.join(&#39;,&#39;).replace(&#39;5&#39;,&#39;&#39;).split(&#39;,&#39;)\r\n\r\nThis example works if you want to remove one current item."},{"score":5,"body_markdown":"Your question did not indicate if order or distinct values are a requirement.\r\n\r\nIf you don&#39;t care about order, and will not have the same value in the container more than once, use a Set.  It will be way faster, and more succinct.  \r\n\r\n    var aSet = new Set();\r\n\r\n    aSet.add(1);\r\n    aSet.add(2);\r\n    aSet.add(3);\r\n    \r\n    aSet.delete(2);"},{"score":64,"body_markdown":"Here are a few ways to **remove an item from an array using JavaScript**.\r\n\r\nAll the method described **do not mutate the original array**, and instead create a new one.\r\n\r\n## If you know the index of an item\r\n\r\nSuppose you have an array, and you want to remove an item in position `i`.\r\n\r\nOne method is to use `slice()`:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const items = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]\r\n    const i = 3\r\n    const filteredItems = items.slice(0, i).concat(items.slice(i+1, items.length))\r\n\r\n    console.log(filteredItems)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n`slice()` creates a new array with the indexes it receives. We simply create a new array, from start to the index we want to remove, and concatenate another array from the first position following the one we removed to the end of the array.\r\n\r\n## If you know the value\r\n\r\nIn this case, one good option is to use `filter()`, which offers a more _declarative_ approach:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const items = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]\r\n    const valueToRemove = &#39;c&#39;\r\n    const filteredItems = items.filter(item =&gt; item !== valueToRemove)\r\n\r\n    console.log(filteredItems)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThis uses the ES6 arrow functions. You can use the traditional functions to support older browsers:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const items = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]\r\n    const valueToRemove = &#39;c&#39;\r\n    const filteredItems = items.filter(function(item) {\r\n      return item !== valueToRemove\r\n    })\r\n\r\n    console.log(filteredItems)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nor you can use Babel and transpile the ES6 code back to ES5 to make it more digestible to old browsers, yet write modern JavaScript in your code.\r\n\r\n## Removing multiple items\r\n\r\nWhat if instead of a single item, you want to remove many items?\r\n\r\nLet&#39;s find the simplest solution.\r\n\r\n### By index\r\n\r\nYou can just create a function and remove items in series:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const items = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]\r\n\r\n    const removeItem = (items, i) =&gt;\r\n      items.slice(0, i-1).concat(items.slice(i, items.length))\r\n\r\n    let filteredItems = removeItem(items, 3)\r\n    filteredItems = removeItem(filteredItems, 5)\r\n    //[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]\r\n\r\n    console.log(filteredItems)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n### By value\r\n\r\nYou can search for inclusion inside the callback function:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const items = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]\r\n    const valuesToRemove = [&#39;c&#39;, &#39;d&#39;]\r\n    const filteredItems = items.filter(item =&gt; !valuesToRemove.includes(item))\r\n    //&#160;[&quot;a&quot;, &quot;b&quot;, &quot;e&quot;, &quot;f&quot;]\r\n\r\n    console.log(filteredItems)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n## Avoid mutating the original array\r\n\r\n`splice()` (not to be confused with `slice()`) mutates the original array, and should be avoided.\r\n\r\n(originally posted on my site https://flaviocopes.com/how-to-remove-item-from-array/)"},{"score":2,"body_markdown":"Define a method named remove() on array objects using the prototyping feature of JavaScript.\r\n\r\n&gt; Use **splice()** method to fulfill your requirement.\r\n\r\nPlease have a look at the below code.\r\n\r\n    Array.prototype.remove = function(item) {\r\n        // &#39;index&#39; will have -1 if &#39;item&#39; does not exist,\r\n        // else it will have the index of the first item found in the array\r\n        var index = this.indexOf(item);\r\n\r\n        if (index &gt; -1) {\r\n            // The splice() method is used to add/remove items(s) in the array\r\n            this.splice(index, 1);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    var arr = [ 11, 22, 67, 45, 61, 89, 34, 12, 7, 8, 3, -1, -4];\r\n\r\n    // Printing array\r\n    // [ 11, 22, 67, 45, 61, 89, 34, 12, 7, 8, 3, -1, -4];\r\n    console.log(arr)\r\n\r\n    // Removing 67 (getting its index, i.e. 2)\r\n    console.log(&quot;Removing 67&quot;)\r\n    var index = arr.remove(67)\r\n\r\n    if (index &gt; 0){\r\n        console.log(&quot;Item 67 found at &quot;, index)\r\n    } else {\r\n        console.log(&quot;Item 67 does not exist in array&quot;)\r\n    }\r\n\r\n    // Printing updated array\r\n    // [ 11, 22, 45, 61, 89, 34, 12, 7, 8, 3, -1, -4];\r\n    console.log(arr)\r\n\r\n    // ............... Output ................................\r\n    // [ 11, 22, 67, 45, 61, 89, 34, 12, 7, 8, 3, -1, -4 ]\r\n    // Removing 67\r\n    // Item 67 found at  2\r\n    // [ 11, 22, 45, 61, 89, 34, 12, 7, 8, 3, -1, -4 ]\r\n\r\n&gt; **Note:** The below is the full example code executed on the **Node.js REPL** which describes the use of push(), pop(), shift(), unshift(), and splice() methods.\r\n\r\n    &gt; // Defining an array\r\n    undefined\r\n    &gt; var arr = [12, 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34];\r\n    undefined\r\n    &gt; // Getting length of array\r\n    undefined\r\n    &gt; arr.length;\r\n    16\r\n    &gt; // Adding 1 more item at the end i.e. pushing an item\r\n    undefined\r\n    &gt; arr.push(55);\r\n    17\r\n    &gt; arr\r\n    [ 12, 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34, 55 ]\r\n    &gt; // Popping item from array (i.e. from end)\r\n    undefined\r\n    &gt; arr.pop()\r\n    55\r\n    &gt; arr\r\n    [ 12, 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]\r\n    &gt; // Remove item from beginning\r\n    undefined\r\n    &gt; arr.shift()\r\n    12\r\n    &gt; arr\r\n    [ 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]\r\n    &gt; // Add item(s) at beginning\r\n    undefined\r\n    &gt; arr.unshift(67); // Add 67 at beginning of the array and return number of items in updated/new array\r\n    16\r\n    &gt; arr\r\n    [ 67, 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]\r\n    &gt; arr.unshift(11, 22); // Adding 2 more items at the beginning of array\r\n    18\r\n    &gt; arr\r\n    [ 11, 22, 67, 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]\r\n    &gt;\r\n    &gt; // Define a method on array (temporarily) to remove an item and return the index of removed item; if it is found else return -1\r\n    undefined\r\n    &gt; Array.prototype.remove = function(item) {\r\n    ... var index = this.indexOf(item);\r\n    ... if (index &gt; -1) {\r\n    ..... this.splice(index, 1); // splice() method is used to add/remove items in array\r\n    ..... }\r\n    ... return index;\r\n    ... }\r\n    [Function]\r\n    &gt;\r\n    &gt; arr\r\n    [ 11, 22, 67, 45, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]\r\n    &gt;\r\n    &gt; arr.remove(45);    // Remove 45 (you will get the index of removed item)\r\n    3\r\n    &gt; arr\r\n    [ 11, 22, 67, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]\r\n    &gt;\r\n    &gt; arr.remove(22)    // Remove 22\r\n    1\r\n    &gt; arr\r\n    [ 11, 67, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]\r\n    &gt; arr.remove(67)    // Remove 67\r\n    1\r\n    &gt; arr\r\n    [ 11, 67, 89, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]\r\n    &gt;\r\n    &gt; arr.remove(89)    // Remove 89\r\n    2\r\n    &gt; arr\r\n    [ 11, 67, 34, 12, 7, 8, 3, -1, -4, -11, 0, 56, 12, 34 ]\r\n    &gt;\r\n    &gt; arr.remove(100);  // 100 doesn&#39;t exist, remove() will return -1\r\n    -1\r\n    &gt;\r\n\r\n\r\n"},{"score":18,"body_markdown":"I have another good solution for removing from an array:\r\n\r\n    var words = [&#39;spray&#39;, &#39;limit&#39;, &#39;elite&#39;, &#39;exuberant&#39;, &#39;destruction&#39;, &#39;present&#39;];\r\n    \r\n    const result = words.filter(word =&gt; word.length &gt; 6);\r\n    \r\n    console.log(result);\r\n    // expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]\r\n\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"},{"score":6,"body_markdown":"Delete an element from last\r\n\r\n    arrName.pop();\r\n\r\nDelete an element from first\r\n\r\n    arrName.shift();\r\n\r\nDelete from the middle\r\n\r\n    arrName.splice(starting index, number of element you wnt to delete);\r\n\r\n    Example: arrName.splice(1, 1);\r\n\r\nDelete one element from last\r\n\r\n    arrName.splice(-1);\r\n\r\nDelete by using an array index number\r\n\r\n     delete arrName[1];\r\n\r\n"},{"score":-1,"body_markdown":"        Array.prototype.remove = function(start, end) {\r\n            var n = this.slice((end || start) + 1 || this.length);\r\n            return this.length = start &lt; 0 ? this.length + start : start,\r\n            this.push.apply(this, n)\r\n        }\r\n\r\n`start` and `end` can be negative. In that case they count from the end of the array.\r\n\r\nIf only `start` is specified, only one element is removed.\r\n\r\nThe function returns the new array length.\r\n\r\n    z = [0,1,2,3,4,5,6,7,8,9];\r\n    \r\n    newlength = z.remove(2,6);\r\n\r\n(8) [0, 1, 7, 8, 9]\r\n\r\n    z=[0,1,2,3,4,5,6,7,8,9];\r\n    \r\n    newlength = z.remove(-4,-2);\r\n\r\n(7)&#160;[0, 1, 2, 3, 4, 5, 9]\r\n\r\n    z=[0,1,2,3,4,5,6,7,8,9];\r\n    \r\n    newlength = z.remove(3,-2);\r\n\r\n(4)&#160;[0, 1, 2, 9]\r\n\r\n"},{"score":23,"body_markdown":"You have 1 to 9 in the array, and you want remove 5. Use the below code:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var numberArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n    var newNumberArray = numberArray.filter(m =&gt; {\r\n      return m !== 5;\r\n    });\r\n\r\n    console.log(&quot;new Array, 5 removed&quot;, newNumberArray);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n----------\r\n\r\nIf you want to multiple values. Example:- 1,7,8\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var numberArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n    var newNumberArray = numberArray.filter(m =&gt; {\r\n      return (m !== 1) &amp;&amp; (m !== 7) &amp;&amp; (m !== 8);\r\n    });\r\n\r\n    console.log(&quot;new Array, 1,7 and 8 removed&quot;, newNumberArray);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n----------\r\n\r\nIf you want to remove an array value in an array. Example: [3,4,5]\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var numberArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n    var removebleArray = [3,4,5];\r\n\r\n    var newNumberArray = numberArray.filter(m =&gt; {\r\n        return !removebleArray.includes(m);\r\n    });\r\n\r\n    console.log(&quot;new Array, [3,4,5] removed&quot;, newNumberArray);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIncludes supported browser is [link][1].\r\n\r\n  [1]: https://www.w3schools.com/jsref/jsref_includes_array.asp\r\n\r\n"},{"score":3,"body_markdown":"I had this problem myself (in a situation where replacing the array was acceptable) and solved it with a simple:\r\n\r\n    var filteredItems = this.items.filter(function (i) {\r\n        return i !== item;\r\n    });\r\n\r\nTo give the above snippet a bit of context:\r\n\r\n    self.thingWithItems = {\r\n        items: [],\r\n        removeItem: function (item) {\r\n            var filteredItems = this.items.filter(function (i) {\r\n                return i !== item;\r\n            });\r\n\r\n            this.items = filteredItems;\r\n        }\r\n    };\r\n\r\nThis solution should work with both reference and value items. It all depends whether you need to maintain a reference to the original array as to whether this solution is applicable.\r\n\r\n"},{"score":32,"body_markdown":"I want to answer based on [ECMAScript&amp;nbsp;6][1]. Assume, you have an array like below:\r\n\r\n    let arr = [1,2,3,4];\r\n\r\nIf you want to delete at a special index like `2`, write the below code:\r\n\r\n    arr.splice(2, 1); //=&gt; arr became [1,2,4]\r\n\r\nBut if you want to delete a special item like `3` and you don&#39;t know its index, do like below:\r\n\r\n    arr = arr.filter(e =&gt; e !== 3); //=&gt; arr became [1,2,4]\r\n\r\n**Hint**: please use an arrow function for filter callback unless you will get an empty array.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\r\n\r\n\r\n\r\n"},{"score":3,"body_markdown":"To me the simpler is the better, and as we are in 2018 (near 2019) I give you this (near) one-liner to answer the original question:\r\n\r\n    Array.prototype.remove = function (value) {\r\n        return this.filter(f =&gt; f != value)\r\n    }\r\n\r\nThe useful thing is that you can use it in a curry expression such as:\r\n\r\n    [1,2,3].remove(2).sort()\r\n"},{"score":0,"body_markdown":"    var arr =[1,2,3,4,5];\r\n    \r\n    arr.splice(0,1)\r\n    \r\n    console.log(arr)\r\n\r\n\r\nOutput     [2, 3, 4, 5];"},{"score":50,"body_markdown":"**Removing a particular element/string from an array can be done in a one-liner:**\r\n\r\n\r\n    theArray.splice(theArray.indexOf(&quot;stringToRemoveFromArray&quot;), 1);\r\n\r\nwhere:\r\n\r\n*theArray* : the array you want to remove something particular from\r\n\r\n*stringToRemoveFromArray* : the string you want removed and 1 is the amount of elements you want to remove.\r\n\r\n*NOTE* : If &quot;stringToRemoveFromArray&quot; is not located your in array, this will remove last element of array.\r\n \r\nIts always good practice to check if the element exists in your array first, before removing it. \r\n\r\n    if (theArray.indexOf(&quot;stringToRemoveFromArray&quot;) &gt;= 0){\r\n       theArray.splice(theArray.indexOf(&quot;stringToRemoveFromArray&quot;), 1);\r\n    }\r\n\r\n----------\r\n\r\n\r\nIf you have access to newer Ecmascript versions on your client&#39;s computers (WARNING, may not work on older stations): \r\n\r\n    var array=[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;]\r\n    var newArray = array.filter((value)=&gt;value!=&#39;3&#39;);\r\n\r\nWhere &#39;3&#39; is the value you want removed from the array.\r\nThe array would then become : `[&#39;1&#39;,&#39;2&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;]`"},{"score":3,"body_markdown":"To remove a particular element or subsequent elements, [Array.splice()][1] method works well.\r\n\r\nThe splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements, and it returns the removed item(s).\r\n\r\n**Syntax:** *array.splice(index, deleteCount, item1, ....., itemX)*\r\n\r\nHere `index` is mandatory and rest arguments are optional.\r\n\r\nFor example:\r\n\r\n    let arr = [1, 2, 3, 4, 5, 6];\r\n    arr.splice(2,1);\r\n    console.log(arr);\r\n    // [1, 2, 4, 5, 6]\r\n\r\n**Note:** [Array.splice()][1] method can be used if you know the index of the element which you want to delete. But we may have a few more cases as mentioned below:\r\n\r\n1. In case you want to delete just last element, you can use [Array.pop()][2]\r\n\r\n2. In case you want to delete just first element, you can use [Array.shift()][3]\r\n\r\n3. If you know the element alone, but not the position (or index) of the element, and want to delete all matching elements using [Array.filter()][4] method:\r\n\r\n        let arr = [1, 2, 1, 3, 4, 1, 5, 1];\r\n\r\n        let newArr = arr.filter(function(val){\r\n            return val !== 1;\r\n        });\r\n        //newArr =&gt; [2, 3, 4, 5]\r\n\r\n    Or by using the splice() method as:\r\n\r\n        let arr = [1, 11, 2, 11, 3, 4, 5, 11, 6, 11];\r\n            for (let i = 0; i &lt; arr.length-1; i++) {\r\n               if ( arr[i] === 11) {\r\n                 arr.splice(i, 1);\r\n               }\r\n            }\r\n            console.log(arr);\r\n            // [1, 2, 3, 4, 5, 6]\r\n\r\n    Or suppose we want to delete `del` from the array `arr`:\r\n\r\n        let arr = [1, 2, 3, 4, 5, 6];\r\n        let del = 4;\r\n        if (arr.indexOf(4) &gt;= 0) {\r\n            arr.splice(arr.indexOf(4), 1)\r\n        }\r\n\r\n    Or\r\n\r\n        let del = 4;\r\n        for(var i = arr.length - 1; i &gt;= 0; i--) {\r\n            if(arr[i] === del) {\r\n               arr.splice(i, 1);\r\n            }\r\n        }\r\n\r\n4. If you know the element alone but not the position (or index) of the element, and want to delete just very first matching element using splice() method:\r\n\r\n        let arr = [1, 11, 2, 11, 3, 4, 5, 11, 6, 11];\r\n\r\n        for (let i = 0; i &lt; arr.length-1; i++) {\r\n          if ( arr[i] === 11) {\r\n            arr.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n        console.log(arr);\r\n        // [1, 11, 2, 11, 3, 4, 5, 11, 6, 11]\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\r\n  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\r\n  [4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\r\n\r\n\r\n"},{"score":0,"body_markdown":"The **splice()** method changes the contents of an array by removing or replacing existing elements and/or adding new elements.\r\n\r\n**array.splice(start[, deleteCount[, item1[, item2[, ...]]]])**\r\n\r\n**start**\r\n\r\nThe index at which to start changing the array (with origin 0). If greater than the length of the array, the actual starting index will be set to the length of the array. If negative, it will begin that many elements from the end of the array (with origin -1) and will be set to 0 if the absolute value is greater than the length of the array.\r\n\r\n**deleteCount Optional**\r\n\r\nAn integer indicating the number of old array elements to remove.\r\n\r\nIf deleteCount is omitted, or if its value is larger than array.length - start (that is, if it is greater than the number of elements left in the array, starting at start), then all of the elements from start through the end of the array will be deleted.\r\nIf deleteCount is 0 or negative, no elements are removed. In this case, you should specify at least one new element (see below).\r\n\r\n**item1, item2, ... Optional**\r\n\r\nThe elements to add to the array, beginning at the start index. If you don&#39;t specify any elements, splice() will only remove elements from the array.\r\n\r\n**For more references, kindly go through:**\r\n\r\n*[Array.prototype.splice()][1]*\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"},{"score":0,"body_markdown":"Take profit of reduce method as follows:\r\n\r\nCase a) if you need to remove an element by index:\r\n\r\n    function remove(arr, index) {\r\n      return arr.reduce((prev, x, i) =&gt; prev.concat(i !== index ? [x] : []), []);\r\n    }\r\n\r\ncase b) if you need to remove an element by the value of the element (int):\r\n\r\n    function remove(arr, value) {\r\n      return arr.reduce((prev, x, i) =&gt; prev.concat(x !== value ? [x] : []), []);\r\n    }\r\n\r\nSo in this way we can return a new array (will be in a cool functional way - much better than using push or splice) with the element removed.\r\n\r\n"},{"score":9,"body_markdown":"**Splice, filter and delete to remove an element from an array**\r\n\r\nEvery array has its index, and it helps to delete a particular element with their index.\r\n\r\n***The splice() method***\r\n\r\n    array.splice(index, 1);    \r\n\r\nThe first parameter is **index** and the second is the number of elements you want to delete from that index.\r\n\r\nSo for a single element, we use 1.\r\n\r\n***The delete method***\r\n\r\n    delete array[index]\r\n\r\n***The filter() method***\r\n\r\nIf you want to delete an element which is repeated in an array then filter the array:\r\n\r\n    removeAll = array.filter(e =&gt; e != elem);\r\n\r\nWhere `elem` is the element you want to remove from the array and `array` is your array name.\r\n\r\n\r\n"},{"score":13,"body_markdown":"Oftentimes it&#39;s better to just create a new array with the `filter` function.\r\n\r\n    let array = [1,2,3,4];\r\n    array = array.filter(i =&gt; i !== 4); // [1,2,3]\r\n\r\nThis also improves readability IMHO. I&#39;m not a fan of `slice`, although it know sometimes you should go for it.\r\n\r\n\r\n"},{"score":10,"body_markdown":"    [2,3,5].filter(i =&gt; ![5].includes(i))"},{"score":1,"body_markdown":"You can extend the array object to define a custom delete function as follows:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let numbers = [1,2,4,4,5,3,45,9];\r\n\r\n    numbers.delete = function(value){\r\n        var indexOfTarget = this.indexOf(value)\r\n\r\n        if(indexOfTarget !== -1)\r\n        {\r\n            console.log(&quot;array before delete &quot; + this)\r\n            this.splice(indexOfTarget, 1)\r\n            console.log(&quot;array after delete &quot; + this)\r\n        }\r\n        else{\r\n            console.error(&quot;element &quot; + value + &quot; not found&quot;)\r\n        }\r\n    }\r\n    numbers.delete(888)\r\n    // Expected output:\r\n    // element 888 not found\r\n    numbers.delete(1)\r\n\r\n    // Expected output;\r\n    // array before delete 1,2,4,4,5,3,45,9\r\n    // array after delete 2,4,4,5,3,45,9\r\n\r\n&lt;!-- end snippet --&gt;\r\n"},{"score":0,"body_markdown":"Non in-place solution\r\n\r\n    arr.slice(0,i).concat(arr.slice(i+1));\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let arr = [10, 20, 30, 40, 50]\r\n\r\n    let i = 2 ; // position to remove (starting from 0)\r\n    let r = arr.slice(0,i).concat(arr.slice(i+1));\r\n\r\n    console.log(r);\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":2,"body_markdown":"# Remove single element\r\n\r\n    function removeSingle(array, element) {\r\n        const index = array.indexOf(element)\r\n        if (index &gt;= 0) {\r\n            array.splice(index, 1)\r\n        }\r\n    }\r\n\r\n# Remove multiple elements, in-place\r\n\r\nThis is more complicated to ensure the algorithm runs in O(N) time.\r\n\r\n    function removeAll(array, element) {\r\n        let newLength = 0\r\n        for (const elem of array) {\r\n            if (elem !== number) {\r\n                array[newLength++] = elem\r\n            }\r\n        }\r\n        array.length = newLength\r\n    }\r\n\r\n# Remove multiple elements, creating new object\r\n\r\n    array.filter(elem =&gt; elem !== number)"},{"score":6,"body_markdown":"You can create an index with an all accessors example:\r\n\r\n    &lt;div &gt;\r\n    &lt;/div&gt;\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function getIndex($id){\r\n      return (\r\n        this.removeIndex($id)\r\n        alert(&quot;This element was removed&quot;)\r\n      )\r\n    }\r\n\r\n\r\n    function removeIndex(){\r\n       const index = $id;\r\n       this.accesor.id.splice(index.id) // You can use splice for slice index on\r\n                                        // accessor id and return with message\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;div&gt;\r\n        &lt;fromList&gt;\r\n            &lt;ul&gt;\r\n                {...this.array.map( accesors =&gt; {\r\n                    &lt;li type=&quot;hidden&quot;&gt;&lt;/li&gt;\r\n                    &lt;li&gt;{...accesors}&lt;/li&gt;\r\n                })\r\n\r\n                }\r\n            &lt;/ul&gt;\r\n        &lt;/fromList&gt;\r\n\r\n        &lt;form id=&quot;form&quot; method=&quot;post&quot;&gt;\r\n            &lt;input  id=&quot;{this.accesors.id}&quot;&gt;\r\n            &lt;input type=&quot;submit&quot; callbackforApplySend...getIndex({this.accesors.id}) name=&quot;sendendform&quot; value=&quot;removeIndex&quot; &gt;\r\n        &lt;/form&gt;\r\n    &lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":1,"body_markdown":"I would like to suggest to remove one array item using delete and filter:\r\n\r\n&gt;     var arr = [1,2,3,4,5,5,6,7,8,9];\r\n&gt;     delete arr[5];\r\n&gt;     arr = arr.filter(function(item){ return item != undefined; });\r\n&gt;     //result: [1,2,3,4,5,6,7,8,9]\r\n\r\nSo, we can remove only one specific array item instead of all items with the same value."},{"score":7,"body_markdown":"Most of the answers here give a solution using -\r\n\r\n 1. indexOf and splice\r\n 2. delete\r\n 3. filter\r\n 4. regular `for loop`\r\n\r\nAlthough all the solutions should work with these methods, I thought we could _use string manipulation_.\r\n\r\nPoints to note about this solution -\r\n\r\n 1. It will leave holes in the data (they could be removed with an extra filter)\r\n 2. This solution **works for not just primitive search values, but also objects**.\r\n\r\nThe trick is to -\r\n\r\n1. `stringify` input data set and the search value\r\n2. replace the search value in the input data set with an empty string\r\n3. return `split` data on delimiter `,`.\r\n\r\n```js\r\n    remove = (input, value) =&gt; {\r\n  \t    const stringVal = JSON.stringify(value);\r\n     \tconst result = JSON.stringify(input)\r\n      \r\n        return result.replace(stringVal, &quot;&quot;).split(&quot;,&quot;);\r\n    }\r\n```\r\n\r\nA JSFiddle with tests for objects and numbers is created here - https://jsfiddle.net/4t7zhkce/33/\r\n\r\nCheck the `remove` method in the fiddle.\r\n"},{"score":-8,"body_markdown":"### **Remove the particular array item**\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var fruits = [&quot;Apple&quot;, &quot;Banana&quot;, &quot;Mango&quot;, &quot;Orange&quot;, &quot;Grapes&quot;];\r\n\r\n    for(var i = 0; i &lt; cars.length; i++){\r\n       if (fruits[i] === &quot;Banana&quot;) {\r\n         fruits.splice(i, 1);\r\n         i++;\r\n       }\r\n    }\r\n\r\n    console.log(fruits); //[&quot;Apple&quot;, &quot;Mango&quot;, &quot;Orange&quot;, &quot;Grapes&quot;]"},{"score":5,"body_markdown":"You can create a prototype for that. Just pass the array element and the value which you want to remove from the array element:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    Array.prototype.removeItem = function(array,val) {\r\n        array.forEach((arrayItem,index) =&gt; {\r\n            if (arrayItem == val) {\r\n                array.splice(index, 1);\r\n            }\r\n        });\r\n        return array;\r\n    }\r\n    var DummyArray = [1, 2, 3, 4, 5, 6];\r\n    console.log(DummyArray.removeItem(DummyArray, 3));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n\r\n"},{"score":9,"body_markdown":"To find and remove a particular string from an array of strings:\r\n\r\n    var colors = [&quot;red&quot;,&quot;blue&quot;,&quot;car&quot;,&quot;green&quot;];\r\n    var carIndex = colors.indexOf(&quot;car&quot;); // Get &quot;car&quot; index\r\n    // Remove car from the colors array\r\n    colors.splice(carIndex, 1); // colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]\r\n\r\nSource: https://www.codegrepper.com/?search_term=remove+a+particular+element+from+array\r\n\r\n\r\n\r\n"},{"score":41,"body_markdown":"Performance\r\n-\r\nToday (2019-12-09) I conduct performance tests on macOS v10.13.6 (High Sierra) for chosen solutions. I show `delete` (A), but I not use it in comparison with other methods, because it left empty space in the array.\r\n\r\nThe conclusions\r\n\r\n* the fastest solution is `array.splice` (C) (except Safari for small arrays where it has the second time)\r\n* for big arrays, `array.slice+splice` (H) is the fastest immutable solution for Firefox and Safari; `Array.from` (B) is fastest in Chrome\r\n* mutable solutions are usually 1.5x-6x faster than immutable\r\n* for small tables on Safari, surprisingly the mutable solution (C) is slower than the immutable solution (G)\r\n\r\n\r\nDetails\r\n-\r\nIn tests I remove middle element from the array in different ways. The **A, C** solutions are in-place. The **B, D, E, F, G, H** solutions are immutable.\r\n\r\n\r\n**Results for array with 10 elements**\r\n\r\n[![Enter image description here][1]][1]\r\n\r\nIn Chrome the `array.splice` (C) is the fastest in-place solution. The `array.filter` (D) is the fastest immutable solution. The slowest is `array.slice` (F). You can perform the test on your machine [here][2].\r\n\r\n**Results for array with 1.000.000 elements**\r\n\r\n[![Enter image description here][3]][3]\r\n\r\nIn Chrome the `array.splice` (C) is the fastest in-place solution (the `delete` (C) is similar fast - but it left an empty slot in the array (so it does not perform a &#39;full remove&#39;)). The `array.slice-splice` (H) is the fastest immutable solution. The slowest is `array.filter` (D and E). You can perform the test on your machine [here][4].\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n    var log = (letter,array) =&gt; console.log(letter, array.join `,`);\r\n\r\n    function A(array) {\r\n      var index = array.indexOf(5);\r\n      delete array[index];\r\n      log(&#39;A&#39;, array);\r\n    }\r\n\r\n    function B(array) {\r\n      var index = array.indexOf(5);\r\n      var arr = Array.from(array);\r\n      arr.splice(index, 1)\r\n      log(&#39;B&#39;, arr);\r\n    }\r\n\r\n    function C(array) {\r\n      var index = array.indexOf(5);\r\n      array.splice(index, 1);\r\n      log(&#39;C&#39;, array);\r\n    }\r\n\r\n    function D(array) {\r\n      var arr = array.filter(item =&gt; item !== 5)\r\n      log(&#39;D&#39;, arr);\r\n    }\r\n\r\n    function E(array) {\r\n      var index = array.indexOf(5);\r\n      var arr = array.filter((item, i) =&gt; i !== index)\r\n      log(&#39;E&#39;, arr);\r\n    }\r\n\r\n    function F(array) {\r\n      var index = array.indexOf(5);\r\n      var arr = array.slice(0, index).concat(array.slice(index + 1))\r\n      log(&#39;F&#39;, arr);\r\n    }\r\n\r\n    function G(array) {\r\n      var index = array.indexOf(5);\r\n      var arr = [...array.slice(0, index), ...array.slice(index + 1)]\r\n      log(&#39;G&#39;, arr);\r\n    }\r\n\r\n    function H(array) {\r\n      var index = array.indexOf(5);\r\n      var arr = array.slice(0);\r\n      arr.splice(index, 1);\r\n      log(&#39;H&#39;, arr);\r\n    }\r\n\r\n    A([...a]);\r\n    B([...a]);\r\n    C([...a]);\r\n    D([...a]);\r\n    E([...a]);\r\n    F([...a]);\r\n    G([...a]);\r\n    H([...a]);\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    This snippet only presents code used in performance tests - it does not perform tests itself.\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nComparison for browsers: Chrome v78.0.0, Safari v13.0.4, and Firefox v71.0.0\r\n\r\n[![Enter image description here][5]][5]\r\n\r\n  [1]: https://i.stack.imgur.com/foNhq.png\r\n  [2]: https://jsperf.com/small-array-remove-element\r\n  [3]: https://i.stack.imgur.com/7zCJt.png\r\n  [4]: https://jsperf.com/big-array-remove-element\r\n  [5]: https://i.stack.imgur.com/Ct9DN.png\r\n\r\n\r\n\r\n"},{"score":4,"body_markdown":"Remove a specific element from an array can be done in one line with the filter option, and it&#39;s supported by all browsers: https://caniuse.com/#search=filter%20array\r\n\r\n```\r\nfunction removeValueFromArray(array, value) {\r\n    return array.filter(e =&gt; e != value)\r\n}\r\n```\r\nI tested this function here: https://bit.dev/joshk/jotils/remove-value-from-array/~code#test.ts"},{"score":6,"body_markdown":"You can use `splice` to remove objects or values from an array.\r\n\r\nLet&#39;s consider an array of length `5`, with values **`10`,`20`,`30`,`40`,`50`**, and I want to remove the value **`30`** from it.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var array = [10,20,30,40,50];\r\n    if (array.indexOf(30) &gt; -1) {\r\n       array.splice(array.indexOf(30), 1);\r\n    }\r\n    console.log(array); // [10,20,40,50]\r\n\r\n&lt;!-- end snippet --&gt;\r\n"},{"score":7,"body_markdown":"I found this blog post which is showing nine ways to do it:\r\n\r\n*[9 Ways to Remove Elements From A JavaScript Array - Plus How to Safely Clear JavaScript Arrays][1]*\r\n\r\nI prefer to use `filter()`:\r\n\r\n    var filtered_arr = arr.filter(function(ele){\r\n       return ele != value;\r\n    })\r\n\r\n  [1]: https://love2dev.com/blog/javascript-remove-from-array/\r\n\r\n\r\n\r\n\r\n"},{"score":-3,"body_markdown":"You can use \r\n\r\n    Array.splice(index);"},{"score":5,"body_markdown":"If the array contains duplicate values and you want to remove all the occurrences of your target then this is the way to go...\r\n\r\n    let data = [2, 5, 9, 2, 8, 5, 9, 5];\r\n    let target = 5;\r\n    data = data.filter(da =&gt; da !== target);\r\n\r\nNote: - the filter doesn&#39;t change the original array; instead it creates a new array.\r\n\r\nSo assigning again is important.\r\n\r\nThat&#39;s led to another problem. You can&#39;t make the variable `const`. It should be `let` or `var`.\r\n\r\n\r\n\r\n\r\n"},{"score":30,"body_markdown":"# ES10 Update\r\n\r\nThis post summarizes common approaches to element removal from array as of ECMAScript 2019 (ES10).\r\n\r\n## 1. General cases\r\n\r\n### 1.1. Removing Array element by value using `.splice()`\r\n\r\n| **In-place**: Yes | &lt;br/&gt;\r\n| **Removes duplicates**: Yes(loop), No(indexOf) | &lt;br/&gt;\r\n| **By value / index**: By index |\r\n\r\nIf you know the value you want to remove from an array you can use the splice method. First you must identify the index of the target item. You then use the index as the start element and remove just one element.\r\n\r\n```javascript\r\n// With a &#39;for&#39; loop\r\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\r\nfor( let i = 0; i &lt; arr.length; i++){\r\n  if ( arr[i] === 5) {\r\n    arr.splice(i, 1);\r\n  }\r\n} // =&gt; [1, 2, 3, 4, 6, 7, 8, 9, 0]\r\n\r\n// With the .indexOf() method\r\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\r\nconst i = arr.indexOf(5);\r\narr.splice(i, 1); // =&gt; [1, 2, 3, 4, 6, 7, 8, 9, 0]\r\n```\r\n\r\n### 1.2. Removing Array element using the `.filter()` method\r\n\r\n| **In-place**: No | &lt;br/&gt;\r\n| **Removes duplicates**: Yes | &lt;br/&gt;\r\n| **By value / index**: By value | &lt;br/&gt;\r\n\r\nSpecific element can be ***filtered out*** from array, by providing filtering function. Such function is then called for every element in array.\r\n\r\n```javascript\r\nconst value = 3\r\nlet arr = [1, 2, 3, 4, 5, 3]\r\narr = arr.filter(item =&gt; item !== value)\r\nconsole.log(arr)\r\n// [ 1, 2, 4, 5 ]\r\n```\r\n\r\n### 1.3. Removing Array element by extending `Array.prototype`\r\n\r\n| **In-place**: Yes/No (Depends on implementation) | &lt;br/&gt;\r\n| **Removes duplicates**: Yes/No (Depends on implementation) | &lt;br/&gt;\r\n| **By value / index**: By index / By value (Depends on implementation) |\r\n\r\nPrototype of Array can be extended with additional methods. Such methods will be then available to use on created arrays.\r\n\r\n**Note:** Extending prototypes of objects from standard library of JavaScript (like Array) is considered by some as an antipattern.\r\n\r\n```javascript\r\n// In-place, removes all, by value implementation\r\nArray.prototype.remove = function(item) {\r\n    for (let i = 0; i &lt; this.length; i++) {\r\n        if (this[i] === item) {\r\n            this.splice(i, 1);\r\n        }\r\n    }\r\n}\r\nconst arr1 = [1,2,3,1];\r\narr1.remove(1) // arr1 equals [2,3]\r\n\r\n// Non-stationary, removes first, by value implementation\r\nArray.prototype.remove = function(item) {\r\n    const arr = this.slice();\r\n    for (let i = 0; i &lt; this.length; i++) {\r\n        if (arr[i] === item) {\r\n            arr.splice(i, 1);\r\n            return arr;\r\n        }\r\n    }\r\n    return arr;\r\n}\r\nlet arr2 = [1,2,3,1];\r\narr2 = arr2.remove(1) // arr2 equals [2,3,1]\r\n```\r\n\r\n### 1.4. Removing Array element using the `delete` operator\r\n\r\n| **In-place**: Yes | &lt;br/&gt;\r\n| **Removes duplicates**: No | &lt;br/&gt;\r\n| **By value / index**: By index |\r\n\r\nUsing the delete operator does not affect the length property. Nor does it affect the indexes of subsequent elements. The array becomes sparse, which is a fancy way of saying the deleted item is not removed but becomes undefined.\r\n\r\n```javascript\r\nconst arr = [1, 2, 3, 4, 5, 6];\r\ndelete arr[4]; // Delete element with index 4\r\nconsole.log( arr ); // [1, 2, 3, 4, undefined, 6]\r\n```\r\n\r\nThe delete operator is designed to remove properties from JavaScript objects, which arrays are objects.\r\n\r\n### 1.5. Removing Array element using `Object` utilities (&gt;= ES10)\r\n\r\n| **In-place**: No | &lt;br/&gt;\r\n| **Removes duplicates**: Yes | &lt;br/&gt;\r\n| **By value / index**: By value |\r\n\r\nES10 introduced `Object.fromEntries`, which can be used to create desired Array from any Array-like object and filter unwanted elements during the process.\r\n\r\n```javascript\r\nconst object = [1,2,3,4];\r\nconst valueToRemove = 3;\r\nconst arr = Object.values(Object.fromEntries(\r\n  Object.entries(object)\r\n  .filter(([ key, val ]) =&gt; val !== valueToRemove)\r\n));\r\nconsole.log(arr); // [1,2,4]\r\n```\r\n\r\n## 2. Special cases\r\n\r\n### 2.1 Removing element if it&#39;s at the end of the Array\r\n\r\n#### **2.1.1. Changing Array `length`**\r\n\r\n| **In-place**: Yes | &lt;br/&gt;\r\n| **Removes duplicates**: No | &lt;br/&gt;\r\n| **By value / index**: N/A |\r\n\r\nJavaScript Array elements can be removed from the end of an array by setting the length property to a value less than the current value. Any element whose index is greater than or equal to the new length will be removed.\r\n\r\n```javascript\r\nconst arr = [1, 2, 3, 4, 5, 6];\r\narr.length = 5; // Set length to remove element\r\nconsole.log( arr ); // [1, 2, 3, 4, 5]\r\n```\r\n\r\n#### **2.1.2. Using `.pop()` method**\r\n\r\n| **In-place**: Yes | &lt;br/&gt;\r\n| **Removes duplicates**: No | &lt;br/&gt;\r\n| **By value / index**: N/A |\r\n\r\nThe pop method removes the last element of the array, returns that element, and updates the length property. The pop method modifies the array on which it is invoked, This means unlike using delete the last element is removed completely and the array length reduced.\r\n\r\n```javascript\r\nconst arr = [1, 2, 3, 4, 5, 6];\r\narr.pop(); // returns 6\r\nconsole.log( arr ); // [1, 2, 3, 4, 5]\r\n```\r\n\r\n### 2.2. Removing element if it&#39;s at the beginning of the Array\r\n\r\n| **In-place**: Yes | &lt;br/&gt;\r\n| **Removes duplicates**: No | &lt;br/&gt;\r\n| **By value / index**: N/A |\r\n\r\nThe `.shift()` method works much like the pop method except it removes the first element of a JavaScript array instead of the last. When the element is removed the remaining elements are shifted down.\r\n\r\n```javascript\r\nconst arr = [1, 2, 3, 4];\r\narr.shift(); // returns 1\r\nconsole.log( arr ); // [2, 3, 4]\r\n```\r\n\r\n### 2.3. Removing element if it&#39;s the only element in the Array\r\n\r\n| **In-place**: Yes | &lt;br/&gt;\r\n| **Removes duplicates**: N/A | &lt;br/&gt;\r\n| **By value / index**: N/A |\r\n\r\nThe fastest technique is to set an array variable to an empty array.\r\n\r\n```javascript\r\nlet arr = [1];\r\narr = []; //empty array\r\n```\r\nAlternatively technique from 2.1.1 can be used by setting length to 0.\r\n\r\n"},{"score":8,"body_markdown":"Immutable way of removing an element from array using ES6 spread operator.\r\n\r\nLet&#39;s say you want to remove 4.\r\n\r\n    let array = [1,2,3,4,5]\r\n    const index = array.indexOf(4)\r\n    let new_array = [...array.slice(0,index), ...array.slice(index+1, array.length)]\r\n    console.log(new_array)\r\n    =&gt; [1, 2, 3, 5]"},{"score":19,"body_markdown":"Immutable and one-liner way :\r\n```javascript\r\nconst newArr = targetArr.filter(e =&gt; e !== elementToDelete);\r\n```\r\n"},{"score":3,"body_markdown":"**Using .indexOf() and .splice() - Mutable Pattern**\r\n\r\nThere are two scenarios here:\r\n1) we know the index\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const drinks = [ &#39;Tea&#39;, &#39;Coffee&#39;, &#39;Milk&#39;];\r\n    const id = 1;\r\n    const removedDrink = drinks.splice(id,  1);\r\n    console.log(removedDrink)\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n  \r\n2) we don’t know the index but know the value.\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const drinks =  [&#39;Tea&#39;,&#39;Coffee&#39;, &#39;Milk&#39;];\r\n    const id = drinks.indexOf(&#39;Coffee&#39;); // 1\r\n    const removedDrink = drinks.splice(id,  1);\r\n    // [&quot;Coffee&quot;]\r\n    console.log(removedDrink);\r\n    // [&quot;Tea&quot;, &quot;Milk&quot;]\r\n    console.log(drinks);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n**Using .filter() - Immutable Pattern**\r\n\r\nThe best way you can think about this is - instead of “removing” the item, you’ll be “creating” a new array that just does not include that item. So we must find it, and omit it entirely.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const drinks = [&#39;Tea&#39;,&#39;Coffee&#39;, &#39;Milk&#39;];\r\n    const id = &#39;Coffee&#39;;\r\n    const idx = drinks.indexOf(id);\r\n    const removedDrink = drinks[idx];\r\n    const filteredDrinks = drinks.filter((drink, index) =&gt; drink == removedDrink);\r\n\r\n    console.log(&quot;Filtered Drinks Array:&quot;+ filteredDrinks);\r\n    console.log(&quot;Original Drinks Array:&quot;+ drinks);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":5,"body_markdown":"In ES6, the [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) collection provides a [delete](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete) method to delete a specific value from the array, then convert the Set collection to an array by [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax).\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function deleteItem(list, val) {\r\n        const set = new Set(list);\r\n        set.delete(val);\r\n        \r\n        return [...set];\r\n    }\r\n    \r\n    const letters = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;];\r\n    console.log(deleteItem(letters, &#39;C&#39;)); // [&#39;A&#39;, &#39;B&#39;, &#39;D&#39;, &#39;E&#39;]\r\n\r\n&lt;!-- end snippet --&gt;"},{"score":1,"body_markdown":"The simplest possible way to do this is probably using the filter function. Here&#39;s an example:\r\n\r\n    let array = [&quot;hello&quot;, &quot;world&quot;]\r\n    array.filter(item =&gt; item !== &quot;hello&quot;)\r\n    // [&quot;world&quot;]\r\n\r\n"},{"score":2,"body_markdown":"splice() function is able to give you back item in array as well as remove item/ items from specific index\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function removeArrayItem(index, array) {\r\n     array.splice(index, 1);\r\n     return array;\r\n    }\r\n\r\n    let array = [1,2,3,4];\r\n    let index = 2;\r\n    array = removeArrayItem(index, array);\r\n    console.log(array);\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":0,"body_markdown":" - pop - Removes from the End of an Array\r\n - shift - Removes from the beginning of an Array\r\n - splice - removes from a specific Array index\r\n - filter - allows you to programatically remove elements from an Array\r\n\r\n\r\n\r\n"},{"score":3,"body_markdown":"[![enter image description here][1]][1]\r\n\r\n2021 UPDATE\r\n====\r\n\r\nYour question is about how to remove a specific item from an array. By specific item you are referring to a number eg. remove number 5 from array. What I understand you are looking for something like:\r\n\r\n    // PSEUDOCODE, SCROLL FOR COPY-PASTE CODE\r\n    [1,2,3,4,5,6,8,5].remove(5) // result: [1,2,3,4,6,8]\r\n\r\nAs for 2021 the best way to achieve it is to use array filter function:\r\n\r\n    const input = [1,2,3,4,5,6,8,5];\r\n    const removeNumber = 5;\r\n    const result = input.filter(\r\n\t    item =&gt; item != removeNumber\r\n    );\r\n\r\nAbove example uses [array.prototype.filter][2] function. It iterates over all array items, and returns only those satisfying [arrow function][3]. As a result, old array stays intact, while a new array called result contains all items that are not equal to five. You can test it yourself [online][4].\r\n\r\nYou can visualize how [array.prototype.filter][5] like this:\r\n\r\n[![enter image description here][6]][6]\r\n\r\nConsiderations\r\n---\r\n\r\n**Code quality**\r\n\r\nArray.filter.prototype is far the most readable method to remove a number in this case. It leaves little place for mistakes and uses core JS functionality.\r\n\r\n**Why not array.prototype.map?**\r\n\r\nArray.prototype.map is sometimes consider as an alternative for array.prototype.filter for that use case. But it should not be used. The reason is that **array.prototype.filter** is conceptually used to **filter items** that satisfy arrow function (exactly what we need), while **array.prototype.map** is used to **transform** items. Since we don&#39;t change items while iterating over them, the proper function to use is array.prototype.filter.\r\n\r\n**Support**\r\n\r\nAs of today (2.12.2020) 97,05% of Internet users [browsers support][7] array.prototype.filter. So generally speaking it is safe to use. However, IE6 - 8 does not support it. So if your use case requires support for these browsers there is a nice [polyfill][8] made by Chris Ferdinanti.\r\n\r\n**Performance**\r\n\r\nArray.prototype.filter is great for most use cases. However if you are looking for some performance improvements for advanced data processing you can explore some [other options][9] like using pure for. Another great option is to rethink if really array you are processing has to be so big, it may be a sign that JavaScript should receive reduced array for processing from the data source.\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Nmcnb.jpg\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\r\n  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\r\n  [4]: https://jsfiddle.net/ngtkd7ua/\r\n  [5]: https://summonthejson.com/blogs/news/array-prototype-filter\r\n  [6]: https://i.stack.imgur.com/TePmK.gif\r\n  [7]: https://caniuse.com/?search=Array%20filter\r\n  [8]: https://vanillajstoolkit.com/polyfills/arrayfilter/\r\n  [9]: https://stackoverflow.com/questions/31459395/why-using-for-is-faster-than-some-or-filter/31471843"}],"score":8861}