{"body":"I have a string, `12345.00`, and I would like it to return `12345.0`.\r\n\r\nI have looked at `trim`, but it looks like it is only trimming whitespace and `slice` which I don&#39;t see how this would work. Any suggestions?\r\n\r\n","title":"JavaScript chop/slice/trim off last character in string","answers":[{"score":3391,"body_markdown":"You can use the [substring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) function:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let str = &quot;12345.00&quot;;\r\n    str = str.substring(0, str.length - 1);\r\n    console.log(str);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThis is the accepted answer, but as per the conversations below, the [slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) syntax is much clearer:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let str = &quot;12345.00&quot;;\r\n    str = str.slice(0, -1); \r\n    console.log(str);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":9,"body_markdown":"How about:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let myString = &quot;12345.00&quot;;\r\n    console.log(myString.substring(0, myString.length - 1));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":68,"body_markdown":"For a number like your example, I would recommend doing this over `substring`:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log(parseFloat(&#39;12345.00&#39;).toFixed(1));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nDo note that this will actually round the number, though, which I would imagine is desired but maybe not:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log(parseFloat(&#39;12345.46&#39;).toFixed(1));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":3,"body_markdown":"If you want to do generic rounding of floats, instead of just trimming the last character:\r\n\r\n    \r\n    var float1 = 12345.00,\r\n        float2 = 12345.4567,\r\n        float3 = 12345.982;\r\n\r\n    var MoreMath = {\r\n        /**\r\n         * Rounds a value to the specified number of decimals\r\n         * @param float value The value to be rounded\r\n         * @param int nrDecimals The number of decimals to round value to\r\n         * @return float value rounded to nrDecimals decimals\r\n         */\r\n        round: function (value, nrDecimals) {\r\n            var x = nrDecimals &gt; 0 ? 10 * parseInt(nrDecimals, 10) : 1;\r\n            return Math.round(value * x) / x;\r\n        }\r\n    }\r\n    \r\n    MoreMath.round(float1, 1) =&gt; 12345.0\r\n    MoreMath.round(float2, 1) =&gt; 12345.5\r\n    MoreMath.round(float3, 1) =&gt; 12346.0\r\n\r\n*EDIT:* Seems like there exists a built in function for this, as Paolo points out. That solution is obviously much cleaner than mine. Use [parseFloat][1] followed by [toFixed][2] \r\n\r\n\r\n  [1]: http://www.w3schools.com/jsref/jsref_parseFloat.asp\r\n  [2]: http://www.w3schools.com/jsref/jsref_tofixed.asp"},{"score":1350,"body_markdown":"You can use [slice][1]! You just have to make sure you know how to use it. Positive #s are relative to the beginning, negative numbers are relative to the end.\r\n\r\n    js&gt;&quot;12345.00&quot;.slice(0,-1)\r\n    12345.0\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice"},{"score":-4,"body_markdown":"&gt; @Jason S:\r\n&gt; \r\n&gt; You can use slice! You just have to\r\n&gt; make sure you know how to use it.\r\n&gt; Positive #s are relative to the\r\n&gt; beginning, negative numbers are\r\n&gt; relative to the end.\r\n&gt; \r\n&gt; js&gt;&quot;12345.00&quot;.slice(0,-1)\r\n&gt; 12345.0\r\n\r\nSorry for my graphomany but post was tagged &#39;jquery&#39; earlier. So, ***you can&#39;t use*** **slice()** inside jQuery because **slice()** is jQuery method for operations with DOM elements, not substrings ... \r\nIn other words answer *@Jon Erickson* suggest really perfect solution.\r\n\r\nHowever, your method will works out of jQuery function, inside simple Javascript.\r\nNeed to say due to last discussion in comments, that jQuery is very much more often renewable extension of JS than his own parent most known ECMAScript.\r\n\r\nHere also exist two methods:\r\n\r\n*as our:*\r\n\r\n`string.substring(from,to)` *as plus if &#39;to&#39; index nulled returns the rest of string. so:*\r\n`string.substring(from)` *positive or negative ...*\r\n\r\n*and some other - substr() - which provide range of substring and &#39;length&#39; can be positive only:*\r\n`string.substr(start,length)`\r\n\r\nAlso some maintainers suggest that last method `string.substr(start,length)` do not works or work with error for MSIE.\r\n"},{"score":-8,"body_markdown":"Use substring to get everything to the left of _bar. But first you have to get the instr of _bar in the string:\r\n\r\n    str.substring(3, 7);\r\n\r\n3 is that start and 7 is the length.\r\n"},{"score":267,"body_markdown":"You can use the [substring][1] method of JavaScript string objects:\r\n\r\n    s = s.substring(0, s.length - 4)\r\n\r\nIt unconditionally removes the last four characters from string `s`.\r\n\r\nHowever, if you want to _conditionally_ remove the last four characters, only if they are _exactly_ `_bar`:\r\n\r\n    var re = /_bar$/;\r\n    s.replace(re, &quot;&quot;);\r\n\r\n  [1]: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/substring\r\n"},{"score":1,"body_markdown":"    if(str.substring(str.length - 4) == &quot;_bar&quot;)\r\n    {\r\n        str = str.substring(0, str.length - 4);\r\n    }"},{"score":19,"body_markdown":"A regular expression is what you are looking for:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let str = &quot;foo_bar&quot;;\r\n    console.log(str.replace(/_bar$/, &quot;&quot;));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":163,"body_markdown":"The easiest method is to use the `slice` method of the string, which allows negative positions (corresponding to offsets from the end of the string):\r\n\r\n    const s = &quot;your string&quot;;\r\n    const withoutLastFourChars = s.slice(0, -4);\r\n\r\nIf you needed something more general to remove everything after (and including) the last underscore, you could do the following (so long as `s` is guaranteed to contain at least one underscore):\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const s = &quot;your_string&quot;;\r\n    const withoutLastChunk = s.slice(0, s.lastIndexOf(&quot;_&quot;));\r\n    console.log(withoutLastChunk);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":-3,"body_markdown":"Try this:\r\n\r\n    &lt;script&gt;\r\n        var x=&quot;foo_foo_foo_bar&quot;;\r\n        for (var i=0; i&lt;=x.length; i++) {\r\n            if (x[i]==&quot;_&quot; &amp;&amp; x[i+1]==&quot;b&quot;) {\r\n                break;\r\n            }\r\n            else {\r\n                document.write(x[i]);\r\n            }\r\n        }\r\n    &lt;/script&gt;\r\n\r\nYou can also try the live working example on http://jsfiddle.net/informativejavascript/F7WTn/87/.\r\n"},{"score":7,"body_markdown":" 1. (.*), captures any character multiple times\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n    console.log(&quot;a string&quot;.match(/(.*).$/)[1]);\r\n&lt;!-- end snippet --&gt;\r\n\r\n2. ., matches last character, in this case\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log(&quot;a string&quot;.match(/(.*).$/));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n3. $, matches the end of the string\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    console.log(&quot;a string&quot;.match(/(.*).{2}$/)[1]);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":10,"body_markdown":"Try this:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const myString = &quot;Hello World!&quot;;\r\n    console.log(myString.slice(0, -1));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":6,"body_markdown":"\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const str = &quot;test!&quot;;\r\n    console.log(str.slice(0, -1));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":30,"body_markdown":"Using JavaScript&#39;s slice function:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let string = &#39;foo_bar&#39;;\r\n    string = string.slice(0, -4); // Slice off last four characters here\r\n    console.log(string);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nThis could be used to remove &#39;_bar&#39; at end of a string, of any length.\r\n"},{"score":4,"body_markdown":"    debris = string.split(&quot;_&quot;) //explode string into array of strings indexed by &quot;_&quot;\r\n    \r\n    debris.pop(); //pop last element off the array (which you didn&#39;t want)\r\n    \r\n    result = debris.join(&quot;_&quot;); //fuse the remainng items together like the sun"},{"score":10,"body_markdown":"Use regex:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    let aStr = &quot;12345.00&quot;;\r\n    aStr = aStr.replace(/.$/, &#39;&#39;);\r\n    console.log(aStr);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":2,"body_markdown":"https://stackoverflow.com/questions/34817546/javascript-how-to-delete-last-two-characters-in-a-string\r\n\r\n&gt; Just use trim if you don&#39;t want spaces \r\n\r\n`&quot;11.01 &#176;C&quot;.slice(0,-2).trim()`"},{"score":-1,"body_markdown":"In cases where you want to remove something that is close to the end of a string (in case of variable sized strings) you can combine slice() and substr().\r\n\r\nI had a string with markup, dynamically built, with a list of anchor tags separated by comma. The string was something like:\r\n\r\n    var str = &quot;&lt;a&gt;text 1,&lt;/a&gt;&lt;a&gt;text 2,&lt;/a&gt;&lt;a&gt;text 2.3,&lt;/a&gt;&lt;a&gt;text abc,&lt;/a&gt;&quot;;\r\n\r\nTo remove the last comma I did the following:\r\n\r\n    str = str.slice(0, -5) + str.substr(-4);\r\n"},{"score":5,"body_markdown":"Here is an alternative that i don&#39;t think i&#39;ve seen in the other answers, just for fun.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var strArr = &quot;hello i&#39;m a string&quot;.split(&quot;&quot;);\r\n    strArr.pop();\r\n    document.write(strArr.join(&quot;&quot;));\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nNot as legible or simple as slice or substring but does allow you to play with the string using some nice array methods, so worth knowing.\r\n"},{"score":5,"body_markdown":"The shortest way:\r\n\r\n    str.slice(0, -1); "},{"score":3,"body_markdown":"# Performance\n\nToday 2020.05.13 I perform tests of chosen solutions on Chrome v81.0, Safari v13.1 and Firefox v76.0 on MacOs High Sierra v10.13.6.\n\nConclusions\n-\n\n* the `slice(0,-1)`(D) is fast or fastest solution for short and long strings and it is recommended as fast cross-browser solution\n* solutions based on `substring` (C) and `substr`(E) are fast\n* solutions based on regular expressions (A,B) are slow/medium fast\n* solutions B, F and G are slow for long strings\n* solution F is slowest for short strings, G is slowest for long strings\n\n[![enter image description here][1]][1]\n\n\nDetails\n-\nI perform two tests for solutions [A](https://stackoverflow.com/a/31691504/860099), [B](https://stackoverflow.com/a/14064632/860099), [C](https://stackoverflow.com/a/952945/860099), [D](https://stackoverflow.com/a/952945/860099), E([ext](https://www.techiedelight.com/remove-last-character-string-javascript/)), [F](https://stackoverflow.com/a/49255704/860099), G(my)\n\n* for 8-char short string (from OP question) - you can run it [HERE](https://jsbench.me/eoka4fqanu/1)\n* for 1M long string - you can run it [HERE](https://jsbench.me/vqka5a03al/1)\n\nSolutions are presented in below snippet\n\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\n\n&lt;!-- language: lang-js --&gt;\n\n    function A(str) {\n      return str.replace(/.$/, &#39;&#39;);\n    }\n\n    function B(str) {\n      return str.match(/(.*).$/)[1];\n    }\n\n    function C(str) {\n      return str.substring(0, str.length - 1);\n    }\n\n    function D(str) {\n      return str.slice(0, -1); \n    }\n\n    function E(str) {\n      return str.substr(0, str.length - 1);\n    }\n\n    function F(str) {\n      let s= str.split(&quot;&quot;);\n      s.pop();\n      return s.join(&quot;&quot;);\n    }\n\n    function G(str) {\n      let s=&#39;&#39;;\n      for(let i=0; i&lt;str.length-1; i++) s+=str[i];\n      return s;\n     }\n\n\n\n    // ---------\n    // TEST\n    // ---------\n\n    let log = (f)=&gt;console.log(`${f.name}: ${f(&quot;12345.00&quot;)}`);\n\n    [A,B,C,D,E,F,G].map(f=&gt;log(f));\n\n&lt;!-- language: lang-html --&gt;\n\n    This snippet only presents soutions\n\n&lt;!-- end snippet --&gt;\n\nHere are example results for Chrome for short string\n\n[![enter image description here][2]][2]\n\n\n  [1]: https://i.stack.imgur.com/YfBgV.png\n  [2]: https://i.stack.imgur.com/JDigN.png"},{"score":7,"body_markdown":"## Be aware that `String.prototype.{ split, slice, substr, substring }` operate on UTF-16 encoded strings\r\n\r\nNone of the previous answers are Unicode-aware.\r\nStrings are encoded as UTF-16 in most modern JavaScript engines, but higher Unicode code points require [surrogate pairs][wiki-surrogate], so older, pre-existing string methods operate on UTF-16 code units, not Unicode code points.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const string = &quot;ẞ&#129418;&quot;;\r\n    \r\n    console.log(string.slice(0, -1)); // &quot;ẞ\\ud83e&quot;\r\n    console.log(string.substr(0, string.length - 1)); // &quot;ẞ\\ud83e&quot;\r\n    console.log(string.substring(0, string.length - 1)); // &quot;ẞ\\ud83e&quot;\r\n    console.log(string.replace(/.$/, &quot;&quot;)); // &quot;ẞ\\ud83e&quot;\r\n    console.log(string.match(/(.*).$/)[1]); // &quot;ẞ\\ud83e&quot;\r\n    \r\n    const utf16Chars = string.split(&quot;&quot;);\r\n    \r\n    utf16Chars.pop();\r\n    console.log(utf16Chars.join(&quot;&quot;)); // &quot;ẞ\\ud83e&quot;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nIn addition, `RegExp` methods, as suggested in older answers, don’t match line breaks at the end:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const string = &quot;Hello, world!\\n&quot;;\r\n    \r\n    console.log(string.replace(/.$/, &quot;&quot;).endsWith(&quot;\\n&quot;)); // true\r\n    console.log(string.match(/(.*).$/) === null); // true\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n---\r\n\r\n## Use the string iterator to iterate characters\r\n\r\nUnicode-aware code utilizes the string’s iterator; see [`Array.from`][mdn-array-from] and [`...` spread][mdn-spread].\r\n[`string[Symbol.iterator]`][mdn-symbol-iterator] can be used (e.g. instead of `string`) as well.\r\n\r\nAlso see [How to split Unicode string to characters in JavaScript][so-split-related].\r\n\r\nExamples:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const string = &quot;ẞ&#129418;&quot;;\r\n    \r\n    console.log(Array.from(string).slice(0, -1).join(&quot;&quot;)); // &quot;ẞ&quot;\r\n    console.log([\r\n      ...string\r\n    ].slice(0, -1).join(&quot;&quot;)); // &quot;ẞ&quot;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n## Use the `s` and `u` flags on a `RegExp`\r\n\r\nThe [`dotAll` or `s` flag][mdn-dotall] makes `.` match line break characters, the [`unicode` or `u` flag][mdn-unicode] enables certain Unicode-related features.\r\nNote that, when using the `u` flag, you eliminate unnecessary identity escapes, as [these are invalid in a `u` regex](https://stackoverflow.com/a/63007777/4642212), e.g. `\\[` is fine, as it would start a character class without the backslash, but `\\:` isn’t, as it’s a `:` with or without the backslash, so you need to remove the backslash.\r\n\r\nExamples:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const unicodeString = &quot;ẞ&#129418;&quot;,\r\n      lineBreakString = &quot;Hello, world!\\n&quot;;\r\n    \r\n    console.log(lineBreakString.replace(/.$/s, &quot;&quot;).endsWith(&quot;\\n&quot;)); // false\r\n    console.log(lineBreakString.match(/(.*).$/s) === null); // false\r\n    console.log(unicodeString.replace(/.$/su, &quot;&quot;)); // ẞ\r\n    console.log(unicodeString.match(/(.*).$/su)[1]); // ẞ\r\n\r\n    // Now `split` can be made Unicode-aware:\r\n\r\n    const unicodeCharacterArray = unicodeString.split(/(?:)/su),\r\n      lineBreakCharacterArray = lineBreakString.split(/(?:)/su);\r\n    \r\n    unicodeCharacterArray.pop();\r\n    lineBreakCharacterArray.pop();\r\n    console.log(unicodeCharacterArray.join(&quot;&quot;)); // &quot;ẞ&quot;\r\n    console.log(lineBreakCharacterArray.join(&quot;&quot;).endsWith(&quot;\\n&quot;)); // false\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n---\r\n\r\nNote that some graphemes consist of more than one code point, e.g. `&#127987;️‍&#127752;` which consists of the sequence `&#127987;` (U+1F3F3), [`VS16` (U+FE0F)][U+FE0F], [`ZWJ` (U+200D)][U+200D], `&#127752;` (U+1F308).\r\nHere, even `Array.from` will split this into four “characters”.\r\nMatching those is possible with the [Unicode property escapes sequence properties proposal][tc39-proposal-unicode-sequences].\r\n\r\n\r\n  [wiki-surrogate]: https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\r\n  [mdn-array-from]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\r\n  [mdn-spread]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_array_literals\r\n  [mdn-symbol-iterator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator\r\n  [so-split-related]: https://stackoverflow.com/q/35223206/4642212\r\n  [mdn-dotall]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\r\n  [mdn-unicode]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\r\n  [u+FE0F]: https://codepoints.net/U+FE0F\r\n  [u+200D]: https://codepoints.net/U+200D\r\n  [tc39-proposal-unicode-sequences]: https://github.com/tc39/proposal-regexp-unicode-sequence-properties"},{"score":0,"body_markdown":"You can, in fact, remove the last `arr.length - 2` items of an array using `arr.length = 2`, which if the array length was 5, would remove the last 3 items.\r\n\r\nSadly, this does not work for strings, but we can use `split()` to split the string, and then `join()` to join the string after we&#39;ve made any modifications.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var str = &#39;string&#39;\r\n\r\n    String.prototype.removeLast = function(n) {\r\n      var string = this.split(&#39;&#39;)\r\n      string.length = string.length - n\r\n\r\n      return string.join(&#39;&#39;)\r\n    }\r\n\r\n    console.log(str.removeLast(3))\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":0,"body_markdown":"    \r\nVia slice(indexStart, indexEnd) method - note, this does NOT CHANGE the existing string, it creates a copy and changes the copy. \r\n\r\n    console.clear();\r\n    let str = &quot;12345.00&quot;;\r\n    let a = str.slice(0, str.length -1)\r\n    console.log(a, &quot;&lt;= a&quot;);\r\n    console.log(str, &quot;&lt;= str is NOT changed&quot;);\r\n\r\nVia Regular Expression method - note, this does NOT CHANGE the existing string, it creates a copy and changes the copy.\r\n\r\n    console.clear();\r\n    let regExp = /.$/g\r\n    let b = str.replace(regExp,&quot;&quot;)\r\n    console.log(b, &quot;&lt;= b&quot;);\r\n    console.log(str, &quot;&lt;= str is NOT changed&quot;);\r\n\r\nVia array.splice() method -&gt; this only works on arrays, and it CHANGES, the existing array (so careful with this one), you&#39;ll need to convert a string to an array first, then back.\r\n\r\n    console.clear();\r\n    let str = &quot;12345.00&quot;;\r\n    let strToArray = str.split(&quot;&quot;)\r\n    console.log(strToArray, &quot;&lt;= strToArray&quot;);\r\n    let spliceMethod = strToArray.splice(str.length-1, 1)\r\n    str = strToArray.join(&quot;&quot;)\r\n    console.log(str, &quot;&lt;= str is changed now&quot;);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"score":2102}