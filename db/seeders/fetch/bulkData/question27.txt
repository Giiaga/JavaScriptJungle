{"body":"After an AJAX request, sometimes my application may return an empty object, like:\r\n\r\n    var a = {};\r\n\r\nHow can I check whether that&#39;s the case?","title":"How do I test for an empty JavaScript object?","answers":[{"score":918,"body_markdown":"There&#39;s no easy way to do this. You&#39;ll have to loop over the properties explicitly:\r\n\r\n    function isEmpty(obj) {\r\n        for(var prop in obj) {\r\n            if(obj.hasOwnProperty(prop))\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\nIf [ECMAScript 5 support](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#Browser_compatibility) is available, you can use `Object.keys()` instead:\r\n\r\n    function isEmpty(obj) {\r\n        return Object.keys(obj).length === 0;\r\n    }\r\n"},{"score":28,"body_markdown":"1. Just a workaround. Can your server generate some special property in case of no data?\r\n\r\n For example:\r\n\r\n        var a = {empty:true};\r\n\r\n Then you can easily check it in your AJAX callback code.\r\n\r\n2. Another way to check it:\r\n\r\n        if (a.toSource() === &quot;({})&quot;)  // then &#39;a&#39; is empty\r\n\r\n**EDIT**:\r\nIf you use any JSON library (f.e. JSON.js) then you may try JSON.encode() function and test the result against empty value string.\r\n\r\n\r\n\r\n\r\n"},{"score":16,"body_markdown":"    function isEmpty(obj) {\r\n      for(var i in obj) { return false; }\r\n      return true;\r\n    }"},{"score":7,"body_markdown":"In addition to Thevs answer:\r\n\r\n    var o = {};\r\n    alert($.toJSON(o)==&#39;{}&#39;); // true\r\n    \r\n    var o = {a:1};\r\n    alert($.toJSON(o)==&#39;{}&#39;); // false\r\n\r\nit&#39;s jquery + jquery.json"},{"score":581,"body_markdown":"For those of you who have the same problem but use jQuery, you can use [jQuery.isEmptyObject](http://api.jquery.com/jQuery.isEmptyObject/)."},{"score":13,"body_markdown":"jQuery have special function `isEmptyObject()` for this case:\r\n\r\n    jQuery.isEmptyObject({}) // true\r\n    jQuery.isEmptyObject({ foo: &quot;bar&quot; }) // false\r\n\r\nRead more on http://api.jquery.com/jQuery.isEmptyObject/"},{"score":212,"body_markdown":"You can use [Underscore.js][1].\r\n\r\n    _.isEmpty({}); // true\r\n\r\n\r\n  [1]: http://underscorejs.org/#isEmpty"},{"score":8,"body_markdown":"Caveat! Beware of JSON&#39;s limitiations.\r\n\r\n    javascript:\r\n      obj={  f:function(){}  };\r\n      alert( &quot;Beware!! obj is NOT empty!\\n\\nobj = {  f:function(){}  }&quot; + \r\n                   &quot;\\n\\nJSON.stringify( obj )\\n\\nreturns\\n\\n&quot; +\r\n                            JSON.stringify( obj ) );\r\n\r\ndisplays\r\n&lt;pre&gt;\r\n    Beware!! obj is NOT empty!\r\n    \r\n    obj = {  f:function(){}  }\r\n    \r\n    JSON.stringify( obj )\r\n    \r\n    returns\r\n    \r\n    {}\r\n&lt;/pre&gt;"},{"score":16,"body_markdown":"My take:\r\n\r\n    function isEmpty(obj) {\r\n        return Object.keys(obj).length === 0;\r\n    }\r\n    \r\n    var a = {a:1, b:2}\r\n    var b = {}\r\n    \r\n    console.log(isEmpty(a)); // false\r\n    console.log(isEmpty(b)); // true\r\n\r\nJust, I don&#39;t think all browsers implement `Object.keys()` currently."},{"score":-1,"body_markdown":"Here is a fast, simple, function:\r\n    \r\n    function isEmptyFunction () {\r\n      for (const i in this) return false\r\n      return true\r\n    }\r\n\r\nImplemented as a getter:\r\n\r\n    Object.defineProperty(Object.prototype, &#39;isEmpty&#39;, { get: isEmptyFunction })\r\n\r\n    console.log({}.isEmpty) // true\r\n\r\nImplemented as a separate function:\r\n\r\n    const isEmpty = Function.prototype.call.bind(isEmptyFunction)\r\n\r\n    console.log(isEmpty({})) // true\r\n\r\n"},{"score":41,"body_markdown":"There is a simple way if you are on a newer browser.\r\n`Object.keys(obj).length == 0`"},{"score":20,"body_markdown":"I am using this.\r\n\r\n    function isObjectEmpty(object) {\r\n      var isEmpty = true;\r\n      for (keys in object) {\r\n         isEmpty = false;\r\n         break; // exiting since we found that the object is not empty\r\n      }\r\n      return isEmpty;\r\n    }\r\n\r\nEg:\r\n\r\n    var myObject = {}; // Object is empty\r\n    var isEmpty  = isObjectEmpty(myObject); // will return true;\r\n     \r\n    // populating the object\r\n    myObject = {&quot;name&quot;:&quot;John Smith&quot;,&quot;Address&quot;:&quot;Kochi, Kerala&quot;}; \r\n     \r\n    // check if the object is empty\r\n    isEmpty  = isObjectEmpty(myObject); // will return false;\r\n\r\n[from here][1]\r\n\r\n**Update**\r\n\r\nOR\r\n\r\nyou can use the jQuery implementation of isEmptyObject\r\n\r\n    function isEmptyObject(obj) {\r\n      var name;\r\n      for (name in obj) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n  [1]: https://kiranvj.com/blog/blog/2012/05/01/how-to-check-if-a-javascript-object-is-empty/"},{"score":6,"body_markdown":"[Sugar.JS][1] provides extended objects for this purpose. The code is clean and simple:\r\n\r\nMake an extended object:\r\n\r\n    a = Object.extended({})\r\n\r\nCheck it&#39;s size:\r\n\r\n    a.size()\r\n\r\n\r\n  [1]: http://sugarjs.com/"},{"score":89,"body_markdown":"How about using JSON.stringify? It is almost available in all modern browsers.\r\n\r\n    function isEmptyObject(obj){\r\n        return JSON.stringify(obj) === &#39;{}&#39;;\r\n    }"},{"score":61,"body_markdown":"Old question, but just had the issue. Including JQuery is not really a good idea if your only purpose is to check if the object is not empty. Instead, just deep into [JQuery&#39;s code][1], and you will get the answer:\r\n\r\n    function isEmptyObject(obj) {\r\n        var name;\r\n        for (name in obj) {\r\n            if (obj.hasOwnProperty(name)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n  [1]: http://code.jquery.com/jquery-1.9.0.js"},{"score":11,"body_markdown":"&lt;br&gt;\r\nyou can use this simple code that did not use *jQuery* or other libraries\r\n\r\n    var a=({});\r\n    \r\n    //check is an empty object\r\n    if(JSON.stringify(a)==&#39;{}&#39;) {\r\n        alert(&#39;it is empty&#39;);\r\n    } else {\r\n        alert(&#39;it is not empty&#39;);\r\n    }\r\n**JSON** class and it&#39;s functions (**parse** and **stringify**) are very usefull but has some problems with *IE7* that you can fix it with this simple code http://www.json.org/js.html.\r\n&lt;br/&gt;&lt;br/&gt;\r\n**Other Simple Way (simplest Way) :**&lt;br/&gt;\r\nyou can use this way without using **jQuery** or **JSON** object.&lt;br/&gt;\r\n\r\n    var a=({});\r\n\r\n    function isEmptyObject(obj) {\r\n        if(typeof obj!=&#39;object&#39;) {\r\n            //it is not object, so is not empty\r\n            return false;\r\n        } else {\r\n            var x,i=0;\r\n            for(x in obj) {\r\n                i++;\r\n            }\r\n            if(i&gt;0) {\r\n                //this object has some properties or methods\r\n                return false;\r\n            } else {\r\n                //this object has not any property or method\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    alert(isEmptyObject(a));    //true is alerted\r\n"},{"score":120,"body_markdown":"    if(Object.getOwnPropertyNames(obj).length === 0){\r\n      //is empty\r\n    }\r\n\r\nsee http://bencollier.net/2011/04/javascript-is-an-object-empty/ "},{"score":9,"body_markdown":"If jQuery and the web browser is not available, there is also an isEmpty function in underscore.js.\r\n\r\n    _.isEmpty({}) // returns true\r\n\r\nAdditionally, it does not assume the input parameter to be an object. For a list or string or undefined, it will also turn the correct answer."},{"score":0,"body_markdown":"As of jQuery 1.4 `isEmptyObject()` method checks both properties on the object itself and properties inherited from prototypes (in that it doesn&#39;t use hasOwnProperty). The argument should always be a plain JavaScript Object as other types of object (DOM elements, primitive strings/numbers, host objects) may not give consistent results across browsers. To determine if an object is a plain JavaScript object, use `$.isPlainObject()`.\r\n\r\n    jQuery.isPlainObject({}) // true\r\n    \r\n    jQuery.isPlainObject( &quot;test&quot; ) // false\r\n\r\n[Jquery api][1]\r\n\r\n\r\n  [1]: http://api.jquery.com/jQuery.isPlainObject/\r\n"},{"score":11,"body_markdown":"Under the hood all empty check methods in all libraries use object keys checking logic. Its an odd way to make it understandable, which you can put in a method, Described [here][1].\r\n\r\n    for(key in obj){\r\n       //your work here.\r\n     break;\r\n    }\r\nWhich has evolved in [ES5][2], now put simply you can check the object&#39;s keys length, using `Object.Keys` method which takes your object as it&#39;s parameter:\r\n\r\n    if(Object.keys(obj).length &gt; 0){\r\n     //do your work here\r\n    }\r\n\r\nOr if you are using [Lodash][3] (you must be) then.\r\n\r\n     _.isEmpty(obj) //==true or false\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/679937/2002079\r\n  [2]: https://es5.github.io\r\n  [3]: https://lodash.com/docs/"},{"score":25,"body_markdown":"I&#39;ve created a complete function to determine if object is empty.\r\n\r\nIt uses [`Object.keys`][mdn-object-keys] from [ECMAScript 5][ecma-5] (ES5) functionality if possible to achieve the best performance (see [compatibility table][ecma-5-compat]) and fallbacks to the most compatible approach for older engines (browsers).\r\n\r\n# Solution\r\n\r\n&lt;!-- language: javascript --&gt;\r\n\r\n    /**\r\n     * Returns true if specified object has no properties,\r\n     * false otherwise.\r\n     *\r\n     * @param {object} object\r\n     * @returns {boolean}\r\n     */\r\n    function isObjectEmpty(object)\r\n    {\r\n        if (&#39;object&#39; !== typeof object) {\r\n            throw new Error(&#39;Object must be specified.&#39;);\r\n        }\r\n        \r\n        if (null === object) {\r\n            return true;\r\n        }\r\n    \r\n        if (&#39;undefined&#39; !== Object.keys) {\r\n            // Using ECMAScript 5 feature.\r\n            return (0 === Object.keys(object).length);\r\n        } else {\r\n            // Using legacy compatibility mode.\r\n            for (var key in object) {\r\n                if (object.hasOwnProperty(key)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\nHere&#39;s the [Gist][gist] for this code.\r\n\r\nAnd here&#39;s the [JSFiddle][jsfiddle] with demonstration and a simple test.\r\n\r\nI hope it will help someone. Cheers!\r\n\r\n[ecma-5]: http://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition\r\n[ecma-5-compat]: http://kangax.github.io/compat-table/es5/#Object.keys\r\n[mdn-object-keys]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\r\n[gist]: https://gist.github.com/slavafomin/c7ab7f7e45431748ad8c#file-object-empty-js\r\n[jsfiddle]: http://jsfiddle.net/slavafomin/b2rw4/"},{"score":0,"body_markdown":"I was returning an empty JSON response for an AJAX call and in IE8 jQuery.isEmptyObject() was not validating correctly. I added an additional check that seems to catch it properly.\r\n\r\n    .done(function(data)\r\n    {  \r\n        // Parse json response object\r\n        var response = jQuery.parseJSON(data);\r\n\t\t\t\t\r\n        // In IE 8 isEmptyObject doesn&#39;t catch the empty response, so adding additional undefined check\r\n        if(jQuery.isEmptyObject(response) || response.length === 0)\r\n        {\r\n            //empty\r\n        }\r\n        else\r\n        {\r\n            //not empty\r\n        }\r\n    });"},{"score":305,"body_markdown":"This is my preferred solution:\r\n\r\n    var obj = {};\r\n    return Object.keys(obj).length; //returns 0 if empty or an integer &gt; 0 if non-empty"},{"score":61,"body_markdown":"I just ran into a similar situation. I didn&#39;t want to use JQuery, and wanted to do this using pure Javascript.\r\n\r\nAnd what I did was, used the following condition, and it worked for me.\r\n\r\n    var obj = {};\r\n    if(JSON.stringify(obj) === &#39;{}&#39;) { //This will check if the object is empty\r\n       //Code here..\r\n    }\r\n\r\nFor not equal to, use this : `JSON.stringify(obj) !== &#39;{}&#39;`\r\n\r\nCheck out this [JSFiddle][1]\r\n\r\n  [1]: http://jsfiddle.net/anish_nair/8fr4r508/"},{"score":2,"body_markdown":"This one line code helps with fallback to older browsers too.\r\n\r\n    var a = {}; //if empty returns false\r\n    (Object.getOwnPropertyNames ? Object.getOwnPropertyNames(a).length !== 0 : (function(){ for(var key in a) break; return !!key })()) //Returns False\r\n\r\n    var a = {b:2}; //if not empty returns true\r\n    (Object.getOwnPropertyNames ? Object.getOwnPropertyNames(a).length !== 0 : (function(){ for(var key in a) break; return !!key })()) //Returns true\r\n\r\n\r\n----------\r\n\r\n\r\n**[Object.getOwnPropertyNames][1]** is implemented in ECMA-5. the above line works in older browsers with a fallback function.\r\n\r\n\r\n----------\r\n\r\n\r\n&gt; Another quick solution is checking the `length` property of\r\n&gt; [`Object.keys`][2], [`Object.entries`][3] or [`Object.values`][4]\r\n\r\n**Knowledge article:** Follow this SO post for detailed difference between [Object.keys Vs Object.getOwnPropertyNames][5]\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\r\n  [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\r\n  [4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\r\n  [5]: https://stackoverflow.com/questions/22658488/object-getownpropertynames-vs-object-keys"},{"score":0,"body_markdown":"        isEmpty = function(obj) {\r\n    \t  if (obj == null) return true;\r\n    \t  if (obj.constructor.name == &quot;Array&quot; || obj.constructor.name == &quot;String&quot;) return obj.length === 0;\r\n    \t  for (var key in obj) if (isEmpty(obj[key])) return true;\r\n    \t  return false;\r\n    \t}\r\n\r\nThis will check the emptiness of String, Array or Object (Maps).\r\n\r\nUsage : \r\n\r\n    var a = {&quot;a&quot;:&quot;xxx&quot;,&quot;b&quot;:[1],&quot;c&quot;:{&quot;c_a&quot;:&quot;&quot;}}\r\n    isEmpty(a); // true, because a.c.c_a is empty.\r\n    isEmpty(&quot;I am a String&quot;); //false"},{"score":4,"body_markdown":"Another alternative is to use [is.js](http://arasatasaygin.github.io/is.js/) (14kB) as opposed to [jquery](http://jquery.com/) (32kB), [lodash](https://lodash.com/) (50kB), or [underscore](http://underscorejs.org/) (16.4kB). is.js proved to be the fastest library among aforementioned libraries that could be used to determine whether an object is empty.\r\n\r\nhttp://jsperf.com/check-empty-object-using-libraries\r\n\r\nObviously all these libraries are not exactly the same so if you need to easily manipulate the DOM then [jquery](http://jquery.com/) might still be a good choice or if you need more than just type checking then [lodash](https://lodash.com/) or [underscore](http://underscorejs.org/) might be good. As for [is.js](http://arasatasaygin.github.io/is.js/), here is the syntax:\r\n\r\n    var a = {};\r\n    is.empty(a); // true\r\n    is.empty({&quot;hello&quot;: &quot;world&quot;}) // false\r\n\r\nLike underscore&#39;s and lodash&#39;s `_.isObject()`, this is not exclusively for `objects` but also applies to `arrays` and `strings`.\r\n\r\nUnder the hood this library is using `Object.getOwnPropertyNames` which is similar to `Object.keys` but `Object.getOwnPropertyNames` is a more thorough since it will return enumerable and non-enumerable properties as described [here](https://stackoverflow.com/questions/22658488/object-getownpropertynames-vs-object-keys).\r\n\r\n    is.empty = function(value) {\r\n        if(is.object(value)){\r\n            var num = Object.getOwnPropertyNames(value).length;\r\n            if(num === 0 || (num === 1 &amp;&amp; is.array(value)) || (num === 2 &amp;&amp; is.arguments(value))){\r\n                return true;\r\n            }\r\n            return false;\r\n        } else {\r\n            return value === &#39;&#39;;\r\n        }\r\n    };\r\n\r\nIf you don&#39;t want to bring in a library (which is understandable) and you know that you are only checking objects (not arrays or strings) then the following function should suit your needs.\r\n\r\n    function isEmptyObject( obj ) {\r\n        return Object.getOwnPropertyNames(obj).length === 0;\r\n    }\r\n\r\nThis is only a bit faster than is.js though just because you aren&#39;t checking whether it is an object."},{"score":0,"body_markdown":"You can define you own object prototype, just before its usage or at the beginning of your code.\r\n\r\nThe definition should look like this:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    Object.prototype.hasOwnProperties = function()\r\n    { \r\n      for (var k in this)\r\n      { \r\n        if ( this.hasOwnProperty(k) )\r\n        { \r\n          return true;\r\n        } \r\n      }\r\n      return false;\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nHere is a usage example:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var a = {};\r\n\r\n    while ( a.status !== &quot;finished&quot; )\r\n    {  \r\n      if ( status === &quot;processing&quot; )\r\n      {\r\n        a.status = &quot;finished&quot;;  \r\n      }\r\n      \r\n      if ( status === &quot;starting&quot; )\r\n      {\r\n        a.status = &quot;processing&quot;;  \r\n      }\r\n      \r\n      if ( !a.hasOwnProperties() )\r\n      {\r\n        a.status = &quot;starting&quot;;\r\n      }\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nEnjoy! :-)"},{"score":5937,"body_markdown":"[ECMA 5+][1]:\r\n\r\n    // because Object.keys(new Date()).length === 0;\r\n    // we have to do some additional check\r\n    Object.keys(obj).length === 0 &amp;&amp; obj.constructor === Object\r\n\r\nNote, though, that this creates an unnecessary array (the return value of `keys`).\r\n\r\nPre-ECMA 5:\r\n\r\n    function isEmpty(obj) {\r\n      for(var prop in obj) {\r\n        if(obj.hasOwnProperty(prop)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return JSON.stringify(obj) === JSON.stringify({});\r\n    }\r\n\r\n[jQuery][2]:\r\n\r\n    jQuery.isEmptyObject({}); // true\r\n\r\n[lodash][3]:\r\n\r\n    _.isEmpty({}); // true\r\n\r\n[Underscore][4]:\r\n\r\n    _.isEmpty({}); // true\r\n\r\n[Hoek][5]\r\n\r\n    Hoek.deepEqual({}, {}); // true\r\n\r\n[ExtJS][6]\r\n\r\n    Ext.Object.isEmpty({}); // true\r\n\r\n[AngularJS (version 1)][7]\r\n\r\n    angular.equals({}, {}); // true\r\n\r\n[Ramda][8]\r\n\r\n    R.isEmpty({}); // true\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#Browser_compatibility\r\n  [2]: https://api.jquery.com/jQuery.isEmptyObject/\r\n  [3]: https://lodash.com/docs#isEmpty\r\n  [4]: https://underscorejs.org/#isEmpty\r\n  [5]: https://github.com/hapijs/hoek\r\n  [6]: https://docs.sencha.com/extjs/6.0.2/modern/Ext.Object.html#method-isEmpty\r\n  [7]: https://docs.angularjs.org/api/ng/function/angular.equals\r\n  [8]: https://ramdajs.com/docs/#isEmpty\r\n  [9]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries#Browser_compatibility"},{"score":2,"body_markdown":"I can&#39;t believe after two years of programming js it never clicked that empty objects and array&#39;s aren&#39;t falsey, the weirdest thing is it never caught me out.\r\n\r\nthis will return `true` if the input is falsey by default or if it&#39;s an empty object or array. the inverse is the `trueish` function\r\n\r\nhttp://codepen.io/synthet1c/pen/pjmoWL\r\n\r\n    function falsish( obj ){\r\n    \tif( (typeof obj === &#39;number&#39; &amp;&amp; obj &gt; 0) || obj === true ){\r\n    \t\treturn false;\r\n        }\r\n    \treturn !!obj\r\n    \t\t? !Object.keys( obj ).length\r\n    \t\t: true;\r\n    }\r\n\r\n    function trueish( obj ){\r\n    \treturn !falsish( obj );\r\n    }\r\n\r\n    falsish({})           //=&gt; true\r\n    falsish({foo:&#39;bar&#39;})  //=&gt; false\r\n    falsish([])           //=&gt; true\r\n    falsish([&#39;foo&#39;])      //=&gt; false\r\n    falsish(false)        //=&gt; true\r\n    falsish(true)         //=&gt; false\r\n    // the rest are on codepen"},{"score":40,"body_markdown":"Using Object.keys(obj).length (as suggested above for ECMA 5+) is 10 times slower for empty objects!  keep with the old school (for...in) option.\r\n\r\nTested under Node, Chrome, Firefox and IE 9, it becomes evident that for most use cases:\r\n\r\n - **(for...in...) is the fastest option to use!** \r\n - **Object.keys(obj).length is 10 times slower for empty objects**\r\n - **JSON.stringify(obj).length is always the slowest** (not suprising)\r\n - **Object.getOwnPropertyNames(obj).length takes longer than Object.keys(obj).length** can be much longer on some systems.\r\n\r\nBottom line performance wise, use:\r\n\r\n    function isEmpty(obj) { \r\n       for (var x in obj) { return false; }\r\n       return true;\r\n    }\r\n\r\nor\r\n\r\n   \r\n\r\n    function isEmpty(obj) {\r\n       for (var x in obj) { if (obj.hasOwnProperty(x))  return false; }\r\n       return true;\r\n    }\r\n\r\nSee detailed testing results and test code at https://stackoverflow.com/questions/4994201/is-object-empty/34491287#34491287"},{"score":11,"body_markdown":"Best way that I found:\r\n    \r\n    function isEmpty(obj)\r\n    {\r\n        if (!obj)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        if (!(typeof(obj) === &#39;number&#39;) &amp;&amp; !Object.keys(obj).length)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\nWorks for:\r\n\r\n        t1: {} -&gt; true\r\n        t2: {0:1} -: false\r\n        t3: [] -&gt; true\r\n        t4: [2] -&gt; false\r\n        t5: null -&gt; true\r\n        t6: undefined -&gt; true\r\n        t7: &quot;&quot; -&gt; true\r\n        t8: &quot;a&quot; -&gt; false\r\n        t9: 0 -&gt; true\r\n        t10: 1 -&gt; false"},{"score":16,"body_markdown":"The following example show how to test if a JavaScript object is empty, if by empty we means has no own properties to it.\r\n\r\nThe script works on ES6.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const isEmpty = (obj) =&gt; {\r\n        if (obj === null ||\r\n            obj === undefined ||\r\n            Array.isArray(obj) ||\r\n            typeof obj !== &#39;object&#39;\r\n        ) {\r\n            return true;\r\n        }\r\n        return Object.getOwnPropertyNames(obj).length === 0;\r\n    };\r\n    console.clear();\r\n    console.log(&#39;-----&#39;);\r\n    console.log(isEmpty(&#39;&#39;));           // true\r\n    console.log(isEmpty(33));           // true\r\n    console.log(isEmpty([]));           // true\r\n    console.log(isEmpty({}));           // true\r\n    console.log(isEmpty({ length: 0, custom_property: [] })); // false\r\n    console.log(&#39;-----&#39;);\r\n    console.log(isEmpty(&#39;Hello&#39;));      // true\r\n    console.log(isEmpty([1, 2, 3]));    // true\r\n    console.log(isEmpty({ test: 1 }));  // false\r\n    console.log(isEmpty({ length: 3, custom_property: [1, 2, 3] })); // false\r\n    console.log(&#39;-----&#39;);\r\n    console.log(isEmpty(new Date()));   // true\r\n    console.log(isEmpty(Infinity));     // true\r\n    console.log(isEmpty(null));         // true\r\n    console.log(isEmpty(undefined));    // true\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":32,"body_markdown":"You could check for the count of the Object keys:\r\n\r\n    if (Object.keys(a).length &gt; 0) {\r\n        // not empty\r\n    }"},{"score":-1,"body_markdown":"Try [Destructuring][1]\r\n\r\n    const a = {};\r\n    const { b } = a;\r\n    const emptryOrNot = (b) ? &#39;not Empty&#39; : &#39;empty&#39;;\r\n    console.log(emptryOrNot)\r\n\r\n\r\n  [1]: http://exploringjs.com/es6/ch_destructuring.html"},{"score":8,"body_markdown":"The correct answer is:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    const isEmptyObject = obj =&gt;\r\n      Object.getOwnPropertyNames(obj).length === 0 &amp;&amp;\r\n      Object.getOwnPropertySymbols(obj).length === 0 &amp;&amp;\r\n      Object.getPrototypeOf(obj) === Object.prototype;\r\n\r\nThis checks that:\r\n\r\n- The object has no own properties (regardless of enumerability).\r\n- The object has no own property symbols.\r\n- The object&#39;s prototype is exactly `Object.prototype`.\r\n\r\nIn other words, the object is indistinguishable from one created with `{}`."},{"score":1,"body_markdown":"It&#39;s weird that I haven&#39;t encountered a solution that compares the object&#39;s **values** as opposed to the existence of any entry (maybe I missed it among the many given solutions).&lt;br&gt;\r\nI would like to cover the case where an object is considered empty if all its values are undefined:\r\n\r\n    const isObjectEmpty = obj =&gt; Object.values(obj).every(val =&gt; typeof val === &quot;undefined&quot;)\r\n\r\n    console.log(isObjectEmpty({}))                                 // true\r\n    console.log(isObjectEmpty({ foo: undefined, bar: undefined })) // true\r\n    console.log(isObjectEmpty({ foo: false,     bar: null }))      // false\r\n\r\nExample usage\r\n-\r\nLet&#39;s say, for the sake of example, you have a function (`paintOnCanvas`) that destructs values from its argument (`x`, `y` and `size`). If **all** of them are undefined, they are to be left out of the resulting set of options. If not they are not, all of them are included.\r\n\r\n    function paintOnCanvas ({ brush, x, y, size }) {\r\n      const baseOptions = { brush }\r\n      const areaOptions = { x, y, size }\r\n      const options = isObjectEmpty(areaOptions) ? baseOptions : { ...baseOptions, areaOptions }\r\n      // ...\r\n    }"},{"score":6,"body_markdown":"Meanwhile we can have one function that checks for all &#39;empties&#39; like **null, undefined, &#39;&#39;, &#39; &#39;, {}, []**.\r\n\r\n\r\n    var isEmpty = function(data) {\r\n        if(typeof(data) === &#39;object&#39;){\r\n            if(JSON.stringify(data) === &#39;{}&#39; || JSON.stringify(data) === &#39;[]&#39;){\r\n                return true;\r\n            }else if(!data){\r\n                return true;\r\n            }\r\n            return false;\r\n        }else if(typeof(data) === &#39;string&#39;){\r\n            if(!data.trim()){\r\n                return true;\r\n            }\r\n            return false;\r\n        }else if(typeof(data) === &#39;undefined&#39;){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\nUse cases and results.\r\n\r\n    console.log(isEmpty()); // true\r\n    console.log(isEmpty(null)); // true\r\n    console.log(isEmpty(&#39;&#39;)); // true\r\n    console.log(isEmpty(&#39;  &#39;)); // true\r\n    console.log(isEmpty(undefined)); // true\r\n    console.log(isEmpty({})); // true\r\n    console.log(isEmpty([])); // true\r\n    console.log(isEmpty(0)); // false\r\n    console.log(isEmpty(&#39;Hey&#39;)); // false"},{"score":0,"body_markdown":"This is what I came up with, to tell if there are any non-null values in the object.\r\n\r\n    function isEmpty(obj: Object): Boolean {\r\n        for (const prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                if (obj[prop] instanceof Object) {\r\n                    const rtn = this.isEmpty(obj[prop]);\r\n                    if (rtn === false) {\r\n                      return false;\r\n                    }\r\n                } else if (obj[prop] || obj[prop] === false) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }"},{"score":12,"body_markdown":"I would go for checking if it has at least one key. That would suffice to tell me that it&#39;s not empty.\r\n\r\n    typeof obj !== &quot;undefined&quot; &amp;&amp; Boolean(Object.keys(obj)[0])"},{"score":17,"body_markdown":"&gt; As per the **ES2017** specification on **[Object.entries()][1]**, the check is\r\n&gt; simple using any modern browser--\r\n\r\n    Object.entries({}).length === 0\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries"},{"score":2,"body_markdown":"    export function isObjectEmpty(obj) {\r\n      return (\r\n        Object.keys(obj).length === 0 &amp;&amp;\r\n        Object.getOwnPropertySymbols(obj).length === 0 &amp;&amp;\r\n        obj.constructor === Object\r\n      );\r\n    }\r\n\r\nThis include checking for objects containing **symbol properties.**\r\n\r\n**Object.keys** does not retrieve symbol properties.\r\n"},{"score":5,"body_markdown":"Pure Vanilla Javascript, and full backward compatibility\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function isObjectDefined (Obj) {\r\n      if (Obj === null || typeof Obj !== &#39;object&#39; ||\r\n        Object.prototype.toString.call(Obj) === &#39;[object Array]&#39;) {\r\n        return false\r\n      } else {\r\n        for (var prop in Obj) {\r\n          if (Obj.hasOwnProperty(prop)) {\r\n            return true\r\n          }\r\n        }\r\n        return JSON.stringify(Obj) !== JSON.stringify({})\r\n      }\r\n    }\r\n\r\n    console.log(isObjectDefined()) // false\r\n    console.log(isObjectDefined(&#39;&#39;)) // false\r\n    console.log(isObjectDefined(1)) // false\r\n    console.log(isObjectDefined(&#39;string&#39;)) // false\r\n    console.log(isObjectDefined(NaN)) // false\r\n    console.log(isObjectDefined(null)) // false\r\n    console.log(isObjectDefined({})) // false\r\n    console.log(isObjectDefined([])) // false\r\n    console.log(isObjectDefined({a: &#39;&#39;})) // true\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":5,"body_markdown":"To really accept **ONLY** `{}`, the best way to do it in Javascript using Lodash is:\r\n\r\n    _.isEmpty(value) &amp;&amp; _.isPlainObject(value)"},{"score":0,"body_markdown":"That&#39;s similar way of how it gets checked in **lodash** source for object :\r\n\r\n    const isEmpty = value =&gt; {\r\n      for (const key in value) {\r\n        if (hasOwnProperty.call(value, key)) {\r\n          return false\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\nBut there are many other ways to do that.\r\n "},{"score":0,"body_markdown":"isEmpty for value any type\r\n\r\n```\r\n/* eslint-disable no-nested-ternary */\r\n\r\nconst isEmpty = value =&gt; {\r\n  switch (typeof value) {\r\n    case &#39;undefined&#39;:\r\n      return true;\r\n    case &#39;object&#39;:\r\n      return value === null\r\n        ? true\r\n        : Array.isArray(value)\r\n        ? !value.length\r\n        : Object.entries(value).length === 0 &amp;&amp; value.constructor === Object;\r\n    case &#39;string&#39;:\r\n      return !value.length;\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n```"},{"score":0,"body_markdown":"        let jsObject = JSON.parse(JSON.stringify(obj), (key, value) =&gt; {\r\n                    if (value === null ||\r\n                        value === &#39;&#39; ||\r\n                        (value.constructor === Object &amp;&amp; Object.entries(value).length === 0) ||\r\n                        (value.constructor === Array &amp;&amp; value.length === 0)) {\r\n                        return undefined\r\n                    }\r\n                    return value\r\n                })\r\n\r\nThis will filter out all the invalid fields recursively. "},{"score":-2,"body_markdown":"### Perfect and failsafe solution \r\n\r\nI think the first accepted solution works in most cases but is not __Failsafe__.\r\n\r\nThe better and failsafe solution will be. \r\n\r\n    function isEmptyObject() { \r\n      return toString.call(obj) === &quot;[object Object]&quot; \r\n      &amp;&amp; Object.keys(obj).length === 0;\r\n    }\r\n__or in ES6/7__\r\n\r\n    const isEmptyObject = () =&gt; toString.call(obj) === &quot;[object Object]&quot; \r\n      &amp;&amp; Object.keys(obj).length === 0;\r\n\r\nWith this approach if the obj is set to undefined or null, the code does not break.\r\nand return null.\r\n"},{"score":106,"body_markdown":"Performance\r\n-\r\n\r\nToday 2020.01.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v79.0, Safari v13.0.4 and Firefox v72.0, for chosen solutions. \r\n\r\n**Conclusions**\r\n\r\n* solutions based on `for-in` (A,J,L,M) are fastest \r\n* solutions based on `JSON.stringify` (B,K) are slow\r\n* surprisingly also solution based on `Object` (N) is slow\r\n\r\n[![enter image description here][1]][1]\r\n\r\nDetails\r\n-\r\nBelow in snippet are presented 15 solutions. If you want to run performance test on your machine click [HERE](https://jsperf.com/object-empty-ch/1).\r\n\r\n&lt;!-- begin snippet: js hide: true console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var log = (s,f) =&gt; console.log(`${s} --&gt; {}:${f({})}  {k:2}:${f({k:2})}`);\r\n\r\n    function A(obj) {\r\n      for(var i in obj) return false; \r\n      return true;\r\n    }\r\n\r\n    function B(obj) {\r\n      return JSON.stringify(obj) === &#39;{}&#39;;\r\n    }\r\n\r\n    function C(obj) {\r\n      return Object.keys(obj).length === 0;\r\n    }\r\n\r\n    function D(obj) {\r\n      return Object.entries(obj).length === 0;\r\n    }\r\n\r\n    function E(obj) {\r\n      return Object.getOwnPropertyNames(obj).length === 0;\r\n    }\r\n\r\n    function F(obj) {\r\n      return Object.keys(obj).length === 0 &amp;&amp; obj.constructor === Object;\r\n    }\r\n\r\n    function G(obj) {\r\n      return typeof obj === &quot;undefined&quot; || !Boolean(Object.keys(obj)[0]);\r\n    }\r\n\r\n    function H(obj) {\r\n      return Object.entries(obj).length === 0 &amp;&amp; obj.constructor === Object;\r\n    }\r\n\r\n    function I(obj) {\r\n      return Object.values( obj  ).every( val =&gt; typeof val === &quot;undefined&quot; );\r\n    }\r\n\r\n    function J(obj) {\r\n      for (const key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) {\r\n          return false\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    function K(obj) {\r\n      for(var prop in obj) {\r\n        if(obj.hasOwnProperty(prop)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return JSON.stringify(obj) == JSON.stringify({});\r\n    }\r\n\r\n    function L(obj) {\r\n      for(var prop in obj) {\r\n        if(obj.hasOwnProperty(prop))\r\n          return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    function M(obj) {\r\n      for (var k in obj)\r\n      { \r\n        if ( obj.hasOwnProperty(k) )\r\n        { \r\n          return false;\r\n        } \r\n      }\r\n      return true; \r\n    }\r\n\r\n    function N(obj) {\r\n      return Object.getOwnPropertyNames(obj).length === 0 &amp;&amp;\r\n      Object.getOwnPropertySymbols(obj).length === 0 &amp;&amp;\r\n      Object.getPrototypeOf(obj) === Object.prototype; \r\n    }\r\n\r\n    function O(obj) {\r\n      return !(Object.getOwnPropertyNames != undefined ? Object.getOwnPropertyNames(obj).length != 0 : (function(){for(var key in obj) break; return (key != null) &amp;&amp; (key != undefined);})())\r\n    }\r\n\r\n    log(&#39;A&#39;,A);\r\n    log(&#39;B&#39;,B);\r\n    log(&#39;C&#39;,C);\r\n    log(&#39;D&#39;,D);\r\n    log(&#39;E&#39;,E);\r\n    log(&#39;F&#39;,F);\r\n    log(&#39;G&#39;,G);\r\n    log(&#39;H&#39;,H);\r\n    log(&#39;I&#39;,I);\r\n    log(&#39;J&#39;,J);\r\n    log(&#39;K&#39;,K);\r\n    log(&#39;L&#39;,L);\r\n    log(&#39;M&#39;,M);\r\n    log(&#39;N&#39;,N);\r\n    log(&#39;O&#39;,O);\r\n\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/yqmYR.png\r\n  [2]: https://i.stack.imgur.com/4w7Dp.png"},{"score":2,"body_markdown":"I know this doesn&#39;t answer 100% your question, but I have faced similar issues before and here&#39;s how I use to solve them:\r\n\r\nI have an API that may return an empty object. Because **I know what fields to expect** from the API, I only check if any of the required fields are present or not.\r\n\r\nFor example:\r\n\r\nAPI returns `{} or {agentID: &#39;1234&#39; (required), address: &#39;1234 lane&#39; (opt),...}`.\r\nIn my calling function, I&#39;ll only check \r\n\r\n    if(response.data &amp;&amp; response.data.agentID) { \r\n      do something with my agentID \r\n    } else { \r\n      is empty response\r\n    }\r\nThis way I don&#39;t need to use those expensive methods to check if an object is empty. The object will be empty for my calling function if it doesn&#39;t have the agentID field."},{"score":1,"body_markdown":"The new Way to check value is \r\n  if(Object.entries(this.props.myarticle).length===0){\r\n  }\r\n\r\nhere myarticles is object"},{"score":2,"body_markdown":"Best one-liner solution I could find (updated):\r\n```\r\nisEmpty = obj =&gt; !Object.values(obj).filter(e =&gt; typeof e !== &#39;undefined&#39;).length;\r\n```\r\n```\r\nconsole.log(isEmpty({}))                                        // true\r\nconsole.log(isEmpty({a: undefined, b: undefined}))              // true\r\nconsole.log(isEmpty({a: undefined, b: void 1024, c: void 0}))   // true\r\n```\r\n```\r\nconsole.log(isEmpty({a: [undefined, undefined]}))               // false\r\nconsole.log(isEmpty({a: 1}))                                    // false\r\nconsole.log(isEmpty({a: &#39;&#39;}))                                   // false\r\nconsole.log(isEmpty({a: null, b: undefined}))                   // false\r\n```"},{"score":2,"body_markdown":"# 1. Using Object.keys\r\nObject.keys will return an Array, which contains the property names of the object. If the length of the array is 0, then we know that the object is empty.\r\n\r\n    function isEmpty(obj) {\r\n        return Object.keys(obj).length === 0 &amp;&amp; empty.constructor === Object;\r\n    }\r\n\r\nWe can also check this using Object.values and Object.entries.\r\nThis is typically the easiest way to determine if an object is empty.\r\n\r\n# 2. Looping over object properties with for…in\r\nThe for…in statement will loop through the enumerable property of object.\r\n\r\n    function isEmpty(obj) {\r\n        for(var prop in obj) {\r\n            if(obj.hasOwnProperty(prop))\r\n                return false;\r\n        }\r\n    \r\n        return true;\r\n    }\r\n\r\nIn the above code, we will loop through object properties and if an object has at least one property, then it will enter the loop and return false. If the object doesn’t have any properties then it will return true.\r\n\r\n#3. Using JSON.stringify\r\nIf we stringify the object and the result is simply an opening and closing bracket, we know the object is empty.\r\n\r\n    function isEmptyObject(obj){\r\n        return JSON.stringify(obj) === &#39;{}&#39;;\r\n    }\r\n\r\n# 4. Using jQuery\r\n\r\n    jQuery.isEmptyObject(obj); \r\n\r\n# 5. Using Underscore and Lodash\r\n\r\n    _.isEmpty(obj);\r\n\r\n\r\n\r\n[Resource][1]\r\n\r\n\r\n  [1]: https://levelup.gitconnected.com/different-ways-to-check-if-an-object-is-empty-in-javascript-e1252d1c0b34"},{"score":1,"body_markdown":"We can check with vanilla js with handling null or undefined check also as follows, \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function isEmptyObject(obj) {\r\n      return !!obj &amp;&amp; Object.keys(obj).length === 0 &amp;&amp; obj.constructor === Object;\r\n    }\r\n\r\n    //tests\r\n\r\n    isEmptyObject(new Boolean());  // false \r\n    isEmptyObject(new Array());    // false \r\n    isEmptyObject(new RegExp());   // false \r\n    isEmptyObject(new String());   // false \r\n    isEmptyObject(new Number());   // false \r\n    isEmptyObject(new Function()); // false \r\n    isEmptyObject(new Date());     // false\r\n    isEmptyObject(null);          // false\r\n    isEmptyObject(undefined);     // false\r\n    isEmptyObject({});            // true\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":1,"body_markdown":"I liked this one I came up with, with the help of some other answers here. Thought I&#39;d share it.\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    Object.defineProperty(Object.prototype, &#39;isEmpty&#39;, {\r\n        get() {\r\n            for(var p in this) {\r\n                if (this.hasOwnProperty(p)) {return false}\r\n            }\r\n            return true;\r\n        }\r\n    });\r\n\r\n\r\n    let users = {};\r\n    let colors = {primary: &#39;red&#39;};\r\n    let sizes = {sm: 100, md: 200, lg: 300};\r\n\r\n    console.log(\r\n    &#39;\\nusers =&#39;, users,\r\n    &#39;\\nusers.isEmpty ==&gt; &#39; + users.isEmpty,\r\n    &#39;\\n\\n-------------\\n&#39;,\r\n    &#39;\\ncolors =&#39;, colors,\r\n    &#39;\\ncolors.isEmpty ==&gt; &#39; + colors.isEmpty,\r\n    &#39;\\n\\n-------------\\n&#39;,\r\n    &#39;\\nsizes =&#39;, sizes,\r\n    &#39;\\nsizes.isEmpty ==&gt; &#39; + sizes.isEmpty,\r\n    &#39;\\n&#39;,\r\n    &#39;&#39;\r\n    );\r\n\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"},{"score":8,"body_markdown":"A simpler solution: `var a = {};` \\\r\n***Case a is empty***: `!Object.keys(a).length` returns `true`.\r\n"},{"score":1,"body_markdown":"Mostly what you want to know is, if the object has properties before using it. So instead of asking `isEmpty` and then always check the negation like `if(!isEmpty(obj))` you can just test if the object is not null and has properties instead\r\n\r\n```typescript\r\nexport function hasProperties(obj): boolean {\r\n  return obj &amp;&amp; obj.constructor === Object &amp;&amp; Object.keys(obj).length &gt;= 1;\r\n}\r\n```"},{"score":0,"body_markdown":"Simply check with `0` index.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var a = {};\r\n    console.log(a[0])\r\n    if (a[0]) {\r\n      console.log(&quot;object has something&quot;)\r\n    } else {\r\n      console.log(&quot;empty object&quot;)\r\n    }\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}],"score":3402}